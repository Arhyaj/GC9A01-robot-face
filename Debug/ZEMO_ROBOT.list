
ZEMO_ROBOT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010ccc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002154  08010e54  08010e54  00020e54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012fa8  08012fa8  00030028  2**0
                  CONTENTS
  4 .ARM          00000008  08012fa8  08012fa8  00022fa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012fb0  08012fb0  00030028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08012fb0  08012fb0  00022fb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012fb8  08012fb8  00022fb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  08012fbc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030028  2**0
                  CONTENTS
 10 .bss          0000ad58  20000028  20000028  00030028  2**2
                  ALLOC
 11 ._user_heap_stack 00003000  2000ad80  2000ad80  00030028  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030028  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d0f0  00000000  00000000  00030058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004310  00000000  00000000  0004d148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016d8  00000000  00000000  00051458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001510  00000000  00000000  00052b30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027690  00000000  00000000  00054040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020fb9  00000000  00000000  0007b6d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d4681  00000000  00000000  0009c689  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00170d0a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005e6c  00000000  00000000  00170d5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000028 	.word	0x20000028
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08010e3c 	.word	0x08010e3c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000002c 	.word	0x2000002c
 80001c4:	08010e3c 	.word	0x08010e3c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <_ZN6Screen10ChipSelectEb>:
void Screen::DEV_SPI_WRite(uint8_t _dat)
{
	HAL_SPI_Transmit(spi, (uint8_t *)&_dat, 1, 500);
}

void Screen::ChipSelect(bool _status){
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
 80004d4:	460b      	mov	r3, r1
 80004d6:	70fb      	strb	r3, [r7, #3]
	_status ? HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET):
 80004d8:	78fb      	ldrb	r3, [r7, #3]
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d005      	beq.n	80004ea <_ZN6Screen10ChipSelectEb+0x1e>
 80004de:	2201      	movs	r2, #1
 80004e0:	2110      	movs	r1, #16
 80004e2:	4806      	ldr	r0, [pc, #24]	; (80004fc <_ZN6Screen10ChipSelectEb+0x30>)
 80004e4:	f002 f8a0 	bl	8002628 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
}
 80004e8:	e004      	b.n	80004f4 <_ZN6Screen10ChipSelectEb+0x28>
			HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80004ea:	2200      	movs	r2, #0
 80004ec:	2110      	movs	r1, #16
 80004ee:	4803      	ldr	r0, [pc, #12]	; (80004fc <_ZN6Screen10ChipSelectEb+0x30>)
 80004f0:	f002 f89a 	bl	8002628 <HAL_GPIO_WritePin>
}
 80004f4:	bf00      	nop
 80004f6:	3708      	adds	r7, #8
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	40021000 	.word	0x40021000

08000500 <_ZN6Screen5DCPinEb>:

void Screen::DCPin(bool _status){
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
 8000508:	460b      	mov	r3, r1
 800050a:	70fb      	strb	r3, [r7, #3]
	_status ? HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET):
 800050c:	78fb      	ldrb	r3, [r7, #3]
 800050e:	2b00      	cmp	r3, #0
 8000510:	d005      	beq.n	800051e <_ZN6Screen5DCPinEb+0x1e>
 8000512:	2201      	movs	r2, #1
 8000514:	2108      	movs	r1, #8
 8000516:	4806      	ldr	r0, [pc, #24]	; (8000530 <_ZN6Screen5DCPinEb+0x30>)
 8000518:	f002 f886 	bl	8002628 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
}
 800051c:	e004      	b.n	8000528 <_ZN6Screen5DCPinEb+0x28>
				HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 800051e:	2200      	movs	r2, #0
 8000520:	2108      	movs	r1, #8
 8000522:	4803      	ldr	r0, [pc, #12]	; (8000530 <_ZN6Screen5DCPinEb+0x30>)
 8000524:	f002 f880 	bl	8002628 <HAL_GPIO_WritePin>
}
 8000528:	bf00      	nop
 800052a:	3708      	adds	r7, #8
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}
 8000530:	40021000 	.word	0x40021000

08000534 <_ZN6Screen6RstPinEb>:

void Screen::RstPin(bool _status){
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
 800053c:	460b      	mov	r3, r1
 800053e:	70fb      	strb	r3, [r7, #3]
	_status ? HAL_GPIO_WritePin(LCD_RES_GPIO_Port, LCD_RES_Pin, GPIO_PIN_SET):
 8000540:	78fb      	ldrb	r3, [r7, #3]
 8000542:	2b00      	cmp	r3, #0
 8000544:	d005      	beq.n	8000552 <_ZN6Screen6RstPinEb+0x1e>
 8000546:	2201      	movs	r2, #1
 8000548:	2104      	movs	r1, #4
 800054a:	4806      	ldr	r0, [pc, #24]	; (8000564 <_ZN6Screen6RstPinEb+0x30>)
 800054c:	f002 f86c 	bl	8002628 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LCD_RES_GPIO_Port, LCD_RES_Pin, GPIO_PIN_RESET);
}
 8000550:	e004      	b.n	800055c <_ZN6Screen6RstPinEb+0x28>
					HAL_GPIO_WritePin(LCD_RES_GPIO_Port, LCD_RES_Pin, GPIO_PIN_RESET);
 8000552:	2200      	movs	r2, #0
 8000554:	2104      	movs	r1, #4
 8000556:	4803      	ldr	r0, [pc, #12]	; (8000564 <_ZN6Screen6RstPinEb+0x30>)
 8000558:	f002 f866 	bl	8002628 <HAL_GPIO_WritePin>
}
 800055c:	bf00      	nop
 800055e:	3708      	adds	r7, #8
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	40021000 	.word	0x40021000

08000568 <_ZN6Screen10ModuleInitEv>:

int Screen::ModuleInit(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
	DCPin(true);
 8000570:	2101      	movs	r1, #1
 8000572:	6878      	ldr	r0, [r7, #4]
 8000574:	f7ff ffc4 	bl	8000500 <_ZN6Screen5DCPinEb>
	ChipSelect(true);
 8000578:	2101      	movs	r1, #1
 800057a:	6878      	ldr	r0, [r7, #4]
 800057c:	f7ff ffa6 	bl	80004cc <_ZN6Screen10ChipSelectEb>
	RstPin(true);
 8000580:	2101      	movs	r1, #1
 8000582:	6878      	ldr	r0, [r7, #4]
 8000584:	f7ff ffd6 	bl	8000534 <_ZN6Screen6RstPinEb>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000588:	2104      	movs	r1, #4
 800058a:	4804      	ldr	r0, [pc, #16]	; (800059c <_ZN6Screen10ModuleInitEv+0x34>)
 800058c:	f004 fe18 	bl	80051c0 <HAL_TIM_PWM_Start>
	return 0;
 8000590:	2300      	movs	r3, #0
}
 8000592:	4618      	mov	r0, r3
 8000594:	3708      	adds	r7, #8
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	20000288 	.word	0x20000288

080005a0 <_ZN6Screen5ResetEv>:
	    HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_2);

}

void Screen::Reset(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
	RstPin(true);
 80005a8:	2101      	movs	r1, #1
 80005aa:	6878      	ldr	r0, [r7, #4]
 80005ac:	f7ff ffc2 	bl	8000534 <_ZN6Screen6RstPinEb>
    HAL_Delay(100);
 80005b0:	2064      	movs	r0, #100	; 0x64
 80005b2:	f001 f9e1 	bl	8001978 <HAL_Delay>
    RstPin(false);
 80005b6:	2100      	movs	r1, #0
 80005b8:	6878      	ldr	r0, [r7, #4]
 80005ba:	f7ff ffbb 	bl	8000534 <_ZN6Screen6RstPinEb>
    HAL_Delay(100);
 80005be:	2064      	movs	r0, #100	; 0x64
 80005c0:	f001 f9da 	bl	8001978 <HAL_Delay>
    RstPin(true);
 80005c4:	2101      	movs	r1, #1
 80005c6:	6878      	ldr	r0, [r7, #4]
 80005c8:	f7ff ffb4 	bl	8000534 <_ZN6Screen6RstPinEb>
    HAL_Delay(100);
 80005cc:	2064      	movs	r0, #100	; 0x64
 80005ce:	f001 f9d3 	bl	8001978 <HAL_Delay>
}
 80005d2:	bf00      	nop
 80005d4:	3708      	adds	r7, #8
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}

080005da <_ZN6Screen11begin_WriteEv>:

void Screen::begin_Write(){
 80005da:	b580      	push	{r7, lr}
 80005dc:	b082      	sub	sp, #8
 80005de:	af00      	add	r7, sp, #0
 80005e0:	6078      	str	r0, [r7, #4]
	ChipSelect(false);
 80005e2:	2100      	movs	r1, #0
 80005e4:	6878      	ldr	r0, [r7, #4]
 80005e6:	f7ff ff71 	bl	80004cc <_ZN6Screen10ChipSelectEb>
}
 80005ea:	bf00      	nop
 80005ec:	3708      	adds	r7, #8
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}

080005f2 <_ZN6Screen9end_WriteEv>:

void Screen::end_Write(){
 80005f2:	b580      	push	{r7, lr}
 80005f4:	b082      	sub	sp, #8
 80005f6:	af00      	add	r7, sp, #0
 80005f8:	6078      	str	r0, [r7, #4]
	ChipSelect(true);
 80005fa:	2101      	movs	r1, #1
 80005fc:	6878      	ldr	r0, [r7, #4]
 80005fe:	f7ff ff65 	bl	80004cc <_ZN6Screen10ChipSelectEb>
}
 8000602:	bf00      	nop
 8000604:	3708      	adds	r7, #8
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}

0800060a <_ZN6Screen12WriteCommandEh>:

void Screen::WriteCommand(uint8_t _reg)
{
 800060a:	b580      	push	{r7, lr}
 800060c:	b082      	sub	sp, #8
 800060e:	af00      	add	r7, sp, #0
 8000610:	6078      	str	r0, [r7, #4]
 8000612:	460b      	mov	r3, r1
 8000614:	70fb      	strb	r3, [r7, #3]
    DCPin(false);
 8000616:	2100      	movs	r1, #0
 8000618:	6878      	ldr	r0, [r7, #4]
 800061a:	f7ff ff71 	bl	8000500 <_ZN6Screen5DCPinEb>
    HAL_SPI_Transmit(spi, &_reg, sizeof(_reg), 500);
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	6858      	ldr	r0, [r3, #4]
 8000622:	1cf9      	adds	r1, r7, #3
 8000624:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000628:	2201      	movs	r2, #1
 800062a:	f004 f849 	bl	80046c0 <HAL_SPI_Transmit>
}
 800062e:	bf00      	nop
 8000630:	3708      	adds	r7, #8
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}

08000636 <_ZN6Screen9WriteDataEPhmb>:

void Screen::WriteData(uint8_t* _data, uint32_t _len,bool _useDma)
{
 8000636:	b580      	push	{r7, lr}
 8000638:	b084      	sub	sp, #16
 800063a:	af00      	add	r7, sp, #0
 800063c:	60f8      	str	r0, [r7, #12]
 800063e:	60b9      	str	r1, [r7, #8]
 8000640:	607a      	str	r2, [r7, #4]
 8000642:	70fb      	strb	r3, [r7, #3]
    DCPin(true);
 8000644:	2101      	movs	r1, #1
 8000646:	68f8      	ldr	r0, [r7, #12]
 8000648:	f7ff ff5a 	bl	8000500 <_ZN6Screen5DCPinEb>
    _useDma ? HAL_SPI_Transmit_DMA(spi, _data, _len):
 800064c:	78fb      	ldrb	r3, [r7, #3]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d008      	beq.n	8000664 <_ZN6Screen9WriteDataEPhmb+0x2e>
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	685b      	ldr	r3, [r3, #4]
 8000656:	687a      	ldr	r2, [r7, #4]
 8000658:	b292      	uxth	r2, r2
 800065a:	68b9      	ldr	r1, [r7, #8]
 800065c:	4618      	mov	r0, r3
 800065e:	f004 f96b 	bl	8004938 <HAL_SPI_Transmit_DMA>
    		HAL_SPI_Transmit(spi, _data, _len, 100);

}
 8000662:	e007      	b.n	8000674 <_ZN6Screen9WriteDataEPhmb+0x3e>
    		HAL_SPI_Transmit(spi, _data, _len, 100);
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	6858      	ldr	r0, [r3, #4]
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	b29a      	uxth	r2, r3
 800066c:	2364      	movs	r3, #100	; 0x64
 800066e:	68b9      	ldr	r1, [r7, #8]
 8000670:	f004 f826 	bl	80046c0 <HAL_SPI_Transmit>
}
 8000674:	bf00      	nop
 8000676:	3710      	adds	r7, #16
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}

0800067c <_ZN6Screen9WriteByteEh>:

void Screen::WriteByte(uint8_t Data)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
 8000684:	460b      	mov	r3, r1
 8000686:	70fb      	strb	r3, [r7, #3]
    WriteData(&Data,sizeof(Data));
 8000688:	1cf9      	adds	r1, r7, #3
 800068a:	2300      	movs	r3, #0
 800068c:	2201      	movs	r2, #1
 800068e:	6878      	ldr	r0, [r7, #4]
 8000690:	f7ff ffd1 	bl	8000636 <_ZN6Screen9WriteDataEPhmb>
}
 8000694:	bf00      	nop
 8000696:	3708      	adds	r7, #8
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}

0800069c <_ZN6Screen7InitRegENS_11OrientationE>:

void Screen::InitReg(Orientation_t _orientation)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
 80006a4:	460b      	mov	r3, r1
 80006a6:	70fb      	strb	r3, [r7, #3]
	begin_Write();
 80006a8:	6878      	ldr	r0, [r7, #4]
 80006aa:	f7ff ff96 	bl	80005da <_ZN6Screen11begin_WriteEv>
	WriteCommand(0xEF);
 80006ae:	21ef      	movs	r1, #239	; 0xef
 80006b0:	6878      	ldr	r0, [r7, #4]
 80006b2:	f7ff ffaa 	bl	800060a <_ZN6Screen12WriteCommandEh>
	WriteCommand(0xEB);
 80006b6:	21eb      	movs	r1, #235	; 0xeb
 80006b8:	6878      	ldr	r0, [r7, #4]
 80006ba:	f7ff ffa6 	bl	800060a <_ZN6Screen12WriteCommandEh>
	WriteByte(0x14);
 80006be:	2114      	movs	r1, #20
 80006c0:	6878      	ldr	r0, [r7, #4]
 80006c2:	f7ff ffdb 	bl	800067c <_ZN6Screen9WriteByteEh>

  WriteCommand(0xFE);
 80006c6:	21fe      	movs	r1, #254	; 0xfe
 80006c8:	6878      	ldr	r0, [r7, #4]
 80006ca:	f7ff ff9e 	bl	800060a <_ZN6Screen12WriteCommandEh>
	WriteCommand(0xEF);
 80006ce:	21ef      	movs	r1, #239	; 0xef
 80006d0:	6878      	ldr	r0, [r7, #4]
 80006d2:	f7ff ff9a 	bl	800060a <_ZN6Screen12WriteCommandEh>

	WriteCommand(0xEB);
 80006d6:	21eb      	movs	r1, #235	; 0xeb
 80006d8:	6878      	ldr	r0, [r7, #4]
 80006da:	f7ff ff96 	bl	800060a <_ZN6Screen12WriteCommandEh>
	WriteByte(0x14);
 80006de:	2114      	movs	r1, #20
 80006e0:	6878      	ldr	r0, [r7, #4]
 80006e2:	f7ff ffcb 	bl	800067c <_ZN6Screen9WriteByteEh>

	WriteCommand(0x84);
 80006e6:	2184      	movs	r1, #132	; 0x84
 80006e8:	6878      	ldr	r0, [r7, #4]
 80006ea:	f7ff ff8e 	bl	800060a <_ZN6Screen12WriteCommandEh>
	WriteByte(0x40);
 80006ee:	2140      	movs	r1, #64	; 0x40
 80006f0:	6878      	ldr	r0, [r7, #4]
 80006f2:	f7ff ffc3 	bl	800067c <_ZN6Screen9WriteByteEh>

	WriteCommand(0x85);
 80006f6:	2185      	movs	r1, #133	; 0x85
 80006f8:	6878      	ldr	r0, [r7, #4]
 80006fa:	f7ff ff86 	bl	800060a <_ZN6Screen12WriteCommandEh>
	WriteByte(0xFF);
 80006fe:	21ff      	movs	r1, #255	; 0xff
 8000700:	6878      	ldr	r0, [r7, #4]
 8000702:	f7ff ffbb 	bl	800067c <_ZN6Screen9WriteByteEh>

	WriteCommand(0x86);
 8000706:	2186      	movs	r1, #134	; 0x86
 8000708:	6878      	ldr	r0, [r7, #4]
 800070a:	f7ff ff7e 	bl	800060a <_ZN6Screen12WriteCommandEh>
	WriteByte(0xFF);
 800070e:	21ff      	movs	r1, #255	; 0xff
 8000710:	6878      	ldr	r0, [r7, #4]
 8000712:	f7ff ffb3 	bl	800067c <_ZN6Screen9WriteByteEh>

	WriteCommand(0x87);
 8000716:	2187      	movs	r1, #135	; 0x87
 8000718:	6878      	ldr	r0, [r7, #4]
 800071a:	f7ff ff76 	bl	800060a <_ZN6Screen12WriteCommandEh>
	WriteByte(0xFF);
 800071e:	21ff      	movs	r1, #255	; 0xff
 8000720:	6878      	ldr	r0, [r7, #4]
 8000722:	f7ff ffab 	bl	800067c <_ZN6Screen9WriteByteEh>

	WriteCommand(0x88);
 8000726:	2188      	movs	r1, #136	; 0x88
 8000728:	6878      	ldr	r0, [r7, #4]
 800072a:	f7ff ff6e 	bl	800060a <_ZN6Screen12WriteCommandEh>
	WriteByte(0x0A);
 800072e:	210a      	movs	r1, #10
 8000730:	6878      	ldr	r0, [r7, #4]
 8000732:	f7ff ffa3 	bl	800067c <_ZN6Screen9WriteByteEh>

	WriteCommand(0x89);
 8000736:	2189      	movs	r1, #137	; 0x89
 8000738:	6878      	ldr	r0, [r7, #4]
 800073a:	f7ff ff66 	bl	800060a <_ZN6Screen12WriteCommandEh>
	WriteByte(0x21);
 800073e:	2121      	movs	r1, #33	; 0x21
 8000740:	6878      	ldr	r0, [r7, #4]
 8000742:	f7ff ff9b 	bl	800067c <_ZN6Screen9WriteByteEh>

	WriteCommand(0x8A);
 8000746:	218a      	movs	r1, #138	; 0x8a
 8000748:	6878      	ldr	r0, [r7, #4]
 800074a:	f7ff ff5e 	bl	800060a <_ZN6Screen12WriteCommandEh>
	WriteByte(0x00);
 800074e:	2100      	movs	r1, #0
 8000750:	6878      	ldr	r0, [r7, #4]
 8000752:	f7ff ff93 	bl	800067c <_ZN6Screen9WriteByteEh>

	WriteCommand(0x8B);
 8000756:	218b      	movs	r1, #139	; 0x8b
 8000758:	6878      	ldr	r0, [r7, #4]
 800075a:	f7ff ff56 	bl	800060a <_ZN6Screen12WriteCommandEh>
	WriteByte(0x80);
 800075e:	2180      	movs	r1, #128	; 0x80
 8000760:	6878      	ldr	r0, [r7, #4]
 8000762:	f7ff ff8b 	bl	800067c <_ZN6Screen9WriteByteEh>

	WriteCommand(0x8C);
 8000766:	218c      	movs	r1, #140	; 0x8c
 8000768:	6878      	ldr	r0, [r7, #4]
 800076a:	f7ff ff4e 	bl	800060a <_ZN6Screen12WriteCommandEh>
	WriteByte(0x01);
 800076e:	2101      	movs	r1, #1
 8000770:	6878      	ldr	r0, [r7, #4]
 8000772:	f7ff ff83 	bl	800067c <_ZN6Screen9WriteByteEh>

	WriteCommand(0x8D);
 8000776:	218d      	movs	r1, #141	; 0x8d
 8000778:	6878      	ldr	r0, [r7, #4]
 800077a:	f7ff ff46 	bl	800060a <_ZN6Screen12WriteCommandEh>
	WriteByte(0x01);
 800077e:	2101      	movs	r1, #1
 8000780:	6878      	ldr	r0, [r7, #4]
 8000782:	f7ff ff7b 	bl	800067c <_ZN6Screen9WriteByteEh>

	WriteCommand(0x8E);
 8000786:	218e      	movs	r1, #142	; 0x8e
 8000788:	6878      	ldr	r0, [r7, #4]
 800078a:	f7ff ff3e 	bl	800060a <_ZN6Screen12WriteCommandEh>
	WriteByte(0xFF);
 800078e:	21ff      	movs	r1, #255	; 0xff
 8000790:	6878      	ldr	r0, [r7, #4]
 8000792:	f7ff ff73 	bl	800067c <_ZN6Screen9WriteByteEh>

	WriteCommand(0x8F);
 8000796:	218f      	movs	r1, #143	; 0x8f
 8000798:	6878      	ldr	r0, [r7, #4]
 800079a:	f7ff ff36 	bl	800060a <_ZN6Screen12WriteCommandEh>
	WriteByte(0xFF);
 800079e:	21ff      	movs	r1, #255	; 0xff
 80007a0:	6878      	ldr	r0, [r7, #4]
 80007a2:	f7ff ff6b 	bl	800067c <_ZN6Screen9WriteByteEh>


	WriteCommand(0xB6);
 80007a6:	21b6      	movs	r1, #182	; 0xb6
 80007a8:	6878      	ldr	r0, [r7, #4]
 80007aa:	f7ff ff2e 	bl	800060a <_ZN6Screen12WriteCommandEh>
	WriteByte(0x00);
 80007ae:	2100      	movs	r1, #0
 80007b0:	6878      	ldr	r0, [r7, #4]
 80007b2:	f7ff ff63 	bl	800067c <_ZN6Screen9WriteByteEh>
	WriteByte(0x20);
 80007b6:	2120      	movs	r1, #32
 80007b8:	6878      	ldr	r0, [r7, #4]
 80007ba:	f7ff ff5f 	bl	800067c <_ZN6Screen9WriteByteEh>

	WriteCommand(0x36);
 80007be:	2136      	movs	r1, #54	; 0x36
 80007c0:	6878      	ldr	r0, [r7, #4]
 80007c2:	f7ff ff22 	bl	800060a <_ZN6Screen12WriteCommandEh>
	switch (_orientation)
 80007c6:	78fb      	ldrb	r3, [r7, #3]
 80007c8:	2b03      	cmp	r3, #3
 80007ca:	d81f      	bhi.n	800080c <_ZN6Screen7InitRegENS_11OrientationE+0x170>
 80007cc:	a201      	add	r2, pc, #4	; (adr r2, 80007d4 <_ZN6Screen7InitRegENS_11OrientationE+0x138>)
 80007ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007d2:	bf00      	nop
 80007d4:	080007e5 	.word	0x080007e5
 80007d8:	080007ef 	.word	0x080007ef
 80007dc:	080007f9 	.word	0x080007f9
 80007e0:	08000803 	.word	0x08000803
	    {
	        case DEGREE_0:
	        	WriteByte(0x08);
 80007e4:	2108      	movs	r1, #8
 80007e6:	6878      	ldr	r0, [r7, #4]
 80007e8:	f7ff ff48 	bl	800067c <_ZN6Screen9WriteByteEh>
	            break;
 80007ec:	e00e      	b.n	800080c <_ZN6Screen7InitRegENS_11OrientationE+0x170>
	        case DEGREE_90:
	        	WriteByte(0x28);
 80007ee:	2128      	movs	r1, #40	; 0x28
 80007f0:	6878      	ldr	r0, [r7, #4]
 80007f2:	f7ff ff43 	bl	800067c <_ZN6Screen9WriteByteEh>
	            break;
 80007f6:	e009      	b.n	800080c <_ZN6Screen7InitRegENS_11OrientationE+0x170>
	        case DEGREE_180:
	        	WriteByte(0x48);
 80007f8:	2148      	movs	r1, #72	; 0x48
 80007fa:	6878      	ldr	r0, [r7, #4]
 80007fc:	f7ff ff3e 	bl	800067c <_ZN6Screen9WriteByteEh>
	            break;
 8000800:	e004      	b.n	800080c <_ZN6Screen7InitRegENS_11OrientationE+0x170>
	        case DEGREE_270:
	        	WriteByte(0x88);
 8000802:	2188      	movs	r1, #136	; 0x88
 8000804:	6878      	ldr	r0, [r7, #4]
 8000806:	f7ff ff39 	bl	800067c <_ZN6Screen9WriteByteEh>
	            break;
 800080a:	bf00      	nop
	    }
	//LCD_1IN28_SendData_8Bit(0x08);//Set as vertical screen

	WriteCommand(0x3A);
 800080c:	213a      	movs	r1, #58	; 0x3a
 800080e:	6878      	ldr	r0, [r7, #4]
 8000810:	f7ff fefb 	bl	800060a <_ZN6Screen12WriteCommandEh>
	switch (colorMode)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	7a5b      	ldrb	r3, [r3, #9]
 8000818:	2b02      	cmp	r3, #2
 800081a:	d010      	beq.n	800083e <_ZN6Screen7InitRegENS_11OrientationE+0x1a2>
 800081c:	2b02      	cmp	r3, #2
 800081e:	dc13      	bgt.n	8000848 <_ZN6Screen7InitRegENS_11OrientationE+0x1ac>
 8000820:	2b00      	cmp	r3, #0
 8000822:	d002      	beq.n	800082a <_ZN6Screen7InitRegENS_11OrientationE+0x18e>
 8000824:	2b01      	cmp	r3, #1
 8000826:	d005      	beq.n	8000834 <_ZN6Screen7InitRegENS_11OrientationE+0x198>
 8000828:	e00e      	b.n	8000848 <_ZN6Screen7InitRegENS_11OrientationE+0x1ac>
	    {
	        case BIT_12:
	        	WriteByte(0x03);
 800082a:	2103      	movs	r1, #3
 800082c:	6878      	ldr	r0, [r7, #4]
 800082e:	f7ff ff25 	bl	800067c <_ZN6Screen9WriteByteEh>
	            break;
 8000832:	e009      	b.n	8000848 <_ZN6Screen7InitRegENS_11OrientationE+0x1ac>
	        case BIT_16:
	        	WriteByte(0x05);
 8000834:	2105      	movs	r1, #5
 8000836:	6878      	ldr	r0, [r7, #4]
 8000838:	f7ff ff20 	bl	800067c <_ZN6Screen9WriteByteEh>
	            break;
 800083c:	e004      	b.n	8000848 <_ZN6Screen7InitRegENS_11OrientationE+0x1ac>
	        case BIT_18:
	        	WriteByte(0x06);
 800083e:	2106      	movs	r1, #6
 8000840:	6878      	ldr	r0, [r7, #4]
 8000842:	f7ff ff1b 	bl	800067c <_ZN6Screen9WriteByteEh>
	            break;
 8000846:	bf00      	nop
	    }
	//LCD_1IN28_SendData_8Bit(0x05);


	WriteCommand(0x90);
 8000848:	2190      	movs	r1, #144	; 0x90
 800084a:	6878      	ldr	r0, [r7, #4]
 800084c:	f7ff fedd 	bl	800060a <_ZN6Screen12WriteCommandEh>
	WriteByte(0x08);
 8000850:	2108      	movs	r1, #8
 8000852:	6878      	ldr	r0, [r7, #4]
 8000854:	f7ff ff12 	bl	800067c <_ZN6Screen9WriteByteEh>
	WriteByte(0x08);
 8000858:	2108      	movs	r1, #8
 800085a:	6878      	ldr	r0, [r7, #4]
 800085c:	f7ff ff0e 	bl	800067c <_ZN6Screen9WriteByteEh>
	WriteByte(0x08);
 8000860:	2108      	movs	r1, #8
 8000862:	6878      	ldr	r0, [r7, #4]
 8000864:	f7ff ff0a 	bl	800067c <_ZN6Screen9WriteByteEh>
	WriteByte(0x08);
 8000868:	2108      	movs	r1, #8
 800086a:	6878      	ldr	r0, [r7, #4]
 800086c:	f7ff ff06 	bl	800067c <_ZN6Screen9WriteByteEh>

	WriteCommand(0xBD);
 8000870:	21bd      	movs	r1, #189	; 0xbd
 8000872:	6878      	ldr	r0, [r7, #4]
 8000874:	f7ff fec9 	bl	800060a <_ZN6Screen12WriteCommandEh>
	WriteByte(0x06);
 8000878:	2106      	movs	r1, #6
 800087a:	6878      	ldr	r0, [r7, #4]
 800087c:	f7ff fefe 	bl	800067c <_ZN6Screen9WriteByteEh>

	WriteCommand(0xBC);
 8000880:	21bc      	movs	r1, #188	; 0xbc
 8000882:	6878      	ldr	r0, [r7, #4]
 8000884:	f7ff fec1 	bl	800060a <_ZN6Screen12WriteCommandEh>
	WriteByte(0x00);
 8000888:	2100      	movs	r1, #0
 800088a:	6878      	ldr	r0, [r7, #4]
 800088c:	f7ff fef6 	bl	800067c <_ZN6Screen9WriteByteEh>

	WriteCommand(0xFF);
 8000890:	21ff      	movs	r1, #255	; 0xff
 8000892:	6878      	ldr	r0, [r7, #4]
 8000894:	f7ff feb9 	bl	800060a <_ZN6Screen12WriteCommandEh>
	WriteByte(0x60);
 8000898:	2160      	movs	r1, #96	; 0x60
 800089a:	6878      	ldr	r0, [r7, #4]
 800089c:	f7ff feee 	bl	800067c <_ZN6Screen9WriteByteEh>
	WriteByte(0x01);
 80008a0:	2101      	movs	r1, #1
 80008a2:	6878      	ldr	r0, [r7, #4]
 80008a4:	f7ff feea 	bl	800067c <_ZN6Screen9WriteByteEh>
	WriteByte(0x04);
 80008a8:	2104      	movs	r1, #4
 80008aa:	6878      	ldr	r0, [r7, #4]
 80008ac:	f7ff fee6 	bl	800067c <_ZN6Screen9WriteByteEh>

	WriteCommand(0xC3);
 80008b0:	21c3      	movs	r1, #195	; 0xc3
 80008b2:	6878      	ldr	r0, [r7, #4]
 80008b4:	f7ff fea9 	bl	800060a <_ZN6Screen12WriteCommandEh>
	WriteByte(0x13);
 80008b8:	2113      	movs	r1, #19
 80008ba:	6878      	ldr	r0, [r7, #4]
 80008bc:	f7ff fede 	bl	800067c <_ZN6Screen9WriteByteEh>
	WriteCommand(0xC4);
 80008c0:	21c4      	movs	r1, #196	; 0xc4
 80008c2:	6878      	ldr	r0, [r7, #4]
 80008c4:	f7ff fea1 	bl	800060a <_ZN6Screen12WriteCommandEh>
	WriteByte(0x13);
 80008c8:	2113      	movs	r1, #19
 80008ca:	6878      	ldr	r0, [r7, #4]
 80008cc:	f7ff fed6 	bl	800067c <_ZN6Screen9WriteByteEh>

	WriteCommand(0xC9);
 80008d0:	21c9      	movs	r1, #201	; 0xc9
 80008d2:	6878      	ldr	r0, [r7, #4]
 80008d4:	f7ff fe99 	bl	800060a <_ZN6Screen12WriteCommandEh>
	WriteByte(0x22);
 80008d8:	2122      	movs	r1, #34	; 0x22
 80008da:	6878      	ldr	r0, [r7, #4]
 80008dc:	f7ff fece 	bl	800067c <_ZN6Screen9WriteByteEh>

	WriteCommand(0xBE);
 80008e0:	21be      	movs	r1, #190	; 0xbe
 80008e2:	6878      	ldr	r0, [r7, #4]
 80008e4:	f7ff fe91 	bl	800060a <_ZN6Screen12WriteCommandEh>
	WriteByte(0x11);
 80008e8:	2111      	movs	r1, #17
 80008ea:	6878      	ldr	r0, [r7, #4]
 80008ec:	f7ff fec6 	bl	800067c <_ZN6Screen9WriteByteEh>

	WriteCommand(0xE1);
 80008f0:	21e1      	movs	r1, #225	; 0xe1
 80008f2:	6878      	ldr	r0, [r7, #4]
 80008f4:	f7ff fe89 	bl	800060a <_ZN6Screen12WriteCommandEh>
	WriteByte(0x10);
 80008f8:	2110      	movs	r1, #16
 80008fa:	6878      	ldr	r0, [r7, #4]
 80008fc:	f7ff febe 	bl	800067c <_ZN6Screen9WriteByteEh>
	WriteByte(0x0E);
 8000900:	210e      	movs	r1, #14
 8000902:	6878      	ldr	r0, [r7, #4]
 8000904:	f7ff feba 	bl	800067c <_ZN6Screen9WriteByteEh>

	WriteCommand(0xDF);
 8000908:	21df      	movs	r1, #223	; 0xdf
 800090a:	6878      	ldr	r0, [r7, #4]
 800090c:	f7ff fe7d 	bl	800060a <_ZN6Screen12WriteCommandEh>
	WriteByte(0x21);
 8000910:	2121      	movs	r1, #33	; 0x21
 8000912:	6878      	ldr	r0, [r7, #4]
 8000914:	f7ff feb2 	bl	800067c <_ZN6Screen9WriteByteEh>
	WriteByte(0x0c);
 8000918:	210c      	movs	r1, #12
 800091a:	6878      	ldr	r0, [r7, #4]
 800091c:	f7ff feae 	bl	800067c <_ZN6Screen9WriteByteEh>
	WriteByte(0x02);
 8000920:	2102      	movs	r1, #2
 8000922:	6878      	ldr	r0, [r7, #4]
 8000924:	f7ff feaa 	bl	800067c <_ZN6Screen9WriteByteEh>

	WriteCommand(0xF0);
 8000928:	21f0      	movs	r1, #240	; 0xf0
 800092a:	6878      	ldr	r0, [r7, #4]
 800092c:	f7ff fe6d 	bl	800060a <_ZN6Screen12WriteCommandEh>
	WriteByte(0x45);
 8000930:	2145      	movs	r1, #69	; 0x45
 8000932:	6878      	ldr	r0, [r7, #4]
 8000934:	f7ff fea2 	bl	800067c <_ZN6Screen9WriteByteEh>
	WriteByte(0x09);
 8000938:	2109      	movs	r1, #9
 800093a:	6878      	ldr	r0, [r7, #4]
 800093c:	f7ff fe9e 	bl	800067c <_ZN6Screen9WriteByteEh>
	WriteByte(0x08);
 8000940:	2108      	movs	r1, #8
 8000942:	6878      	ldr	r0, [r7, #4]
 8000944:	f7ff fe9a 	bl	800067c <_ZN6Screen9WriteByteEh>
	WriteByte(0x08);
 8000948:	2108      	movs	r1, #8
 800094a:	6878      	ldr	r0, [r7, #4]
 800094c:	f7ff fe96 	bl	800067c <_ZN6Screen9WriteByteEh>
	WriteByte(0x26);
 8000950:	2126      	movs	r1, #38	; 0x26
 8000952:	6878      	ldr	r0, [r7, #4]
 8000954:	f7ff fe92 	bl	800067c <_ZN6Screen9WriteByteEh>
 	WriteByte(0x2A);
 8000958:	212a      	movs	r1, #42	; 0x2a
 800095a:	6878      	ldr	r0, [r7, #4]
 800095c:	f7ff fe8e 	bl	800067c <_ZN6Screen9WriteByteEh>

 	WriteCommand(0xF1);
 8000960:	21f1      	movs	r1, #241	; 0xf1
 8000962:	6878      	ldr	r0, [r7, #4]
 8000964:	f7ff fe51 	bl	800060a <_ZN6Screen12WriteCommandEh>
 	WriteByte(0x43);
 8000968:	2143      	movs	r1, #67	; 0x43
 800096a:	6878      	ldr	r0, [r7, #4]
 800096c:	f7ff fe86 	bl	800067c <_ZN6Screen9WriteByteEh>
 	WriteByte(0x70);
 8000970:	2170      	movs	r1, #112	; 0x70
 8000972:	6878      	ldr	r0, [r7, #4]
 8000974:	f7ff fe82 	bl	800067c <_ZN6Screen9WriteByteEh>
 	WriteByte(0x72);
 8000978:	2172      	movs	r1, #114	; 0x72
 800097a:	6878      	ldr	r0, [r7, #4]
 800097c:	f7ff fe7e 	bl	800067c <_ZN6Screen9WriteByteEh>
 	WriteByte(0x36);
 8000980:	2136      	movs	r1, #54	; 0x36
 8000982:	6878      	ldr	r0, [r7, #4]
 8000984:	f7ff fe7a 	bl	800067c <_ZN6Screen9WriteByteEh>
 	WriteByte(0x37);
 8000988:	2137      	movs	r1, #55	; 0x37
 800098a:	6878      	ldr	r0, [r7, #4]
 800098c:	f7ff fe76 	bl	800067c <_ZN6Screen9WriteByteEh>
 	WriteByte(0x6F);
 8000990:	216f      	movs	r1, #111	; 0x6f
 8000992:	6878      	ldr	r0, [r7, #4]
 8000994:	f7ff fe72 	bl	800067c <_ZN6Screen9WriteByteEh>


 	WriteCommand(0xF2);
 8000998:	21f2      	movs	r1, #242	; 0xf2
 800099a:	6878      	ldr	r0, [r7, #4]
 800099c:	f7ff fe35 	bl	800060a <_ZN6Screen12WriteCommandEh>
 	WriteByte(0x45);
 80009a0:	2145      	movs	r1, #69	; 0x45
 80009a2:	6878      	ldr	r0, [r7, #4]
 80009a4:	f7ff fe6a 	bl	800067c <_ZN6Screen9WriteByteEh>
 	WriteByte(0x09);
 80009a8:	2109      	movs	r1, #9
 80009aa:	6878      	ldr	r0, [r7, #4]
 80009ac:	f7ff fe66 	bl	800067c <_ZN6Screen9WriteByteEh>
 	WriteByte(0x08);
 80009b0:	2108      	movs	r1, #8
 80009b2:	6878      	ldr	r0, [r7, #4]
 80009b4:	f7ff fe62 	bl	800067c <_ZN6Screen9WriteByteEh>
 	WriteByte(0x08);
 80009b8:	2108      	movs	r1, #8
 80009ba:	6878      	ldr	r0, [r7, #4]
 80009bc:	f7ff fe5e 	bl	800067c <_ZN6Screen9WriteByteEh>
 	WriteByte(0x26);
 80009c0:	2126      	movs	r1, #38	; 0x26
 80009c2:	6878      	ldr	r0, [r7, #4]
 80009c4:	f7ff fe5a 	bl	800067c <_ZN6Screen9WriteByteEh>
 	WriteByte(0x2A);
 80009c8:	212a      	movs	r1, #42	; 0x2a
 80009ca:	6878      	ldr	r0, [r7, #4]
 80009cc:	f7ff fe56 	bl	800067c <_ZN6Screen9WriteByteEh>

 	WriteCommand(0xF3);
 80009d0:	21f3      	movs	r1, #243	; 0xf3
 80009d2:	6878      	ldr	r0, [r7, #4]
 80009d4:	f7ff fe19 	bl	800060a <_ZN6Screen12WriteCommandEh>
 	WriteByte(0x43);
 80009d8:	2143      	movs	r1, #67	; 0x43
 80009da:	6878      	ldr	r0, [r7, #4]
 80009dc:	f7ff fe4e 	bl	800067c <_ZN6Screen9WriteByteEh>
 	WriteByte(0x70);
 80009e0:	2170      	movs	r1, #112	; 0x70
 80009e2:	6878      	ldr	r0, [r7, #4]
 80009e4:	f7ff fe4a 	bl	800067c <_ZN6Screen9WriteByteEh>
 	WriteByte(0x72);
 80009e8:	2172      	movs	r1, #114	; 0x72
 80009ea:	6878      	ldr	r0, [r7, #4]
 80009ec:	f7ff fe46 	bl	800067c <_ZN6Screen9WriteByteEh>
 	WriteByte(0x36);
 80009f0:	2136      	movs	r1, #54	; 0x36
 80009f2:	6878      	ldr	r0, [r7, #4]
 80009f4:	f7ff fe42 	bl	800067c <_ZN6Screen9WriteByteEh>
 	WriteByte(0x37);
 80009f8:	2137      	movs	r1, #55	; 0x37
 80009fa:	6878      	ldr	r0, [r7, #4]
 80009fc:	f7ff fe3e 	bl	800067c <_ZN6Screen9WriteByteEh>
 	WriteByte(0x6F);
 8000a00:	216f      	movs	r1, #111	; 0x6f
 8000a02:	6878      	ldr	r0, [r7, #4]
 8000a04:	f7ff fe3a 	bl	800067c <_ZN6Screen9WriteByteEh>

	WriteCommand(0xED);
 8000a08:	21ed      	movs	r1, #237	; 0xed
 8000a0a:	6878      	ldr	r0, [r7, #4]
 8000a0c:	f7ff fdfd 	bl	800060a <_ZN6Screen12WriteCommandEh>
	WriteByte(0x1B);
 8000a10:	211b      	movs	r1, #27
 8000a12:	6878      	ldr	r0, [r7, #4]
 8000a14:	f7ff fe32 	bl	800067c <_ZN6Screen9WriteByteEh>
	WriteByte(0x0B);
 8000a18:	210b      	movs	r1, #11
 8000a1a:	6878      	ldr	r0, [r7, #4]
 8000a1c:	f7ff fe2e 	bl	800067c <_ZN6Screen9WriteByteEh>

	WriteCommand(0xAE);
 8000a20:	21ae      	movs	r1, #174	; 0xae
 8000a22:	6878      	ldr	r0, [r7, #4]
 8000a24:	f7ff fdf1 	bl	800060a <_ZN6Screen12WriteCommandEh>
	WriteByte(0x77);
 8000a28:	2177      	movs	r1, #119	; 0x77
 8000a2a:	6878      	ldr	r0, [r7, #4]
 8000a2c:	f7ff fe26 	bl	800067c <_ZN6Screen9WriteByteEh>

	WriteCommand(0xCD);
 8000a30:	21cd      	movs	r1, #205	; 0xcd
 8000a32:	6878      	ldr	r0, [r7, #4]
 8000a34:	f7ff fde9 	bl	800060a <_ZN6Screen12WriteCommandEh>
	WriteByte(0x63);
 8000a38:	2163      	movs	r1, #99	; 0x63
 8000a3a:	6878      	ldr	r0, [r7, #4]
 8000a3c:	f7ff fe1e 	bl	800067c <_ZN6Screen9WriteByteEh>


	WriteCommand(0x70);
 8000a40:	2170      	movs	r1, #112	; 0x70
 8000a42:	6878      	ldr	r0, [r7, #4]
 8000a44:	f7ff fde1 	bl	800060a <_ZN6Screen12WriteCommandEh>
	WriteByte(0x07);
 8000a48:	2107      	movs	r1, #7
 8000a4a:	6878      	ldr	r0, [r7, #4]
 8000a4c:	f7ff fe16 	bl	800067c <_ZN6Screen9WriteByteEh>
	WriteByte(0x07);
 8000a50:	2107      	movs	r1, #7
 8000a52:	6878      	ldr	r0, [r7, #4]
 8000a54:	f7ff fe12 	bl	800067c <_ZN6Screen9WriteByteEh>
	WriteByte(0x04);
 8000a58:	2104      	movs	r1, #4
 8000a5a:	6878      	ldr	r0, [r7, #4]
 8000a5c:	f7ff fe0e 	bl	800067c <_ZN6Screen9WriteByteEh>
	WriteByte(0x0E);
 8000a60:	210e      	movs	r1, #14
 8000a62:	6878      	ldr	r0, [r7, #4]
 8000a64:	f7ff fe0a 	bl	800067c <_ZN6Screen9WriteByteEh>
	WriteByte(0x0F);
 8000a68:	210f      	movs	r1, #15
 8000a6a:	6878      	ldr	r0, [r7, #4]
 8000a6c:	f7ff fe06 	bl	800067c <_ZN6Screen9WriteByteEh>
	WriteByte(0x09);
 8000a70:	2109      	movs	r1, #9
 8000a72:	6878      	ldr	r0, [r7, #4]
 8000a74:	f7ff fe02 	bl	800067c <_ZN6Screen9WriteByteEh>
	WriteByte(0x07);
 8000a78:	2107      	movs	r1, #7
 8000a7a:	6878      	ldr	r0, [r7, #4]
 8000a7c:	f7ff fdfe 	bl	800067c <_ZN6Screen9WriteByteEh>
	WriteByte(0x08);
 8000a80:	2108      	movs	r1, #8
 8000a82:	6878      	ldr	r0, [r7, #4]
 8000a84:	f7ff fdfa 	bl	800067c <_ZN6Screen9WriteByteEh>
	WriteByte(0x03);
 8000a88:	2103      	movs	r1, #3
 8000a8a:	6878      	ldr	r0, [r7, #4]
 8000a8c:	f7ff fdf6 	bl	800067c <_ZN6Screen9WriteByteEh>

	WriteCommand(0xE8);
 8000a90:	21e8      	movs	r1, #232	; 0xe8
 8000a92:	6878      	ldr	r0, [r7, #4]
 8000a94:	f7ff fdb9 	bl	800060a <_ZN6Screen12WriteCommandEh>
	WriteByte(0x34);
 8000a98:	2134      	movs	r1, #52	; 0x34
 8000a9a:	6878      	ldr	r0, [r7, #4]
 8000a9c:	f7ff fdee 	bl	800067c <_ZN6Screen9WriteByteEh>

	WriteCommand(0x62);
 8000aa0:	2162      	movs	r1, #98	; 0x62
 8000aa2:	6878      	ldr	r0, [r7, #4]
 8000aa4:	f7ff fdb1 	bl	800060a <_ZN6Screen12WriteCommandEh>
	WriteByte(0x18);
 8000aa8:	2118      	movs	r1, #24
 8000aaa:	6878      	ldr	r0, [r7, #4]
 8000aac:	f7ff fde6 	bl	800067c <_ZN6Screen9WriteByteEh>
	WriteByte(0x0D);
 8000ab0:	210d      	movs	r1, #13
 8000ab2:	6878      	ldr	r0, [r7, #4]
 8000ab4:	f7ff fde2 	bl	800067c <_ZN6Screen9WriteByteEh>
	WriteByte(0x71);
 8000ab8:	2171      	movs	r1, #113	; 0x71
 8000aba:	6878      	ldr	r0, [r7, #4]
 8000abc:	f7ff fdde 	bl	800067c <_ZN6Screen9WriteByteEh>
	WriteByte(0xED);
 8000ac0:	21ed      	movs	r1, #237	; 0xed
 8000ac2:	6878      	ldr	r0, [r7, #4]
 8000ac4:	f7ff fdda 	bl	800067c <_ZN6Screen9WriteByteEh>
	WriteByte(0x70);
 8000ac8:	2170      	movs	r1, #112	; 0x70
 8000aca:	6878      	ldr	r0, [r7, #4]
 8000acc:	f7ff fdd6 	bl	800067c <_ZN6Screen9WriteByteEh>
	WriteByte(0x70);
 8000ad0:	2170      	movs	r1, #112	; 0x70
 8000ad2:	6878      	ldr	r0, [r7, #4]
 8000ad4:	f7ff fdd2 	bl	800067c <_ZN6Screen9WriteByteEh>
	WriteByte(0x18);
 8000ad8:	2118      	movs	r1, #24
 8000ada:	6878      	ldr	r0, [r7, #4]
 8000adc:	f7ff fdce 	bl	800067c <_ZN6Screen9WriteByteEh>
	WriteByte(0x0F);
 8000ae0:	210f      	movs	r1, #15
 8000ae2:	6878      	ldr	r0, [r7, #4]
 8000ae4:	f7ff fdca 	bl	800067c <_ZN6Screen9WriteByteEh>
	WriteByte(0x71);
 8000ae8:	2171      	movs	r1, #113	; 0x71
 8000aea:	6878      	ldr	r0, [r7, #4]
 8000aec:	f7ff fdc6 	bl	800067c <_ZN6Screen9WriteByteEh>
	WriteByte(0xEF);
 8000af0:	21ef      	movs	r1, #239	; 0xef
 8000af2:	6878      	ldr	r0, [r7, #4]
 8000af4:	f7ff fdc2 	bl	800067c <_ZN6Screen9WriteByteEh>
	WriteByte(0x70);
 8000af8:	2170      	movs	r1, #112	; 0x70
 8000afa:	6878      	ldr	r0, [r7, #4]
 8000afc:	f7ff fdbe 	bl	800067c <_ZN6Screen9WriteByteEh>
	WriteByte(0x70);
 8000b00:	2170      	movs	r1, #112	; 0x70
 8000b02:	6878      	ldr	r0, [r7, #4]
 8000b04:	f7ff fdba 	bl	800067c <_ZN6Screen9WriteByteEh>

	WriteCommand(0x63);
 8000b08:	2163      	movs	r1, #99	; 0x63
 8000b0a:	6878      	ldr	r0, [r7, #4]
 8000b0c:	f7ff fd7d 	bl	800060a <_ZN6Screen12WriteCommandEh>
	WriteByte(0x18);
 8000b10:	2118      	movs	r1, #24
 8000b12:	6878      	ldr	r0, [r7, #4]
 8000b14:	f7ff fdb2 	bl	800067c <_ZN6Screen9WriteByteEh>
	WriteByte(0x11);
 8000b18:	2111      	movs	r1, #17
 8000b1a:	6878      	ldr	r0, [r7, #4]
 8000b1c:	f7ff fdae 	bl	800067c <_ZN6Screen9WriteByteEh>
	WriteByte(0x71);
 8000b20:	2171      	movs	r1, #113	; 0x71
 8000b22:	6878      	ldr	r0, [r7, #4]
 8000b24:	f7ff fdaa 	bl	800067c <_ZN6Screen9WriteByteEh>
	WriteByte(0xF1);
 8000b28:	21f1      	movs	r1, #241	; 0xf1
 8000b2a:	6878      	ldr	r0, [r7, #4]
 8000b2c:	f7ff fda6 	bl	800067c <_ZN6Screen9WriteByteEh>
	WriteByte(0x70);
 8000b30:	2170      	movs	r1, #112	; 0x70
 8000b32:	6878      	ldr	r0, [r7, #4]
 8000b34:	f7ff fda2 	bl	800067c <_ZN6Screen9WriteByteEh>
	WriteByte(0x70);
 8000b38:	2170      	movs	r1, #112	; 0x70
 8000b3a:	6878      	ldr	r0, [r7, #4]
 8000b3c:	f7ff fd9e 	bl	800067c <_ZN6Screen9WriteByteEh>
	WriteByte(0x18);
 8000b40:	2118      	movs	r1, #24
 8000b42:	6878      	ldr	r0, [r7, #4]
 8000b44:	f7ff fd9a 	bl	800067c <_ZN6Screen9WriteByteEh>
	WriteByte(0x13);
 8000b48:	2113      	movs	r1, #19
 8000b4a:	6878      	ldr	r0, [r7, #4]
 8000b4c:	f7ff fd96 	bl	800067c <_ZN6Screen9WriteByteEh>
	WriteByte(0x71);
 8000b50:	2171      	movs	r1, #113	; 0x71
 8000b52:	6878      	ldr	r0, [r7, #4]
 8000b54:	f7ff fd92 	bl	800067c <_ZN6Screen9WriteByteEh>
	WriteByte(0xF3);
 8000b58:	21f3      	movs	r1, #243	; 0xf3
 8000b5a:	6878      	ldr	r0, [r7, #4]
 8000b5c:	f7ff fd8e 	bl	800067c <_ZN6Screen9WriteByteEh>
	WriteByte(0x70);
 8000b60:	2170      	movs	r1, #112	; 0x70
 8000b62:	6878      	ldr	r0, [r7, #4]
 8000b64:	f7ff fd8a 	bl	800067c <_ZN6Screen9WriteByteEh>
	WriteByte(0x70);
 8000b68:	2170      	movs	r1, #112	; 0x70
 8000b6a:	6878      	ldr	r0, [r7, #4]
 8000b6c:	f7ff fd86 	bl	800067c <_ZN6Screen9WriteByteEh>

	WriteCommand(0x64);
 8000b70:	2164      	movs	r1, #100	; 0x64
 8000b72:	6878      	ldr	r0, [r7, #4]
 8000b74:	f7ff fd49 	bl	800060a <_ZN6Screen12WriteCommandEh>
	WriteByte(0x28);
 8000b78:	2128      	movs	r1, #40	; 0x28
 8000b7a:	6878      	ldr	r0, [r7, #4]
 8000b7c:	f7ff fd7e 	bl	800067c <_ZN6Screen9WriteByteEh>
	WriteByte(0x29);
 8000b80:	2129      	movs	r1, #41	; 0x29
 8000b82:	6878      	ldr	r0, [r7, #4]
 8000b84:	f7ff fd7a 	bl	800067c <_ZN6Screen9WriteByteEh>
	WriteByte(0xF1);
 8000b88:	21f1      	movs	r1, #241	; 0xf1
 8000b8a:	6878      	ldr	r0, [r7, #4]
 8000b8c:	f7ff fd76 	bl	800067c <_ZN6Screen9WriteByteEh>
	WriteByte(0x01);
 8000b90:	2101      	movs	r1, #1
 8000b92:	6878      	ldr	r0, [r7, #4]
 8000b94:	f7ff fd72 	bl	800067c <_ZN6Screen9WriteByteEh>
	WriteByte(0xF1);
 8000b98:	21f1      	movs	r1, #241	; 0xf1
 8000b9a:	6878      	ldr	r0, [r7, #4]
 8000b9c:	f7ff fd6e 	bl	800067c <_ZN6Screen9WriteByteEh>
	WriteByte(0x00);
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	6878      	ldr	r0, [r7, #4]
 8000ba4:	f7ff fd6a 	bl	800067c <_ZN6Screen9WriteByteEh>
	WriteByte(0x07);
 8000ba8:	2107      	movs	r1, #7
 8000baa:	6878      	ldr	r0, [r7, #4]
 8000bac:	f7ff fd66 	bl	800067c <_ZN6Screen9WriteByteEh>

	WriteCommand(0x66);
 8000bb0:	2166      	movs	r1, #102	; 0x66
 8000bb2:	6878      	ldr	r0, [r7, #4]
 8000bb4:	f7ff fd29 	bl	800060a <_ZN6Screen12WriteCommandEh>
	WriteByte(0x3C);
 8000bb8:	213c      	movs	r1, #60	; 0x3c
 8000bba:	6878      	ldr	r0, [r7, #4]
 8000bbc:	f7ff fd5e 	bl	800067c <_ZN6Screen9WriteByteEh>
	WriteByte(0x00);
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	6878      	ldr	r0, [r7, #4]
 8000bc4:	f7ff fd5a 	bl	800067c <_ZN6Screen9WriteByteEh>
	WriteByte(0xCD);
 8000bc8:	21cd      	movs	r1, #205	; 0xcd
 8000bca:	6878      	ldr	r0, [r7, #4]
 8000bcc:	f7ff fd56 	bl	800067c <_ZN6Screen9WriteByteEh>
	WriteByte(0x67);
 8000bd0:	2167      	movs	r1, #103	; 0x67
 8000bd2:	6878      	ldr	r0, [r7, #4]
 8000bd4:	f7ff fd52 	bl	800067c <_ZN6Screen9WriteByteEh>
	WriteByte(0x45);
 8000bd8:	2145      	movs	r1, #69	; 0x45
 8000bda:	6878      	ldr	r0, [r7, #4]
 8000bdc:	f7ff fd4e 	bl	800067c <_ZN6Screen9WriteByteEh>
	WriteByte(0x45);
 8000be0:	2145      	movs	r1, #69	; 0x45
 8000be2:	6878      	ldr	r0, [r7, #4]
 8000be4:	f7ff fd4a 	bl	800067c <_ZN6Screen9WriteByteEh>
	WriteByte(0x10);
 8000be8:	2110      	movs	r1, #16
 8000bea:	6878      	ldr	r0, [r7, #4]
 8000bec:	f7ff fd46 	bl	800067c <_ZN6Screen9WriteByteEh>
	WriteByte(0x00);
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	6878      	ldr	r0, [r7, #4]
 8000bf4:	f7ff fd42 	bl	800067c <_ZN6Screen9WriteByteEh>
	WriteByte(0x00);
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	6878      	ldr	r0, [r7, #4]
 8000bfc:	f7ff fd3e 	bl	800067c <_ZN6Screen9WriteByteEh>
	WriteByte(0x00);
 8000c00:	2100      	movs	r1, #0
 8000c02:	6878      	ldr	r0, [r7, #4]
 8000c04:	f7ff fd3a 	bl	800067c <_ZN6Screen9WriteByteEh>

	WriteCommand(0x67);
 8000c08:	2167      	movs	r1, #103	; 0x67
 8000c0a:	6878      	ldr	r0, [r7, #4]
 8000c0c:	f7ff fcfd 	bl	800060a <_ZN6Screen12WriteCommandEh>
	WriteByte(0x00);
 8000c10:	2100      	movs	r1, #0
 8000c12:	6878      	ldr	r0, [r7, #4]
 8000c14:	f7ff fd32 	bl	800067c <_ZN6Screen9WriteByteEh>
	WriteByte(0x3C);
 8000c18:	213c      	movs	r1, #60	; 0x3c
 8000c1a:	6878      	ldr	r0, [r7, #4]
 8000c1c:	f7ff fd2e 	bl	800067c <_ZN6Screen9WriteByteEh>
	WriteByte(0x00);
 8000c20:	2100      	movs	r1, #0
 8000c22:	6878      	ldr	r0, [r7, #4]
 8000c24:	f7ff fd2a 	bl	800067c <_ZN6Screen9WriteByteEh>
	WriteByte(0x00);
 8000c28:	2100      	movs	r1, #0
 8000c2a:	6878      	ldr	r0, [r7, #4]
 8000c2c:	f7ff fd26 	bl	800067c <_ZN6Screen9WriteByteEh>
	WriteByte(0x00);
 8000c30:	2100      	movs	r1, #0
 8000c32:	6878      	ldr	r0, [r7, #4]
 8000c34:	f7ff fd22 	bl	800067c <_ZN6Screen9WriteByteEh>
	WriteByte(0x01);
 8000c38:	2101      	movs	r1, #1
 8000c3a:	6878      	ldr	r0, [r7, #4]
 8000c3c:	f7ff fd1e 	bl	800067c <_ZN6Screen9WriteByteEh>
	WriteByte(0x54);
 8000c40:	2154      	movs	r1, #84	; 0x54
 8000c42:	6878      	ldr	r0, [r7, #4]
 8000c44:	f7ff fd1a 	bl	800067c <_ZN6Screen9WriteByteEh>
	WriteByte(0x10);
 8000c48:	2110      	movs	r1, #16
 8000c4a:	6878      	ldr	r0, [r7, #4]
 8000c4c:	f7ff fd16 	bl	800067c <_ZN6Screen9WriteByteEh>
	WriteByte(0x32);
 8000c50:	2132      	movs	r1, #50	; 0x32
 8000c52:	6878      	ldr	r0, [r7, #4]
 8000c54:	f7ff fd12 	bl	800067c <_ZN6Screen9WriteByteEh>
	WriteByte(0x98);
 8000c58:	2198      	movs	r1, #152	; 0x98
 8000c5a:	6878      	ldr	r0, [r7, #4]
 8000c5c:	f7ff fd0e 	bl	800067c <_ZN6Screen9WriteByteEh>

	WriteCommand(0x74);
 8000c60:	2174      	movs	r1, #116	; 0x74
 8000c62:	6878      	ldr	r0, [r7, #4]
 8000c64:	f7ff fcd1 	bl	800060a <_ZN6Screen12WriteCommandEh>
	WriteByte(0x10);
 8000c68:	2110      	movs	r1, #16
 8000c6a:	6878      	ldr	r0, [r7, #4]
 8000c6c:	f7ff fd06 	bl	800067c <_ZN6Screen9WriteByteEh>
	WriteByte(0x85);
 8000c70:	2185      	movs	r1, #133	; 0x85
 8000c72:	6878      	ldr	r0, [r7, #4]
 8000c74:	f7ff fd02 	bl	800067c <_ZN6Screen9WriteByteEh>
	WriteByte(0x80);
 8000c78:	2180      	movs	r1, #128	; 0x80
 8000c7a:	6878      	ldr	r0, [r7, #4]
 8000c7c:	f7ff fcfe 	bl	800067c <_ZN6Screen9WriteByteEh>
	WriteByte(0x00);
 8000c80:	2100      	movs	r1, #0
 8000c82:	6878      	ldr	r0, [r7, #4]
 8000c84:	f7ff fcfa 	bl	800067c <_ZN6Screen9WriteByteEh>
	WriteByte(0x00);
 8000c88:	2100      	movs	r1, #0
 8000c8a:	6878      	ldr	r0, [r7, #4]
 8000c8c:	f7ff fcf6 	bl	800067c <_ZN6Screen9WriteByteEh>
	WriteByte(0x4E);
 8000c90:	214e      	movs	r1, #78	; 0x4e
 8000c92:	6878      	ldr	r0, [r7, #4]
 8000c94:	f7ff fcf2 	bl	800067c <_ZN6Screen9WriteByteEh>
	WriteByte(0x00);
 8000c98:	2100      	movs	r1, #0
 8000c9a:	6878      	ldr	r0, [r7, #4]
 8000c9c:	f7ff fcee 	bl	800067c <_ZN6Screen9WriteByteEh>

  WriteCommand(0x98);
 8000ca0:	2198      	movs	r1, #152	; 0x98
 8000ca2:	6878      	ldr	r0, [r7, #4]
 8000ca4:	f7ff fcb1 	bl	800060a <_ZN6Screen12WriteCommandEh>
	WriteByte(0x3e);
 8000ca8:	213e      	movs	r1, #62	; 0x3e
 8000caa:	6878      	ldr	r0, [r7, #4]
 8000cac:	f7ff fce6 	bl	800067c <_ZN6Screen9WriteByteEh>
	WriteByte(0x07);
 8000cb0:	2107      	movs	r1, #7
 8000cb2:	6878      	ldr	r0, [r7, #4]
 8000cb4:	f7ff fce2 	bl	800067c <_ZN6Screen9WriteByteEh>

	WriteCommand(0x35);
 8000cb8:	2135      	movs	r1, #53	; 0x35
 8000cba:	6878      	ldr	r0, [r7, #4]
 8000cbc:	f7ff fca5 	bl	800060a <_ZN6Screen12WriteCommandEh>
	WriteCommand(0x21);
 8000cc0:	2121      	movs	r1, #33	; 0x21
 8000cc2:	6878      	ldr	r0, [r7, #4]
 8000cc4:	f7ff fca1 	bl	800060a <_ZN6Screen12WriteCommandEh>

	WriteCommand(0x11);
 8000cc8:	2111      	movs	r1, #17
 8000cca:	6878      	ldr	r0, [r7, #4]
 8000ccc:	f7ff fc9d 	bl	800060a <_ZN6Screen12WriteCommandEh>
	HAL_Delay(120);
 8000cd0:	2078      	movs	r0, #120	; 0x78
 8000cd2:	f000 fe51 	bl	8001978 <HAL_Delay>
	WriteCommand(0x29);
 8000cd6:	2129      	movs	r1, #41	; 0x29
 8000cd8:	6878      	ldr	r0, [r7, #4]
 8000cda:	f7ff fc96 	bl	800060a <_ZN6Screen12WriteCommandEh>
	HAL_Delay(20);
 8000cde:	2014      	movs	r0, #20
 8000ce0:	f000 fe4a 	bl	8001978 <HAL_Delay>

	end_Write();
 8000ce4:	6878      	ldr	r0, [r7, #4]
 8000ce6:	f7ff fc84 	bl	80005f2 <_ZN6Screen9end_WriteEv>
}
 8000cea:	bf00      	nop
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop

08000cf4 <_ZN6Screen7LCDInitENS_11OrientationE>:

void Screen::LCDInit(Orientation_t _orientation)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	460b      	mov	r3, r1
 8000cfe:	70fb      	strb	r3, [r7, #3]

    //Hardware reset
    Reset();
 8000d00:	6878      	ldr	r0, [r7, #4]
 8000d02:	f7ff fc4d 	bl	80005a0 <_ZN6Screen5ResetEv>

    //Set the initialization register
    InitReg(_orientation);
 8000d06:	78fb      	ldrb	r3, [r7, #3]
 8000d08:	4619      	mov	r1, r3
 8000d0a:	6878      	ldr	r0, [r7, #4]
 8000d0c:	f7ff fcc6 	bl	800069c <_ZN6Screen7InitRegENS_11OrientationE>
}
 8000d10:	bf00      	nop
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <_ZN6Screen10SetWindowsEtttt>:

void Screen::SetWindows(uint16_t Xstart, uint16_t Ystart, uint16_t Xend, uint16_t Yend)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	60f8      	str	r0, [r7, #12]
 8000d20:	4608      	mov	r0, r1
 8000d22:	4611      	mov	r1, r2
 8000d24:	461a      	mov	r2, r3
 8000d26:	4603      	mov	r3, r0
 8000d28:	817b      	strh	r3, [r7, #10]
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	813b      	strh	r3, [r7, #8]
 8000d2e:	4613      	mov	r3, r2
 8000d30:	80fb      	strh	r3, [r7, #6]
    WriteCommand(0x2A);
 8000d32:	212a      	movs	r1, #42	; 0x2a
 8000d34:	68f8      	ldr	r0, [r7, #12]
 8000d36:	f7ff fc68 	bl	800060a <_ZN6Screen12WriteCommandEh>
    WriteByte(0x00);
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	68f8      	ldr	r0, [r7, #12]
 8000d3e:	f7ff fc9d 	bl	800067c <_ZN6Screen9WriteByteEh>
    WriteByte(Xstart);
 8000d42:	897b      	ldrh	r3, [r7, #10]
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	4619      	mov	r1, r3
 8000d48:	68f8      	ldr	r0, [r7, #12]
 8000d4a:	f7ff fc97 	bl	800067c <_ZN6Screen9WriteByteEh>
	WriteByte(0x00);
 8000d4e:	2100      	movs	r1, #0
 8000d50:	68f8      	ldr	r0, [r7, #12]
 8000d52:	f7ff fc93 	bl	800067c <_ZN6Screen9WriteByteEh>
    WriteByte(Xend);
 8000d56:	88fb      	ldrh	r3, [r7, #6]
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	68f8      	ldr	r0, [r7, #12]
 8000d5e:	f7ff fc8d 	bl	800067c <_ZN6Screen9WriteByteEh>

    //set the Y coordinates
    WriteCommand(0x2B);
 8000d62:	212b      	movs	r1, #43	; 0x2b
 8000d64:	68f8      	ldr	r0, [r7, #12]
 8000d66:	f7ff fc50 	bl	800060a <_ZN6Screen12WriteCommandEh>
    WriteByte(0x00);
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	68f8      	ldr	r0, [r7, #12]
 8000d6e:	f7ff fc85 	bl	800067c <_ZN6Screen9WriteByteEh>
	WriteByte(Ystart);
 8000d72:	893b      	ldrh	r3, [r7, #8]
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	4619      	mov	r1, r3
 8000d78:	68f8      	ldr	r0, [r7, #12]
 8000d7a:	f7ff fc7f 	bl	800067c <_ZN6Screen9WriteByteEh>
	WriteByte(0x00);
 8000d7e:	2100      	movs	r1, #0
 8000d80:	68f8      	ldr	r0, [r7, #12]
 8000d82:	f7ff fc7b 	bl	800067c <_ZN6Screen9WriteByteEh>
    WriteByte(Yend);
 8000d86:	8b3b      	ldrh	r3, [r7, #24]
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	68f8      	ldr	r0, [r7, #12]
 8000d8e:	f7ff fc75 	bl	800067c <_ZN6Screen9WriteByteEh>
}
 8000d92:	bf00      	nop
 8000d94:	3710      	adds	r7, #16
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}

08000d9a <_ZN6Screen5ClearEt>:

void Screen::Clear(uint16_t Color)
{
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	b088      	sub	sp, #32
 8000d9e:	af02      	add	r7, sp, #8
 8000da0:	6078      	str	r0, [r7, #4]
 8000da2:	460b      	mov	r3, r1
 8000da4:	807b      	strh	r3, [r7, #2]
	while(isBusy);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	b2db      	uxtb	r3, r3
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d000      	beq.n	8000db2 <_ZN6Screen5ClearEt+0x18>
 8000db0:	e7f9      	b.n	8000da6 <_ZN6Screen5ClearEt+0xc>
	uint32_t len = LCD_1IN28_HEIGHT * LCD_1IN28_WIDTH;
 8000db2:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8000db6:	613b      	str	r3, [r7, #16]
	begin_Write();
 8000db8:	6878      	ldr	r0, [r7, #4]
 8000dba:	f7ff fc0e 	bl	80005da <_ZN6Screen11begin_WriteEv>
	uint8_t bufferclear[2];
	bufferclear[0] = (Color >> 8) & 0xFF;
 8000dbe:	887b      	ldrh	r3, [r7, #2]
 8000dc0:	0a1b      	lsrs	r3, r3, #8
 8000dc2:	b29b      	uxth	r3, r3
 8000dc4:	b2db      	uxtb	r3, r3
 8000dc6:	733b      	strb	r3, [r7, #12]
	bufferclear[1] = Color & 0xFF;
 8000dc8:	887b      	ldrh	r3, [r7, #2]
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	737b      	strb	r3, [r7, #13]

	SetWindows(0, 0, 239, 239);
 8000dce:	23ef      	movs	r3, #239	; 0xef
 8000dd0:	9300      	str	r3, [sp, #0]
 8000dd2:	23ef      	movs	r3, #239	; 0xef
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	6878      	ldr	r0, [r7, #4]
 8000dda:	f7ff ff9d 	bl	8000d18 <_ZN6Screen10SetWindowsEtttt>
	WriteCommand(0x2C);
 8000dde:	212c      	movs	r1, #44	; 0x2c
 8000de0:	6878      	ldr	r0, [r7, #4]
 8000de2:	f7ff fc12 	bl	800060a <_ZN6Screen12WriteCommandEh>
	for (uint32_t i = 0; i < len; i++) {
 8000de6:	2300      	movs	r3, #0
 8000de8:	617b      	str	r3, [r7, #20]
 8000dea:	697a      	ldr	r2, [r7, #20]
 8000dec:	693b      	ldr	r3, [r7, #16]
 8000dee:	429a      	cmp	r2, r3
 8000df0:	d20a      	bcs.n	8000e08 <_ZN6Screen5ClearEt+0x6e>
	        WriteColor(bufferclear, 2);
 8000df2:	f107 030c 	add.w	r3, r7, #12
 8000df6:	2202      	movs	r2, #2
 8000df8:	4619      	mov	r1, r3
 8000dfa:	6878      	ldr	r0, [r7, #4]
 8000dfc:	f000 f84e 	bl	8000e9c <_ZN6Screen10WriteColorEPhm>
	for (uint32_t i = 0; i < len; i++) {
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	3301      	adds	r3, #1
 8000e04:	617b      	str	r3, [r7, #20]
 8000e06:	e7f0      	b.n	8000dea <_ZN6Screen5ClearEt+0x50>
	    }
	end_Write();
 8000e08:	6878      	ldr	r0, [r7, #4]
 8000e0a:	f7ff fbf2 	bl	80005f2 <_ZN6Screen9end_WriteEv>
}
 8000e0e:	bf00      	nop
 8000e10:	3718      	adds	r7, #24
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
	...

08000e18 <_ZN6Screen12SetBackLightEt>:

void Screen::SetBackLight(uint16_t Value)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	460b      	mov	r3, r1
 8000e22:	807b      	strh	r3, [r7, #2]
	TIM3->CCR1 = Value;
 8000e24:	4a04      	ldr	r2, [pc, #16]	; (8000e38 <_ZN6Screen12SetBackLightEt+0x20>)
 8000e26:	887b      	ldrh	r3, [r7, #2]
 8000e28:	6353      	str	r3, [r2, #52]	; 0x34
}
 8000e2a:	bf00      	nop
 8000e2c:	370c      	adds	r7, #12
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	40000400 	.word	0x40000400

08000e3c <_ZN6Screen16WriteFrameBufferEttttPhmb>:

void Screen::WriteFrameBuffer(uint16_t xStart,uint16_t yStart,uint16_t w, uint16_t h ,uint8_t *buffer,uint32_t len,bool _isAppend){
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b086      	sub	sp, #24
 8000e40:	af02      	add	r7, sp, #8
 8000e42:	60f8      	str	r0, [r7, #12]
 8000e44:	4608      	mov	r0, r1
 8000e46:	4611      	mov	r1, r2
 8000e48:	461a      	mov	r2, r3
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	817b      	strh	r3, [r7, #10]
 8000e4e:	460b      	mov	r3, r1
 8000e50:	813b      	strh	r3, [r7, #8]
 8000e52:	4613      	mov	r3, r2
 8000e54:	80fb      	strh	r3, [r7, #6]

	isBusy=true;
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	2201      	movs	r2, #1
 8000e5a:	701a      	strb	r2, [r3, #0]

	SetWindows(xStart,yStart ,w, h);
 8000e5c:	88f8      	ldrh	r0, [r7, #6]
 8000e5e:	893a      	ldrh	r2, [r7, #8]
 8000e60:	8979      	ldrh	r1, [r7, #10]
 8000e62:	8b3b      	ldrh	r3, [r7, #24]
 8000e64:	9300      	str	r3, [sp, #0]
 8000e66:	4603      	mov	r3, r0
 8000e68:	68f8      	ldr	r0, [r7, #12]
 8000e6a:	f7ff ff55 	bl	8000d18 <_ZN6Screen10SetWindowsEtttt>

	_isAppend ?
 8000e6e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d004      	beq.n	8000e80 <_ZN6Screen16WriteFrameBufferEttttPhmb+0x44>
	WriteCommand(0x3C):
 8000e76:	213c      	movs	r1, #60	; 0x3c
 8000e78:	68f8      	ldr	r0, [r7, #12]
 8000e7a:	f7ff fbc6 	bl	800060a <_ZN6Screen12WriteCommandEh>
 8000e7e:	e003      	b.n	8000e88 <_ZN6Screen16WriteFrameBufferEttttPhmb+0x4c>
	WriteCommand(0x2C);
 8000e80:	212c      	movs	r1, #44	; 0x2c
 8000e82:	68f8      	ldr	r0, [r7, #12]
 8000e84:	f7ff fbc1 	bl	800060a <_ZN6Screen12WriteCommandEh>
	WriteData(buffer, len,true);
 8000e88:	2301      	movs	r3, #1
 8000e8a:	6a3a      	ldr	r2, [r7, #32]
 8000e8c:	69f9      	ldr	r1, [r7, #28]
 8000e8e:	68f8      	ldr	r0, [r7, #12]
 8000e90:	f7ff fbd1 	bl	8000636 <_ZN6Screen9WriteDataEPhmb>
}
 8000e94:	bf00      	nop
 8000e96:	3710      	adds	r7, #16
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <_ZN6Screen10WriteColorEPhm>:

void Screen::WriteColor(uint8_t *Color,uint32_t len){
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	60f8      	str	r0, [r7, #12]
 8000ea4:	60b9      	str	r1, [r7, #8]
 8000ea6:	607a      	str	r2, [r7, #4]


	WriteData(Color,len);
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	687a      	ldr	r2, [r7, #4]
 8000eac:	68b9      	ldr	r1, [r7, #8]
 8000eae:	68f8      	ldr	r0, [r7, #12]
 8000eb0:	f7ff fbc1 	bl	8000636 <_ZN6Screen9WriteDataEPhmb>

}
 8000eb4:	bf00      	nop
 8000eb6:	3710      	adds	r7, #16
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}

08000ebc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	607b      	str	r3, [r7, #4]
 8000ec6:	4b14      	ldr	r3, [pc, #80]	; (8000f18 <MX_DMA_Init+0x5c>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	4a13      	ldr	r2, [pc, #76]	; (8000f18 <MX_DMA_Init+0x5c>)
 8000ecc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed2:	4b11      	ldr	r3, [pc, #68]	; (8000f18 <MX_DMA_Init+0x5c>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000eda:	607b      	str	r3, [r7, #4]
 8000edc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	203b      	movs	r0, #59	; 0x3b
 8000ee4:	f000 fe24 	bl	8001b30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000ee8:	203b      	movs	r0, #59	; 0x3b
 8000eea:	f000 fe3d 	bl	8001b68 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8000eee:	2200      	movs	r2, #0
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	2044      	movs	r0, #68	; 0x44
 8000ef4:	f000 fe1c 	bl	8001b30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8000ef8:	2044      	movs	r0, #68	; 0x44
 8000efa:	f000 fe35 	bl	8001b68 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000efe:	2200      	movs	r2, #0
 8000f00:	2100      	movs	r1, #0
 8000f02:	2045      	movs	r0, #69	; 0x45
 8000f04:	f000 fe14 	bl	8001b30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000f08:	2045      	movs	r0, #69	; 0x45
 8000f0a:	f000 fe2d 	bl	8001b68 <HAL_NVIC_EnableIRQ>

}
 8000f0e:	bf00      	nop
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	40023800 	.word	0x40023800

08000f1c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b08a      	sub	sp, #40	; 0x28
 8000f20:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f22:	f107 0314 	add.w	r3, r7, #20
 8000f26:	2200      	movs	r2, #0
 8000f28:	601a      	str	r2, [r3, #0]
 8000f2a:	605a      	str	r2, [r3, #4]
 8000f2c:	609a      	str	r2, [r3, #8]
 8000f2e:	60da      	str	r2, [r3, #12]
 8000f30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	613b      	str	r3, [r7, #16]
 8000f36:	4b34      	ldr	r3, [pc, #208]	; (8001008 <MX_GPIO_Init+0xec>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	4a33      	ldr	r2, [pc, #204]	; (8001008 <MX_GPIO_Init+0xec>)
 8000f3c:	f043 0310 	orr.w	r3, r3, #16
 8000f40:	6313      	str	r3, [r2, #48]	; 0x30
 8000f42:	4b31      	ldr	r3, [pc, #196]	; (8001008 <MX_GPIO_Init+0xec>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	f003 0310 	and.w	r3, r3, #16
 8000f4a:	613b      	str	r3, [r7, #16]
 8000f4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	60fb      	str	r3, [r7, #12]
 8000f52:	4b2d      	ldr	r3, [pc, #180]	; (8001008 <MX_GPIO_Init+0xec>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	4a2c      	ldr	r2, [pc, #176]	; (8001008 <MX_GPIO_Init+0xec>)
 8000f58:	f043 0304 	orr.w	r3, r3, #4
 8000f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5e:	4b2a      	ldr	r3, [pc, #168]	; (8001008 <MX_GPIO_Init+0xec>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	f003 0304 	and.w	r3, r3, #4
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	60bb      	str	r3, [r7, #8]
 8000f6e:	4b26      	ldr	r3, [pc, #152]	; (8001008 <MX_GPIO_Init+0xec>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	4a25      	ldr	r2, [pc, #148]	; (8001008 <MX_GPIO_Init+0xec>)
 8000f74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f78:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7a:	4b23      	ldr	r3, [pc, #140]	; (8001008 <MX_GPIO_Init+0xec>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f82:	60bb      	str	r3, [r7, #8]
 8000f84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	607b      	str	r3, [r7, #4]
 8000f8a:	4b1f      	ldr	r3, [pc, #124]	; (8001008 <MX_GPIO_Init+0xec>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	4a1e      	ldr	r2, [pc, #120]	; (8001008 <MX_GPIO_Init+0xec>)
 8000f90:	f043 0301 	orr.w	r3, r3, #1
 8000f94:	6313      	str	r3, [r2, #48]	; 0x30
 8000f96:	4b1c      	ldr	r3, [pc, #112]	; (8001008 <MX_GPIO_Init+0xec>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	f003 0301 	and.w	r3, r3, #1
 8000f9e:	607b      	str	r3, [r7, #4]
 8000fa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	603b      	str	r3, [r7, #0]
 8000fa6:	4b18      	ldr	r3, [pc, #96]	; (8001008 <MX_GPIO_Init+0xec>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	4a17      	ldr	r2, [pc, #92]	; (8001008 <MX_GPIO_Init+0xec>)
 8000fac:	f043 0308 	orr.w	r3, r3, #8
 8000fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb2:	4b15      	ldr	r3, [pc, #84]	; (8001008 <MX_GPIO_Init+0xec>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	f003 0308 	and.w	r3, r3, #8
 8000fba:	603b      	str	r3, [r7, #0]
 8000fbc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_RES_Pin|LCD_DC_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	211c      	movs	r1, #28
 8000fc2:	4812      	ldr	r0, [pc, #72]	; (800100c <MX_GPIO_Init+0xf0>)
 8000fc4:	f001 fb30 	bl	8002628 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = LCD_RES_Pin|LCD_DC_Pin|LCD_CS_Pin;
 8000fc8:	231c      	movs	r3, #28
 8000fca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fd8:	f107 0314 	add.w	r3, r7, #20
 8000fdc:	4619      	mov	r1, r3
 8000fde:	480b      	ldr	r0, [pc, #44]	; (800100c <MX_GPIO_Init+0xf0>)
 8000fe0:	f001 f96e 	bl	80022c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000fe4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fe8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fea:	2300      	movs	r3, #0
 8000fec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff2:	f107 0314 	add.w	r3, r7, #20
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4805      	ldr	r0, [pc, #20]	; (8001010 <MX_GPIO_Init+0xf4>)
 8000ffa:	f001 f961 	bl	80022c0 <HAL_GPIO_Init>

}
 8000ffe:	bf00      	nop
 8001000:	3728      	adds	r7, #40	; 0x28
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40023800 	.word	0x40023800
 800100c:	40021000 	.word	0x40021000
 8001010:	40020000 	.word	0x40020000

08001014 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001018:	f000 fc6c 	bl	80018f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800101c:	f000 f812 	bl	8001044 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001020:	f7ff ff7c 	bl	8000f1c <MX_GPIO_Init>
  MX_DMA_Init();
 8001024:	f7ff ff4a 	bl	8000ebc <MX_DMA_Init>
  MX_TIM3_Init();
 8001028:	f000 fb84 	bl	8001734 <MX_TIM3_Init>
  MX_SDIO_SD_Init();
 800102c:	f000 f88c 	bl	8001148 <MX_SDIO_SD_Init>
  MX_SPI1_Init();
 8001030:	f000 f9aa 	bl	8001388 <MX_SPI1_Init>
  MX_FATFS_Init();
 8001034:	f005 fbf8 	bl	8006828 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  Main();
 8001038:	f008 fbb6 	bl	80097a8 <Main>
 800103c:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
}
 800103e:	4618      	mov	r0, r3
 8001040:	bd80      	pop	{r7, pc}
	...

08001044 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b094      	sub	sp, #80	; 0x50
 8001048:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800104a:	f107 0320 	add.w	r3, r7, #32
 800104e:	2230      	movs	r2, #48	; 0x30
 8001050:	2100      	movs	r1, #0
 8001052:	4618      	mov	r0, r3
 8001054:	f00f fed6 	bl	8010e04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001058:	f107 030c 	add.w	r3, r7, #12
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]
 8001064:	60da      	str	r2, [r3, #12]
 8001066:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001068:	2300      	movs	r3, #0
 800106a:	60bb      	str	r3, [r7, #8]
 800106c:	4b28      	ldr	r3, [pc, #160]	; (8001110 <SystemClock_Config+0xcc>)
 800106e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001070:	4a27      	ldr	r2, [pc, #156]	; (8001110 <SystemClock_Config+0xcc>)
 8001072:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001076:	6413      	str	r3, [r2, #64]	; 0x40
 8001078:	4b25      	ldr	r3, [pc, #148]	; (8001110 <SystemClock_Config+0xcc>)
 800107a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001080:	60bb      	str	r3, [r7, #8]
 8001082:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001084:	2300      	movs	r3, #0
 8001086:	607b      	str	r3, [r7, #4]
 8001088:	4b22      	ldr	r3, [pc, #136]	; (8001114 <SystemClock_Config+0xd0>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a21      	ldr	r2, [pc, #132]	; (8001114 <SystemClock_Config+0xd0>)
 800108e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001092:	6013      	str	r3, [r2, #0]
 8001094:	4b1f      	ldr	r3, [pc, #124]	; (8001114 <SystemClock_Config+0xd0>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800109c:	607b      	str	r3, [r7, #4]
 800109e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010a0:	2301      	movs	r3, #1
 80010a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010a8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010aa:	2302      	movs	r3, #2
 80010ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80010b4:	2319      	movs	r3, #25
 80010b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80010b8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80010bc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010be:	2302      	movs	r3, #2
 80010c0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80010c2:	2307      	movs	r3, #7
 80010c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010c6:	f107 0320 	add.w	r3, r7, #32
 80010ca:	4618      	mov	r0, r3
 80010cc:	f001 fac6 	bl	800265c <HAL_RCC_OscConfig>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <SystemClock_Config+0x96>
  {
    Error_Handler();
 80010d6:	f000 f831 	bl	800113c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010da:	230f      	movs	r3, #15
 80010dc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010de:	2302      	movs	r3, #2
 80010e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010e2:	2300      	movs	r3, #0
 80010e4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010e6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80010ea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010f0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80010f2:	f107 030c 	add.w	r3, r7, #12
 80010f6:	2105      	movs	r1, #5
 80010f8:	4618      	mov	r0, r3
 80010fa:	f001 fd27 	bl	8002b4c <HAL_RCC_ClockConfig>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001104:	f000 f81a 	bl	800113c <Error_Handler>
  }
}
 8001108:	bf00      	nop
 800110a:	3750      	adds	r7, #80	; 0x50
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	40023800 	.word	0x40023800
 8001114:	40007000 	.word	0x40007000

08001118 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a04      	ldr	r2, [pc, #16]	; (8001138 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d101      	bne.n	800112e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800112a:	f000 fc05 	bl	8001938 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800112e:	bf00      	nop
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	40002000 	.word	0x40002000

0800113c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001140:	b672      	cpsid	i
}
 8001142:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001144:	e7fe      	b.n	8001144 <Error_Handler+0x8>
	...

08001148 <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_tx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 800114c:	4b14      	ldr	r3, [pc, #80]	; (80011a0 <MX_SDIO_SD_Init+0x58>)
 800114e:	4a15      	ldr	r2, [pc, #84]	; (80011a4 <MX_SDIO_SD_Init+0x5c>)
 8001150:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8001152:	4b13      	ldr	r3, [pc, #76]	; (80011a0 <MX_SDIO_SD_Init+0x58>)
 8001154:	2200      	movs	r2, #0
 8001156:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001158:	4b11      	ldr	r3, [pc, #68]	; (80011a0 <MX_SDIO_SD_Init+0x58>)
 800115a:	2200      	movs	r2, #0
 800115c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800115e:	4b10      	ldr	r3, [pc, #64]	; (80011a0 <MX_SDIO_SD_Init+0x58>)
 8001160:	2200      	movs	r2, #0
 8001162:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001164:	4b0e      	ldr	r3, [pc, #56]	; (80011a0 <MX_SDIO_SD_Init+0x58>)
 8001166:	2200      	movs	r2, #0
 8001168:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800116a:	4b0d      	ldr	r3, [pc, #52]	; (80011a0 <MX_SDIO_SD_Init+0x58>)
 800116c:	2200      	movs	r2, #0
 800116e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 3;
 8001170:	4b0b      	ldr	r3, [pc, #44]	; (80011a0 <MX_SDIO_SD_Init+0x58>)
 8001172:	2203      	movs	r2, #3
 8001174:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */
  if(HAL_SD_Init(&hsd)!= HAL_OK){
 8001176:	480a      	ldr	r0, [pc, #40]	; (80011a0 <MX_SDIO_SD_Init+0x58>)
 8001178:	f001 fee6 	bl	8002f48 <HAL_SD_Init>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_SDIO_SD_Init+0x3e>
	  Error_Handler();
 8001182:	f7ff ffdb 	bl	800113c <Error_Handler>
  }
  if(HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B)!= HAL_OK){
 8001186:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800118a:	4805      	ldr	r0, [pc, #20]	; (80011a0 <MX_SDIO_SD_Init+0x58>)
 800118c:	f002 fcb4 	bl	8003af8 <HAL_SD_ConfigWideBusOperation>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_SDIO_SD_Init+0x52>
	  Error_Handler();
 8001196:	f7ff ffd1 	bl	800113c <Error_Handler>
  }
  /* USER CODE END SDIO_Init 2 */

}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	20000044 	.word	0x20000044
 80011a4:	40012c00 	.word	0x40012c00

080011a8 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b08a      	sub	sp, #40	; 0x28
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b0:	f107 0314 	add.w	r3, r7, #20
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]
 80011ba:	609a      	str	r2, [r3, #8]
 80011bc:	60da      	str	r2, [r3, #12]
 80011be:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a68      	ldr	r2, [pc, #416]	; (8001368 <HAL_SD_MspInit+0x1c0>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	f040 80c9 	bne.w	800135e <HAL_SD_MspInit+0x1b6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80011cc:	2300      	movs	r3, #0
 80011ce:	613b      	str	r3, [r7, #16]
 80011d0:	4b66      	ldr	r3, [pc, #408]	; (800136c <HAL_SD_MspInit+0x1c4>)
 80011d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d4:	4a65      	ldr	r2, [pc, #404]	; (800136c <HAL_SD_MspInit+0x1c4>)
 80011d6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80011da:	6453      	str	r3, [r2, #68]	; 0x44
 80011dc:	4b63      	ldr	r3, [pc, #396]	; (800136c <HAL_SD_MspInit+0x1c4>)
 80011de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80011e4:	613b      	str	r3, [r7, #16]
 80011e6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011e8:	2300      	movs	r3, #0
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	4b5f      	ldr	r3, [pc, #380]	; (800136c <HAL_SD_MspInit+0x1c4>)
 80011ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f0:	4a5e      	ldr	r2, [pc, #376]	; (800136c <HAL_SD_MspInit+0x1c4>)
 80011f2:	f043 0304 	orr.w	r3, r3, #4
 80011f6:	6313      	str	r3, [r2, #48]	; 0x30
 80011f8:	4b5c      	ldr	r3, [pc, #368]	; (800136c <HAL_SD_MspInit+0x1c4>)
 80011fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fc:	f003 0304 	and.w	r3, r3, #4
 8001200:	60fb      	str	r3, [r7, #12]
 8001202:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001204:	2300      	movs	r3, #0
 8001206:	60bb      	str	r3, [r7, #8]
 8001208:	4b58      	ldr	r3, [pc, #352]	; (800136c <HAL_SD_MspInit+0x1c4>)
 800120a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120c:	4a57      	ldr	r2, [pc, #348]	; (800136c <HAL_SD_MspInit+0x1c4>)
 800120e:	f043 0308 	orr.w	r3, r3, #8
 8001212:	6313      	str	r3, [r2, #48]	; 0x30
 8001214:	4b55      	ldr	r3, [pc, #340]	; (800136c <HAL_SD_MspInit+0x1c4>)
 8001216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001218:	f003 0308 	and.w	r3, r3, #8
 800121c:	60bb      	str	r3, [r7, #8]
 800121e:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001220:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001224:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001226:	2302      	movs	r3, #2
 8001228:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122a:	2300      	movs	r3, #0
 800122c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800122e:	2303      	movs	r3, #3
 8001230:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001232:	230c      	movs	r3, #12
 8001234:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001236:	f107 0314 	add.w	r3, r7, #20
 800123a:	4619      	mov	r1, r3
 800123c:	484c      	ldr	r0, [pc, #304]	; (8001370 <HAL_SD_MspInit+0x1c8>)
 800123e:	f001 f83f 	bl	80022c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001242:	2304      	movs	r3, #4
 8001244:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001246:	2302      	movs	r3, #2
 8001248:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124a:	2300      	movs	r3, #0
 800124c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800124e:	2303      	movs	r3, #3
 8001250:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001252:	230c      	movs	r3, #12
 8001254:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001256:	f107 0314 	add.w	r3, r7, #20
 800125a:	4619      	mov	r1, r3
 800125c:	4845      	ldr	r0, [pc, #276]	; (8001374 <HAL_SD_MspInit+0x1cc>)
 800125e:	f001 f82f 	bl	80022c0 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8001262:	4b45      	ldr	r3, [pc, #276]	; (8001378 <HAL_SD_MspInit+0x1d0>)
 8001264:	4a45      	ldr	r2, [pc, #276]	; (800137c <HAL_SD_MspInit+0x1d4>)
 8001266:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8001268:	4b43      	ldr	r3, [pc, #268]	; (8001378 <HAL_SD_MspInit+0x1d0>)
 800126a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800126e:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001270:	4b41      	ldr	r3, [pc, #260]	; (8001378 <HAL_SD_MspInit+0x1d0>)
 8001272:	2200      	movs	r2, #0
 8001274:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001276:	4b40      	ldr	r3, [pc, #256]	; (8001378 <HAL_SD_MspInit+0x1d0>)
 8001278:	2200      	movs	r2, #0
 800127a:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 800127c:	4b3e      	ldr	r3, [pc, #248]	; (8001378 <HAL_SD_MspInit+0x1d0>)
 800127e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001282:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001284:	4b3c      	ldr	r3, [pc, #240]	; (8001378 <HAL_SD_MspInit+0x1d0>)
 8001286:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800128a:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800128c:	4b3a      	ldr	r3, [pc, #232]	; (8001378 <HAL_SD_MspInit+0x1d0>)
 800128e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001292:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8001294:	4b38      	ldr	r3, [pc, #224]	; (8001378 <HAL_SD_MspInit+0x1d0>)
 8001296:	2220      	movs	r2, #32
 8001298:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 800129a:	4b37      	ldr	r3, [pc, #220]	; (8001378 <HAL_SD_MspInit+0x1d0>)
 800129c:	2200      	movs	r2, #0
 800129e:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80012a0:	4b35      	ldr	r3, [pc, #212]	; (8001378 <HAL_SD_MspInit+0x1d0>)
 80012a2:	2204      	movs	r2, #4
 80012a4:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80012a6:	4b34      	ldr	r3, [pc, #208]	; (8001378 <HAL_SD_MspInit+0x1d0>)
 80012a8:	2203      	movs	r2, #3
 80012aa:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 80012ac:	4b32      	ldr	r3, [pc, #200]	; (8001378 <HAL_SD_MspInit+0x1d0>)
 80012ae:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80012b2:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80012b4:	4b30      	ldr	r3, [pc, #192]	; (8001378 <HAL_SD_MspInit+0x1d0>)
 80012b6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80012ba:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 80012bc:	482e      	ldr	r0, [pc, #184]	; (8001378 <HAL_SD_MspInit+0x1d0>)
 80012be:	f000 fc61 	bl	8001b84 <HAL_DMA_Init>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <HAL_SD_MspInit+0x124>
    {
      Error_Handler();
 80012c8:	f7ff ff38 	bl	800113c <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	4a2a      	ldr	r2, [pc, #168]	; (8001378 <HAL_SD_MspInit+0x1d0>)
 80012d0:	641a      	str	r2, [r3, #64]	; 0x40
 80012d2:	4a29      	ldr	r2, [pc, #164]	; (8001378 <HAL_SD_MspInit+0x1d0>)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 80012d8:	4b29      	ldr	r3, [pc, #164]	; (8001380 <HAL_SD_MspInit+0x1d8>)
 80012da:	4a2a      	ldr	r2, [pc, #168]	; (8001384 <HAL_SD_MspInit+0x1dc>)
 80012dc:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80012de:	4b28      	ldr	r3, [pc, #160]	; (8001380 <HAL_SD_MspInit+0x1d8>)
 80012e0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012e4:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012e6:	4b26      	ldr	r3, [pc, #152]	; (8001380 <HAL_SD_MspInit+0x1d8>)
 80012e8:	2240      	movs	r2, #64	; 0x40
 80012ea:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012ec:	4b24      	ldr	r3, [pc, #144]	; (8001380 <HAL_SD_MspInit+0x1d8>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80012f2:	4b23      	ldr	r3, [pc, #140]	; (8001380 <HAL_SD_MspInit+0x1d8>)
 80012f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012f8:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80012fa:	4b21      	ldr	r3, [pc, #132]	; (8001380 <HAL_SD_MspInit+0x1d8>)
 80012fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001300:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001302:	4b1f      	ldr	r3, [pc, #124]	; (8001380 <HAL_SD_MspInit+0x1d8>)
 8001304:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001308:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 800130a:	4b1d      	ldr	r3, [pc, #116]	; (8001380 <HAL_SD_MspInit+0x1d8>)
 800130c:	2220      	movs	r2, #32
 800130e:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001310:	4b1b      	ldr	r3, [pc, #108]	; (8001380 <HAL_SD_MspInit+0x1d8>)
 8001312:	2200      	movs	r2, #0
 8001314:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001316:	4b1a      	ldr	r3, [pc, #104]	; (8001380 <HAL_SD_MspInit+0x1d8>)
 8001318:	2204      	movs	r2, #4
 800131a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800131c:	4b18      	ldr	r3, [pc, #96]	; (8001380 <HAL_SD_MspInit+0x1d8>)
 800131e:	2203      	movs	r2, #3
 8001320:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8001322:	4b17      	ldr	r3, [pc, #92]	; (8001380 <HAL_SD_MspInit+0x1d8>)
 8001324:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001328:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800132a:	4b15      	ldr	r3, [pc, #84]	; (8001380 <HAL_SD_MspInit+0x1d8>)
 800132c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001330:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8001332:	4813      	ldr	r0, [pc, #76]	; (8001380 <HAL_SD_MspInit+0x1d8>)
 8001334:	f000 fc26 	bl	8001b84 <HAL_DMA_Init>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <HAL_SD_MspInit+0x19a>
    {
      Error_Handler();
 800133e:	f7ff fefd 	bl	800113c <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a0e      	ldr	r2, [pc, #56]	; (8001380 <HAL_SD_MspInit+0x1d8>)
 8001346:	63da      	str	r2, [r3, #60]	; 0x3c
 8001348:	4a0d      	ldr	r2, [pc, #52]	; (8001380 <HAL_SD_MspInit+0x1d8>)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 800134e:	2200      	movs	r2, #0
 8001350:	2100      	movs	r1, #0
 8001352:	2031      	movs	r0, #49	; 0x31
 8001354:	f000 fbec 	bl	8001b30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8001358:	2031      	movs	r0, #49	; 0x31
 800135a:	f000 fc05 	bl	8001b68 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 800135e:	bf00      	nop
 8001360:	3728      	adds	r7, #40	; 0x28
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	40012c00 	.word	0x40012c00
 800136c:	40023800 	.word	0x40023800
 8001370:	40020800 	.word	0x40020800
 8001374:	40020c00 	.word	0x40020c00
 8001378:	200000c8 	.word	0x200000c8
 800137c:	40026458 	.word	0x40026458
 8001380:	20000128 	.word	0x20000128
 8001384:	400264a0 	.word	0x400264a0

08001388 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800138c:	4b17      	ldr	r3, [pc, #92]	; (80013ec <MX_SPI1_Init+0x64>)
 800138e:	4a18      	ldr	r2, [pc, #96]	; (80013f0 <MX_SPI1_Init+0x68>)
 8001390:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001392:	4b16      	ldr	r3, [pc, #88]	; (80013ec <MX_SPI1_Init+0x64>)
 8001394:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001398:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800139a:	4b14      	ldr	r3, [pc, #80]	; (80013ec <MX_SPI1_Init+0x64>)
 800139c:	2200      	movs	r2, #0
 800139e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80013a0:	4b12      	ldr	r3, [pc, #72]	; (80013ec <MX_SPI1_Init+0x64>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013a6:	4b11      	ldr	r3, [pc, #68]	; (80013ec <MX_SPI1_Init+0x64>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013ac:	4b0f      	ldr	r3, [pc, #60]	; (80013ec <MX_SPI1_Init+0x64>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80013b2:	4b0e      	ldr	r3, [pc, #56]	; (80013ec <MX_SPI1_Init+0x64>)
 80013b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013b8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80013ba:	4b0c      	ldr	r3, [pc, #48]	; (80013ec <MX_SPI1_Init+0x64>)
 80013bc:	2200      	movs	r2, #0
 80013be:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013c0:	4b0a      	ldr	r3, [pc, #40]	; (80013ec <MX_SPI1_Init+0x64>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80013c6:	4b09      	ldr	r3, [pc, #36]	; (80013ec <MX_SPI1_Init+0x64>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013cc:	4b07      	ldr	r3, [pc, #28]	; (80013ec <MX_SPI1_Init+0x64>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80013d2:	4b06      	ldr	r3, [pc, #24]	; (80013ec <MX_SPI1_Init+0x64>)
 80013d4:	220a      	movs	r2, #10
 80013d6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013d8:	4804      	ldr	r0, [pc, #16]	; (80013ec <MX_SPI1_Init+0x64>)
 80013da:	f003 f8e8 	bl	80045ae <HAL_SPI_Init>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80013e4:	f7ff feaa 	bl	800113c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80013e8:	bf00      	nop
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	20000188 	.word	0x20000188
 80013f0:	40013000 	.word	0x40013000

080013f4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b08a      	sub	sp, #40	; 0x28
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013fc:	f107 0314 	add.w	r3, r7, #20
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	605a      	str	r2, [r3, #4]
 8001406:	609a      	str	r2, [r3, #8]
 8001408:	60da      	str	r2, [r3, #12]
 800140a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a34      	ldr	r2, [pc, #208]	; (80014e4 <HAL_SPI_MspInit+0xf0>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d161      	bne.n	80014da <HAL_SPI_MspInit+0xe6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	613b      	str	r3, [r7, #16]
 800141a:	4b33      	ldr	r3, [pc, #204]	; (80014e8 <HAL_SPI_MspInit+0xf4>)
 800141c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800141e:	4a32      	ldr	r2, [pc, #200]	; (80014e8 <HAL_SPI_MspInit+0xf4>)
 8001420:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001424:	6453      	str	r3, [r2, #68]	; 0x44
 8001426:	4b30      	ldr	r3, [pc, #192]	; (80014e8 <HAL_SPI_MspInit+0xf4>)
 8001428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800142e:	613b      	str	r3, [r7, #16]
 8001430:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	60fb      	str	r3, [r7, #12]
 8001436:	4b2c      	ldr	r3, [pc, #176]	; (80014e8 <HAL_SPI_MspInit+0xf4>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	4a2b      	ldr	r2, [pc, #172]	; (80014e8 <HAL_SPI_MspInit+0xf4>)
 800143c:	f043 0301 	orr.w	r3, r3, #1
 8001440:	6313      	str	r3, [r2, #48]	; 0x30
 8001442:	4b29      	ldr	r3, [pc, #164]	; (80014e8 <HAL_SPI_MspInit+0xf4>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	f003 0301 	and.w	r3, r3, #1
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800144e:	23a0      	movs	r3, #160	; 0xa0
 8001450:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001452:	2302      	movs	r3, #2
 8001454:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001456:	2300      	movs	r3, #0
 8001458:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800145a:	2303      	movs	r3, #3
 800145c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800145e:	2305      	movs	r3, #5
 8001460:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001462:	f107 0314 	add.w	r3, r7, #20
 8001466:	4619      	mov	r1, r3
 8001468:	4820      	ldr	r0, [pc, #128]	; (80014ec <HAL_SPI_MspInit+0xf8>)
 800146a:	f000 ff29 	bl	80022c0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream5;
 800146e:	4b20      	ldr	r3, [pc, #128]	; (80014f0 <HAL_SPI_MspInit+0xfc>)
 8001470:	4a20      	ldr	r2, [pc, #128]	; (80014f4 <HAL_SPI_MspInit+0x100>)
 8001472:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001474:	4b1e      	ldr	r3, [pc, #120]	; (80014f0 <HAL_SPI_MspInit+0xfc>)
 8001476:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800147a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800147c:	4b1c      	ldr	r3, [pc, #112]	; (80014f0 <HAL_SPI_MspInit+0xfc>)
 800147e:	2240      	movs	r2, #64	; 0x40
 8001480:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001482:	4b1b      	ldr	r3, [pc, #108]	; (80014f0 <HAL_SPI_MspInit+0xfc>)
 8001484:	2200      	movs	r2, #0
 8001486:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001488:	4b19      	ldr	r3, [pc, #100]	; (80014f0 <HAL_SPI_MspInit+0xfc>)
 800148a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800148e:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001490:	4b17      	ldr	r3, [pc, #92]	; (80014f0 <HAL_SPI_MspInit+0xfc>)
 8001492:	2200      	movs	r2, #0
 8001494:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001496:	4b16      	ldr	r3, [pc, #88]	; (80014f0 <HAL_SPI_MspInit+0xfc>)
 8001498:	2200      	movs	r2, #0
 800149a:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800149c:	4b14      	ldr	r3, [pc, #80]	; (80014f0 <HAL_SPI_MspInit+0xfc>)
 800149e:	2200      	movs	r2, #0
 80014a0:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80014a2:	4b13      	ldr	r3, [pc, #76]	; (80014f0 <HAL_SPI_MspInit+0xfc>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014a8:	4b11      	ldr	r3, [pc, #68]	; (80014f0 <HAL_SPI_MspInit+0xfc>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80014ae:	4810      	ldr	r0, [pc, #64]	; (80014f0 <HAL_SPI_MspInit+0xfc>)
 80014b0:	f000 fb68 	bl	8001b84 <HAL_DMA_Init>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 80014ba:	f7ff fe3f 	bl	800113c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4a0b      	ldr	r2, [pc, #44]	; (80014f0 <HAL_SPI_MspInit+0xfc>)
 80014c2:	649a      	str	r2, [r3, #72]	; 0x48
 80014c4:	4a0a      	ldr	r2, [pc, #40]	; (80014f0 <HAL_SPI_MspInit+0xfc>)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80014ca:	2200      	movs	r2, #0
 80014cc:	2100      	movs	r1, #0
 80014ce:	2023      	movs	r0, #35	; 0x23
 80014d0:	f000 fb2e 	bl	8001b30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80014d4:	2023      	movs	r0, #35	; 0x23
 80014d6:	f000 fb47 	bl	8001b68 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80014da:	bf00      	nop
 80014dc:	3728      	adds	r7, #40	; 0x28
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	40013000 	.word	0x40013000
 80014e8:	40023800 	.word	0x40023800
 80014ec:	40020000 	.word	0x40020000
 80014f0:	200001e0 	.word	0x200001e0
 80014f4:	40026488 	.word	0x40026488

080014f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	607b      	str	r3, [r7, #4]
 8001502:	4b10      	ldr	r3, [pc, #64]	; (8001544 <HAL_MspInit+0x4c>)
 8001504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001506:	4a0f      	ldr	r2, [pc, #60]	; (8001544 <HAL_MspInit+0x4c>)
 8001508:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800150c:	6453      	str	r3, [r2, #68]	; 0x44
 800150e:	4b0d      	ldr	r3, [pc, #52]	; (8001544 <HAL_MspInit+0x4c>)
 8001510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001512:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001516:	607b      	str	r3, [r7, #4]
 8001518:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	603b      	str	r3, [r7, #0]
 800151e:	4b09      	ldr	r3, [pc, #36]	; (8001544 <HAL_MspInit+0x4c>)
 8001520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001522:	4a08      	ldr	r2, [pc, #32]	; (8001544 <HAL_MspInit+0x4c>)
 8001524:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001528:	6413      	str	r3, [r2, #64]	; 0x40
 800152a:	4b06      	ldr	r3, [pc, #24]	; (8001544 <HAL_MspInit+0x4c>)
 800152c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001532:	603b      	str	r3, [r7, #0]
 8001534:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001536:	bf00      	nop
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	40023800 	.word	0x40023800

08001548 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b08e      	sub	sp, #56	; 0x38
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001550:	2300      	movs	r3, #0
 8001552:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001554:	2300      	movs	r3, #0
 8001556:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8001558:	2300      	movs	r3, #0
 800155a:	60fb      	str	r3, [r7, #12]
 800155c:	4b33      	ldr	r3, [pc, #204]	; (800162c <HAL_InitTick+0xe4>)
 800155e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001560:	4a32      	ldr	r2, [pc, #200]	; (800162c <HAL_InitTick+0xe4>)
 8001562:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001566:	6413      	str	r3, [r2, #64]	; 0x40
 8001568:	4b30      	ldr	r3, [pc, #192]	; (800162c <HAL_InitTick+0xe4>)
 800156a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001570:	60fb      	str	r3, [r7, #12]
 8001572:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001574:	f107 0210 	add.w	r2, r7, #16
 8001578:	f107 0314 	add.w	r3, r7, #20
 800157c:	4611      	mov	r1, r2
 800157e:	4618      	mov	r0, r3
 8001580:	f001 fcb0 	bl	8002ee4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001584:	6a3b      	ldr	r3, [r7, #32]
 8001586:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800158a:	2b00      	cmp	r3, #0
 800158c:	d103      	bne.n	8001596 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800158e:	f001 fc95 	bl	8002ebc <HAL_RCC_GetPCLK1Freq>
 8001592:	6378      	str	r0, [r7, #52]	; 0x34
 8001594:	e004      	b.n	80015a0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001596:	f001 fc91 	bl	8002ebc <HAL_RCC_GetPCLK1Freq>
 800159a:	4603      	mov	r3, r0
 800159c:	005b      	lsls	r3, r3, #1
 800159e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80015a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015a2:	4a23      	ldr	r2, [pc, #140]	; (8001630 <HAL_InitTick+0xe8>)
 80015a4:	fba2 2303 	umull	r2, r3, r2, r3
 80015a8:	0c9b      	lsrs	r3, r3, #18
 80015aa:	3b01      	subs	r3, #1
 80015ac:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 80015ae:	4b21      	ldr	r3, [pc, #132]	; (8001634 <HAL_InitTick+0xec>)
 80015b0:	4a21      	ldr	r2, [pc, #132]	; (8001638 <HAL_InitTick+0xf0>)
 80015b2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 80015b4:	4b1f      	ldr	r3, [pc, #124]	; (8001634 <HAL_InitTick+0xec>)
 80015b6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80015ba:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 80015bc:	4a1d      	ldr	r2, [pc, #116]	; (8001634 <HAL_InitTick+0xec>)
 80015be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015c0:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 80015c2:	4b1c      	ldr	r3, [pc, #112]	; (8001634 <HAL_InitTick+0xec>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015c8:	4b1a      	ldr	r3, [pc, #104]	; (8001634 <HAL_InitTick+0xec>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ce:	4b19      	ldr	r3, [pc, #100]	; (8001634 <HAL_InitTick+0xec>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 80015d4:	4817      	ldr	r0, [pc, #92]	; (8001634 <HAL_InitTick+0xec>)
 80015d6:	f003 fcd9 	bl	8004f8c <HAL_TIM_Base_Init>
 80015da:	4603      	mov	r3, r0
 80015dc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80015e0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d11b      	bne.n	8001620 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 80015e8:	4812      	ldr	r0, [pc, #72]	; (8001634 <HAL_InitTick+0xec>)
 80015ea:	f003 fd29 	bl	8005040 <HAL_TIM_Base_Start_IT>
 80015ee:	4603      	mov	r3, r0
 80015f0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80015f4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d111      	bne.n	8001620 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80015fc:	202d      	movs	r0, #45	; 0x2d
 80015fe:	f000 fab3 	bl	8001b68 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2b0f      	cmp	r3, #15
 8001606:	d808      	bhi.n	800161a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8001608:	2200      	movs	r2, #0
 800160a:	6879      	ldr	r1, [r7, #4]
 800160c:	202d      	movs	r0, #45	; 0x2d
 800160e:	f000 fa8f 	bl	8001b30 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001612:	4a0a      	ldr	r2, [pc, #40]	; (800163c <HAL_InitTick+0xf4>)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6013      	str	r3, [r2, #0]
 8001618:	e002      	b.n	8001620 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001620:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001624:	4618      	mov	r0, r3
 8001626:	3738      	adds	r7, #56	; 0x38
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	40023800 	.word	0x40023800
 8001630:	431bde83 	.word	0x431bde83
 8001634:	20000240 	.word	0x20000240
 8001638:	40002000 	.word	0x40002000
 800163c:	20000004 	.word	0x20000004

08001640 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001644:	e7fe      	b.n	8001644 <NMI_Handler+0x4>

08001646 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001646:	b480      	push	{r7}
 8001648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800164a:	e7fe      	b.n	800164a <HardFault_Handler+0x4>

0800164c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001650:	e7fe      	b.n	8001650 <MemManage_Handler+0x4>

08001652 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001652:	b480      	push	{r7}
 8001654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001656:	e7fe      	b.n	8001656 <BusFault_Handler+0x4>

08001658 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800165c:	e7fe      	b.n	800165c <UsageFault_Handler+0x4>

0800165e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800165e:	b480      	push	{r7}
 8001660:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001662:	bf00      	nop
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001670:	bf00      	nop
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr

0800167a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800167a:	b480      	push	{r7}
 800167c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800167e:	bf00      	nop
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr

08001688 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800168c:	bf00      	nop
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
	...

08001698 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800169c:	4802      	ldr	r0, [pc, #8]	; (80016a8 <SPI1_IRQHandler+0x10>)
 800169e:	f003 fa01 	bl	8004aa4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80016a2:	bf00      	nop
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	20000188 	.word	0x20000188

080016ac <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80016b0:	4802      	ldr	r0, [pc, #8]	; (80016bc <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80016b2:	f003 fe4d 	bl	8005350 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	20000240 	.word	0x20000240

080016c0 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80016c4:	4802      	ldr	r0, [pc, #8]	; (80016d0 <SDIO_IRQHandler+0x10>)
 80016c6:	f001 feb7 	bl	8003438 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	20000044 	.word	0x20000044

080016d4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 80016d8:	4802      	ldr	r0, [pc, #8]	; (80016e4 <DMA2_Stream3_IRQHandler+0x10>)
 80016da:	f000 fb7b 	bl	8001dd4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80016de:	bf00      	nop
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	200000c8 	.word	0x200000c8

080016e8 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80016ec:	4802      	ldr	r0, [pc, #8]	; (80016f8 <DMA2_Stream5_IRQHandler+0x10>)
 80016ee:	f000 fb71 	bl	8001dd4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 80016f2:	bf00      	nop
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	200001e0 	.word	0x200001e0

080016fc <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8001700:	4802      	ldr	r0, [pc, #8]	; (800170c <DMA2_Stream6_IRQHandler+0x10>)
 8001702:	f000 fb67 	bl	8001dd4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001706:	bf00      	nop
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	20000128 	.word	0x20000128

08001710 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001714:	4b06      	ldr	r3, [pc, #24]	; (8001730 <SystemInit+0x20>)
 8001716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800171a:	4a05      	ldr	r2, [pc, #20]	; (8001730 <SystemInit+0x20>)
 800171c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001720:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001724:	bf00      	nop
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	e000ed00 	.word	0xe000ed00

08001734 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b08a      	sub	sp, #40	; 0x28
 8001738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800173a:	f107 0320 	add.w	r3, r7, #32
 800173e:	2200      	movs	r2, #0
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001744:	1d3b      	adds	r3, r7, #4
 8001746:	2200      	movs	r2, #0
 8001748:	601a      	str	r2, [r3, #0]
 800174a:	605a      	str	r2, [r3, #4]
 800174c:	609a      	str	r2, [r3, #8]
 800174e:	60da      	str	r2, [r3, #12]
 8001750:	611a      	str	r2, [r3, #16]
 8001752:	615a      	str	r2, [r3, #20]
 8001754:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001756:	4b22      	ldr	r3, [pc, #136]	; (80017e0 <MX_TIM3_Init+0xac>)
 8001758:	4a22      	ldr	r2, [pc, #136]	; (80017e4 <MX_TIM3_Init+0xb0>)
 800175a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 300-1;
 800175c:	4b20      	ldr	r3, [pc, #128]	; (80017e0 <MX_TIM3_Init+0xac>)
 800175e:	f240 122b 	movw	r2, #299	; 0x12b
 8001762:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001764:	4b1e      	ldr	r3, [pc, #120]	; (80017e0 <MX_TIM3_Init+0xac>)
 8001766:	2200      	movs	r2, #0
 8001768:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 800176a:	4b1d      	ldr	r3, [pc, #116]	; (80017e0 <MX_TIM3_Init+0xac>)
 800176c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001770:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001772:	4b1b      	ldr	r3, [pc, #108]	; (80017e0 <MX_TIM3_Init+0xac>)
 8001774:	2200      	movs	r2, #0
 8001776:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001778:	4b19      	ldr	r3, [pc, #100]	; (80017e0 <MX_TIM3_Init+0xac>)
 800177a:	2200      	movs	r2, #0
 800177c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800177e:	4818      	ldr	r0, [pc, #96]	; (80017e0 <MX_TIM3_Init+0xac>)
 8001780:	f003 fcce 	bl	8005120 <HAL_TIM_PWM_Init>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800178a:	f7ff fcd7 	bl	800113c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800178e:	2300      	movs	r3, #0
 8001790:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001792:	2300      	movs	r3, #0
 8001794:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001796:	f107 0320 	add.w	r3, r7, #32
 800179a:	4619      	mov	r1, r3
 800179c:	4810      	ldr	r0, [pc, #64]	; (80017e0 <MX_TIM3_Init+0xac>)
 800179e:	f004 fa3f 	bl	8005c20 <HAL_TIMEx_MasterConfigSynchronization>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80017a8:	f7ff fcc8 	bl	800113c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017ac:	2360      	movs	r3, #96	; 0x60
 80017ae:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80017b0:	2300      	movs	r3, #0
 80017b2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017b4:	2300      	movs	r3, #0
 80017b6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017b8:	2300      	movs	r3, #0
 80017ba:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017bc:	1d3b      	adds	r3, r7, #4
 80017be:	2200      	movs	r2, #0
 80017c0:	4619      	mov	r1, r3
 80017c2:	4807      	ldr	r0, [pc, #28]	; (80017e0 <MX_TIM3_Init+0xac>)
 80017c4:	f003 fecc 	bl	8005560 <HAL_TIM_PWM_ConfigChannel>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80017ce:	f7ff fcb5 	bl	800113c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80017d2:	4803      	ldr	r0, [pc, #12]	; (80017e0 <MX_TIM3_Init+0xac>)
 80017d4:	f000 f82a 	bl	800182c <HAL_TIM_MspPostInit>

}
 80017d8:	bf00      	nop
 80017da:	3728      	adds	r7, #40	; 0x28
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	20000288 	.word	0x20000288
 80017e4:	40000400 	.word	0x40000400

080017e8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a0b      	ldr	r2, [pc, #44]	; (8001824 <HAL_TIM_PWM_MspInit+0x3c>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d10d      	bne.n	8001816 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80017fa:	2300      	movs	r3, #0
 80017fc:	60fb      	str	r3, [r7, #12]
 80017fe:	4b0a      	ldr	r3, [pc, #40]	; (8001828 <HAL_TIM_PWM_MspInit+0x40>)
 8001800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001802:	4a09      	ldr	r2, [pc, #36]	; (8001828 <HAL_TIM_PWM_MspInit+0x40>)
 8001804:	f043 0302 	orr.w	r3, r3, #2
 8001808:	6413      	str	r3, [r2, #64]	; 0x40
 800180a:	4b07      	ldr	r3, [pc, #28]	; (8001828 <HAL_TIM_PWM_MspInit+0x40>)
 800180c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180e:	f003 0302 	and.w	r3, r3, #2
 8001812:	60fb      	str	r3, [r7, #12]
 8001814:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001816:	bf00      	nop
 8001818:	3714      	adds	r7, #20
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	40000400 	.word	0x40000400
 8001828:	40023800 	.word	0x40023800

0800182c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b088      	sub	sp, #32
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001834:	f107 030c 	add.w	r3, r7, #12
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	605a      	str	r2, [r3, #4]
 800183e:	609a      	str	r2, [r3, #8]
 8001840:	60da      	str	r2, [r3, #12]
 8001842:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a12      	ldr	r2, [pc, #72]	; (8001894 <HAL_TIM_MspPostInit+0x68>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d11d      	bne.n	800188a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800184e:	2300      	movs	r3, #0
 8001850:	60bb      	str	r3, [r7, #8]
 8001852:	4b11      	ldr	r3, [pc, #68]	; (8001898 <HAL_TIM_MspPostInit+0x6c>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	4a10      	ldr	r2, [pc, #64]	; (8001898 <HAL_TIM_MspPostInit+0x6c>)
 8001858:	f043 0301 	orr.w	r3, r3, #1
 800185c:	6313      	str	r3, [r2, #48]	; 0x30
 800185e:	4b0e      	ldr	r3, [pc, #56]	; (8001898 <HAL_TIM_MspPostInit+0x6c>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	f003 0301 	and.w	r3, r3, #1
 8001866:	60bb      	str	r3, [r7, #8]
 8001868:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = LCD_BLK_Pin;
 800186a:	2340      	movs	r3, #64	; 0x40
 800186c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186e:	2302      	movs	r3, #2
 8001870:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001872:	2300      	movs	r3, #0
 8001874:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001876:	2300      	movs	r3, #0
 8001878:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800187a:	2302      	movs	r3, #2
 800187c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LCD_BLK_GPIO_Port, &GPIO_InitStruct);
 800187e:	f107 030c 	add.w	r3, r7, #12
 8001882:	4619      	mov	r1, r3
 8001884:	4805      	ldr	r0, [pc, #20]	; (800189c <HAL_TIM_MspPostInit+0x70>)
 8001886:	f000 fd1b 	bl	80022c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800188a:	bf00      	nop
 800188c:	3720      	adds	r7, #32
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	40000400 	.word	0x40000400
 8001898:	40023800 	.word	0x40023800
 800189c:	40020000 	.word	0x40020000

080018a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80018a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018d8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018a4:	480d      	ldr	r0, [pc, #52]	; (80018dc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80018a6:	490e      	ldr	r1, [pc, #56]	; (80018e0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80018a8:	4a0e      	ldr	r2, [pc, #56]	; (80018e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018ac:	e002      	b.n	80018b4 <LoopCopyDataInit>

080018ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018b2:	3304      	adds	r3, #4

080018b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018b8:	d3f9      	bcc.n	80018ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018ba:	4a0b      	ldr	r2, [pc, #44]	; (80018e8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80018bc:	4c0b      	ldr	r4, [pc, #44]	; (80018ec <LoopFillZerobss+0x26>)
  movs r3, #0
 80018be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018c0:	e001      	b.n	80018c6 <LoopFillZerobss>

080018c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018c4:	3204      	adds	r2, #4

080018c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018c8:	d3fb      	bcc.n	80018c2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80018ca:	f7ff ff21 	bl	8001710 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018ce:	f00f fa67 	bl	8010da0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018d2:	f7ff fb9f 	bl	8001014 <main>
  bx  lr    
 80018d6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80018d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018e0:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 80018e4:	08012fbc 	.word	0x08012fbc
  ldr r2, =_sbss
 80018e8:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 80018ec:	2000ad80 	.word	0x2000ad80

080018f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018f0:	e7fe      	b.n	80018f0 <ADC_IRQHandler>
	...

080018f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018f8:	4b0e      	ldr	r3, [pc, #56]	; (8001934 <HAL_Init+0x40>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a0d      	ldr	r2, [pc, #52]	; (8001934 <HAL_Init+0x40>)
 80018fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001902:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001904:	4b0b      	ldr	r3, [pc, #44]	; (8001934 <HAL_Init+0x40>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a0a      	ldr	r2, [pc, #40]	; (8001934 <HAL_Init+0x40>)
 800190a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800190e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001910:	4b08      	ldr	r3, [pc, #32]	; (8001934 <HAL_Init+0x40>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a07      	ldr	r2, [pc, #28]	; (8001934 <HAL_Init+0x40>)
 8001916:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800191a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800191c:	2003      	movs	r0, #3
 800191e:	f000 f8fc 	bl	8001b1a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001922:	200f      	movs	r0, #15
 8001924:	f7ff fe10 	bl	8001548 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001928:	f7ff fde6 	bl	80014f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	40023c00 	.word	0x40023c00

08001938 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800193c:	4b06      	ldr	r3, [pc, #24]	; (8001958 <HAL_IncTick+0x20>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	461a      	mov	r2, r3
 8001942:	4b06      	ldr	r3, [pc, #24]	; (800195c <HAL_IncTick+0x24>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4413      	add	r3, r2
 8001948:	4a04      	ldr	r2, [pc, #16]	; (800195c <HAL_IncTick+0x24>)
 800194a:	6013      	str	r3, [r2, #0]
}
 800194c:	bf00      	nop
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	20000008 	.word	0x20000008
 800195c:	200002d0 	.word	0x200002d0

08001960 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  return uwTick;
 8001964:	4b03      	ldr	r3, [pc, #12]	; (8001974 <HAL_GetTick+0x14>)
 8001966:	681b      	ldr	r3, [r3, #0]
}
 8001968:	4618      	mov	r0, r3
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	200002d0 	.word	0x200002d0

08001978 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001980:	f7ff ffee 	bl	8001960 <HAL_GetTick>
 8001984:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001990:	d005      	beq.n	800199e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001992:	4b0a      	ldr	r3, [pc, #40]	; (80019bc <HAL_Delay+0x44>)
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	461a      	mov	r2, r3
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	4413      	add	r3, r2
 800199c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800199e:	bf00      	nop
 80019a0:	f7ff ffde 	bl	8001960 <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	68fa      	ldr	r2, [r7, #12]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d8f7      	bhi.n	80019a0 <HAL_Delay+0x28>
  {
  }
}
 80019b0:	bf00      	nop
 80019b2:	bf00      	nop
 80019b4:	3710      	adds	r7, #16
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	20000008 	.word	0x20000008

080019c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b085      	sub	sp, #20
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f003 0307 	and.w	r3, r3, #7
 80019ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019d0:	4b0c      	ldr	r3, [pc, #48]	; (8001a04 <__NVIC_SetPriorityGrouping+0x44>)
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019d6:	68ba      	ldr	r2, [r7, #8]
 80019d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019dc:	4013      	ands	r3, r2
 80019de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019f2:	4a04      	ldr	r2, [pc, #16]	; (8001a04 <__NVIC_SetPriorityGrouping+0x44>)
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	60d3      	str	r3, [r2, #12]
}
 80019f8:	bf00      	nop
 80019fa:	3714      	adds	r7, #20
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr
 8001a04:	e000ed00 	.word	0xe000ed00

08001a08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a0c:	4b04      	ldr	r3, [pc, #16]	; (8001a20 <__NVIC_GetPriorityGrouping+0x18>)
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	0a1b      	lsrs	r3, r3, #8
 8001a12:	f003 0307 	and.w	r3, r3, #7
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr
 8001a20:	e000ed00 	.word	0xe000ed00

08001a24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	db0b      	blt.n	8001a4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a36:	79fb      	ldrb	r3, [r7, #7]
 8001a38:	f003 021f 	and.w	r2, r3, #31
 8001a3c:	4907      	ldr	r1, [pc, #28]	; (8001a5c <__NVIC_EnableIRQ+0x38>)
 8001a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a42:	095b      	lsrs	r3, r3, #5
 8001a44:	2001      	movs	r0, #1
 8001a46:	fa00 f202 	lsl.w	r2, r0, r2
 8001a4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a4e:	bf00      	nop
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	e000e100 	.word	0xe000e100

08001a60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	4603      	mov	r3, r0
 8001a68:	6039      	str	r1, [r7, #0]
 8001a6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	db0a      	blt.n	8001a8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	b2da      	uxtb	r2, r3
 8001a78:	490c      	ldr	r1, [pc, #48]	; (8001aac <__NVIC_SetPriority+0x4c>)
 8001a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7e:	0112      	lsls	r2, r2, #4
 8001a80:	b2d2      	uxtb	r2, r2
 8001a82:	440b      	add	r3, r1
 8001a84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a88:	e00a      	b.n	8001aa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	b2da      	uxtb	r2, r3
 8001a8e:	4908      	ldr	r1, [pc, #32]	; (8001ab0 <__NVIC_SetPriority+0x50>)
 8001a90:	79fb      	ldrb	r3, [r7, #7]
 8001a92:	f003 030f 	and.w	r3, r3, #15
 8001a96:	3b04      	subs	r3, #4
 8001a98:	0112      	lsls	r2, r2, #4
 8001a9a:	b2d2      	uxtb	r2, r2
 8001a9c:	440b      	add	r3, r1
 8001a9e:	761a      	strb	r2, [r3, #24]
}
 8001aa0:	bf00      	nop
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr
 8001aac:	e000e100 	.word	0xe000e100
 8001ab0:	e000ed00 	.word	0xe000ed00

08001ab4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b089      	sub	sp, #36	; 0x24
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	60f8      	str	r0, [r7, #12]
 8001abc:	60b9      	str	r1, [r7, #8]
 8001abe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	f003 0307 	and.w	r3, r3, #7
 8001ac6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	f1c3 0307 	rsb	r3, r3, #7
 8001ace:	2b04      	cmp	r3, #4
 8001ad0:	bf28      	it	cs
 8001ad2:	2304      	movcs	r3, #4
 8001ad4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	3304      	adds	r3, #4
 8001ada:	2b06      	cmp	r3, #6
 8001adc:	d902      	bls.n	8001ae4 <NVIC_EncodePriority+0x30>
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	3b03      	subs	r3, #3
 8001ae2:	e000      	b.n	8001ae6 <NVIC_EncodePriority+0x32>
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ae8:	f04f 32ff 	mov.w	r2, #4294967295
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	fa02 f303 	lsl.w	r3, r2, r3
 8001af2:	43da      	mvns	r2, r3
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	401a      	ands	r2, r3
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001afc:	f04f 31ff 	mov.w	r1, #4294967295
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	fa01 f303 	lsl.w	r3, r1, r3
 8001b06:	43d9      	mvns	r1, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b0c:	4313      	orrs	r3, r2
         );
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3724      	adds	r7, #36	; 0x24
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr

08001b1a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b082      	sub	sp, #8
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f7ff ff4c 	bl	80019c0 <__NVIC_SetPriorityGrouping>
}
 8001b28:	bf00      	nop
 8001b2a:	3708      	adds	r7, #8
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b086      	sub	sp, #24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	4603      	mov	r3, r0
 8001b38:	60b9      	str	r1, [r7, #8]
 8001b3a:	607a      	str	r2, [r7, #4]
 8001b3c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b42:	f7ff ff61 	bl	8001a08 <__NVIC_GetPriorityGrouping>
 8001b46:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	68b9      	ldr	r1, [r7, #8]
 8001b4c:	6978      	ldr	r0, [r7, #20]
 8001b4e:	f7ff ffb1 	bl	8001ab4 <NVIC_EncodePriority>
 8001b52:	4602      	mov	r2, r0
 8001b54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b58:	4611      	mov	r1, r2
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7ff ff80 	bl	8001a60 <__NVIC_SetPriority>
}
 8001b60:	bf00      	nop
 8001b62:	3718      	adds	r7, #24
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	4603      	mov	r3, r0
 8001b70:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7ff ff54 	bl	8001a24 <__NVIC_EnableIRQ>
}
 8001b7c:	bf00      	nop
 8001b7e:	3708      	adds	r7, #8
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b086      	sub	sp, #24
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001b90:	f7ff fee6 	bl	8001960 <HAL_GetTick>
 8001b94:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d101      	bne.n	8001ba0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e099      	b.n	8001cd4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2202      	movs	r2, #2
 8001ba4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2200      	movs	r2, #0
 8001bac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f022 0201 	bic.w	r2, r2, #1
 8001bbe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bc0:	e00f      	b.n	8001be2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001bc2:	f7ff fecd 	bl	8001960 <HAL_GetTick>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	2b05      	cmp	r3, #5
 8001bce:	d908      	bls.n	8001be2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2220      	movs	r2, #32
 8001bd4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2203      	movs	r2, #3
 8001bda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e078      	b.n	8001cd4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 0301 	and.w	r3, r3, #1
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d1e8      	bne.n	8001bc2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001bf8:	697a      	ldr	r2, [r7, #20]
 8001bfa:	4b38      	ldr	r3, [pc, #224]	; (8001cdc <HAL_DMA_Init+0x158>)
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	685a      	ldr	r2, [r3, #4]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	691b      	ldr	r3, [r3, #16]
 8001c14:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	699b      	ldr	r3, [r3, #24]
 8001c20:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c26:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6a1b      	ldr	r3, [r3, #32]
 8001c2c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c2e:	697a      	ldr	r2, [r7, #20]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c38:	2b04      	cmp	r3, #4
 8001c3a:	d107      	bne.n	8001c4c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c44:	4313      	orrs	r3, r2
 8001c46:	697a      	ldr	r2, [r7, #20]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	697a      	ldr	r2, [r7, #20]
 8001c52:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	695b      	ldr	r3, [r3, #20]
 8001c5a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	f023 0307 	bic.w	r3, r3, #7
 8001c62:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c68:	697a      	ldr	r2, [r7, #20]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c72:	2b04      	cmp	r3, #4
 8001c74:	d117      	bne.n	8001ca6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c7a:	697a      	ldr	r2, [r7, #20]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d00e      	beq.n	8001ca6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f000 fa9d 	bl	80021c8 <DMA_CheckFifoParam>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d008      	beq.n	8001ca6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2240      	movs	r2, #64	; 0x40
 8001c98:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e016      	b.n	8001cd4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	697a      	ldr	r2, [r7, #20]
 8001cac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f000 fa54 	bl	800215c <DMA_CalcBaseAndBitshift>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cbc:	223f      	movs	r2, #63	; 0x3f
 8001cbe:	409a      	lsls	r2, r3
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2201      	movs	r2, #1
 8001cce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001cd2:	2300      	movs	r3, #0
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3718      	adds	r7, #24
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	f010803f 	.word	0xf010803f

08001ce0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b086      	sub	sp, #24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	60f8      	str	r0, [r7, #12]
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	607a      	str	r2, [r7, #4]
 8001cec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cf6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d101      	bne.n	8001d06 <HAL_DMA_Start_IT+0x26>
 8001d02:	2302      	movs	r3, #2
 8001d04:	e040      	b.n	8001d88 <HAL_DMA_Start_IT+0xa8>
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	2201      	movs	r2, #1
 8001d0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d12f      	bne.n	8001d7a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2202      	movs	r2, #2
 8001d1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	2200      	movs	r2, #0
 8001d26:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	687a      	ldr	r2, [r7, #4]
 8001d2c:	68b9      	ldr	r1, [r7, #8]
 8001d2e:	68f8      	ldr	r0, [r7, #12]
 8001d30:	f000 f9e6 	bl	8002100 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d38:	223f      	movs	r2, #63	; 0x3f
 8001d3a:	409a      	lsls	r2, r3
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f042 0216 	orr.w	r2, r2, #22
 8001d4e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d007      	beq.n	8001d68 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f042 0208 	orr.w	r2, r2, #8
 8001d66:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f042 0201 	orr.w	r2, r2, #1
 8001d76:	601a      	str	r2, [r3, #0]
 8001d78:	e005      	b.n	8001d86 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001d82:	2302      	movs	r3, #2
 8001d84:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001d86:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3718      	adds	r7, #24
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d004      	beq.n	8001dae <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2280      	movs	r2, #128	; 0x80
 8001da8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e00c      	b.n	8001dc8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2205      	movs	r2, #5
 8001db2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f022 0201 	bic.w	r2, r2, #1
 8001dc4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001dc6:	2300      	movs	r3, #0
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b086      	sub	sp, #24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001de0:	4b8e      	ldr	r3, [pc, #568]	; (800201c <HAL_DMA_IRQHandler+0x248>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a8e      	ldr	r2, [pc, #568]	; (8002020 <HAL_DMA_IRQHandler+0x24c>)
 8001de6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dea:	0a9b      	lsrs	r3, r3, #10
 8001dec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001df2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dfe:	2208      	movs	r2, #8
 8001e00:	409a      	lsls	r2, r3
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	4013      	ands	r3, r2
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d01a      	beq.n	8001e40 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0304 	and.w	r3, r3, #4
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d013      	beq.n	8001e40 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f022 0204 	bic.w	r2, r2, #4
 8001e26:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e2c:	2208      	movs	r2, #8
 8001e2e:	409a      	lsls	r2, r3
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e38:	f043 0201 	orr.w	r2, r3, #1
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e44:	2201      	movs	r2, #1
 8001e46:	409a      	lsls	r2, r3
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d012      	beq.n	8001e76 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	695b      	ldr	r3, [r3, #20]
 8001e56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d00b      	beq.n	8001e76 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e62:	2201      	movs	r2, #1
 8001e64:	409a      	lsls	r2, r3
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e6e:	f043 0202 	orr.w	r2, r3, #2
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e7a:	2204      	movs	r2, #4
 8001e7c:	409a      	lsls	r2, r3
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	4013      	ands	r3, r2
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d012      	beq.n	8001eac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0302 	and.w	r3, r3, #2
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d00b      	beq.n	8001eac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e98:	2204      	movs	r2, #4
 8001e9a:	409a      	lsls	r2, r3
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ea4:	f043 0204 	orr.w	r2, r3, #4
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eb0:	2210      	movs	r2, #16
 8001eb2:	409a      	lsls	r2, r3
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d043      	beq.n	8001f44 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0308 	and.w	r3, r3, #8
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d03c      	beq.n	8001f44 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ece:	2210      	movs	r2, #16
 8001ed0:	409a      	lsls	r2, r3
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d018      	beq.n	8001f16 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d108      	bne.n	8001f04 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d024      	beq.n	8001f44 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	4798      	blx	r3
 8001f02:	e01f      	b.n	8001f44 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d01b      	beq.n	8001f44 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	4798      	blx	r3
 8001f14:	e016      	b.n	8001f44 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d107      	bne.n	8001f34 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f022 0208 	bic.w	r2, r2, #8
 8001f32:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d003      	beq.n	8001f44 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f48:	2220      	movs	r2, #32
 8001f4a:	409a      	lsls	r2, r3
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	4013      	ands	r3, r2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	f000 808f 	beq.w	8002074 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0310 	and.w	r3, r3, #16
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	f000 8087 	beq.w	8002074 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f6a:	2220      	movs	r2, #32
 8001f6c:	409a      	lsls	r2, r3
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	2b05      	cmp	r3, #5
 8001f7c:	d136      	bne.n	8001fec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f022 0216 	bic.w	r2, r2, #22
 8001f8c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	695a      	ldr	r2, [r3, #20]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f9c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d103      	bne.n	8001fae <HAL_DMA_IRQHandler+0x1da>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d007      	beq.n	8001fbe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f022 0208 	bic.w	r2, r2, #8
 8001fbc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fc2:	223f      	movs	r2, #63	; 0x3f
 8001fc4:	409a      	lsls	r2, r3
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2201      	movs	r2, #1
 8001fce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d07e      	beq.n	80020e0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	4798      	blx	r3
        }
        return;
 8001fea:	e079      	b.n	80020e0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d01d      	beq.n	8002036 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002004:	2b00      	cmp	r3, #0
 8002006:	d10d      	bne.n	8002024 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200c:	2b00      	cmp	r3, #0
 800200e:	d031      	beq.n	8002074 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	4798      	blx	r3
 8002018:	e02c      	b.n	8002074 <HAL_DMA_IRQHandler+0x2a0>
 800201a:	bf00      	nop
 800201c:	20000000 	.word	0x20000000
 8002020:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002028:	2b00      	cmp	r3, #0
 800202a:	d023      	beq.n	8002074 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	4798      	blx	r3
 8002034:	e01e      	b.n	8002074 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002040:	2b00      	cmp	r3, #0
 8002042:	d10f      	bne.n	8002064 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f022 0210 	bic.w	r2, r2, #16
 8002052:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2201      	movs	r2, #1
 8002058:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2200      	movs	r2, #0
 8002060:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002068:	2b00      	cmp	r3, #0
 800206a:	d003      	beq.n	8002074 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002078:	2b00      	cmp	r3, #0
 800207a:	d032      	beq.n	80020e2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002080:	f003 0301 	and.w	r3, r3, #1
 8002084:	2b00      	cmp	r3, #0
 8002086:	d022      	beq.n	80020ce <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2205      	movs	r2, #5
 800208c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f022 0201 	bic.w	r2, r2, #1
 800209e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	3301      	adds	r3, #1
 80020a4:	60bb      	str	r3, [r7, #8]
 80020a6:	697a      	ldr	r2, [r7, #20]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d307      	bcc.n	80020bc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0301 	and.w	r3, r3, #1
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d1f2      	bne.n	80020a0 <HAL_DMA_IRQHandler+0x2cc>
 80020ba:	e000      	b.n	80020be <HAL_DMA_IRQHandler+0x2ea>
          break;
 80020bc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2201      	movs	r2, #1
 80020c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d005      	beq.n	80020e2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	4798      	blx	r3
 80020de:	e000      	b.n	80020e2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80020e0:	bf00      	nop
    }
  }
}
 80020e2:	3718      	adds	r7, #24
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002100:	b480      	push	{r7}
 8002102:	b085      	sub	sp, #20
 8002104:	af00      	add	r7, sp, #0
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	60b9      	str	r1, [r7, #8]
 800210a:	607a      	str	r2, [r7, #4]
 800210c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800211c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	683a      	ldr	r2, [r7, #0]
 8002124:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	2b40      	cmp	r3, #64	; 0x40
 800212c:	d108      	bne.n	8002140 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	68ba      	ldr	r2, [r7, #8]
 800213c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800213e:	e007      	b.n	8002150 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	68ba      	ldr	r2, [r7, #8]
 8002146:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	60da      	str	r2, [r3, #12]
}
 8002150:	bf00      	nop
 8002152:	3714      	adds	r7, #20
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800215c:	b480      	push	{r7}
 800215e:	b085      	sub	sp, #20
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	b2db      	uxtb	r3, r3
 800216a:	3b10      	subs	r3, #16
 800216c:	4a14      	ldr	r2, [pc, #80]	; (80021c0 <DMA_CalcBaseAndBitshift+0x64>)
 800216e:	fba2 2303 	umull	r2, r3, r2, r3
 8002172:	091b      	lsrs	r3, r3, #4
 8002174:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002176:	4a13      	ldr	r2, [pc, #76]	; (80021c4 <DMA_CalcBaseAndBitshift+0x68>)
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	4413      	add	r3, r2
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	461a      	mov	r2, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2b03      	cmp	r3, #3
 8002188:	d909      	bls.n	800219e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002192:	f023 0303 	bic.w	r3, r3, #3
 8002196:	1d1a      	adds	r2, r3, #4
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	659a      	str	r2, [r3, #88]	; 0x58
 800219c:	e007      	b.n	80021ae <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80021a6:	f023 0303 	bic.w	r3, r3, #3
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3714      	adds	r7, #20
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	aaaaaaab 	.word	0xaaaaaaab
 80021c4:	08010f08 	.word	0x08010f08

080021c8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b085      	sub	sp, #20
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021d0:	2300      	movs	r3, #0
 80021d2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	699b      	ldr	r3, [r3, #24]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d11f      	bne.n	8002222 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	2b03      	cmp	r3, #3
 80021e6:	d856      	bhi.n	8002296 <DMA_CheckFifoParam+0xce>
 80021e8:	a201      	add	r2, pc, #4	; (adr r2, 80021f0 <DMA_CheckFifoParam+0x28>)
 80021ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021ee:	bf00      	nop
 80021f0:	08002201 	.word	0x08002201
 80021f4:	08002213 	.word	0x08002213
 80021f8:	08002201 	.word	0x08002201
 80021fc:	08002297 	.word	0x08002297
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002204:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d046      	beq.n	800229a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002210:	e043      	b.n	800229a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002216:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800221a:	d140      	bne.n	800229e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002220:	e03d      	b.n	800229e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	699b      	ldr	r3, [r3, #24]
 8002226:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800222a:	d121      	bne.n	8002270 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	2b03      	cmp	r3, #3
 8002230:	d837      	bhi.n	80022a2 <DMA_CheckFifoParam+0xda>
 8002232:	a201      	add	r2, pc, #4	; (adr r2, 8002238 <DMA_CheckFifoParam+0x70>)
 8002234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002238:	08002249 	.word	0x08002249
 800223c:	0800224f 	.word	0x0800224f
 8002240:	08002249 	.word	0x08002249
 8002244:	08002261 	.word	0x08002261
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	73fb      	strb	r3, [r7, #15]
      break;
 800224c:	e030      	b.n	80022b0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002252:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d025      	beq.n	80022a6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800225e:	e022      	b.n	80022a6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002264:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002268:	d11f      	bne.n	80022aa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800226e:	e01c      	b.n	80022aa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	2b02      	cmp	r3, #2
 8002274:	d903      	bls.n	800227e <DMA_CheckFifoParam+0xb6>
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	2b03      	cmp	r3, #3
 800227a:	d003      	beq.n	8002284 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800227c:	e018      	b.n	80022b0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	73fb      	strb	r3, [r7, #15]
      break;
 8002282:	e015      	b.n	80022b0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002288:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d00e      	beq.n	80022ae <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	73fb      	strb	r3, [r7, #15]
      break;
 8002294:	e00b      	b.n	80022ae <DMA_CheckFifoParam+0xe6>
      break;
 8002296:	bf00      	nop
 8002298:	e00a      	b.n	80022b0 <DMA_CheckFifoParam+0xe8>
      break;
 800229a:	bf00      	nop
 800229c:	e008      	b.n	80022b0 <DMA_CheckFifoParam+0xe8>
      break;
 800229e:	bf00      	nop
 80022a0:	e006      	b.n	80022b0 <DMA_CheckFifoParam+0xe8>
      break;
 80022a2:	bf00      	nop
 80022a4:	e004      	b.n	80022b0 <DMA_CheckFifoParam+0xe8>
      break;
 80022a6:	bf00      	nop
 80022a8:	e002      	b.n	80022b0 <DMA_CheckFifoParam+0xe8>
      break;   
 80022aa:	bf00      	nop
 80022ac:	e000      	b.n	80022b0 <DMA_CheckFifoParam+0xe8>
      break;
 80022ae:	bf00      	nop
    }
  } 
  
  return status; 
 80022b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3714      	adds	r7, #20
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop

080022c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b089      	sub	sp, #36	; 0x24
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022ca:	2300      	movs	r3, #0
 80022cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022ce:	2300      	movs	r3, #0
 80022d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022d2:	2300      	movs	r3, #0
 80022d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022d6:	2300      	movs	r3, #0
 80022d8:	61fb      	str	r3, [r7, #28]
 80022da:	e16b      	b.n	80025b4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022dc:	2201      	movs	r2, #1
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	fa02 f303 	lsl.w	r3, r2, r3
 80022e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	697a      	ldr	r2, [r7, #20]
 80022ec:	4013      	ands	r3, r2
 80022ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022f0:	693a      	ldr	r2, [r7, #16]
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	f040 815a 	bne.w	80025ae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f003 0303 	and.w	r3, r3, #3
 8002302:	2b01      	cmp	r3, #1
 8002304:	d005      	beq.n	8002312 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800230e:	2b02      	cmp	r3, #2
 8002310:	d130      	bne.n	8002374 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	2203      	movs	r2, #3
 800231e:	fa02 f303 	lsl.w	r3, r2, r3
 8002322:	43db      	mvns	r3, r3
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	4013      	ands	r3, r2
 8002328:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	68da      	ldr	r2, [r3, #12]
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	005b      	lsls	r3, r3, #1
 8002332:	fa02 f303 	lsl.w	r3, r2, r3
 8002336:	69ba      	ldr	r2, [r7, #24]
 8002338:	4313      	orrs	r3, r2
 800233a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	69ba      	ldr	r2, [r7, #24]
 8002340:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002348:	2201      	movs	r2, #1
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	fa02 f303 	lsl.w	r3, r2, r3
 8002350:	43db      	mvns	r3, r3
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	4013      	ands	r3, r2
 8002356:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	091b      	lsrs	r3, r3, #4
 800235e:	f003 0201 	and.w	r2, r3, #1
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	fa02 f303 	lsl.w	r3, r2, r3
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	4313      	orrs	r3, r2
 800236c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	69ba      	ldr	r2, [r7, #24]
 8002372:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f003 0303 	and.w	r3, r3, #3
 800237c:	2b03      	cmp	r3, #3
 800237e:	d017      	beq.n	80023b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	005b      	lsls	r3, r3, #1
 800238a:	2203      	movs	r2, #3
 800238c:	fa02 f303 	lsl.w	r3, r2, r3
 8002390:	43db      	mvns	r3, r3
 8002392:	69ba      	ldr	r2, [r7, #24]
 8002394:	4013      	ands	r3, r2
 8002396:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	689a      	ldr	r2, [r3, #8]
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	fa02 f303 	lsl.w	r3, r2, r3
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f003 0303 	and.w	r3, r3, #3
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d123      	bne.n	8002404 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	08da      	lsrs	r2, r3, #3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	3208      	adds	r2, #8
 80023c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	f003 0307 	and.w	r3, r3, #7
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	220f      	movs	r2, #15
 80023d4:	fa02 f303 	lsl.w	r3, r2, r3
 80023d8:	43db      	mvns	r3, r3
 80023da:	69ba      	ldr	r2, [r7, #24]
 80023dc:	4013      	ands	r3, r2
 80023de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	691a      	ldr	r2, [r3, #16]
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	f003 0307 	and.w	r3, r3, #7
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	fa02 f303 	lsl.w	r3, r2, r3
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	08da      	lsrs	r2, r3, #3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	3208      	adds	r2, #8
 80023fe:	69b9      	ldr	r1, [r7, #24]
 8002400:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	005b      	lsls	r3, r3, #1
 800240e:	2203      	movs	r2, #3
 8002410:	fa02 f303 	lsl.w	r3, r2, r3
 8002414:	43db      	mvns	r3, r3
 8002416:	69ba      	ldr	r2, [r7, #24]
 8002418:	4013      	ands	r3, r2
 800241a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f003 0203 	and.w	r2, r3, #3
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	005b      	lsls	r3, r3, #1
 8002428:	fa02 f303 	lsl.w	r3, r2, r3
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	4313      	orrs	r3, r2
 8002430:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002440:	2b00      	cmp	r3, #0
 8002442:	f000 80b4 	beq.w	80025ae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002446:	2300      	movs	r3, #0
 8002448:	60fb      	str	r3, [r7, #12]
 800244a:	4b60      	ldr	r3, [pc, #384]	; (80025cc <HAL_GPIO_Init+0x30c>)
 800244c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800244e:	4a5f      	ldr	r2, [pc, #380]	; (80025cc <HAL_GPIO_Init+0x30c>)
 8002450:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002454:	6453      	str	r3, [r2, #68]	; 0x44
 8002456:	4b5d      	ldr	r3, [pc, #372]	; (80025cc <HAL_GPIO_Init+0x30c>)
 8002458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800245a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800245e:	60fb      	str	r3, [r7, #12]
 8002460:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002462:	4a5b      	ldr	r2, [pc, #364]	; (80025d0 <HAL_GPIO_Init+0x310>)
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	089b      	lsrs	r3, r3, #2
 8002468:	3302      	adds	r3, #2
 800246a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800246e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	f003 0303 	and.w	r3, r3, #3
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	220f      	movs	r2, #15
 800247a:	fa02 f303 	lsl.w	r3, r2, r3
 800247e:	43db      	mvns	r3, r3
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	4013      	ands	r3, r2
 8002484:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4a52      	ldr	r2, [pc, #328]	; (80025d4 <HAL_GPIO_Init+0x314>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d02b      	beq.n	80024e6 <HAL_GPIO_Init+0x226>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a51      	ldr	r2, [pc, #324]	; (80025d8 <HAL_GPIO_Init+0x318>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d025      	beq.n	80024e2 <HAL_GPIO_Init+0x222>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4a50      	ldr	r2, [pc, #320]	; (80025dc <HAL_GPIO_Init+0x31c>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d01f      	beq.n	80024de <HAL_GPIO_Init+0x21e>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a4f      	ldr	r2, [pc, #316]	; (80025e0 <HAL_GPIO_Init+0x320>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d019      	beq.n	80024da <HAL_GPIO_Init+0x21a>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a4e      	ldr	r2, [pc, #312]	; (80025e4 <HAL_GPIO_Init+0x324>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d013      	beq.n	80024d6 <HAL_GPIO_Init+0x216>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a4d      	ldr	r2, [pc, #308]	; (80025e8 <HAL_GPIO_Init+0x328>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d00d      	beq.n	80024d2 <HAL_GPIO_Init+0x212>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4a4c      	ldr	r2, [pc, #304]	; (80025ec <HAL_GPIO_Init+0x32c>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d007      	beq.n	80024ce <HAL_GPIO_Init+0x20e>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a4b      	ldr	r2, [pc, #300]	; (80025f0 <HAL_GPIO_Init+0x330>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d101      	bne.n	80024ca <HAL_GPIO_Init+0x20a>
 80024c6:	2307      	movs	r3, #7
 80024c8:	e00e      	b.n	80024e8 <HAL_GPIO_Init+0x228>
 80024ca:	2308      	movs	r3, #8
 80024cc:	e00c      	b.n	80024e8 <HAL_GPIO_Init+0x228>
 80024ce:	2306      	movs	r3, #6
 80024d0:	e00a      	b.n	80024e8 <HAL_GPIO_Init+0x228>
 80024d2:	2305      	movs	r3, #5
 80024d4:	e008      	b.n	80024e8 <HAL_GPIO_Init+0x228>
 80024d6:	2304      	movs	r3, #4
 80024d8:	e006      	b.n	80024e8 <HAL_GPIO_Init+0x228>
 80024da:	2303      	movs	r3, #3
 80024dc:	e004      	b.n	80024e8 <HAL_GPIO_Init+0x228>
 80024de:	2302      	movs	r3, #2
 80024e0:	e002      	b.n	80024e8 <HAL_GPIO_Init+0x228>
 80024e2:	2301      	movs	r3, #1
 80024e4:	e000      	b.n	80024e8 <HAL_GPIO_Init+0x228>
 80024e6:	2300      	movs	r3, #0
 80024e8:	69fa      	ldr	r2, [r7, #28]
 80024ea:	f002 0203 	and.w	r2, r2, #3
 80024ee:	0092      	lsls	r2, r2, #2
 80024f0:	4093      	lsls	r3, r2
 80024f2:	69ba      	ldr	r2, [r7, #24]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024f8:	4935      	ldr	r1, [pc, #212]	; (80025d0 <HAL_GPIO_Init+0x310>)
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	089b      	lsrs	r3, r3, #2
 80024fe:	3302      	adds	r3, #2
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002506:	4b3b      	ldr	r3, [pc, #236]	; (80025f4 <HAL_GPIO_Init+0x334>)
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	43db      	mvns	r3, r3
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	4013      	ands	r3, r2
 8002514:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d003      	beq.n	800252a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002522:	69ba      	ldr	r2, [r7, #24]
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	4313      	orrs	r3, r2
 8002528:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800252a:	4a32      	ldr	r2, [pc, #200]	; (80025f4 <HAL_GPIO_Init+0x334>)
 800252c:	69bb      	ldr	r3, [r7, #24]
 800252e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002530:	4b30      	ldr	r3, [pc, #192]	; (80025f4 <HAL_GPIO_Init+0x334>)
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	43db      	mvns	r3, r3
 800253a:	69ba      	ldr	r2, [r7, #24]
 800253c:	4013      	ands	r3, r2
 800253e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d003      	beq.n	8002554 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	4313      	orrs	r3, r2
 8002552:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002554:	4a27      	ldr	r2, [pc, #156]	; (80025f4 <HAL_GPIO_Init+0x334>)
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800255a:	4b26      	ldr	r3, [pc, #152]	; (80025f4 <HAL_GPIO_Init+0x334>)
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	43db      	mvns	r3, r3
 8002564:	69ba      	ldr	r2, [r7, #24]
 8002566:	4013      	ands	r3, r2
 8002568:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d003      	beq.n	800257e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002576:	69ba      	ldr	r2, [r7, #24]
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	4313      	orrs	r3, r2
 800257c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800257e:	4a1d      	ldr	r2, [pc, #116]	; (80025f4 <HAL_GPIO_Init+0x334>)
 8002580:	69bb      	ldr	r3, [r7, #24]
 8002582:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002584:	4b1b      	ldr	r3, [pc, #108]	; (80025f4 <HAL_GPIO_Init+0x334>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	43db      	mvns	r3, r3
 800258e:	69ba      	ldr	r2, [r7, #24]
 8002590:	4013      	ands	r3, r2
 8002592:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800259c:	2b00      	cmp	r3, #0
 800259e:	d003      	beq.n	80025a8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025a8:	4a12      	ldr	r2, [pc, #72]	; (80025f4 <HAL_GPIO_Init+0x334>)
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	3301      	adds	r3, #1
 80025b2:	61fb      	str	r3, [r7, #28]
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	2b0f      	cmp	r3, #15
 80025b8:	f67f ae90 	bls.w	80022dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025bc:	bf00      	nop
 80025be:	bf00      	nop
 80025c0:	3724      	adds	r7, #36	; 0x24
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	40023800 	.word	0x40023800
 80025d0:	40013800 	.word	0x40013800
 80025d4:	40020000 	.word	0x40020000
 80025d8:	40020400 	.word	0x40020400
 80025dc:	40020800 	.word	0x40020800
 80025e0:	40020c00 	.word	0x40020c00
 80025e4:	40021000 	.word	0x40021000
 80025e8:	40021400 	.word	0x40021400
 80025ec:	40021800 	.word	0x40021800
 80025f0:	40021c00 	.word	0x40021c00
 80025f4:	40013c00 	.word	0x40013c00

080025f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b085      	sub	sp, #20
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	460b      	mov	r3, r1
 8002602:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	691a      	ldr	r2, [r3, #16]
 8002608:	887b      	ldrh	r3, [r7, #2]
 800260a:	4013      	ands	r3, r2
 800260c:	2b00      	cmp	r3, #0
 800260e:	d002      	beq.n	8002616 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002610:	2301      	movs	r3, #1
 8002612:	73fb      	strb	r3, [r7, #15]
 8002614:	e001      	b.n	800261a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002616:	2300      	movs	r3, #0
 8002618:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800261a:	7bfb      	ldrb	r3, [r7, #15]
}
 800261c:	4618      	mov	r0, r3
 800261e:	3714      	adds	r7, #20
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	460b      	mov	r3, r1
 8002632:	807b      	strh	r3, [r7, #2]
 8002634:	4613      	mov	r3, r2
 8002636:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002638:	787b      	ldrb	r3, [r7, #1]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d003      	beq.n	8002646 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800263e:	887a      	ldrh	r2, [r7, #2]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002644:	e003      	b.n	800264e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002646:	887b      	ldrh	r3, [r7, #2]
 8002648:	041a      	lsls	r2, r3, #16
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	619a      	str	r2, [r3, #24]
}
 800264e:	bf00      	nop
 8002650:	370c      	adds	r7, #12
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr
	...

0800265c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b086      	sub	sp, #24
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d101      	bne.n	800266e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e267      	b.n	8002b3e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0301 	and.w	r3, r3, #1
 8002676:	2b00      	cmp	r3, #0
 8002678:	d075      	beq.n	8002766 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800267a:	4b88      	ldr	r3, [pc, #544]	; (800289c <HAL_RCC_OscConfig+0x240>)
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f003 030c 	and.w	r3, r3, #12
 8002682:	2b04      	cmp	r3, #4
 8002684:	d00c      	beq.n	80026a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002686:	4b85      	ldr	r3, [pc, #532]	; (800289c <HAL_RCC_OscConfig+0x240>)
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800268e:	2b08      	cmp	r3, #8
 8002690:	d112      	bne.n	80026b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002692:	4b82      	ldr	r3, [pc, #520]	; (800289c <HAL_RCC_OscConfig+0x240>)
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800269a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800269e:	d10b      	bne.n	80026b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026a0:	4b7e      	ldr	r3, [pc, #504]	; (800289c <HAL_RCC_OscConfig+0x240>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d05b      	beq.n	8002764 <HAL_RCC_OscConfig+0x108>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d157      	bne.n	8002764 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e242      	b.n	8002b3e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026c0:	d106      	bne.n	80026d0 <HAL_RCC_OscConfig+0x74>
 80026c2:	4b76      	ldr	r3, [pc, #472]	; (800289c <HAL_RCC_OscConfig+0x240>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a75      	ldr	r2, [pc, #468]	; (800289c <HAL_RCC_OscConfig+0x240>)
 80026c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026cc:	6013      	str	r3, [r2, #0]
 80026ce:	e01d      	b.n	800270c <HAL_RCC_OscConfig+0xb0>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026d8:	d10c      	bne.n	80026f4 <HAL_RCC_OscConfig+0x98>
 80026da:	4b70      	ldr	r3, [pc, #448]	; (800289c <HAL_RCC_OscConfig+0x240>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a6f      	ldr	r2, [pc, #444]	; (800289c <HAL_RCC_OscConfig+0x240>)
 80026e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026e4:	6013      	str	r3, [r2, #0]
 80026e6:	4b6d      	ldr	r3, [pc, #436]	; (800289c <HAL_RCC_OscConfig+0x240>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a6c      	ldr	r2, [pc, #432]	; (800289c <HAL_RCC_OscConfig+0x240>)
 80026ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026f0:	6013      	str	r3, [r2, #0]
 80026f2:	e00b      	b.n	800270c <HAL_RCC_OscConfig+0xb0>
 80026f4:	4b69      	ldr	r3, [pc, #420]	; (800289c <HAL_RCC_OscConfig+0x240>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a68      	ldr	r2, [pc, #416]	; (800289c <HAL_RCC_OscConfig+0x240>)
 80026fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026fe:	6013      	str	r3, [r2, #0]
 8002700:	4b66      	ldr	r3, [pc, #408]	; (800289c <HAL_RCC_OscConfig+0x240>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a65      	ldr	r2, [pc, #404]	; (800289c <HAL_RCC_OscConfig+0x240>)
 8002706:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800270a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d013      	beq.n	800273c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002714:	f7ff f924 	bl	8001960 <HAL_GetTick>
 8002718:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800271a:	e008      	b.n	800272e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800271c:	f7ff f920 	bl	8001960 <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	2b64      	cmp	r3, #100	; 0x64
 8002728:	d901      	bls.n	800272e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e207      	b.n	8002b3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800272e:	4b5b      	ldr	r3, [pc, #364]	; (800289c <HAL_RCC_OscConfig+0x240>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d0f0      	beq.n	800271c <HAL_RCC_OscConfig+0xc0>
 800273a:	e014      	b.n	8002766 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800273c:	f7ff f910 	bl	8001960 <HAL_GetTick>
 8002740:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002742:	e008      	b.n	8002756 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002744:	f7ff f90c 	bl	8001960 <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	2b64      	cmp	r3, #100	; 0x64
 8002750:	d901      	bls.n	8002756 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e1f3      	b.n	8002b3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002756:	4b51      	ldr	r3, [pc, #324]	; (800289c <HAL_RCC_OscConfig+0x240>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d1f0      	bne.n	8002744 <HAL_RCC_OscConfig+0xe8>
 8002762:	e000      	b.n	8002766 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002764:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0302 	and.w	r3, r3, #2
 800276e:	2b00      	cmp	r3, #0
 8002770:	d063      	beq.n	800283a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002772:	4b4a      	ldr	r3, [pc, #296]	; (800289c <HAL_RCC_OscConfig+0x240>)
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	f003 030c 	and.w	r3, r3, #12
 800277a:	2b00      	cmp	r3, #0
 800277c:	d00b      	beq.n	8002796 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800277e:	4b47      	ldr	r3, [pc, #284]	; (800289c <HAL_RCC_OscConfig+0x240>)
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002786:	2b08      	cmp	r3, #8
 8002788:	d11c      	bne.n	80027c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800278a:	4b44      	ldr	r3, [pc, #272]	; (800289c <HAL_RCC_OscConfig+0x240>)
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d116      	bne.n	80027c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002796:	4b41      	ldr	r3, [pc, #260]	; (800289c <HAL_RCC_OscConfig+0x240>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d005      	beq.n	80027ae <HAL_RCC_OscConfig+0x152>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d001      	beq.n	80027ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e1c7      	b.n	8002b3e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027ae:	4b3b      	ldr	r3, [pc, #236]	; (800289c <HAL_RCC_OscConfig+0x240>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	00db      	lsls	r3, r3, #3
 80027bc:	4937      	ldr	r1, [pc, #220]	; (800289c <HAL_RCC_OscConfig+0x240>)
 80027be:	4313      	orrs	r3, r2
 80027c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027c2:	e03a      	b.n	800283a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d020      	beq.n	800280e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027cc:	4b34      	ldr	r3, [pc, #208]	; (80028a0 <HAL_RCC_OscConfig+0x244>)
 80027ce:	2201      	movs	r2, #1
 80027d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d2:	f7ff f8c5 	bl	8001960 <HAL_GetTick>
 80027d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027d8:	e008      	b.n	80027ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027da:	f7ff f8c1 	bl	8001960 <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d901      	bls.n	80027ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80027e8:	2303      	movs	r3, #3
 80027ea:	e1a8      	b.n	8002b3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ec:	4b2b      	ldr	r3, [pc, #172]	; (800289c <HAL_RCC_OscConfig+0x240>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0302 	and.w	r3, r3, #2
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d0f0      	beq.n	80027da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027f8:	4b28      	ldr	r3, [pc, #160]	; (800289c <HAL_RCC_OscConfig+0x240>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	691b      	ldr	r3, [r3, #16]
 8002804:	00db      	lsls	r3, r3, #3
 8002806:	4925      	ldr	r1, [pc, #148]	; (800289c <HAL_RCC_OscConfig+0x240>)
 8002808:	4313      	orrs	r3, r2
 800280a:	600b      	str	r3, [r1, #0]
 800280c:	e015      	b.n	800283a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800280e:	4b24      	ldr	r3, [pc, #144]	; (80028a0 <HAL_RCC_OscConfig+0x244>)
 8002810:	2200      	movs	r2, #0
 8002812:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002814:	f7ff f8a4 	bl	8001960 <HAL_GetTick>
 8002818:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800281a:	e008      	b.n	800282e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800281c:	f7ff f8a0 	bl	8001960 <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	2b02      	cmp	r3, #2
 8002828:	d901      	bls.n	800282e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e187      	b.n	8002b3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800282e:	4b1b      	ldr	r3, [pc, #108]	; (800289c <HAL_RCC_OscConfig+0x240>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0302 	and.w	r3, r3, #2
 8002836:	2b00      	cmp	r3, #0
 8002838:	d1f0      	bne.n	800281c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0308 	and.w	r3, r3, #8
 8002842:	2b00      	cmp	r3, #0
 8002844:	d036      	beq.n	80028b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	695b      	ldr	r3, [r3, #20]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d016      	beq.n	800287c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800284e:	4b15      	ldr	r3, [pc, #84]	; (80028a4 <HAL_RCC_OscConfig+0x248>)
 8002850:	2201      	movs	r2, #1
 8002852:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002854:	f7ff f884 	bl	8001960 <HAL_GetTick>
 8002858:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800285a:	e008      	b.n	800286e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800285c:	f7ff f880 	bl	8001960 <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	2b02      	cmp	r3, #2
 8002868:	d901      	bls.n	800286e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e167      	b.n	8002b3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800286e:	4b0b      	ldr	r3, [pc, #44]	; (800289c <HAL_RCC_OscConfig+0x240>)
 8002870:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002872:	f003 0302 	and.w	r3, r3, #2
 8002876:	2b00      	cmp	r3, #0
 8002878:	d0f0      	beq.n	800285c <HAL_RCC_OscConfig+0x200>
 800287a:	e01b      	b.n	80028b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800287c:	4b09      	ldr	r3, [pc, #36]	; (80028a4 <HAL_RCC_OscConfig+0x248>)
 800287e:	2200      	movs	r2, #0
 8002880:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002882:	f7ff f86d 	bl	8001960 <HAL_GetTick>
 8002886:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002888:	e00e      	b.n	80028a8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800288a:	f7ff f869 	bl	8001960 <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	2b02      	cmp	r3, #2
 8002896:	d907      	bls.n	80028a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e150      	b.n	8002b3e <HAL_RCC_OscConfig+0x4e2>
 800289c:	40023800 	.word	0x40023800
 80028a0:	42470000 	.word	0x42470000
 80028a4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028a8:	4b88      	ldr	r3, [pc, #544]	; (8002acc <HAL_RCC_OscConfig+0x470>)
 80028aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028ac:	f003 0302 	and.w	r3, r3, #2
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d1ea      	bne.n	800288a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0304 	and.w	r3, r3, #4
 80028bc:	2b00      	cmp	r3, #0
 80028be:	f000 8097 	beq.w	80029f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028c2:	2300      	movs	r3, #0
 80028c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028c6:	4b81      	ldr	r3, [pc, #516]	; (8002acc <HAL_RCC_OscConfig+0x470>)
 80028c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d10f      	bne.n	80028f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028d2:	2300      	movs	r3, #0
 80028d4:	60bb      	str	r3, [r7, #8]
 80028d6:	4b7d      	ldr	r3, [pc, #500]	; (8002acc <HAL_RCC_OscConfig+0x470>)
 80028d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028da:	4a7c      	ldr	r2, [pc, #496]	; (8002acc <HAL_RCC_OscConfig+0x470>)
 80028dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028e0:	6413      	str	r3, [r2, #64]	; 0x40
 80028e2:	4b7a      	ldr	r3, [pc, #488]	; (8002acc <HAL_RCC_OscConfig+0x470>)
 80028e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ea:	60bb      	str	r3, [r7, #8]
 80028ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028ee:	2301      	movs	r3, #1
 80028f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028f2:	4b77      	ldr	r3, [pc, #476]	; (8002ad0 <HAL_RCC_OscConfig+0x474>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d118      	bne.n	8002930 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028fe:	4b74      	ldr	r3, [pc, #464]	; (8002ad0 <HAL_RCC_OscConfig+0x474>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a73      	ldr	r2, [pc, #460]	; (8002ad0 <HAL_RCC_OscConfig+0x474>)
 8002904:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002908:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800290a:	f7ff f829 	bl	8001960 <HAL_GetTick>
 800290e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002910:	e008      	b.n	8002924 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002912:	f7ff f825 	bl	8001960 <HAL_GetTick>
 8002916:	4602      	mov	r2, r0
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	2b02      	cmp	r3, #2
 800291e:	d901      	bls.n	8002924 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002920:	2303      	movs	r3, #3
 8002922:	e10c      	b.n	8002b3e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002924:	4b6a      	ldr	r3, [pc, #424]	; (8002ad0 <HAL_RCC_OscConfig+0x474>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800292c:	2b00      	cmp	r3, #0
 800292e:	d0f0      	beq.n	8002912 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	2b01      	cmp	r3, #1
 8002936:	d106      	bne.n	8002946 <HAL_RCC_OscConfig+0x2ea>
 8002938:	4b64      	ldr	r3, [pc, #400]	; (8002acc <HAL_RCC_OscConfig+0x470>)
 800293a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800293c:	4a63      	ldr	r2, [pc, #396]	; (8002acc <HAL_RCC_OscConfig+0x470>)
 800293e:	f043 0301 	orr.w	r3, r3, #1
 8002942:	6713      	str	r3, [r2, #112]	; 0x70
 8002944:	e01c      	b.n	8002980 <HAL_RCC_OscConfig+0x324>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	2b05      	cmp	r3, #5
 800294c:	d10c      	bne.n	8002968 <HAL_RCC_OscConfig+0x30c>
 800294e:	4b5f      	ldr	r3, [pc, #380]	; (8002acc <HAL_RCC_OscConfig+0x470>)
 8002950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002952:	4a5e      	ldr	r2, [pc, #376]	; (8002acc <HAL_RCC_OscConfig+0x470>)
 8002954:	f043 0304 	orr.w	r3, r3, #4
 8002958:	6713      	str	r3, [r2, #112]	; 0x70
 800295a:	4b5c      	ldr	r3, [pc, #368]	; (8002acc <HAL_RCC_OscConfig+0x470>)
 800295c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800295e:	4a5b      	ldr	r2, [pc, #364]	; (8002acc <HAL_RCC_OscConfig+0x470>)
 8002960:	f043 0301 	orr.w	r3, r3, #1
 8002964:	6713      	str	r3, [r2, #112]	; 0x70
 8002966:	e00b      	b.n	8002980 <HAL_RCC_OscConfig+0x324>
 8002968:	4b58      	ldr	r3, [pc, #352]	; (8002acc <HAL_RCC_OscConfig+0x470>)
 800296a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800296c:	4a57      	ldr	r2, [pc, #348]	; (8002acc <HAL_RCC_OscConfig+0x470>)
 800296e:	f023 0301 	bic.w	r3, r3, #1
 8002972:	6713      	str	r3, [r2, #112]	; 0x70
 8002974:	4b55      	ldr	r3, [pc, #340]	; (8002acc <HAL_RCC_OscConfig+0x470>)
 8002976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002978:	4a54      	ldr	r2, [pc, #336]	; (8002acc <HAL_RCC_OscConfig+0x470>)
 800297a:	f023 0304 	bic.w	r3, r3, #4
 800297e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d015      	beq.n	80029b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002988:	f7fe ffea 	bl	8001960 <HAL_GetTick>
 800298c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800298e:	e00a      	b.n	80029a6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002990:	f7fe ffe6 	bl	8001960 <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	f241 3288 	movw	r2, #5000	; 0x1388
 800299e:	4293      	cmp	r3, r2
 80029a0:	d901      	bls.n	80029a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e0cb      	b.n	8002b3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029a6:	4b49      	ldr	r3, [pc, #292]	; (8002acc <HAL_RCC_OscConfig+0x470>)
 80029a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029aa:	f003 0302 	and.w	r3, r3, #2
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d0ee      	beq.n	8002990 <HAL_RCC_OscConfig+0x334>
 80029b2:	e014      	b.n	80029de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029b4:	f7fe ffd4 	bl	8001960 <HAL_GetTick>
 80029b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029ba:	e00a      	b.n	80029d2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029bc:	f7fe ffd0 	bl	8001960 <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d901      	bls.n	80029d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e0b5      	b.n	8002b3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029d2:	4b3e      	ldr	r3, [pc, #248]	; (8002acc <HAL_RCC_OscConfig+0x470>)
 80029d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d6:	f003 0302 	and.w	r3, r3, #2
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d1ee      	bne.n	80029bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029de:	7dfb      	ldrb	r3, [r7, #23]
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d105      	bne.n	80029f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029e4:	4b39      	ldr	r3, [pc, #228]	; (8002acc <HAL_RCC_OscConfig+0x470>)
 80029e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e8:	4a38      	ldr	r2, [pc, #224]	; (8002acc <HAL_RCC_OscConfig+0x470>)
 80029ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029ee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	699b      	ldr	r3, [r3, #24]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	f000 80a1 	beq.w	8002b3c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029fa:	4b34      	ldr	r3, [pc, #208]	; (8002acc <HAL_RCC_OscConfig+0x470>)
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	f003 030c 	and.w	r3, r3, #12
 8002a02:	2b08      	cmp	r3, #8
 8002a04:	d05c      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	699b      	ldr	r3, [r3, #24]
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d141      	bne.n	8002a92 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a0e:	4b31      	ldr	r3, [pc, #196]	; (8002ad4 <HAL_RCC_OscConfig+0x478>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a14:	f7fe ffa4 	bl	8001960 <HAL_GetTick>
 8002a18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a1a:	e008      	b.n	8002a2e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a1c:	f7fe ffa0 	bl	8001960 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e087      	b.n	8002b3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a2e:	4b27      	ldr	r3, [pc, #156]	; (8002acc <HAL_RCC_OscConfig+0x470>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d1f0      	bne.n	8002a1c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	69da      	ldr	r2, [r3, #28]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6a1b      	ldr	r3, [r3, #32]
 8002a42:	431a      	orrs	r2, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a48:	019b      	lsls	r3, r3, #6
 8002a4a:	431a      	orrs	r2, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a50:	085b      	lsrs	r3, r3, #1
 8002a52:	3b01      	subs	r3, #1
 8002a54:	041b      	lsls	r3, r3, #16
 8002a56:	431a      	orrs	r2, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a5c:	061b      	lsls	r3, r3, #24
 8002a5e:	491b      	ldr	r1, [pc, #108]	; (8002acc <HAL_RCC_OscConfig+0x470>)
 8002a60:	4313      	orrs	r3, r2
 8002a62:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a64:	4b1b      	ldr	r3, [pc, #108]	; (8002ad4 <HAL_RCC_OscConfig+0x478>)
 8002a66:	2201      	movs	r2, #1
 8002a68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a6a:	f7fe ff79 	bl	8001960 <HAL_GetTick>
 8002a6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a70:	e008      	b.n	8002a84 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a72:	f7fe ff75 	bl	8001960 <HAL_GetTick>
 8002a76:	4602      	mov	r2, r0
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d901      	bls.n	8002a84 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a80:	2303      	movs	r3, #3
 8002a82:	e05c      	b.n	8002b3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a84:	4b11      	ldr	r3, [pc, #68]	; (8002acc <HAL_RCC_OscConfig+0x470>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d0f0      	beq.n	8002a72 <HAL_RCC_OscConfig+0x416>
 8002a90:	e054      	b.n	8002b3c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a92:	4b10      	ldr	r3, [pc, #64]	; (8002ad4 <HAL_RCC_OscConfig+0x478>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a98:	f7fe ff62 	bl	8001960 <HAL_GetTick>
 8002a9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a9e:	e008      	b.n	8002ab2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002aa0:	f7fe ff5e 	bl	8001960 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e045      	b.n	8002b3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ab2:	4b06      	ldr	r3, [pc, #24]	; (8002acc <HAL_RCC_OscConfig+0x470>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d1f0      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x444>
 8002abe:	e03d      	b.n	8002b3c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	699b      	ldr	r3, [r3, #24]
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d107      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e038      	b.n	8002b3e <HAL_RCC_OscConfig+0x4e2>
 8002acc:	40023800 	.word	0x40023800
 8002ad0:	40007000 	.word	0x40007000
 8002ad4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ad8:	4b1b      	ldr	r3, [pc, #108]	; (8002b48 <HAL_RCC_OscConfig+0x4ec>)
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	699b      	ldr	r3, [r3, #24]
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d028      	beq.n	8002b38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d121      	bne.n	8002b38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d11a      	bne.n	8002b38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b02:	68fa      	ldr	r2, [r7, #12]
 8002b04:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b08:	4013      	ands	r3, r2
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b0e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d111      	bne.n	8002b38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b1e:	085b      	lsrs	r3, r3, #1
 8002b20:	3b01      	subs	r3, #1
 8002b22:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d107      	bne.n	8002b38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b32:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d001      	beq.n	8002b3c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e000      	b.n	8002b3e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002b3c:	2300      	movs	r3, #0
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3718      	adds	r7, #24
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	40023800 	.word	0x40023800

08002b4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d101      	bne.n	8002b60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e0cc      	b.n	8002cfa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b60:	4b68      	ldr	r3, [pc, #416]	; (8002d04 <HAL_RCC_ClockConfig+0x1b8>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0307 	and.w	r3, r3, #7
 8002b68:	683a      	ldr	r2, [r7, #0]
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d90c      	bls.n	8002b88 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b6e:	4b65      	ldr	r3, [pc, #404]	; (8002d04 <HAL_RCC_ClockConfig+0x1b8>)
 8002b70:	683a      	ldr	r2, [r7, #0]
 8002b72:	b2d2      	uxtb	r2, r2
 8002b74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b76:	4b63      	ldr	r3, [pc, #396]	; (8002d04 <HAL_RCC_ClockConfig+0x1b8>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0307 	and.w	r3, r3, #7
 8002b7e:	683a      	ldr	r2, [r7, #0]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d001      	beq.n	8002b88 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e0b8      	b.n	8002cfa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0302 	and.w	r3, r3, #2
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d020      	beq.n	8002bd6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0304 	and.w	r3, r3, #4
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d005      	beq.n	8002bac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ba0:	4b59      	ldr	r3, [pc, #356]	; (8002d08 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	4a58      	ldr	r2, [pc, #352]	; (8002d08 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002baa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0308 	and.w	r3, r3, #8
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d005      	beq.n	8002bc4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bb8:	4b53      	ldr	r3, [pc, #332]	; (8002d08 <HAL_RCC_ClockConfig+0x1bc>)
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	4a52      	ldr	r2, [pc, #328]	; (8002d08 <HAL_RCC_ClockConfig+0x1bc>)
 8002bbe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002bc2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bc4:	4b50      	ldr	r3, [pc, #320]	; (8002d08 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	494d      	ldr	r1, [pc, #308]	; (8002d08 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0301 	and.w	r3, r3, #1
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d044      	beq.n	8002c6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d107      	bne.n	8002bfa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bea:	4b47      	ldr	r3, [pc, #284]	; (8002d08 <HAL_RCC_ClockConfig+0x1bc>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d119      	bne.n	8002c2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e07f      	b.n	8002cfa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d003      	beq.n	8002c0a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c06:	2b03      	cmp	r3, #3
 8002c08:	d107      	bne.n	8002c1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c0a:	4b3f      	ldr	r3, [pc, #252]	; (8002d08 <HAL_RCC_ClockConfig+0x1bc>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d109      	bne.n	8002c2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e06f      	b.n	8002cfa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c1a:	4b3b      	ldr	r3, [pc, #236]	; (8002d08 <HAL_RCC_ClockConfig+0x1bc>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0302 	and.w	r3, r3, #2
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d101      	bne.n	8002c2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e067      	b.n	8002cfa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c2a:	4b37      	ldr	r3, [pc, #220]	; (8002d08 <HAL_RCC_ClockConfig+0x1bc>)
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	f023 0203 	bic.w	r2, r3, #3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	4934      	ldr	r1, [pc, #208]	; (8002d08 <HAL_RCC_ClockConfig+0x1bc>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c3c:	f7fe fe90 	bl	8001960 <HAL_GetTick>
 8002c40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c42:	e00a      	b.n	8002c5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c44:	f7fe fe8c 	bl	8001960 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d901      	bls.n	8002c5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e04f      	b.n	8002cfa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c5a:	4b2b      	ldr	r3, [pc, #172]	; (8002d08 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f003 020c 	and.w	r2, r3, #12
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d1eb      	bne.n	8002c44 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c6c:	4b25      	ldr	r3, [pc, #148]	; (8002d04 <HAL_RCC_ClockConfig+0x1b8>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0307 	and.w	r3, r3, #7
 8002c74:	683a      	ldr	r2, [r7, #0]
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d20c      	bcs.n	8002c94 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c7a:	4b22      	ldr	r3, [pc, #136]	; (8002d04 <HAL_RCC_ClockConfig+0x1b8>)
 8002c7c:	683a      	ldr	r2, [r7, #0]
 8002c7e:	b2d2      	uxtb	r2, r2
 8002c80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c82:	4b20      	ldr	r3, [pc, #128]	; (8002d04 <HAL_RCC_ClockConfig+0x1b8>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0307 	and.w	r3, r3, #7
 8002c8a:	683a      	ldr	r2, [r7, #0]
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d001      	beq.n	8002c94 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e032      	b.n	8002cfa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0304 	and.w	r3, r3, #4
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d008      	beq.n	8002cb2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ca0:	4b19      	ldr	r3, [pc, #100]	; (8002d08 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	4916      	ldr	r1, [pc, #88]	; (8002d08 <HAL_RCC_ClockConfig+0x1bc>)
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0308 	and.w	r3, r3, #8
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d009      	beq.n	8002cd2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cbe:	4b12      	ldr	r3, [pc, #72]	; (8002d08 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	691b      	ldr	r3, [r3, #16]
 8002cca:	00db      	lsls	r3, r3, #3
 8002ccc:	490e      	ldr	r1, [pc, #56]	; (8002d08 <HAL_RCC_ClockConfig+0x1bc>)
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002cd2:	f000 f821 	bl	8002d18 <HAL_RCC_GetSysClockFreq>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	4b0b      	ldr	r3, [pc, #44]	; (8002d08 <HAL_RCC_ClockConfig+0x1bc>)
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	091b      	lsrs	r3, r3, #4
 8002cde:	f003 030f 	and.w	r3, r3, #15
 8002ce2:	490a      	ldr	r1, [pc, #40]	; (8002d0c <HAL_RCC_ClockConfig+0x1c0>)
 8002ce4:	5ccb      	ldrb	r3, [r1, r3]
 8002ce6:	fa22 f303 	lsr.w	r3, r2, r3
 8002cea:	4a09      	ldr	r2, [pc, #36]	; (8002d10 <HAL_RCC_ClockConfig+0x1c4>)
 8002cec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002cee:	4b09      	ldr	r3, [pc, #36]	; (8002d14 <HAL_RCC_ClockConfig+0x1c8>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7fe fc28 	bl	8001548 <HAL_InitTick>

  return HAL_OK;
 8002cf8:	2300      	movs	r3, #0
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3710      	adds	r7, #16
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	40023c00 	.word	0x40023c00
 8002d08:	40023800 	.word	0x40023800
 8002d0c:	08010ef0 	.word	0x08010ef0
 8002d10:	20000000 	.word	0x20000000
 8002d14:	20000004 	.word	0x20000004

08002d18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d1c:	b090      	sub	sp, #64	; 0x40
 8002d1e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002d20:	2300      	movs	r3, #0
 8002d22:	637b      	str	r3, [r7, #52]	; 0x34
 8002d24:	2300      	movs	r3, #0
 8002d26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d28:	2300      	movs	r3, #0
 8002d2a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d30:	4b59      	ldr	r3, [pc, #356]	; (8002e98 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	f003 030c 	and.w	r3, r3, #12
 8002d38:	2b08      	cmp	r3, #8
 8002d3a:	d00d      	beq.n	8002d58 <HAL_RCC_GetSysClockFreq+0x40>
 8002d3c:	2b08      	cmp	r3, #8
 8002d3e:	f200 80a1 	bhi.w	8002e84 <HAL_RCC_GetSysClockFreq+0x16c>
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d002      	beq.n	8002d4c <HAL_RCC_GetSysClockFreq+0x34>
 8002d46:	2b04      	cmp	r3, #4
 8002d48:	d003      	beq.n	8002d52 <HAL_RCC_GetSysClockFreq+0x3a>
 8002d4a:	e09b      	b.n	8002e84 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d4c:	4b53      	ldr	r3, [pc, #332]	; (8002e9c <HAL_RCC_GetSysClockFreq+0x184>)
 8002d4e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002d50:	e09b      	b.n	8002e8a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d52:	4b53      	ldr	r3, [pc, #332]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002d54:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002d56:	e098      	b.n	8002e8a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d58:	4b4f      	ldr	r3, [pc, #316]	; (8002e98 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d60:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d62:	4b4d      	ldr	r3, [pc, #308]	; (8002e98 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d028      	beq.n	8002dc0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d6e:	4b4a      	ldr	r3, [pc, #296]	; (8002e98 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	099b      	lsrs	r3, r3, #6
 8002d74:	2200      	movs	r2, #0
 8002d76:	623b      	str	r3, [r7, #32]
 8002d78:	627a      	str	r2, [r7, #36]	; 0x24
 8002d7a:	6a3b      	ldr	r3, [r7, #32]
 8002d7c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002d80:	2100      	movs	r1, #0
 8002d82:	4b47      	ldr	r3, [pc, #284]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002d84:	fb03 f201 	mul.w	r2, r3, r1
 8002d88:	2300      	movs	r3, #0
 8002d8a:	fb00 f303 	mul.w	r3, r0, r3
 8002d8e:	4413      	add	r3, r2
 8002d90:	4a43      	ldr	r2, [pc, #268]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002d92:	fba0 1202 	umull	r1, r2, r0, r2
 8002d96:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d98:	460a      	mov	r2, r1
 8002d9a:	62ba      	str	r2, [r7, #40]	; 0x28
 8002d9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d9e:	4413      	add	r3, r2
 8002da0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002da2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002da4:	2200      	movs	r2, #0
 8002da6:	61bb      	str	r3, [r7, #24]
 8002da8:	61fa      	str	r2, [r7, #28]
 8002daa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002dae:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002db2:	f7fd fa09 	bl	80001c8 <__aeabi_uldivmod>
 8002db6:	4602      	mov	r2, r0
 8002db8:	460b      	mov	r3, r1
 8002dba:	4613      	mov	r3, r2
 8002dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002dbe:	e053      	b.n	8002e68 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dc0:	4b35      	ldr	r3, [pc, #212]	; (8002e98 <HAL_RCC_GetSysClockFreq+0x180>)
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	099b      	lsrs	r3, r3, #6
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	613b      	str	r3, [r7, #16]
 8002dca:	617a      	str	r2, [r7, #20]
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002dd2:	f04f 0b00 	mov.w	fp, #0
 8002dd6:	4652      	mov	r2, sl
 8002dd8:	465b      	mov	r3, fp
 8002dda:	f04f 0000 	mov.w	r0, #0
 8002dde:	f04f 0100 	mov.w	r1, #0
 8002de2:	0159      	lsls	r1, r3, #5
 8002de4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002de8:	0150      	lsls	r0, r2, #5
 8002dea:	4602      	mov	r2, r0
 8002dec:	460b      	mov	r3, r1
 8002dee:	ebb2 080a 	subs.w	r8, r2, sl
 8002df2:	eb63 090b 	sbc.w	r9, r3, fp
 8002df6:	f04f 0200 	mov.w	r2, #0
 8002dfa:	f04f 0300 	mov.w	r3, #0
 8002dfe:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002e02:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002e06:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002e0a:	ebb2 0408 	subs.w	r4, r2, r8
 8002e0e:	eb63 0509 	sbc.w	r5, r3, r9
 8002e12:	f04f 0200 	mov.w	r2, #0
 8002e16:	f04f 0300 	mov.w	r3, #0
 8002e1a:	00eb      	lsls	r3, r5, #3
 8002e1c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e20:	00e2      	lsls	r2, r4, #3
 8002e22:	4614      	mov	r4, r2
 8002e24:	461d      	mov	r5, r3
 8002e26:	eb14 030a 	adds.w	r3, r4, sl
 8002e2a:	603b      	str	r3, [r7, #0]
 8002e2c:	eb45 030b 	adc.w	r3, r5, fp
 8002e30:	607b      	str	r3, [r7, #4]
 8002e32:	f04f 0200 	mov.w	r2, #0
 8002e36:	f04f 0300 	mov.w	r3, #0
 8002e3a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e3e:	4629      	mov	r1, r5
 8002e40:	028b      	lsls	r3, r1, #10
 8002e42:	4621      	mov	r1, r4
 8002e44:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e48:	4621      	mov	r1, r4
 8002e4a:	028a      	lsls	r2, r1, #10
 8002e4c:	4610      	mov	r0, r2
 8002e4e:	4619      	mov	r1, r3
 8002e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e52:	2200      	movs	r2, #0
 8002e54:	60bb      	str	r3, [r7, #8]
 8002e56:	60fa      	str	r2, [r7, #12]
 8002e58:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e5c:	f7fd f9b4 	bl	80001c8 <__aeabi_uldivmod>
 8002e60:	4602      	mov	r2, r0
 8002e62:	460b      	mov	r3, r1
 8002e64:	4613      	mov	r3, r2
 8002e66:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e68:	4b0b      	ldr	r3, [pc, #44]	; (8002e98 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	0c1b      	lsrs	r3, r3, #16
 8002e6e:	f003 0303 	and.w	r3, r3, #3
 8002e72:	3301      	adds	r3, #1
 8002e74:	005b      	lsls	r3, r3, #1
 8002e76:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002e78:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e80:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002e82:	e002      	b.n	8002e8a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e84:	4b05      	ldr	r3, [pc, #20]	; (8002e9c <HAL_RCC_GetSysClockFreq+0x184>)
 8002e86:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002e88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3740      	adds	r7, #64	; 0x40
 8002e90:	46bd      	mov	sp, r7
 8002e92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e96:	bf00      	nop
 8002e98:	40023800 	.word	0x40023800
 8002e9c:	00f42400 	.word	0x00f42400
 8002ea0:	017d7840 	.word	0x017d7840

08002ea4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ea8:	4b03      	ldr	r3, [pc, #12]	; (8002eb8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr
 8002eb6:	bf00      	nop
 8002eb8:	20000000 	.word	0x20000000

08002ebc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ec0:	f7ff fff0 	bl	8002ea4 <HAL_RCC_GetHCLKFreq>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	4b05      	ldr	r3, [pc, #20]	; (8002edc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	0a9b      	lsrs	r3, r3, #10
 8002ecc:	f003 0307 	and.w	r3, r3, #7
 8002ed0:	4903      	ldr	r1, [pc, #12]	; (8002ee0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ed2:	5ccb      	ldrb	r3, [r1, r3]
 8002ed4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	40023800 	.word	0x40023800
 8002ee0:	08010f00 	.word	0x08010f00

08002ee4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	220f      	movs	r2, #15
 8002ef2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002ef4:	4b12      	ldr	r3, [pc, #72]	; (8002f40 <HAL_RCC_GetClockConfig+0x5c>)
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	f003 0203 	and.w	r2, r3, #3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002f00:	4b0f      	ldr	r3, [pc, #60]	; (8002f40 <HAL_RCC_GetClockConfig+0x5c>)
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002f0c:	4b0c      	ldr	r3, [pc, #48]	; (8002f40 <HAL_RCC_GetClockConfig+0x5c>)
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002f18:	4b09      	ldr	r3, [pc, #36]	; (8002f40 <HAL_RCC_GetClockConfig+0x5c>)
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	08db      	lsrs	r3, r3, #3
 8002f1e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002f26:	4b07      	ldr	r3, [pc, #28]	; (8002f44 <HAL_RCC_GetClockConfig+0x60>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0207 	and.w	r2, r3, #7
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	601a      	str	r2, [r3, #0]
}
 8002f32:	bf00      	nop
 8002f34:	370c      	adds	r7, #12
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop
 8002f40:	40023800 	.word	0x40023800
 8002f44:	40023c00 	.word	0x40023c00

08002f48 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d101      	bne.n	8002f5a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e022      	b.n	8002fa0 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d105      	bne.n	8002f72 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f7fe f91b 	bl	80011a8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2203      	movs	r2, #3
 8002f76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f000 f814 	bl	8002fa8 <HAL_SD_InitCard>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d001      	beq.n	8002f8a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e00a      	b.n	8002fa0 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2201      	movs	r2, #1
 8002f9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002f9e:	2300      	movs	r3, #0
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3708      	adds	r7, #8
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002fa8:	b5b0      	push	{r4, r5, r7, lr}
 8002faa:	b08e      	sub	sp, #56	; 0x38
 8002fac:	af04      	add	r7, sp, #16
 8002fae:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8002fc4:	2376      	movs	r3, #118	; 0x76
 8002fc6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681d      	ldr	r5, [r3, #0]
 8002fcc:	466c      	mov	r4, sp
 8002fce:	f107 0314 	add.w	r3, r7, #20
 8002fd2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002fd6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002fda:	f107 0308 	add.w	r3, r7, #8
 8002fde:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002fe0:	4628      	mov	r0, r5
 8002fe2:	f002 fead 	bl	8005d40 <SDIO_Init>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8002fec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d001      	beq.n	8002ff8 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e04f      	b.n	8003098 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8002ff8:	4b29      	ldr	r3, [pc, #164]	; (80030a0 <HAL_SD_InitCard+0xf8>)
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4618      	mov	r0, r3
 8003004:	f002 fee5 	bl	8005dd2 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8003008:	4b25      	ldr	r3, [pc, #148]	; (80030a0 <HAL_SD_InitCard+0xf8>)
 800300a:	2201      	movs	r2, #1
 800300c:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800300e:	2002      	movs	r0, #2
 8003010:	f7fe fcb2 	bl	8001978 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f001 f805 	bl	8004024 <SD_PowerON>
 800301a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800301c:	6a3b      	ldr	r3, [r7, #32]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d00b      	beq.n	800303a <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2201      	movs	r2, #1
 8003026:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800302e:	6a3b      	ldr	r3, [r7, #32]
 8003030:	431a      	orrs	r2, r3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e02e      	b.n	8003098 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f000 ff24 	bl	8003e88 <SD_InitCard>
 8003040:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003042:	6a3b      	ldr	r3, [r7, #32]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d00b      	beq.n	8003060 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003054:	6a3b      	ldr	r3, [r7, #32]
 8003056:	431a      	orrs	r2, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e01b      	b.n	8003098 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003068:	4618      	mov	r0, r3
 800306a:	f002 ff44 	bl	8005ef6 <SDMMC_CmdBlockLength>
 800306e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003070:	6a3b      	ldr	r3, [r7, #32]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d00f      	beq.n	8003096 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a0a      	ldr	r2, [pc, #40]	; (80030a4 <HAL_SD_InitCard+0xfc>)
 800307c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003082:	6a3b      	ldr	r3, [r7, #32]
 8003084:	431a      	orrs	r2, r3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2201      	movs	r2, #1
 800308e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e000      	b.n	8003098 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8003096:	2300      	movs	r3, #0
}
 8003098:	4618      	mov	r0, r3
 800309a:	3728      	adds	r7, #40	; 0x28
 800309c:	46bd      	mov	sp, r7
 800309e:	bdb0      	pop	{r4, r5, r7, pc}
 80030a0:	422580a0 	.word	0x422580a0
 80030a4:	004005ff 	.word	0x004005ff

080030a8 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b08c      	sub	sp, #48	; 0x30
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	60f8      	str	r0, [r7, #12]
 80030b0:	60b9      	str	r1, [r7, #8]
 80030b2:	607a      	str	r2, [r7, #4]
 80030b4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d107      	bne.n	80030d0 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e0c0      	b.n	8003252 <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	2b01      	cmp	r3, #1
 80030da:	f040 80b9 	bne.w	8003250 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2200      	movs	r2, #0
 80030e2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80030e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	441a      	add	r2, r3
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d907      	bls.n	8003102 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030f6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e0a7      	b.n	8003252 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2203      	movs	r2, #3
 8003106:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	2200      	movs	r2, #0
 8003110:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003118:	68fa      	ldr	r2, [r7, #12]
 800311a:	6812      	ldr	r2, [r2, #0]
 800311c:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8003120:	f043 0302 	orr.w	r3, r3, #2
 8003124:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312a:	4a4c      	ldr	r2, [pc, #304]	; (800325c <HAL_SD_ReadBlocks_DMA+0x1b4>)
 800312c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003132:	4a4b      	ldr	r2, [pc, #300]	; (8003260 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8003134:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313a:	2200      	movs	r2, #0
 800313c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003142:	2200      	movs	r2, #0
 8003144:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003156:	689a      	ldr	r2, [r3, #8]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	430a      	orrs	r2, r1
 8003160:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	3380      	adds	r3, #128	; 0x80
 800316c:	4619      	mov	r1, r3
 800316e:	68ba      	ldr	r2, [r7, #8]
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	025b      	lsls	r3, r3, #9
 8003174:	089b      	lsrs	r3, r3, #2
 8003176:	f7fe fdb3 	bl	8001ce0 <HAL_DMA_Start_IT>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d017      	beq.n	80031b0 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800318e:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a33      	ldr	r2, [pc, #204]	; (8003264 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8003196:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800319c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e050      	b.n	8003252 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80031b0:	4b2d      	ldr	r3, [pc, #180]	; (8003268 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80031b2:	2201      	movs	r2, #1
 80031b4:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d002      	beq.n	80031c4 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 80031be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031c0:	025b      	lsls	r3, r3, #9
 80031c2:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80031c4:	f04f 33ff 	mov.w	r3, #4294967295
 80031c8:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	025b      	lsls	r3, r3, #9
 80031ce:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80031d0:	2390      	movs	r3, #144	; 0x90
 80031d2:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80031d4:	2302      	movs	r3, #2
 80031d6:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80031d8:	2300      	movs	r3, #0
 80031da:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80031dc:	2301      	movs	r3, #1
 80031de:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f107 0210 	add.w	r2, r7, #16
 80031e8:	4611      	mov	r1, r2
 80031ea:	4618      	mov	r0, r3
 80031ec:	f002 fe57 	bl	8005e9e <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d90a      	bls.n	800320c <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2282      	movs	r2, #130	; 0x82
 80031fa:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003202:	4618      	mov	r0, r3
 8003204:	f002 febb 	bl	8005f7e <SDMMC_CmdReadMultiBlock>
 8003208:	62f8      	str	r0, [r7, #44]	; 0x2c
 800320a:	e009      	b.n	8003220 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2281      	movs	r2, #129	; 0x81
 8003210:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003218:	4618      	mov	r0, r3
 800321a:	f002 fe8e 	bl	8005f3a <SDMMC_CmdReadSingleBlock>
 800321e:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8003220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003222:	2b00      	cmp	r3, #0
 8003224:	d012      	beq.n	800324c <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a0e      	ldr	r2, [pc, #56]	; (8003264 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800322c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003234:	431a      	orrs	r2, r3
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2201      	movs	r2, #1
 800323e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2200      	movs	r2, #0
 8003246:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e002      	b.n	8003252 <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 800324c:	2300      	movs	r3, #0
 800324e:	e000      	b.n	8003252 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8003250:	2302      	movs	r3, #2
  }
}
 8003252:	4618      	mov	r0, r3
 8003254:	3730      	adds	r7, #48	; 0x30
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	08003c97 	.word	0x08003c97
 8003260:	08003d09 	.word	0x08003d09
 8003264:	004005ff 	.word	0x004005ff
 8003268:	4225858c 	.word	0x4225858c

0800326c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b08c      	sub	sp, #48	; 0x30
 8003270:	af00      	add	r7, sp, #0
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	60b9      	str	r1, [r7, #8]
 8003276:	607a      	str	r2, [r7, #4]
 8003278:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d107      	bne.n	8003294 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003288:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e0c5      	b.n	8003420 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800329a:	b2db      	uxtb	r3, r3
 800329c:	2b01      	cmp	r3, #1
 800329e:	f040 80be 	bne.w	800341e <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2200      	movs	r2, #0
 80032a6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80032a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	441a      	add	r2, r3
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d907      	bls.n	80032c6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ba:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e0ac      	b.n	8003420 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2203      	movs	r2, #3
 80032ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	2200      	movs	r2, #0
 80032d4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032dc:	68fa      	ldr	r2, [r7, #12]
 80032de:	6812      	ldr	r2, [r2, #0]
 80032e0:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 80032e4:	f043 0302 	orr.w	r3, r3, #2
 80032e8:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032ee:	4a4e      	ldr	r2, [pc, #312]	; (8003428 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 80032f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032f6:	4a4d      	ldr	r2, [pc, #308]	; (800342c <HAL_SD_WriteBlocks_DMA+0x1c0>)
 80032f8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032fe:	2200      	movs	r2, #0
 8003300:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003306:	2b01      	cmp	r3, #1
 8003308:	d002      	beq.n	8003310 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 800330a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800330c:	025b      	lsls	r3, r3, #9
 800330e:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	2b01      	cmp	r3, #1
 8003314:	d90a      	bls.n	800332c <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	22a0      	movs	r2, #160	; 0xa0
 800331a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003322:	4618      	mov	r0, r3
 8003324:	f002 fe6f 	bl	8006006 <SDMMC_CmdWriteMultiBlock>
 8003328:	62f8      	str	r0, [r7, #44]	; 0x2c
 800332a:	e009      	b.n	8003340 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2290      	movs	r2, #144	; 0x90
 8003330:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003338:	4618      	mov	r0, r3
 800333a:	f002 fe42 	bl	8005fc2 <SDMMC_CmdWriteSingleBlock>
 800333e:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003342:	2b00      	cmp	r3, #0
 8003344:	d012      	beq.n	800336c <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a39      	ldr	r2, [pc, #228]	; (8003430 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800334c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003354:	431a      	orrs	r2, r3
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2201      	movs	r2, #1
 800335e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2200      	movs	r2, #0
 8003366:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e059      	b.n	8003420 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800336c:	4b31      	ldr	r3, [pc, #196]	; (8003434 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800336e:	2201      	movs	r2, #1
 8003370:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003376:	2240      	movs	r2, #64	; 0x40
 8003378:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800338a:	689a      	ldr	r2, [r3, #8]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	430a      	orrs	r2, r1
 8003394:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800339a:	68b9      	ldr	r1, [r7, #8]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	3380      	adds	r3, #128	; 0x80
 80033a2:	461a      	mov	r2, r3
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	025b      	lsls	r3, r3, #9
 80033a8:	089b      	lsrs	r3, r3, #2
 80033aa:	f7fe fc99 	bl	8001ce0 <HAL_DMA_Start_IT>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d01c      	beq.n	80033ee <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ba:	68fa      	ldr	r2, [r7, #12]
 80033bc:	6812      	ldr	r2, [r2, #0]
 80033be:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 80033c2:	f023 0302 	bic.w	r3, r3, #2
 80033c6:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a18      	ldr	r2, [pc, #96]	; (8003430 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80033ce:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2200      	movs	r2, #0
 80033e8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e018      	b.n	8003420 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80033ee:	f04f 33ff 	mov.w	r3, #4294967295
 80033f2:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	025b      	lsls	r3, r3, #9
 80033f8:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80033fa:	2390      	movs	r3, #144	; 0x90
 80033fc:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80033fe:	2300      	movs	r3, #0
 8003400:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003402:	2300      	movs	r3, #0
 8003404:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8003406:	2301      	movs	r3, #1
 8003408:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f107 0210 	add.w	r2, r7, #16
 8003412:	4611      	mov	r1, r2
 8003414:	4618      	mov	r0, r3
 8003416:	f002 fd42 	bl	8005e9e <SDIO_ConfigData>

      return HAL_OK;
 800341a:	2300      	movs	r3, #0
 800341c:	e000      	b.n	8003420 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 800341e:	2302      	movs	r3, #2
  }
}
 8003420:	4618      	mov	r0, r3
 8003422:	3730      	adds	r7, #48	; 0x30
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}
 8003428:	08003c6d 	.word	0x08003c6d
 800342c:	08003d09 	.word	0x08003d09
 8003430:	004005ff 	.word	0x004005ff
 8003434:	4225858c 	.word	0x4225858c

08003438 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003444:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800344c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003450:	2b00      	cmp	r3, #0
 8003452:	d008      	beq.n	8003466 <HAL_SD_IRQHandler+0x2e>
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f003 0308 	and.w	r3, r3, #8
 800345a:	2b00      	cmp	r3, #0
 800345c:	d003      	beq.n	8003466 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 ffff 	bl	8004462 <SD_Read_IT>
 8003464:	e165      	b.n	8003732 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800346c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003470:	2b00      	cmp	r3, #0
 8003472:	f000 808f 	beq.w	8003594 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800347e:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	6812      	ldr	r2, [r2, #0]
 800348a:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 800348e:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8003492:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f022 0201 	bic.w	r2, r2, #1
 80034a2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f003 0308 	and.w	r3, r3, #8
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d039      	beq.n	8003522 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	f003 0302 	and.w	r3, r3, #2
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d104      	bne.n	80034c2 <HAL_SD_IRQHandler+0x8a>
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	f003 0320 	and.w	r3, r3, #32
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d011      	beq.n	80034e6 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4618      	mov	r0, r3
 80034c8:	f002 fdc0 	bl	800604c <SDMMC_CmdStopTransfer>
 80034cc:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d008      	beq.n	80034e6 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	431a      	orrs	r2, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f000 f92f 	bl	8003744 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f240 523a 	movw	r2, #1338	; 0x53a
 80034ee:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	f003 0301 	and.w	r3, r3, #1
 8003504:	2b00      	cmp	r3, #0
 8003506:	d104      	bne.n	8003512 <HAL_SD_IRQHandler+0xda>
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f003 0302 	and.w	r3, r3, #2
 800350e:	2b00      	cmp	r3, #0
 8003510:	d003      	beq.n	800351a <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f003 fa2e 	bl	8006974 <HAL_SD_RxCpltCallback>
 8003518:	e10b      	b.n	8003732 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f003 fa20 	bl	8006960 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003520:	e107      	b.n	8003732 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003528:	2b00      	cmp	r3, #0
 800352a:	f000 8102 	beq.w	8003732 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	f003 0320 	and.w	r3, r3, #32
 8003534:	2b00      	cmp	r3, #0
 8003536:	d011      	beq.n	800355c <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4618      	mov	r0, r3
 800353e:	f002 fd85 	bl	800604c <SDMMC_CmdStopTransfer>
 8003542:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d008      	beq.n	800355c <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	431a      	orrs	r2, r3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f000 f8f4 	bl	8003744 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f003 0301 	and.w	r3, r3, #1
 8003562:	2b00      	cmp	r3, #0
 8003564:	f040 80e5 	bne.w	8003732 <HAL_SD_IRQHandler+0x2fa>
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f003 0302 	and.w	r3, r3, #2
 800356e:	2b00      	cmp	r3, #0
 8003570:	f040 80df 	bne.w	8003732 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f022 0208 	bic.w	r2, r2, #8
 8003582:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f003 f9e7 	bl	8006960 <HAL_SD_TxCpltCallback>
}
 8003592:	e0ce      	b.n	8003732 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800359a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d008      	beq.n	80035b4 <HAL_SD_IRQHandler+0x17c>
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	f003 0308 	and.w	r3, r3, #8
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d003      	beq.n	80035b4 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f000 ffa9 	bl	8004504 <SD_Write_IT>
 80035b2:	e0be      	b.n	8003732 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035ba:	f240 233a 	movw	r3, #570	; 0x23a
 80035be:	4013      	ands	r3, r2
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	f000 80b6 	beq.w	8003732 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035cc:	f003 0302 	and.w	r3, r3, #2
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d005      	beq.n	80035e0 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d8:	f043 0202 	orr.w	r2, r3, #2
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035e6:	f003 0308 	and.w	r3, r3, #8
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d005      	beq.n	80035fa <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f2:	f043 0208 	orr.w	r2, r3, #8
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003600:	f003 0320 	and.w	r3, r3, #32
 8003604:	2b00      	cmp	r3, #0
 8003606:	d005      	beq.n	8003614 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800360c:	f043 0220 	orr.w	r2, r3, #32
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800361a:	f003 0310 	and.w	r3, r3, #16
 800361e:	2b00      	cmp	r3, #0
 8003620:	d005      	beq.n	800362e <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003626:	f043 0210 	orr.w	r2, r3, #16
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003634:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003638:	2b00      	cmp	r3, #0
 800363a:	d005      	beq.n	8003648 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003640:	f043 0208 	orr.w	r2, r3, #8
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f240 723a 	movw	r2, #1850	; 0x73a
 8003650:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	6812      	ldr	r2, [r2, #0]
 800365c:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8003660:	f023 0302 	bic.w	r3, r3, #2
 8003664:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4618      	mov	r0, r3
 800366c:	f002 fcee 	bl	800604c <SDMMC_CmdStopTransfer>
 8003670:	4602      	mov	r2, r0
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003676:	431a      	orrs	r2, r3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f003 0308 	and.w	r3, r3, #8
 8003682:	2b00      	cmp	r3, #0
 8003684:	d00a      	beq.n	800369c <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2201      	movs	r2, #1
 800368a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f000 f855 	bl	8003744 <HAL_SD_ErrorCallback>
}
 800369a:	e04a      	b.n	8003732 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d045      	beq.n	8003732 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	f003 0310 	and.w	r3, r3, #16
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d104      	bne.n	80036ba <HAL_SD_IRQHandler+0x282>
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f003 0320 	and.w	r3, r3, #32
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d011      	beq.n	80036de <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036be:	4a1f      	ldr	r2, [pc, #124]	; (800373c <HAL_SD_IRQHandler+0x304>)
 80036c0:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036c6:	4618      	mov	r0, r3
 80036c8:	f7fe fb62 	bl	8001d90 <HAL_DMA_Abort_IT>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d02f      	beq.n	8003732 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036d6:	4618      	mov	r0, r3
 80036d8:	f000 fb68 	bl	8003dac <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80036dc:	e029      	b.n	8003732 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	f003 0301 	and.w	r3, r3, #1
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d104      	bne.n	80036f2 <HAL_SD_IRQHandler+0x2ba>
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f003 0302 	and.w	r3, r3, #2
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d011      	beq.n	8003716 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f6:	4a12      	ldr	r2, [pc, #72]	; (8003740 <HAL_SD_IRQHandler+0x308>)
 80036f8:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fe:	4618      	mov	r0, r3
 8003700:	f7fe fb46 	bl	8001d90 <HAL_DMA_Abort_IT>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d013      	beq.n	8003732 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370e:	4618      	mov	r0, r3
 8003710:	f000 fb83 	bl	8003e1a <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003714:	e00d      	b.n	8003732 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2200      	movs	r2, #0
 8003728:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f003 f90e 	bl	800694c <HAL_SD_AbortCallback>
}
 8003730:	e7ff      	b.n	8003732 <HAL_SD_IRQHandler+0x2fa>
 8003732:	bf00      	nop
 8003734:	3710      	adds	r7, #16
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	08003dad 	.word	0x08003dad
 8003740:	08003e1b 	.word	0x08003e1b

08003744 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800374c:	bf00      	nop
 800374e:	370c      	adds	r7, #12
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003766:	0f9b      	lsrs	r3, r3, #30
 8003768:	b2da      	uxtb	r2, r3
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003772:	0e9b      	lsrs	r3, r3, #26
 8003774:	b2db      	uxtb	r3, r3
 8003776:	f003 030f 	and.w	r3, r3, #15
 800377a:	b2da      	uxtb	r2, r3
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003784:	0e1b      	lsrs	r3, r3, #24
 8003786:	b2db      	uxtb	r3, r3
 8003788:	f003 0303 	and.w	r3, r3, #3
 800378c:	b2da      	uxtb	r2, r3
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003796:	0c1b      	lsrs	r3, r3, #16
 8003798:	b2da      	uxtb	r2, r3
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037a2:	0a1b      	lsrs	r3, r3, #8
 80037a4:	b2da      	uxtb	r2, r3
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037ae:	b2da      	uxtb	r2, r3
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037b8:	0d1b      	lsrs	r3, r3, #20
 80037ba:	b29a      	uxth	r2, r3
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037c4:	0c1b      	lsrs	r3, r3, #16
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	f003 030f 	and.w	r3, r3, #15
 80037cc:	b2da      	uxtb	r2, r3
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037d6:	0bdb      	lsrs	r3, r3, #15
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	f003 0301 	and.w	r3, r3, #1
 80037de:	b2da      	uxtb	r2, r3
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037e8:	0b9b      	lsrs	r3, r3, #14
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	f003 0301 	and.w	r3, r3, #1
 80037f0:	b2da      	uxtb	r2, r3
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037fa:	0b5b      	lsrs	r3, r3, #13
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	f003 0301 	and.w	r3, r3, #1
 8003802:	b2da      	uxtb	r2, r3
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800380c:	0b1b      	lsrs	r3, r3, #12
 800380e:	b2db      	uxtb	r3, r3
 8003810:	f003 0301 	and.w	r3, r3, #1
 8003814:	b2da      	uxtb	r2, r3
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	2200      	movs	r2, #0
 800381e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003824:	2b00      	cmp	r3, #0
 8003826:	d163      	bne.n	80038f0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800382c:	009a      	lsls	r2, r3, #2
 800382e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003832:	4013      	ands	r3, r2
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003838:	0f92      	lsrs	r2, r2, #30
 800383a:	431a      	orrs	r2, r3
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003844:	0edb      	lsrs	r3, r3, #27
 8003846:	b2db      	uxtb	r3, r3
 8003848:	f003 0307 	and.w	r3, r3, #7
 800384c:	b2da      	uxtb	r2, r3
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003856:	0e1b      	lsrs	r3, r3, #24
 8003858:	b2db      	uxtb	r3, r3
 800385a:	f003 0307 	and.w	r3, r3, #7
 800385e:	b2da      	uxtb	r2, r3
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003868:	0d5b      	lsrs	r3, r3, #21
 800386a:	b2db      	uxtb	r3, r3
 800386c:	f003 0307 	and.w	r3, r3, #7
 8003870:	b2da      	uxtb	r2, r3
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800387a:	0c9b      	lsrs	r3, r3, #18
 800387c:	b2db      	uxtb	r3, r3
 800387e:	f003 0307 	and.w	r3, r3, #7
 8003882:	b2da      	uxtb	r2, r3
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800388c:	0bdb      	lsrs	r3, r3, #15
 800388e:	b2db      	uxtb	r3, r3
 8003890:	f003 0307 	and.w	r3, r3, #7
 8003894:	b2da      	uxtb	r2, r3
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	691b      	ldr	r3, [r3, #16]
 800389e:	1c5a      	adds	r2, r3, #1
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	7e1b      	ldrb	r3, [r3, #24]
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	f003 0307 	and.w	r3, r3, #7
 80038ae:	3302      	adds	r3, #2
 80038b0:	2201      	movs	r2, #1
 80038b2:	fa02 f303 	lsl.w	r3, r2, r3
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80038ba:	fb03 f202 	mul.w	r2, r3, r2
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	7a1b      	ldrb	r3, [r3, #8]
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	f003 030f 	and.w	r3, r3, #15
 80038cc:	2201      	movs	r2, #1
 80038ce:	409a      	lsls	r2, r3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80038dc:	0a52      	lsrs	r2, r2, #9
 80038de:	fb03 f202 	mul.w	r2, r3, r2
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038ec:	661a      	str	r2, [r3, #96]	; 0x60
 80038ee:	e031      	b.n	8003954 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d11d      	bne.n	8003934 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038fc:	041b      	lsls	r3, r3, #16
 80038fe:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003906:	0c1b      	lsrs	r3, r3, #16
 8003908:	431a      	orrs	r2, r3
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	691b      	ldr	r3, [r3, #16]
 8003912:	3301      	adds	r3, #1
 8003914:	029a      	lsls	r2, r3, #10
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003928:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	661a      	str	r2, [r3, #96]	; 0x60
 8003932:	e00f      	b.n	8003954 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a58      	ldr	r2, [pc, #352]	; (8003a9c <HAL_SD_GetCardCSD+0x344>)
 800393a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003940:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2201      	movs	r2, #1
 800394c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e09d      	b.n	8003a90 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003958:	0b9b      	lsrs	r3, r3, #14
 800395a:	b2db      	uxtb	r3, r3
 800395c:	f003 0301 	and.w	r3, r3, #1
 8003960:	b2da      	uxtb	r2, r3
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800396a:	09db      	lsrs	r3, r3, #7
 800396c:	b2db      	uxtb	r3, r3
 800396e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003972:	b2da      	uxtb	r2, r3
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800397c:	b2db      	uxtb	r3, r3
 800397e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003982:	b2da      	uxtb	r2, r3
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800398c:	0fdb      	lsrs	r3, r3, #31
 800398e:	b2da      	uxtb	r2, r3
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003998:	0f5b      	lsrs	r3, r3, #29
 800399a:	b2db      	uxtb	r3, r3
 800399c:	f003 0303 	and.w	r3, r3, #3
 80039a0:	b2da      	uxtb	r2, r3
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039aa:	0e9b      	lsrs	r3, r3, #26
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	f003 0307 	and.w	r3, r3, #7
 80039b2:	b2da      	uxtb	r2, r3
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039bc:	0d9b      	lsrs	r3, r3, #22
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	f003 030f 	and.w	r3, r3, #15
 80039c4:	b2da      	uxtb	r2, r3
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ce:	0d5b      	lsrs	r3, r3, #21
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	f003 0301 	and.w	r3, r3, #1
 80039d6:	b2da      	uxtb	r2, r3
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ea:	0c1b      	lsrs	r3, r3, #16
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	f003 0301 	and.w	r3, r3, #1
 80039f2:	b2da      	uxtb	r2, r3
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039fe:	0bdb      	lsrs	r3, r3, #15
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	f003 0301 	and.w	r3, r3, #1
 8003a06:	b2da      	uxtb	r2, r3
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a12:	0b9b      	lsrs	r3, r3, #14
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	f003 0301 	and.w	r3, r3, #1
 8003a1a:	b2da      	uxtb	r2, r3
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a26:	0b5b      	lsrs	r3, r3, #13
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	f003 0301 	and.w	r3, r3, #1
 8003a2e:	b2da      	uxtb	r2, r3
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a3a:	0b1b      	lsrs	r3, r3, #12
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	f003 0301 	and.w	r3, r3, #1
 8003a42:	b2da      	uxtb	r2, r3
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a4e:	0a9b      	lsrs	r3, r3, #10
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	f003 0303 	and.w	r3, r3, #3
 8003a56:	b2da      	uxtb	r2, r3
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a62:	0a1b      	lsrs	r3, r3, #8
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	f003 0303 	and.w	r3, r3, #3
 8003a6a:	b2da      	uxtb	r2, r3
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a76:	085b      	lsrs	r3, r3, #1
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a7e:	b2da      	uxtb	r2, r3
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	2201      	movs	r2, #1
 8003a8a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8003a8e:	2300      	movs	r3, #0
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	370c      	adds	r7, #12
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr
 8003a9c:	004005ff 	.word	0x004005ff

08003aa0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b083      	sub	sp, #12
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8003aea:	2300      	movs	r3, #0
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	370c      	adds	r7, #12
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr

08003af8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8003af8:	b5b0      	push	{r4, r5, r7, lr}
 8003afa:	b08e      	sub	sp, #56	; 0x38
 8003afc:	af04      	add	r7, sp, #16
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8003b02:	2300      	movs	r3, #0
 8003b04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2203      	movs	r2, #3
 8003b0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b14:	2b03      	cmp	r3, #3
 8003b16:	d02e      	beq.n	8003b76 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b1e:	d106      	bne.n	8003b2e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b24:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	639a      	str	r2, [r3, #56]	; 0x38
 8003b2c:	e029      	b.n	8003b82 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b34:	d10a      	bne.n	8003b4c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f000 fb2a 	bl	8004190 <SD_WideBus_Enable>
 8003b3c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b42:	6a3b      	ldr	r3, [r7, #32]
 8003b44:	431a      	orrs	r2, r3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	639a      	str	r2, [r3, #56]	; 0x38
 8003b4a:	e01a      	b.n	8003b82 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d10a      	bne.n	8003b68 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f000 fb67 	bl	8004226 <SD_WideBus_Disable>
 8003b58:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b5e:	6a3b      	ldr	r3, [r7, #32]
 8003b60:	431a      	orrs	r2, r3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	639a      	str	r2, [r3, #56]	; 0x38
 8003b66:	e00c      	b.n	8003b82 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b6c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	639a      	str	r2, [r3, #56]	; 0x38
 8003b74:	e005      	b.n	8003b82 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b7a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d00b      	beq.n	8003ba2 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a26      	ldr	r2, [pc, #152]	; (8003c28 <HAL_SD_ConfigWideBusOperation+0x130>)
 8003b90:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2201      	movs	r2, #1
 8003b96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003ba0:	e01f      	b.n	8003be2 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	695b      	ldr	r3, [r3, #20]
 8003bbc:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	699b      	ldr	r3, [r3, #24]
 8003bc2:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681d      	ldr	r5, [r3, #0]
 8003bc8:	466c      	mov	r4, sp
 8003bca:	f107 0314 	add.w	r3, r7, #20
 8003bce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003bd2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003bd6:	f107 0308 	add.w	r3, r7, #8
 8003bda:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003bdc:	4628      	mov	r0, r5
 8003bde:	f002 f8af 	bl	8005d40 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003bea:	4618      	mov	r0, r3
 8003bec:	f002 f983 	bl	8005ef6 <SDMMC_CmdBlockLength>
 8003bf0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003bf2:	6a3b      	ldr	r3, [r7, #32]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d00c      	beq.n	8003c12 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a0a      	ldr	r2, [pc, #40]	; (8003c28 <HAL_SD_ConfigWideBusOperation+0x130>)
 8003bfe:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c04:	6a3b      	ldr	r3, [r7, #32]
 8003c06:	431a      	orrs	r2, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2201      	movs	r2, #1
 8003c16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8003c1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3728      	adds	r7, #40	; 0x28
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bdb0      	pop	{r4, r5, r7, pc}
 8003c26:	bf00      	nop
 8003c28:	004005ff 	.word	0x004005ff

08003c2c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b086      	sub	sp, #24
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8003c34:	2300      	movs	r3, #0
 8003c36:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8003c38:	f107 030c 	add.w	r3, r7, #12
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f000 fa7e 	bl	8004140 <SD_SendStatus>
 8003c44:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d005      	beq.n	8003c58 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	431a      	orrs	r2, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	0a5b      	lsrs	r3, r3, #9
 8003c5c:	f003 030f 	and.w	r3, r3, #15
 8003c60:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8003c62:	693b      	ldr	r3, [r7, #16]
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3718      	adds	r7, #24
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}

08003c6c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b085      	sub	sp, #20
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c78:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c88:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003c8a:	bf00      	nop
 8003c8c:	3714      	adds	r7, #20
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr

08003c96 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003c96:	b580      	push	{r7, lr}
 8003c98:	b084      	sub	sp, #16
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca2:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca8:	2b82      	cmp	r3, #130	; 0x82
 8003caa:	d111      	bne.n	8003cd0 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f002 f9cb 	bl	800604c <SDMMC_CmdStopTransfer>
 8003cb6:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d008      	beq.n	8003cd0 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	431a      	orrs	r2, r3
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8003cca:	68f8      	ldr	r0, [r7, #12]
 8003ccc:	f7ff fd3a 	bl	8003744 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f022 0208 	bic.w	r2, r2, #8
 8003cde:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f240 523a 	movw	r2, #1338	; 0x53a
 8003ce8:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2201      	movs	r2, #1
 8003cee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8003cf8:	68f8      	ldr	r0, [r7, #12]
 8003cfa:	f002 fe3b 	bl	8006974 <HAL_SD_RxCpltCallback>
#endif
}
 8003cfe:	bf00      	nop
 8003d00:	3710      	adds	r7, #16
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}
	...

08003d08 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b086      	sub	sp, #24
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d14:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f7fe f9e6 	bl	80020e8 <HAL_DMA_GetError>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b02      	cmp	r3, #2
 8003d20:	d03e      	beq.n	8003da0 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d28:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d30:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d002      	beq.n	8003d3e <SD_DMAError+0x36>
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d12d      	bne.n	8003d9a <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a19      	ldr	r2, [pc, #100]	; (8003da8 <SD_DMAError+0xa0>)
 8003d44:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8003d54:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d5a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8003d62:	6978      	ldr	r0, [r7, #20]
 8003d64:	f7ff ff62 	bl	8003c2c <HAL_SD_GetCardState>
 8003d68:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	2b06      	cmp	r3, #6
 8003d6e:	d002      	beq.n	8003d76 <SD_DMAError+0x6e>
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	2b05      	cmp	r3, #5
 8003d74:	d10a      	bne.n	8003d8c <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f002 f966 	bl	800604c <SDMMC_CmdStopTransfer>
 8003d80:	4602      	mov	r2, r0
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d86:	431a      	orrs	r2, r3
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	2200      	movs	r2, #0
 8003d98:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8003d9a:	6978      	ldr	r0, [r7, #20]
 8003d9c:	f7ff fcd2 	bl	8003744 <HAL_SD_ErrorCallback>
#endif
  }
}
 8003da0:	bf00      	nop
 8003da2:	3718      	adds	r7, #24
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	004005ff 	.word	0x004005ff

08003dac <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b084      	sub	sp, #16
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db8:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f240 523a 	movw	r2, #1338	; 0x53a
 8003dc2:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8003dc4:	68f8      	ldr	r0, [r7, #12]
 8003dc6:	f7ff ff31 	bl	8003c2c <HAL_SD_GetCardState>
 8003dca:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	2b06      	cmp	r3, #6
 8003dde:	d002      	beq.n	8003de6 <SD_DMATxAbort+0x3a>
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	2b05      	cmp	r3, #5
 8003de4:	d10a      	bne.n	8003dfc <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4618      	mov	r0, r3
 8003dec:	f002 f92e 	bl	800604c <SDMMC_CmdStopTransfer>
 8003df0:	4602      	mov	r2, r0
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df6:	431a      	orrs	r2, r3
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d103      	bne.n	8003e0c <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8003e04:	68f8      	ldr	r0, [r7, #12]
 8003e06:	f002 fda1 	bl	800694c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8003e0a:	e002      	b.n	8003e12 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8003e0c:	68f8      	ldr	r0, [r7, #12]
 8003e0e:	f7ff fc99 	bl	8003744 <HAL_SD_ErrorCallback>
}
 8003e12:	bf00      	nop
 8003e14:	3710      	adds	r7, #16
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}

08003e1a <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8003e1a:	b580      	push	{r7, lr}
 8003e1c:	b084      	sub	sp, #16
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e26:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f240 523a 	movw	r2, #1338	; 0x53a
 8003e30:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8003e32:	68f8      	ldr	r0, [r7, #12]
 8003e34:	f7ff fefa 	bl	8003c2c <HAL_SD_GetCardState>
 8003e38:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2200      	movs	r2, #0
 8003e46:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	2b06      	cmp	r3, #6
 8003e4c:	d002      	beq.n	8003e54 <SD_DMARxAbort+0x3a>
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	2b05      	cmp	r3, #5
 8003e52:	d10a      	bne.n	8003e6a <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f002 f8f7 	bl	800604c <SDMMC_CmdStopTransfer>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e64:	431a      	orrs	r2, r3
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d103      	bne.n	8003e7a <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8003e72:	68f8      	ldr	r0, [r7, #12]
 8003e74:	f002 fd6a 	bl	800694c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8003e78:	e002      	b.n	8003e80 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8003e7a:	68f8      	ldr	r0, [r7, #12]
 8003e7c:	f7ff fc62 	bl	8003744 <HAL_SD_ErrorCallback>
}
 8003e80:	bf00      	nop
 8003e82:	3710      	adds	r7, #16
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}

08003e88 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003e88:	b5b0      	push	{r4, r5, r7, lr}
 8003e8a:	b094      	sub	sp, #80	; 0x50
 8003e8c:	af04      	add	r7, sp, #16
 8003e8e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8003e90:	2301      	movs	r3, #1
 8003e92:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f001 ffa8 	bl	8005dee <SDIO_GetPowerState>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d102      	bne.n	8003eaa <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003ea4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003ea8:	e0b8      	b.n	800401c <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eae:	2b03      	cmp	r3, #3
 8003eb0:	d02f      	beq.n	8003f12 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f002 f9d2 	bl	8006260 <SDMMC_CmdSendCID>
 8003ebc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003ebe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d001      	beq.n	8003ec8 <SD_InitCard+0x40>
    {
      return errorstate;
 8003ec4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ec6:	e0a9      	b.n	800401c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	2100      	movs	r1, #0
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f001 ffd2 	bl	8005e78 <SDIO_GetResponse>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	2104      	movs	r1, #4
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f001 ffc9 	bl	8005e78 <SDIO_GetResponse>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	2108      	movs	r1, #8
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f001 ffc0 	bl	8005e78 <SDIO_GetResponse>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	210c      	movs	r1, #12
 8003f04:	4618      	mov	r0, r3
 8003f06:	f001 ffb7 	bl	8005e78 <SDIO_GetResponse>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f16:	2b03      	cmp	r3, #3
 8003f18:	d00d      	beq.n	8003f36 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f107 020e 	add.w	r2, r7, #14
 8003f22:	4611      	mov	r1, r2
 8003f24:	4618      	mov	r0, r3
 8003f26:	f002 f9d8 	bl	80062da <SDMMC_CmdSetRelAdd>
 8003f2a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003f2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d001      	beq.n	8003f36 <SD_InitCard+0xae>
    {
      return errorstate;
 8003f32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f34:	e072      	b.n	800401c <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f3a:	2b03      	cmp	r3, #3
 8003f3c:	d036      	beq.n	8003fac <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8003f3e:	89fb      	ldrh	r3, [r7, #14]
 8003f40:	461a      	mov	r2, r3
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f4e:	041b      	lsls	r3, r3, #16
 8003f50:	4619      	mov	r1, r3
 8003f52:	4610      	mov	r0, r2
 8003f54:	f002 f9a2 	bl	800629c <SDMMC_CmdSendCSD>
 8003f58:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003f5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d001      	beq.n	8003f64 <SD_InitCard+0xdc>
    {
      return errorstate;
 8003f60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f62:	e05b      	b.n	800401c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	2100      	movs	r1, #0
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f001 ff84 	bl	8005e78 <SDIO_GetResponse>
 8003f70:	4602      	mov	r2, r0
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2104      	movs	r1, #4
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f001 ff7b 	bl	8005e78 <SDIO_GetResponse>
 8003f82:	4602      	mov	r2, r0
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	2108      	movs	r1, #8
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f001 ff72 	bl	8005e78 <SDIO_GetResponse>
 8003f94:	4602      	mov	r2, r0
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	210c      	movs	r1, #12
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f001 ff69 	bl	8005e78 <SDIO_GetResponse>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	2104      	movs	r1, #4
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f001 ff60 	bl	8005e78 <SDIO_GetResponse>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	0d1a      	lsrs	r2, r3, #20
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8003fc0:	f107 0310 	add.w	r3, r7, #16
 8003fc4:	4619      	mov	r1, r3
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f7ff fbc6 	bl	8003758 <HAL_SD_GetCardCSD>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d002      	beq.n	8003fd8 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003fd2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003fd6:	e021      	b.n	800401c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6819      	ldr	r1, [r3, #0]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fe0:	041b      	lsls	r3, r3, #16
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	461c      	mov	r4, r3
 8003fe6:	4615      	mov	r5, r2
 8003fe8:	4622      	mov	r2, r4
 8003fea:	462b      	mov	r3, r5
 8003fec:	4608      	mov	r0, r1
 8003fee:	f002 f84f 	bl	8006090 <SDMMC_CmdSelDesel>
 8003ff2:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8003ff4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d001      	beq.n	8003ffe <SD_InitCard+0x176>
  {
    return errorstate;
 8003ffa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ffc:	e00e      	b.n	800401c <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681d      	ldr	r5, [r3, #0]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	466c      	mov	r4, sp
 8004006:	f103 0210 	add.w	r2, r3, #16
 800400a:	ca07      	ldmia	r2, {r0, r1, r2}
 800400c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004010:	3304      	adds	r3, #4
 8004012:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004014:	4628      	mov	r0, r5
 8004016:	f001 fe93 	bl	8005d40 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800401a:	2300      	movs	r3, #0
}
 800401c:	4618      	mov	r0, r3
 800401e:	3740      	adds	r7, #64	; 0x40
 8004020:	46bd      	mov	sp, r7
 8004022:	bdb0      	pop	{r4, r5, r7, pc}

08004024 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b086      	sub	sp, #24
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800402c:	2300      	movs	r3, #0
 800402e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8004030:	2300      	movs	r3, #0
 8004032:	617b      	str	r3, [r7, #20]
 8004034:	2300      	movs	r3, #0
 8004036:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4618      	mov	r0, r3
 800403e:	f002 f84a 	bl	80060d6 <SDMMC_CmdGoIdleState>
 8004042:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d001      	beq.n	800404e <SD_PowerON+0x2a>
  {
    return errorstate;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	e072      	b.n	8004134 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4618      	mov	r0, r3
 8004054:	f002 f85d 	bl	8006112 <SDMMC_CmdOperCond>
 8004058:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d00d      	beq.n	800407c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4618      	mov	r0, r3
 800406c:	f002 f833 	bl	80060d6 <SDMMC_CmdGoIdleState>
 8004070:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d004      	beq.n	8004082 <SD_PowerON+0x5e>
    {
      return errorstate;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	e05b      	b.n	8004134 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004086:	2b01      	cmp	r3, #1
 8004088:	d137      	bne.n	80040fa <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	2100      	movs	r1, #0
 8004090:	4618      	mov	r0, r3
 8004092:	f002 f85d 	bl	8006150 <SDMMC_CmdAppCommand>
 8004096:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d02d      	beq.n	80040fa <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800409e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80040a2:	e047      	b.n	8004134 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	2100      	movs	r1, #0
 80040aa:	4618      	mov	r0, r3
 80040ac:	f002 f850 	bl	8006150 <SDMMC_CmdAppCommand>
 80040b0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d001      	beq.n	80040bc <SD_PowerON+0x98>
    {
      return errorstate;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	e03b      	b.n	8004134 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	491e      	ldr	r1, [pc, #120]	; (800413c <SD_PowerON+0x118>)
 80040c2:	4618      	mov	r0, r3
 80040c4:	f002 f866 	bl	8006194 <SDMMC_CmdAppOperCommand>
 80040c8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d002      	beq.n	80040d6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80040d0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80040d4:	e02e      	b.n	8004134 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	2100      	movs	r1, #0
 80040dc:	4618      	mov	r0, r3
 80040de:	f001 fecb 	bl	8005e78 <SDIO_GetResponse>
 80040e2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	0fdb      	lsrs	r3, r3, #31
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d101      	bne.n	80040f0 <SD_PowerON+0xcc>
 80040ec:	2301      	movs	r3, #1
 80040ee:	e000      	b.n	80040f2 <SD_PowerON+0xce>
 80040f0:	2300      	movs	r3, #0
 80040f2:	613b      	str	r3, [r7, #16]

    count++;
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	3301      	adds	r3, #1
 80040f8:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004100:	4293      	cmp	r3, r2
 8004102:	d802      	bhi.n	800410a <SD_PowerON+0xe6>
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d0cc      	beq.n	80040a4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004110:	4293      	cmp	r3, r2
 8004112:	d902      	bls.n	800411a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004114:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004118:	e00c      	b.n	8004134 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004120:	2b00      	cmp	r3, #0
 8004122:	d003      	beq.n	800412c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	645a      	str	r2, [r3, #68]	; 0x44
 800412a:	e002      	b.n	8004132 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8004132:	2300      	movs	r3, #0
}
 8004134:	4618      	mov	r0, r3
 8004136:	3718      	adds	r7, #24
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}
 800413c:	c1100000 	.word	0xc1100000

08004140 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d102      	bne.n	8004156 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8004150:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004154:	e018      	b.n	8004188 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800415e:	041b      	lsls	r3, r3, #16
 8004160:	4619      	mov	r1, r3
 8004162:	4610      	mov	r0, r2
 8004164:	f002 f8da 	bl	800631c <SDMMC_CmdSendStatus>
 8004168:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d001      	beq.n	8004174 <SD_SendStatus+0x34>
  {
    return errorstate;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	e009      	b.n	8004188 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	2100      	movs	r1, #0
 800417a:	4618      	mov	r0, r3
 800417c:	f001 fe7c 	bl	8005e78 <SDIO_GetResponse>
 8004180:	4602      	mov	r2, r0
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8004186:	2300      	movs	r3, #0
}
 8004188:	4618      	mov	r0, r3
 800418a:	3710      	adds	r7, #16
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}

08004190 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b086      	sub	sp, #24
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004198:	2300      	movs	r3, #0
 800419a:	60fb      	str	r3, [r7, #12]
 800419c:	2300      	movs	r3, #0
 800419e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	2100      	movs	r1, #0
 80041a6:	4618      	mov	r0, r3
 80041a8:	f001 fe66 	bl	8005e78 <SDIO_GetResponse>
 80041ac:	4603      	mov	r3, r0
 80041ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80041b6:	d102      	bne.n	80041be <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80041b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80041bc:	e02f      	b.n	800421e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80041be:	f107 030c 	add.w	r3, r7, #12
 80041c2:	4619      	mov	r1, r3
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f000 f879 	bl	80042bc <SD_FindSCR>
 80041ca:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d001      	beq.n	80041d6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	e023      	b.n	800421e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d01c      	beq.n	800421a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041e8:	041b      	lsls	r3, r3, #16
 80041ea:	4619      	mov	r1, r3
 80041ec:	4610      	mov	r0, r2
 80041ee:	f001 ffaf 	bl	8006150 <SDMMC_CmdAppCommand>
 80041f2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d001      	beq.n	80041fe <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	e00f      	b.n	800421e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	2102      	movs	r1, #2
 8004204:	4618      	mov	r0, r3
 8004206:	f001 ffe8 	bl	80061da <SDMMC_CmdBusWidth>
 800420a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d001      	beq.n	8004216 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	e003      	b.n	800421e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004216:	2300      	movs	r3, #0
 8004218:	e001      	b.n	800421e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800421a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800421e:	4618      	mov	r0, r3
 8004220:	3718      	adds	r7, #24
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}

08004226 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8004226:	b580      	push	{r7, lr}
 8004228:	b086      	sub	sp, #24
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800422e:	2300      	movs	r3, #0
 8004230:	60fb      	str	r3, [r7, #12]
 8004232:	2300      	movs	r3, #0
 8004234:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	2100      	movs	r1, #0
 800423c:	4618      	mov	r0, r3
 800423e:	f001 fe1b 	bl	8005e78 <SDIO_GetResponse>
 8004242:	4603      	mov	r3, r0
 8004244:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004248:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800424c:	d102      	bne.n	8004254 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800424e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004252:	e02f      	b.n	80042b4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004254:	f107 030c 	add.w	r3, r7, #12
 8004258:	4619      	mov	r1, r3
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f000 f82e 	bl	80042bc <SD_FindSCR>
 8004260:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d001      	beq.n	800426c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	e023      	b.n	80042b4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004272:	2b00      	cmp	r3, #0
 8004274:	d01c      	beq.n	80042b0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800427e:	041b      	lsls	r3, r3, #16
 8004280:	4619      	mov	r1, r3
 8004282:	4610      	mov	r0, r2
 8004284:	f001 ff64 	bl	8006150 <SDMMC_CmdAppCommand>
 8004288:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d001      	beq.n	8004294 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	e00f      	b.n	80042b4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	2100      	movs	r1, #0
 800429a:	4618      	mov	r0, r3
 800429c:	f001 ff9d 	bl	80061da <SDMMC_CmdBusWidth>
 80042a0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d001      	beq.n	80042ac <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	e003      	b.n	80042b4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80042ac:	2300      	movs	r3, #0
 80042ae:	e001      	b.n	80042b4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80042b0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3718      	adds	r7, #24
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}

080042bc <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80042bc:	b590      	push	{r4, r7, lr}
 80042be:	b08f      	sub	sp, #60	; 0x3c
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80042c6:	f7fd fb4b 	bl	8001960 <HAL_GetTick>
 80042ca:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80042cc:	2300      	movs	r3, #0
 80042ce:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80042d0:	2300      	movs	r3, #0
 80042d2:	60bb      	str	r3, [r7, #8]
 80042d4:	2300      	movs	r3, #0
 80042d6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	2108      	movs	r1, #8
 80042e2:	4618      	mov	r0, r3
 80042e4:	f001 fe07 	bl	8005ef6 <SDMMC_CmdBlockLength>
 80042e8:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80042ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d001      	beq.n	80042f4 <SD_FindSCR+0x38>
  {
    return errorstate;
 80042f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f2:	e0b2      	b.n	800445a <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042fc:	041b      	lsls	r3, r3, #16
 80042fe:	4619      	mov	r1, r3
 8004300:	4610      	mov	r0, r2
 8004302:	f001 ff25 	bl	8006150 <SDMMC_CmdAppCommand>
 8004306:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800430a:	2b00      	cmp	r3, #0
 800430c:	d001      	beq.n	8004312 <SD_FindSCR+0x56>
  {
    return errorstate;
 800430e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004310:	e0a3      	b.n	800445a <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004312:	f04f 33ff 	mov.w	r3, #4294967295
 8004316:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8004318:	2308      	movs	r3, #8
 800431a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800431c:	2330      	movs	r3, #48	; 0x30
 800431e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004320:	2302      	movs	r3, #2
 8004322:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004324:	2300      	movs	r3, #0
 8004326:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8004328:	2301      	movs	r3, #1
 800432a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f107 0210 	add.w	r2, r7, #16
 8004334:	4611      	mov	r1, r2
 8004336:	4618      	mov	r0, r3
 8004338:	f001 fdb1 	bl	8005e9e <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4618      	mov	r0, r3
 8004342:	f001 ff6c 	bl	800621e <SDMMC_CmdSendSCR>
 8004346:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800434a:	2b00      	cmp	r3, #0
 800434c:	d02a      	beq.n	80043a4 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800434e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004350:	e083      	b.n	800445a <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004358:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800435c:	2b00      	cmp	r3, #0
 800435e:	d00f      	beq.n	8004380 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6819      	ldr	r1, [r3, #0]
 8004364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	f107 0208 	add.w	r2, r7, #8
 800436c:	18d4      	adds	r4, r2, r3
 800436e:	4608      	mov	r0, r1
 8004370:	f001 fd11 	bl	8005d96 <SDIO_ReadFIFO>
 8004374:	4603      	mov	r3, r0
 8004376:	6023      	str	r3, [r4, #0]
      index++;
 8004378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800437a:	3301      	adds	r3, #1
 800437c:	637b      	str	r3, [r7, #52]	; 0x34
 800437e:	e006      	b.n	800438e <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004386:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d012      	beq.n	80043b4 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800438e:	f7fd fae7 	bl	8001960 <HAL_GetTick>
 8004392:	4602      	mov	r2, r0
 8004394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004396:	1ad3      	subs	r3, r2, r3
 8004398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800439c:	d102      	bne.n	80043a4 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800439e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80043a2:	e05a      	b.n	800445a <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043aa:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d0cf      	beq.n	8004352 <SD_FindSCR+0x96>
 80043b2:	e000      	b.n	80043b6 <SD_FindSCR+0xfa>
      break;
 80043b4:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043bc:	f003 0308 	and.w	r3, r3, #8
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d005      	beq.n	80043d0 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2208      	movs	r2, #8
 80043ca:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80043cc:	2308      	movs	r3, #8
 80043ce:	e044      	b.n	800445a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043d6:	f003 0302 	and.w	r3, r3, #2
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d005      	beq.n	80043ea <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	2202      	movs	r2, #2
 80043e4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80043e6:	2302      	movs	r3, #2
 80043e8:	e037      	b.n	800445a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043f0:	f003 0320 	and.w	r3, r3, #32
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d005      	beq.n	8004404 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	2220      	movs	r2, #32
 80043fe:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8004400:	2320      	movs	r3, #32
 8004402:	e02a      	b.n	800445a <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f240 523a 	movw	r2, #1338	; 0x53a
 800440c:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	061a      	lsls	r2, r3, #24
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	021b      	lsls	r3, r3, #8
 8004416:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800441a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	0a1b      	lsrs	r3, r3, #8
 8004420:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004424:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	0e1b      	lsrs	r3, r3, #24
 800442a:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800442c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800442e:	601a      	str	r2, [r3, #0]
    scr++;
 8004430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004432:	3304      	adds	r3, #4
 8004434:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	061a      	lsls	r2, r3, #24
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	021b      	lsls	r3, r3, #8
 800443e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004442:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	0a1b      	lsrs	r3, r3, #8
 8004448:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800444c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	0e1b      	lsrs	r3, r3, #24
 8004452:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004456:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8004458:	2300      	movs	r3, #0
}
 800445a:	4618      	mov	r0, r3
 800445c:	373c      	adds	r7, #60	; 0x3c
 800445e:	46bd      	mov	sp, r7
 8004460:	bd90      	pop	{r4, r7, pc}

08004462 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8004462:	b580      	push	{r7, lr}
 8004464:	b086      	sub	sp, #24
 8004466:	af00      	add	r7, sp, #0
 8004468:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800446e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004474:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d03f      	beq.n	80044fc <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800447c:	2300      	movs	r3, #0
 800447e:	617b      	str	r3, [r7, #20]
 8004480:	e033      	b.n	80044ea <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4618      	mov	r0, r3
 8004488:	f001 fc85 	bl	8005d96 <SDIO_ReadFIFO>
 800448c:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	b2da      	uxtb	r2, r3
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	3301      	adds	r3, #1
 800449a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	3b01      	subs	r3, #1
 80044a0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	0a1b      	lsrs	r3, r3, #8
 80044a6:	b2da      	uxtb	r2, r3
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	701a      	strb	r2, [r3, #0]
      tmp++;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	3301      	adds	r3, #1
 80044b0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	3b01      	subs	r3, #1
 80044b6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	0c1b      	lsrs	r3, r3, #16
 80044bc:	b2da      	uxtb	r2, r3
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	701a      	strb	r2, [r3, #0]
      tmp++;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	3301      	adds	r3, #1
 80044c6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	3b01      	subs	r3, #1
 80044cc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	0e1b      	lsrs	r3, r3, #24
 80044d2:	b2da      	uxtb	r2, r3
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	701a      	strb	r2, [r3, #0]
      tmp++;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	3301      	adds	r3, #1
 80044dc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	3b01      	subs	r3, #1
 80044e2:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	3301      	adds	r3, #1
 80044e8:	617b      	str	r3, [r7, #20]
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	2b07      	cmp	r3, #7
 80044ee:	d9c8      	bls.n	8004482 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	68fa      	ldr	r2, [r7, #12]
 80044f4:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	693a      	ldr	r2, [r7, #16]
 80044fa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 80044fc:	bf00      	nop
 80044fe:	3718      	adds	r7, #24
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}

08004504 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b086      	sub	sp, #24
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6a1b      	ldr	r3, [r3, #32]
 8004510:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004516:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d043      	beq.n	80045a6 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800451e:	2300      	movs	r3, #0
 8004520:	617b      	str	r3, [r7, #20]
 8004522:	e037      	b.n	8004594 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	781b      	ldrb	r3, [r3, #0]
 8004528:	60bb      	str	r3, [r7, #8]
      tmp++;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	3301      	adds	r3, #1
 800452e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	3b01      	subs	r3, #1
 8004534:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	781b      	ldrb	r3, [r3, #0]
 800453a:	021a      	lsls	r2, r3, #8
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	4313      	orrs	r3, r2
 8004540:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	3301      	adds	r3, #1
 8004546:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	3b01      	subs	r3, #1
 800454c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	041a      	lsls	r2, r3, #16
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	4313      	orrs	r3, r2
 8004558:	60bb      	str	r3, [r7, #8]
      tmp++;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	3301      	adds	r3, #1
 800455e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	3b01      	subs	r3, #1
 8004564:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	781b      	ldrb	r3, [r3, #0]
 800456a:	061a      	lsls	r2, r3, #24
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	4313      	orrs	r3, r2
 8004570:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	3301      	adds	r3, #1
 8004576:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	3b01      	subs	r3, #1
 800457c:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f107 0208 	add.w	r2, r7, #8
 8004586:	4611      	mov	r1, r2
 8004588:	4618      	mov	r0, r3
 800458a:	f001 fc11 	bl	8005db0 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	3301      	adds	r3, #1
 8004592:	617b      	str	r3, [r7, #20]
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	2b07      	cmp	r3, #7
 8004598:	d9c4      	bls.n	8004524 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	68fa      	ldr	r2, [r7, #12]
 800459e:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	693a      	ldr	r2, [r7, #16]
 80045a4:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80045a6:	bf00      	nop
 80045a8:	3718      	adds	r7, #24
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}

080045ae <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80045ae:	b580      	push	{r7, lr}
 80045b0:	b082      	sub	sp, #8
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d101      	bne.n	80045c0 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e07b      	b.n	80046b8 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d108      	bne.n	80045da <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045d0:	d009      	beq.n	80045e6 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	61da      	str	r2, [r3, #28]
 80045d8:	e005      	b.n	80045e6 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2200      	movs	r2, #0
 80045de:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d106      	bne.n	8004606 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f7fc fef7 	bl	80013f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2202      	movs	r2, #2
 800460a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800461c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800462e:	431a      	orrs	r2, r3
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004638:	431a      	orrs	r2, r3
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	691b      	ldr	r3, [r3, #16]
 800463e:	f003 0302 	and.w	r3, r3, #2
 8004642:	431a      	orrs	r2, r3
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	695b      	ldr	r3, [r3, #20]
 8004648:	f003 0301 	and.w	r3, r3, #1
 800464c:	431a      	orrs	r2, r3
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	699b      	ldr	r3, [r3, #24]
 8004652:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004656:	431a      	orrs	r2, r3
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	69db      	ldr	r3, [r3, #28]
 800465c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004660:	431a      	orrs	r2, r3
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6a1b      	ldr	r3, [r3, #32]
 8004666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800466a:	ea42 0103 	orr.w	r1, r2, r3
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004672:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	430a      	orrs	r2, r1
 800467c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	699b      	ldr	r3, [r3, #24]
 8004682:	0c1b      	lsrs	r3, r3, #16
 8004684:	f003 0104 	and.w	r1, r3, #4
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468c:	f003 0210 	and.w	r2, r3, #16
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	430a      	orrs	r2, r1
 8004696:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	69da      	ldr	r2, [r3, #28]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046a6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2201      	movs	r2, #1
 80046b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80046b6:	2300      	movs	r3, #0
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3708      	adds	r7, #8
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}

080046c0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b088      	sub	sp, #32
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	60f8      	str	r0, [r7, #12]
 80046c8:	60b9      	str	r1, [r7, #8]
 80046ca:	603b      	str	r3, [r7, #0]
 80046cc:	4613      	mov	r3, r2
 80046ce:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80046d0:	2300      	movs	r3, #0
 80046d2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d101      	bne.n	80046e2 <HAL_SPI_Transmit+0x22>
 80046de:	2302      	movs	r3, #2
 80046e0:	e126      	b.n	8004930 <HAL_SPI_Transmit+0x270>
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2201      	movs	r2, #1
 80046e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80046ea:	f7fd f939 	bl	8001960 <HAL_GetTick>
 80046ee:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80046f0:	88fb      	ldrh	r3, [r7, #6]
 80046f2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d002      	beq.n	8004706 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004700:	2302      	movs	r3, #2
 8004702:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004704:	e10b      	b.n	800491e <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d002      	beq.n	8004712 <HAL_SPI_Transmit+0x52>
 800470c:	88fb      	ldrh	r3, [r7, #6]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d102      	bne.n	8004718 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004716:	e102      	b.n	800491e <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2203      	movs	r2, #3
 800471c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2200      	movs	r2, #0
 8004724:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	68ba      	ldr	r2, [r7, #8]
 800472a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	88fa      	ldrh	r2, [r7, #6]
 8004730:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	88fa      	ldrh	r2, [r7, #6]
 8004736:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2200      	movs	r2, #0
 800473c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2200      	movs	r2, #0
 8004742:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2200      	movs	r2, #0
 8004748:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2200      	movs	r2, #0
 800474e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2200      	movs	r2, #0
 8004754:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800475e:	d10f      	bne.n	8004780 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800476e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800477e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800478a:	2b40      	cmp	r3, #64	; 0x40
 800478c:	d007      	beq.n	800479e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800479c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047a6:	d14b      	bne.n	8004840 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d002      	beq.n	80047b6 <HAL_SPI_Transmit+0xf6>
 80047b0:	8afb      	ldrh	r3, [r7, #22]
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d13e      	bne.n	8004834 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ba:	881a      	ldrh	r2, [r3, #0]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c6:	1c9a      	adds	r2, r3, #2
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	3b01      	subs	r3, #1
 80047d4:	b29a      	uxth	r2, r3
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80047da:	e02b      	b.n	8004834 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	f003 0302 	and.w	r3, r3, #2
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	d112      	bne.n	8004810 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ee:	881a      	ldrh	r2, [r3, #0]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047fa:	1c9a      	adds	r2, r3, #2
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004804:	b29b      	uxth	r3, r3
 8004806:	3b01      	subs	r3, #1
 8004808:	b29a      	uxth	r2, r3
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	86da      	strh	r2, [r3, #54]	; 0x36
 800480e:	e011      	b.n	8004834 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004810:	f7fd f8a6 	bl	8001960 <HAL_GetTick>
 8004814:	4602      	mov	r2, r0
 8004816:	69bb      	ldr	r3, [r7, #24]
 8004818:	1ad3      	subs	r3, r2, r3
 800481a:	683a      	ldr	r2, [r7, #0]
 800481c:	429a      	cmp	r2, r3
 800481e:	d803      	bhi.n	8004828 <HAL_SPI_Transmit+0x168>
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004826:	d102      	bne.n	800482e <HAL_SPI_Transmit+0x16e>
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d102      	bne.n	8004834 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004832:	e074      	b.n	800491e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004838:	b29b      	uxth	r3, r3
 800483a:	2b00      	cmp	r3, #0
 800483c:	d1ce      	bne.n	80047dc <HAL_SPI_Transmit+0x11c>
 800483e:	e04c      	b.n	80048da <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d002      	beq.n	800484e <HAL_SPI_Transmit+0x18e>
 8004848:	8afb      	ldrh	r3, [r7, #22]
 800484a:	2b01      	cmp	r3, #1
 800484c:	d140      	bne.n	80048d0 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	330c      	adds	r3, #12
 8004858:	7812      	ldrb	r2, [r2, #0]
 800485a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004860:	1c5a      	adds	r2, r3, #1
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800486a:	b29b      	uxth	r3, r3
 800486c:	3b01      	subs	r3, #1
 800486e:	b29a      	uxth	r2, r3
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004874:	e02c      	b.n	80048d0 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	f003 0302 	and.w	r3, r3, #2
 8004880:	2b02      	cmp	r3, #2
 8004882:	d113      	bne.n	80048ac <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	330c      	adds	r3, #12
 800488e:	7812      	ldrb	r2, [r2, #0]
 8004890:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004896:	1c5a      	adds	r2, r3, #1
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	3b01      	subs	r3, #1
 80048a4:	b29a      	uxth	r2, r3
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	86da      	strh	r2, [r3, #54]	; 0x36
 80048aa:	e011      	b.n	80048d0 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048ac:	f7fd f858 	bl	8001960 <HAL_GetTick>
 80048b0:	4602      	mov	r2, r0
 80048b2:	69bb      	ldr	r3, [r7, #24]
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	683a      	ldr	r2, [r7, #0]
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d803      	bhi.n	80048c4 <HAL_SPI_Transmit+0x204>
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048c2:	d102      	bne.n	80048ca <HAL_SPI_Transmit+0x20a>
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d102      	bne.n	80048d0 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80048ce:	e026      	b.n	800491e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d1cd      	bne.n	8004876 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80048da:	69ba      	ldr	r2, [r7, #24]
 80048dc:	6839      	ldr	r1, [r7, #0]
 80048de:	68f8      	ldr	r0, [r7, #12]
 80048e0:	f000 fb12 	bl	8004f08 <SPI_EndRxTxTransaction>
 80048e4:	4603      	mov	r3, r0
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d002      	beq.n	80048f0 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2220      	movs	r2, #32
 80048ee:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d10a      	bne.n	800490e <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80048f8:	2300      	movs	r3, #0
 80048fa:	613b      	str	r3, [r7, #16]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	68db      	ldr	r3, [r3, #12]
 8004902:	613b      	str	r3, [r7, #16]
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	613b      	str	r3, [r7, #16]
 800490c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004912:	2b00      	cmp	r3, #0
 8004914:	d002      	beq.n	800491c <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	77fb      	strb	r3, [r7, #31]
 800491a:	e000      	b.n	800491e <HAL_SPI_Transmit+0x25e>
  }

error:
 800491c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2201      	movs	r2, #1
 8004922:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2200      	movs	r2, #0
 800492a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800492e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004930:	4618      	mov	r0, r3
 8004932:	3720      	adds	r7, #32
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}

08004938 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b086      	sub	sp, #24
 800493c:	af00      	add	r7, sp, #0
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	4613      	mov	r3, r2
 8004944:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004946:	2300      	movs	r3, #0
 8004948:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004950:	2b01      	cmp	r3, #1
 8004952:	d101      	bne.n	8004958 <HAL_SPI_Transmit_DMA+0x20>
 8004954:	2302      	movs	r3, #2
 8004956:	e09b      	b.n	8004a90 <HAL_SPI_Transmit_DMA+0x158>
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004966:	b2db      	uxtb	r3, r3
 8004968:	2b01      	cmp	r3, #1
 800496a:	d002      	beq.n	8004972 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800496c:	2302      	movs	r3, #2
 800496e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004970:	e089      	b.n	8004a86 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d002      	beq.n	800497e <HAL_SPI_Transmit_DMA+0x46>
 8004978:	88fb      	ldrh	r3, [r7, #6]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d102      	bne.n	8004984 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004982:	e080      	b.n	8004a86 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2203      	movs	r2, #3
 8004988:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2200      	movs	r2, #0
 8004990:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	68ba      	ldr	r2, [r7, #8]
 8004996:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	88fa      	ldrh	r2, [r7, #6]
 800499c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	88fa      	ldrh	r2, [r7, #6]
 80049a2:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2200      	movs	r2, #0
 80049a8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2200      	movs	r2, #0
 80049ae:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2200      	movs	r2, #0
 80049b4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2200      	movs	r2, #0
 80049ba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2200      	movs	r2, #0
 80049c0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049ca:	d10f      	bne.n	80049ec <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049da:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80049ea:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049f0:	4a29      	ldr	r2, [pc, #164]	; (8004a98 <HAL_SPI_Transmit_DMA+0x160>)
 80049f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049f8:	4a28      	ldr	r2, [pc, #160]	; (8004a9c <HAL_SPI_Transmit_DMA+0x164>)
 80049fa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a00:	4a27      	ldr	r2, [pc, #156]	; (8004aa0 <HAL_SPI_Transmit_DMA+0x168>)
 8004a02:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a08:	2200      	movs	r2, #0
 8004a0a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a14:	4619      	mov	r1, r3
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	330c      	adds	r3, #12
 8004a1c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a22:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004a24:	f7fd f95c 	bl	8001ce0 <HAL_DMA_Start_IT>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d00c      	beq.n	8004a48 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a32:	f043 0210 	orr.w	r2, r3, #16
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2201      	movs	r2, #1
 8004a42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8004a46:	e01e      	b.n	8004a86 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a52:	2b40      	cmp	r3, #64	; 0x40
 8004a54:	d007      	beq.n	8004a66 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a64:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	685a      	ldr	r2, [r3, #4]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f042 0220 	orr.w	r2, r2, #32
 8004a74:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	685a      	ldr	r2, [r3, #4]
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f042 0202 	orr.w	r2, r2, #2
 8004a84:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004a8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3718      	adds	r7, #24
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}
 8004a98:	08004d75 	.word	0x08004d75
 8004a9c:	08004ccd 	.word	0x08004ccd
 8004aa0:	08004d91 	.word	0x08004d91

08004aa4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b088      	sub	sp, #32
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004abc:	69bb      	ldr	r3, [r7, #24]
 8004abe:	099b      	lsrs	r3, r3, #6
 8004ac0:	f003 0301 	and.w	r3, r3, #1
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d10f      	bne.n	8004ae8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004ac8:	69bb      	ldr	r3, [r7, #24]
 8004aca:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d00a      	beq.n	8004ae8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004ad2:	69fb      	ldr	r3, [r7, #28]
 8004ad4:	099b      	lsrs	r3, r3, #6
 8004ad6:	f003 0301 	and.w	r3, r3, #1
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d004      	beq.n	8004ae8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	4798      	blx	r3
    return;
 8004ae6:	e0d7      	b.n	8004c98 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004ae8:	69bb      	ldr	r3, [r7, #24]
 8004aea:	085b      	lsrs	r3, r3, #1
 8004aec:	f003 0301 	and.w	r3, r3, #1
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d00a      	beq.n	8004b0a <HAL_SPI_IRQHandler+0x66>
 8004af4:	69fb      	ldr	r3, [r7, #28]
 8004af6:	09db      	lsrs	r3, r3, #7
 8004af8:	f003 0301 	and.w	r3, r3, #1
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d004      	beq.n	8004b0a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	4798      	blx	r3
    return;
 8004b08:	e0c6      	b.n	8004c98 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004b0a:	69bb      	ldr	r3, [r7, #24]
 8004b0c:	095b      	lsrs	r3, r3, #5
 8004b0e:	f003 0301 	and.w	r3, r3, #1
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d10c      	bne.n	8004b30 <HAL_SPI_IRQHandler+0x8c>
 8004b16:	69bb      	ldr	r3, [r7, #24]
 8004b18:	099b      	lsrs	r3, r3, #6
 8004b1a:	f003 0301 	and.w	r3, r3, #1
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d106      	bne.n	8004b30 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004b22:	69bb      	ldr	r3, [r7, #24]
 8004b24:	0a1b      	lsrs	r3, r3, #8
 8004b26:	f003 0301 	and.w	r3, r3, #1
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	f000 80b4 	beq.w	8004c98 <HAL_SPI_IRQHandler+0x1f4>
 8004b30:	69fb      	ldr	r3, [r7, #28]
 8004b32:	095b      	lsrs	r3, r3, #5
 8004b34:	f003 0301 	and.w	r3, r3, #1
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	f000 80ad 	beq.w	8004c98 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004b3e:	69bb      	ldr	r3, [r7, #24]
 8004b40:	099b      	lsrs	r3, r3, #6
 8004b42:	f003 0301 	and.w	r3, r3, #1
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d023      	beq.n	8004b92 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	2b03      	cmp	r3, #3
 8004b54:	d011      	beq.n	8004b7a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b5a:	f043 0204 	orr.w	r2, r3, #4
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b62:	2300      	movs	r3, #0
 8004b64:	617b      	str	r3, [r7, #20]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	617b      	str	r3, [r7, #20]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	617b      	str	r3, [r7, #20]
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	e00b      	b.n	8004b92 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	613b      	str	r3, [r7, #16]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	613b      	str	r3, [r7, #16]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	613b      	str	r3, [r7, #16]
 8004b8e:	693b      	ldr	r3, [r7, #16]
        return;
 8004b90:	e082      	b.n	8004c98 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004b92:	69bb      	ldr	r3, [r7, #24]
 8004b94:	095b      	lsrs	r3, r3, #5
 8004b96:	f003 0301 	and.w	r3, r3, #1
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d014      	beq.n	8004bc8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ba2:	f043 0201 	orr.w	r2, r3, #1
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004baa:	2300      	movs	r3, #0
 8004bac:	60fb      	str	r3, [r7, #12]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	60fb      	str	r3, [r7, #12]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bc4:	601a      	str	r2, [r3, #0]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	0a1b      	lsrs	r3, r3, #8
 8004bcc:	f003 0301 	and.w	r3, r3, #1
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d00c      	beq.n	8004bee <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bd8:	f043 0208 	orr.w	r2, r3, #8
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004be0:	2300      	movs	r3, #0
 8004be2:	60bb      	str	r3, [r7, #8]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	60bb      	str	r3, [r7, #8]
 8004bec:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d04f      	beq.n	8004c96 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	685a      	ldr	r2, [r3, #4]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004c04:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2201      	movs	r2, #1
 8004c0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004c0e:	69fb      	ldr	r3, [r7, #28]
 8004c10:	f003 0302 	and.w	r3, r3, #2
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d104      	bne.n	8004c22 <HAL_SPI_IRQHandler+0x17e>
 8004c18:	69fb      	ldr	r3, [r7, #28]
 8004c1a:	f003 0301 	and.w	r3, r3, #1
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d034      	beq.n	8004c8c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	685a      	ldr	r2, [r3, #4]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f022 0203 	bic.w	r2, r2, #3
 8004c30:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d011      	beq.n	8004c5e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c3e:	4a18      	ldr	r2, [pc, #96]	; (8004ca0 <HAL_SPI_IRQHandler+0x1fc>)
 8004c40:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c46:	4618      	mov	r0, r3
 8004c48:	f7fd f8a2 	bl	8001d90 <HAL_DMA_Abort_IT>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d005      	beq.n	8004c5e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c56:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d016      	beq.n	8004c94 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c6a:	4a0d      	ldr	r2, [pc, #52]	; (8004ca0 <HAL_SPI_IRQHandler+0x1fc>)
 8004c6c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c72:	4618      	mov	r0, r3
 8004c74:	f7fd f88c 	bl	8001d90 <HAL_DMA_Abort_IT>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d00a      	beq.n	8004c94 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c82:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8004c8a:	e003      	b.n	8004c94 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f000 f813 	bl	8004cb8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004c92:	e000      	b.n	8004c96 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004c94:	bf00      	nop
    return;
 8004c96:	bf00      	nop
  }
}
 8004c98:	3720      	adds	r7, #32
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	08004dd1 	.word	0x08004dd1

08004ca4 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b083      	sub	sp, #12
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8004cac:	bf00      	nop
 8004cae:	370c      	adds	r7, #12
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr

08004cb8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b083      	sub	sp, #12
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004cc0:	bf00      	nop
 8004cc2:	370c      	adds	r7, #12
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr

08004ccc <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b086      	sub	sp, #24
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004cda:	f7fc fe41 	bl	8001960 <HAL_GetTick>
 8004cde:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cee:	d03b      	beq.n	8004d68 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	685a      	ldr	r2, [r3, #4]
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f022 0220 	bic.w	r2, r2, #32
 8004cfe:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	685a      	ldr	r2, [r3, #4]
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f022 0202 	bic.w	r2, r2, #2
 8004d0e:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004d10:	693a      	ldr	r2, [r7, #16]
 8004d12:	2164      	movs	r1, #100	; 0x64
 8004d14:	6978      	ldr	r0, [r7, #20]
 8004d16:	f000 f8f7 	bl	8004f08 <SPI_EndRxTxTransaction>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d005      	beq.n	8004d2c <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d24:	f043 0220 	orr.w	r2, r3, #32
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d10a      	bne.n	8004d4a <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d34:	2300      	movs	r3, #0
 8004d36:	60fb      	str	r3, [r7, #12]
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	68db      	ldr	r3, [r3, #12]
 8004d3e:	60fb      	str	r3, [r7, #12]
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	60fb      	str	r3, [r7, #12]
 8004d48:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d003      	beq.n	8004d68 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004d60:	6978      	ldr	r0, [r7, #20]
 8004d62:	f7ff ffa9 	bl	8004cb8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004d66:	e002      	b.n	8004d6e <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8004d68:	6978      	ldr	r0, [r7, #20]
 8004d6a:	f004 fe31 	bl	80099d0 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004d6e:	3718      	adds	r7, #24
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}

08004d74 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b084      	sub	sp, #16
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d80:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8004d82:	68f8      	ldr	r0, [r7, #12]
 8004d84:	f7ff ff8e 	bl	8004ca4 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004d88:	bf00      	nop
 8004d8a:	3710      	adds	r7, #16
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}

08004d90 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b084      	sub	sp, #16
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d9c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	685a      	ldr	r2, [r3, #4]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f022 0203 	bic.w	r2, r2, #3
 8004dac:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004db2:	f043 0210 	orr.w	r2, r3, #16
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004dc2:	68f8      	ldr	r0, [r7, #12]
 8004dc4:	f7ff ff78 	bl	8004cb8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004dc8:	bf00      	nop
 8004dca:	3710      	adds	r7, #16
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}

08004dd0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b084      	sub	sp, #16
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ddc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2200      	movs	r2, #0
 8004de2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2200      	movs	r2, #0
 8004de8:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004dea:	68f8      	ldr	r0, [r7, #12]
 8004dec:	f7ff ff64 	bl	8004cb8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004df0:	bf00      	nop
 8004df2:	3710      	adds	r7, #16
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}

08004df8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b088      	sub	sp, #32
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	60f8      	str	r0, [r7, #12]
 8004e00:	60b9      	str	r1, [r7, #8]
 8004e02:	603b      	str	r3, [r7, #0]
 8004e04:	4613      	mov	r3, r2
 8004e06:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004e08:	f7fc fdaa 	bl	8001960 <HAL_GetTick>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e10:	1a9b      	subs	r3, r3, r2
 8004e12:	683a      	ldr	r2, [r7, #0]
 8004e14:	4413      	add	r3, r2
 8004e16:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004e18:	f7fc fda2 	bl	8001960 <HAL_GetTick>
 8004e1c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004e1e:	4b39      	ldr	r3, [pc, #228]	; (8004f04 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	015b      	lsls	r3, r3, #5
 8004e24:	0d1b      	lsrs	r3, r3, #20
 8004e26:	69fa      	ldr	r2, [r7, #28]
 8004e28:	fb02 f303 	mul.w	r3, r2, r3
 8004e2c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e2e:	e054      	b.n	8004eda <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e36:	d050      	beq.n	8004eda <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004e38:	f7fc fd92 	bl	8001960 <HAL_GetTick>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	69bb      	ldr	r3, [r7, #24]
 8004e40:	1ad3      	subs	r3, r2, r3
 8004e42:	69fa      	ldr	r2, [r7, #28]
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d902      	bls.n	8004e4e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004e48:	69fb      	ldr	r3, [r7, #28]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d13d      	bne.n	8004eca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	685a      	ldr	r2, [r3, #4]
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004e5c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e66:	d111      	bne.n	8004e8c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e70:	d004      	beq.n	8004e7c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e7a:	d107      	bne.n	8004e8c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e8a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e94:	d10f      	bne.n	8004eb6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ea4:	601a      	str	r2, [r3, #0]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004eb4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2201      	movs	r2, #1
 8004eba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	e017      	b.n	8004efa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d101      	bne.n	8004ed4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	3b01      	subs	r3, #1
 8004ed8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	689a      	ldr	r2, [r3, #8]
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	4013      	ands	r3, r2
 8004ee4:	68ba      	ldr	r2, [r7, #8]
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	bf0c      	ite	eq
 8004eea:	2301      	moveq	r3, #1
 8004eec:	2300      	movne	r3, #0
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	79fb      	ldrb	r3, [r7, #7]
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d19b      	bne.n	8004e30 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004ef8:	2300      	movs	r3, #0
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3720      	adds	r7, #32
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
 8004f02:	bf00      	nop
 8004f04:	20000000 	.word	0x20000000

08004f08 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b088      	sub	sp, #32
 8004f0c:	af02      	add	r7, sp, #8
 8004f0e:	60f8      	str	r0, [r7, #12]
 8004f10:	60b9      	str	r1, [r7, #8]
 8004f12:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004f14:	4b1b      	ldr	r3, [pc, #108]	; (8004f84 <SPI_EndRxTxTransaction+0x7c>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a1b      	ldr	r2, [pc, #108]	; (8004f88 <SPI_EndRxTxTransaction+0x80>)
 8004f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f1e:	0d5b      	lsrs	r3, r3, #21
 8004f20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004f24:	fb02 f303 	mul.w	r3, r2, r3
 8004f28:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f32:	d112      	bne.n	8004f5a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	9300      	str	r3, [sp, #0]
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	2180      	movs	r1, #128	; 0x80
 8004f3e:	68f8      	ldr	r0, [r7, #12]
 8004f40:	f7ff ff5a 	bl	8004df8 <SPI_WaitFlagStateUntilTimeout>
 8004f44:	4603      	mov	r3, r0
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d016      	beq.n	8004f78 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f4e:	f043 0220 	orr.w	r2, r3, #32
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004f56:	2303      	movs	r3, #3
 8004f58:	e00f      	b.n	8004f7a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d00a      	beq.n	8004f76 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	3b01      	subs	r3, #1
 8004f64:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f70:	2b80      	cmp	r3, #128	; 0x80
 8004f72:	d0f2      	beq.n	8004f5a <SPI_EndRxTxTransaction+0x52>
 8004f74:	e000      	b.n	8004f78 <SPI_EndRxTxTransaction+0x70>
        break;
 8004f76:	bf00      	nop
  }

  return HAL_OK;
 8004f78:	2300      	movs	r3, #0
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3718      	adds	r7, #24
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}
 8004f82:	bf00      	nop
 8004f84:	20000000 	.word	0x20000000
 8004f88:	165e9f81 	.word	0x165e9f81

08004f8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b082      	sub	sp, #8
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d101      	bne.n	8004f9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e041      	b.n	8005022 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fa4:	b2db      	uxtb	r3, r3
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d106      	bne.n	8004fb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2200      	movs	r2, #0
 8004fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f000 f839 	bl	800502a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2202      	movs	r2, #2
 8004fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	3304      	adds	r3, #4
 8004fc8:	4619      	mov	r1, r3
 8004fca:	4610      	mov	r0, r2
 8004fcc:	f000 fbb2 	bl	8005734 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2201      	movs	r2, #1
 8004fec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2201      	movs	r2, #1
 8005014:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005020:	2300      	movs	r3, #0
}
 8005022:	4618      	mov	r0, r3
 8005024:	3708      	adds	r7, #8
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}

0800502a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800502a:	b480      	push	{r7}
 800502c:	b083      	sub	sp, #12
 800502e:	af00      	add	r7, sp, #0
 8005030:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005032:	bf00      	nop
 8005034:	370c      	adds	r7, #12
 8005036:	46bd      	mov	sp, r7
 8005038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503c:	4770      	bx	lr
	...

08005040 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005040:	b480      	push	{r7}
 8005042:	b085      	sub	sp, #20
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800504e:	b2db      	uxtb	r3, r3
 8005050:	2b01      	cmp	r3, #1
 8005052:	d001      	beq.n	8005058 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	e04e      	b.n	80050f6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2202      	movs	r2, #2
 800505c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	68da      	ldr	r2, [r3, #12]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f042 0201 	orr.w	r2, r2, #1
 800506e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a23      	ldr	r2, [pc, #140]	; (8005104 <HAL_TIM_Base_Start_IT+0xc4>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d022      	beq.n	80050c0 <HAL_TIM_Base_Start_IT+0x80>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005082:	d01d      	beq.n	80050c0 <HAL_TIM_Base_Start_IT+0x80>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a1f      	ldr	r2, [pc, #124]	; (8005108 <HAL_TIM_Base_Start_IT+0xc8>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d018      	beq.n	80050c0 <HAL_TIM_Base_Start_IT+0x80>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a1e      	ldr	r2, [pc, #120]	; (800510c <HAL_TIM_Base_Start_IT+0xcc>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d013      	beq.n	80050c0 <HAL_TIM_Base_Start_IT+0x80>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a1c      	ldr	r2, [pc, #112]	; (8005110 <HAL_TIM_Base_Start_IT+0xd0>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d00e      	beq.n	80050c0 <HAL_TIM_Base_Start_IT+0x80>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a1b      	ldr	r2, [pc, #108]	; (8005114 <HAL_TIM_Base_Start_IT+0xd4>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d009      	beq.n	80050c0 <HAL_TIM_Base_Start_IT+0x80>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a19      	ldr	r2, [pc, #100]	; (8005118 <HAL_TIM_Base_Start_IT+0xd8>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d004      	beq.n	80050c0 <HAL_TIM_Base_Start_IT+0x80>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a18      	ldr	r2, [pc, #96]	; (800511c <HAL_TIM_Base_Start_IT+0xdc>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d111      	bne.n	80050e4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	f003 0307 	and.w	r3, r3, #7
 80050ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2b06      	cmp	r3, #6
 80050d0:	d010      	beq.n	80050f4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f042 0201 	orr.w	r2, r2, #1
 80050e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050e2:	e007      	b.n	80050f4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f042 0201 	orr.w	r2, r2, #1
 80050f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80050f4:	2300      	movs	r3, #0
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3714      	adds	r7, #20
 80050fa:	46bd      	mov	sp, r7
 80050fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005100:	4770      	bx	lr
 8005102:	bf00      	nop
 8005104:	40010000 	.word	0x40010000
 8005108:	40000400 	.word	0x40000400
 800510c:	40000800 	.word	0x40000800
 8005110:	40000c00 	.word	0x40000c00
 8005114:	40010400 	.word	0x40010400
 8005118:	40014000 	.word	0x40014000
 800511c:	40001800 	.word	0x40001800

08005120 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b082      	sub	sp, #8
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d101      	bne.n	8005132 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	e041      	b.n	80051b6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005138:	b2db      	uxtb	r3, r3
 800513a:	2b00      	cmp	r3, #0
 800513c:	d106      	bne.n	800514c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2200      	movs	r2, #0
 8005142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f7fc fb4e 	bl	80017e8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2202      	movs	r2, #2
 8005150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	3304      	adds	r3, #4
 800515c:	4619      	mov	r1, r3
 800515e:	4610      	mov	r0, r2
 8005160:	f000 fae8 	bl	8005734 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2201      	movs	r2, #1
 8005188:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2201      	movs	r2, #1
 8005190:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2201      	movs	r2, #1
 8005198:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2201      	movs	r2, #1
 80051a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2201      	movs	r2, #1
 80051a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2201      	movs	r2, #1
 80051b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051b4:	2300      	movs	r3, #0
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3708      	adds	r7, #8
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}
	...

080051c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b084      	sub	sp, #16
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
 80051c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d109      	bne.n	80051e4 <HAL_TIM_PWM_Start+0x24>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	2b01      	cmp	r3, #1
 80051da:	bf14      	ite	ne
 80051dc:	2301      	movne	r3, #1
 80051de:	2300      	moveq	r3, #0
 80051e0:	b2db      	uxtb	r3, r3
 80051e2:	e022      	b.n	800522a <HAL_TIM_PWM_Start+0x6a>
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	2b04      	cmp	r3, #4
 80051e8:	d109      	bne.n	80051fe <HAL_TIM_PWM_Start+0x3e>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	bf14      	ite	ne
 80051f6:	2301      	movne	r3, #1
 80051f8:	2300      	moveq	r3, #0
 80051fa:	b2db      	uxtb	r3, r3
 80051fc:	e015      	b.n	800522a <HAL_TIM_PWM_Start+0x6a>
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	2b08      	cmp	r3, #8
 8005202:	d109      	bne.n	8005218 <HAL_TIM_PWM_Start+0x58>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800520a:	b2db      	uxtb	r3, r3
 800520c:	2b01      	cmp	r3, #1
 800520e:	bf14      	ite	ne
 8005210:	2301      	movne	r3, #1
 8005212:	2300      	moveq	r3, #0
 8005214:	b2db      	uxtb	r3, r3
 8005216:	e008      	b.n	800522a <HAL_TIM_PWM_Start+0x6a>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800521e:	b2db      	uxtb	r3, r3
 8005220:	2b01      	cmp	r3, #1
 8005222:	bf14      	ite	ne
 8005224:	2301      	movne	r3, #1
 8005226:	2300      	moveq	r3, #0
 8005228:	b2db      	uxtb	r3, r3
 800522a:	2b00      	cmp	r3, #0
 800522c:	d001      	beq.n	8005232 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	e07c      	b.n	800532c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d104      	bne.n	8005242 <HAL_TIM_PWM_Start+0x82>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2202      	movs	r2, #2
 800523c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005240:	e013      	b.n	800526a <HAL_TIM_PWM_Start+0xaa>
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	2b04      	cmp	r3, #4
 8005246:	d104      	bne.n	8005252 <HAL_TIM_PWM_Start+0x92>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2202      	movs	r2, #2
 800524c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005250:	e00b      	b.n	800526a <HAL_TIM_PWM_Start+0xaa>
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	2b08      	cmp	r3, #8
 8005256:	d104      	bne.n	8005262 <HAL_TIM_PWM_Start+0xa2>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2202      	movs	r2, #2
 800525c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005260:	e003      	b.n	800526a <HAL_TIM_PWM_Start+0xaa>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2202      	movs	r2, #2
 8005266:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	2201      	movs	r2, #1
 8005270:	6839      	ldr	r1, [r7, #0]
 8005272:	4618      	mov	r0, r3
 8005274:	f000 fcae 	bl	8005bd4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a2d      	ldr	r2, [pc, #180]	; (8005334 <HAL_TIM_PWM_Start+0x174>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d004      	beq.n	800528c <HAL_TIM_PWM_Start+0xcc>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a2c      	ldr	r2, [pc, #176]	; (8005338 <HAL_TIM_PWM_Start+0x178>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d101      	bne.n	8005290 <HAL_TIM_PWM_Start+0xd0>
 800528c:	2301      	movs	r3, #1
 800528e:	e000      	b.n	8005292 <HAL_TIM_PWM_Start+0xd2>
 8005290:	2300      	movs	r3, #0
 8005292:	2b00      	cmp	r3, #0
 8005294:	d007      	beq.n	80052a6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80052a4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a22      	ldr	r2, [pc, #136]	; (8005334 <HAL_TIM_PWM_Start+0x174>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d022      	beq.n	80052f6 <HAL_TIM_PWM_Start+0x136>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052b8:	d01d      	beq.n	80052f6 <HAL_TIM_PWM_Start+0x136>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a1f      	ldr	r2, [pc, #124]	; (800533c <HAL_TIM_PWM_Start+0x17c>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d018      	beq.n	80052f6 <HAL_TIM_PWM_Start+0x136>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a1d      	ldr	r2, [pc, #116]	; (8005340 <HAL_TIM_PWM_Start+0x180>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d013      	beq.n	80052f6 <HAL_TIM_PWM_Start+0x136>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a1c      	ldr	r2, [pc, #112]	; (8005344 <HAL_TIM_PWM_Start+0x184>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d00e      	beq.n	80052f6 <HAL_TIM_PWM_Start+0x136>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a16      	ldr	r2, [pc, #88]	; (8005338 <HAL_TIM_PWM_Start+0x178>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d009      	beq.n	80052f6 <HAL_TIM_PWM_Start+0x136>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a18      	ldr	r2, [pc, #96]	; (8005348 <HAL_TIM_PWM_Start+0x188>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d004      	beq.n	80052f6 <HAL_TIM_PWM_Start+0x136>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a16      	ldr	r2, [pc, #88]	; (800534c <HAL_TIM_PWM_Start+0x18c>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d111      	bne.n	800531a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	f003 0307 	and.w	r3, r3, #7
 8005300:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2b06      	cmp	r3, #6
 8005306:	d010      	beq.n	800532a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f042 0201 	orr.w	r2, r2, #1
 8005316:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005318:	e007      	b.n	800532a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f042 0201 	orr.w	r2, r2, #1
 8005328:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800532a:	2300      	movs	r3, #0
}
 800532c:	4618      	mov	r0, r3
 800532e:	3710      	adds	r7, #16
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}
 8005334:	40010000 	.word	0x40010000
 8005338:	40010400 	.word	0x40010400
 800533c:	40000400 	.word	0x40000400
 8005340:	40000800 	.word	0x40000800
 8005344:	40000c00 	.word	0x40000c00
 8005348:	40014000 	.word	0x40014000
 800534c:	40001800 	.word	0x40001800

08005350 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b082      	sub	sp, #8
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	691b      	ldr	r3, [r3, #16]
 800535e:	f003 0302 	and.w	r3, r3, #2
 8005362:	2b02      	cmp	r3, #2
 8005364:	d122      	bne.n	80053ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	f003 0302 	and.w	r3, r3, #2
 8005370:	2b02      	cmp	r3, #2
 8005372:	d11b      	bne.n	80053ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f06f 0202 	mvn.w	r2, #2
 800537c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2201      	movs	r2, #1
 8005382:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	699b      	ldr	r3, [r3, #24]
 800538a:	f003 0303 	and.w	r3, r3, #3
 800538e:	2b00      	cmp	r3, #0
 8005390:	d003      	beq.n	800539a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f000 f9b0 	bl	80056f8 <HAL_TIM_IC_CaptureCallback>
 8005398:	e005      	b.n	80053a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f000 f9a2 	bl	80056e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f000 f9b3 	bl	800570c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2200      	movs	r2, #0
 80053aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	691b      	ldr	r3, [r3, #16]
 80053b2:	f003 0304 	and.w	r3, r3, #4
 80053b6:	2b04      	cmp	r3, #4
 80053b8:	d122      	bne.n	8005400 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	68db      	ldr	r3, [r3, #12]
 80053c0:	f003 0304 	and.w	r3, r3, #4
 80053c4:	2b04      	cmp	r3, #4
 80053c6:	d11b      	bne.n	8005400 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f06f 0204 	mvn.w	r2, #4
 80053d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2202      	movs	r2, #2
 80053d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	699b      	ldr	r3, [r3, #24]
 80053de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d003      	beq.n	80053ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f000 f986 	bl	80056f8 <HAL_TIM_IC_CaptureCallback>
 80053ec:	e005      	b.n	80053fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f000 f978 	bl	80056e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f000 f989 	bl	800570c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	691b      	ldr	r3, [r3, #16]
 8005406:	f003 0308 	and.w	r3, r3, #8
 800540a:	2b08      	cmp	r3, #8
 800540c:	d122      	bne.n	8005454 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	68db      	ldr	r3, [r3, #12]
 8005414:	f003 0308 	and.w	r3, r3, #8
 8005418:	2b08      	cmp	r3, #8
 800541a:	d11b      	bne.n	8005454 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f06f 0208 	mvn.w	r2, #8
 8005424:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2204      	movs	r2, #4
 800542a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	69db      	ldr	r3, [r3, #28]
 8005432:	f003 0303 	and.w	r3, r3, #3
 8005436:	2b00      	cmp	r3, #0
 8005438:	d003      	beq.n	8005442 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f000 f95c 	bl	80056f8 <HAL_TIM_IC_CaptureCallback>
 8005440:	e005      	b.n	800544e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f000 f94e 	bl	80056e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	f000 f95f 	bl	800570c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2200      	movs	r2, #0
 8005452:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	691b      	ldr	r3, [r3, #16]
 800545a:	f003 0310 	and.w	r3, r3, #16
 800545e:	2b10      	cmp	r3, #16
 8005460:	d122      	bne.n	80054a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	68db      	ldr	r3, [r3, #12]
 8005468:	f003 0310 	and.w	r3, r3, #16
 800546c:	2b10      	cmp	r3, #16
 800546e:	d11b      	bne.n	80054a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f06f 0210 	mvn.w	r2, #16
 8005478:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2208      	movs	r2, #8
 800547e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	69db      	ldr	r3, [r3, #28]
 8005486:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800548a:	2b00      	cmp	r3, #0
 800548c:	d003      	beq.n	8005496 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f000 f932 	bl	80056f8 <HAL_TIM_IC_CaptureCallback>
 8005494:	e005      	b.n	80054a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f000 f924 	bl	80056e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f000 f935 	bl	800570c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2200      	movs	r2, #0
 80054a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	691b      	ldr	r3, [r3, #16]
 80054ae:	f003 0301 	and.w	r3, r3, #1
 80054b2:	2b01      	cmp	r3, #1
 80054b4:	d10e      	bne.n	80054d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	68db      	ldr	r3, [r3, #12]
 80054bc:	f003 0301 	and.w	r3, r3, #1
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d107      	bne.n	80054d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f06f 0201 	mvn.w	r2, #1
 80054cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f7fb fe22 	bl	8001118 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	691b      	ldr	r3, [r3, #16]
 80054da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054de:	2b80      	cmp	r3, #128	; 0x80
 80054e0:	d10e      	bne.n	8005500 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	68db      	ldr	r3, [r3, #12]
 80054e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054ec:	2b80      	cmp	r3, #128	; 0x80
 80054ee:	d107      	bne.n	8005500 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80054f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f000 fc16 	bl	8005d2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	691b      	ldr	r3, [r3, #16]
 8005506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800550a:	2b40      	cmp	r3, #64	; 0x40
 800550c:	d10e      	bne.n	800552c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005518:	2b40      	cmp	r3, #64	; 0x40
 800551a:	d107      	bne.n	800552c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005524:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f000 f8fa 	bl	8005720 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	691b      	ldr	r3, [r3, #16]
 8005532:	f003 0320 	and.w	r3, r3, #32
 8005536:	2b20      	cmp	r3, #32
 8005538:	d10e      	bne.n	8005558 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	68db      	ldr	r3, [r3, #12]
 8005540:	f003 0320 	and.w	r3, r3, #32
 8005544:	2b20      	cmp	r3, #32
 8005546:	d107      	bne.n	8005558 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f06f 0220 	mvn.w	r2, #32
 8005550:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f000 fbe0 	bl	8005d18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005558:	bf00      	nop
 800555a:	3708      	adds	r7, #8
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}

08005560 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b086      	sub	sp, #24
 8005564:	af00      	add	r7, sp, #0
 8005566:	60f8      	str	r0, [r7, #12]
 8005568:	60b9      	str	r1, [r7, #8]
 800556a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800556c:	2300      	movs	r3, #0
 800556e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005576:	2b01      	cmp	r3, #1
 8005578:	d101      	bne.n	800557e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800557a:	2302      	movs	r3, #2
 800557c:	e0ae      	b.n	80056dc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2201      	movs	r2, #1
 8005582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2b0c      	cmp	r3, #12
 800558a:	f200 809f 	bhi.w	80056cc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800558e:	a201      	add	r2, pc, #4	; (adr r2, 8005594 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005594:	080055c9 	.word	0x080055c9
 8005598:	080056cd 	.word	0x080056cd
 800559c:	080056cd 	.word	0x080056cd
 80055a0:	080056cd 	.word	0x080056cd
 80055a4:	08005609 	.word	0x08005609
 80055a8:	080056cd 	.word	0x080056cd
 80055ac:	080056cd 	.word	0x080056cd
 80055b0:	080056cd 	.word	0x080056cd
 80055b4:	0800564b 	.word	0x0800564b
 80055b8:	080056cd 	.word	0x080056cd
 80055bc:	080056cd 	.word	0x080056cd
 80055c0:	080056cd 	.word	0x080056cd
 80055c4:	0800568b 	.word	0x0800568b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	68b9      	ldr	r1, [r7, #8]
 80055ce:	4618      	mov	r0, r3
 80055d0:	f000 f950 	bl	8005874 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	699a      	ldr	r2, [r3, #24]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f042 0208 	orr.w	r2, r2, #8
 80055e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	699a      	ldr	r2, [r3, #24]
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f022 0204 	bic.w	r2, r2, #4
 80055f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	6999      	ldr	r1, [r3, #24]
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	691a      	ldr	r2, [r3, #16]
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	430a      	orrs	r2, r1
 8005604:	619a      	str	r2, [r3, #24]
      break;
 8005606:	e064      	b.n	80056d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	68b9      	ldr	r1, [r7, #8]
 800560e:	4618      	mov	r0, r3
 8005610:	f000 f9a0 	bl	8005954 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	699a      	ldr	r2, [r3, #24]
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005622:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	699a      	ldr	r2, [r3, #24]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005632:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	6999      	ldr	r1, [r3, #24]
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	691b      	ldr	r3, [r3, #16]
 800563e:	021a      	lsls	r2, r3, #8
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	430a      	orrs	r2, r1
 8005646:	619a      	str	r2, [r3, #24]
      break;
 8005648:	e043      	b.n	80056d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	68b9      	ldr	r1, [r7, #8]
 8005650:	4618      	mov	r0, r3
 8005652:	f000 f9f5 	bl	8005a40 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	69da      	ldr	r2, [r3, #28]
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f042 0208 	orr.w	r2, r2, #8
 8005664:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	69da      	ldr	r2, [r3, #28]
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f022 0204 	bic.w	r2, r2, #4
 8005674:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	69d9      	ldr	r1, [r3, #28]
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	691a      	ldr	r2, [r3, #16]
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	430a      	orrs	r2, r1
 8005686:	61da      	str	r2, [r3, #28]
      break;
 8005688:	e023      	b.n	80056d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	68b9      	ldr	r1, [r7, #8]
 8005690:	4618      	mov	r0, r3
 8005692:	f000 fa49 	bl	8005b28 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	69da      	ldr	r2, [r3, #28]
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	69da      	ldr	r2, [r3, #28]
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	69d9      	ldr	r1, [r3, #28]
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	691b      	ldr	r3, [r3, #16]
 80056c0:	021a      	lsls	r2, r3, #8
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	430a      	orrs	r2, r1
 80056c8:	61da      	str	r2, [r3, #28]
      break;
 80056ca:	e002      	b.n	80056d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	75fb      	strb	r3, [r7, #23]
      break;
 80056d0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2200      	movs	r2, #0
 80056d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80056da:	7dfb      	ldrb	r3, [r7, #23]
}
 80056dc:	4618      	mov	r0, r3
 80056de:	3718      	adds	r7, #24
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}

080056e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b083      	sub	sp, #12
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80056ec:	bf00      	nop
 80056ee:	370c      	adds	r7, #12
 80056f0:	46bd      	mov	sp, r7
 80056f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f6:	4770      	bx	lr

080056f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b083      	sub	sp, #12
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005700:	bf00      	nop
 8005702:	370c      	adds	r7, #12
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr

0800570c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800570c:	b480      	push	{r7}
 800570e:	b083      	sub	sp, #12
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005714:	bf00      	nop
 8005716:	370c      	adds	r7, #12
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr

08005720 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005720:	b480      	push	{r7}
 8005722:	b083      	sub	sp, #12
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005728:	bf00      	nop
 800572a:	370c      	adds	r7, #12
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr

08005734 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005734:	b480      	push	{r7}
 8005736:	b085      	sub	sp, #20
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	4a40      	ldr	r2, [pc, #256]	; (8005848 <TIM_Base_SetConfig+0x114>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d013      	beq.n	8005774 <TIM_Base_SetConfig+0x40>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005752:	d00f      	beq.n	8005774 <TIM_Base_SetConfig+0x40>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	4a3d      	ldr	r2, [pc, #244]	; (800584c <TIM_Base_SetConfig+0x118>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d00b      	beq.n	8005774 <TIM_Base_SetConfig+0x40>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	4a3c      	ldr	r2, [pc, #240]	; (8005850 <TIM_Base_SetConfig+0x11c>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d007      	beq.n	8005774 <TIM_Base_SetConfig+0x40>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	4a3b      	ldr	r2, [pc, #236]	; (8005854 <TIM_Base_SetConfig+0x120>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d003      	beq.n	8005774 <TIM_Base_SetConfig+0x40>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	4a3a      	ldr	r2, [pc, #232]	; (8005858 <TIM_Base_SetConfig+0x124>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d108      	bne.n	8005786 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800577a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	68fa      	ldr	r2, [r7, #12]
 8005782:	4313      	orrs	r3, r2
 8005784:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	4a2f      	ldr	r2, [pc, #188]	; (8005848 <TIM_Base_SetConfig+0x114>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d02b      	beq.n	80057e6 <TIM_Base_SetConfig+0xb2>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005794:	d027      	beq.n	80057e6 <TIM_Base_SetConfig+0xb2>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	4a2c      	ldr	r2, [pc, #176]	; (800584c <TIM_Base_SetConfig+0x118>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d023      	beq.n	80057e6 <TIM_Base_SetConfig+0xb2>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	4a2b      	ldr	r2, [pc, #172]	; (8005850 <TIM_Base_SetConfig+0x11c>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d01f      	beq.n	80057e6 <TIM_Base_SetConfig+0xb2>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	4a2a      	ldr	r2, [pc, #168]	; (8005854 <TIM_Base_SetConfig+0x120>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d01b      	beq.n	80057e6 <TIM_Base_SetConfig+0xb2>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	4a29      	ldr	r2, [pc, #164]	; (8005858 <TIM_Base_SetConfig+0x124>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d017      	beq.n	80057e6 <TIM_Base_SetConfig+0xb2>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	4a28      	ldr	r2, [pc, #160]	; (800585c <TIM_Base_SetConfig+0x128>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d013      	beq.n	80057e6 <TIM_Base_SetConfig+0xb2>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	4a27      	ldr	r2, [pc, #156]	; (8005860 <TIM_Base_SetConfig+0x12c>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d00f      	beq.n	80057e6 <TIM_Base_SetConfig+0xb2>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	4a26      	ldr	r2, [pc, #152]	; (8005864 <TIM_Base_SetConfig+0x130>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d00b      	beq.n	80057e6 <TIM_Base_SetConfig+0xb2>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	4a25      	ldr	r2, [pc, #148]	; (8005868 <TIM_Base_SetConfig+0x134>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d007      	beq.n	80057e6 <TIM_Base_SetConfig+0xb2>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	4a24      	ldr	r2, [pc, #144]	; (800586c <TIM_Base_SetConfig+0x138>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d003      	beq.n	80057e6 <TIM_Base_SetConfig+0xb2>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	4a23      	ldr	r2, [pc, #140]	; (8005870 <TIM_Base_SetConfig+0x13c>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d108      	bne.n	80057f8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	68db      	ldr	r3, [r3, #12]
 80057f2:	68fa      	ldr	r2, [r7, #12]
 80057f4:	4313      	orrs	r3, r2
 80057f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	695b      	ldr	r3, [r3, #20]
 8005802:	4313      	orrs	r3, r2
 8005804:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	68fa      	ldr	r2, [r7, #12]
 800580a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	689a      	ldr	r2, [r3, #8]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	4a0a      	ldr	r2, [pc, #40]	; (8005848 <TIM_Base_SetConfig+0x114>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d003      	beq.n	800582c <TIM_Base_SetConfig+0xf8>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	4a0c      	ldr	r2, [pc, #48]	; (8005858 <TIM_Base_SetConfig+0x124>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d103      	bne.n	8005834 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	691a      	ldr	r2, [r3, #16]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2201      	movs	r2, #1
 8005838:	615a      	str	r2, [r3, #20]
}
 800583a:	bf00      	nop
 800583c:	3714      	adds	r7, #20
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr
 8005846:	bf00      	nop
 8005848:	40010000 	.word	0x40010000
 800584c:	40000400 	.word	0x40000400
 8005850:	40000800 	.word	0x40000800
 8005854:	40000c00 	.word	0x40000c00
 8005858:	40010400 	.word	0x40010400
 800585c:	40014000 	.word	0x40014000
 8005860:	40014400 	.word	0x40014400
 8005864:	40014800 	.word	0x40014800
 8005868:	40001800 	.word	0x40001800
 800586c:	40001c00 	.word	0x40001c00
 8005870:	40002000 	.word	0x40002000

08005874 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005874:	b480      	push	{r7}
 8005876:	b087      	sub	sp, #28
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
 800587c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6a1b      	ldr	r3, [r3, #32]
 8005882:	f023 0201 	bic.w	r2, r3, #1
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6a1b      	ldr	r3, [r3, #32]
 800588e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	699b      	ldr	r3, [r3, #24]
 800589a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f023 0303 	bic.w	r3, r3, #3
 80058aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	68fa      	ldr	r2, [r7, #12]
 80058b2:	4313      	orrs	r3, r2
 80058b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	f023 0302 	bic.w	r3, r3, #2
 80058bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	697a      	ldr	r2, [r7, #20]
 80058c4:	4313      	orrs	r3, r2
 80058c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	4a20      	ldr	r2, [pc, #128]	; (800594c <TIM_OC1_SetConfig+0xd8>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d003      	beq.n	80058d8 <TIM_OC1_SetConfig+0x64>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	4a1f      	ldr	r2, [pc, #124]	; (8005950 <TIM_OC1_SetConfig+0xdc>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d10c      	bne.n	80058f2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	f023 0308 	bic.w	r3, r3, #8
 80058de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	68db      	ldr	r3, [r3, #12]
 80058e4:	697a      	ldr	r2, [r7, #20]
 80058e6:	4313      	orrs	r3, r2
 80058e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	f023 0304 	bic.w	r3, r3, #4
 80058f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	4a15      	ldr	r2, [pc, #84]	; (800594c <TIM_OC1_SetConfig+0xd8>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d003      	beq.n	8005902 <TIM_OC1_SetConfig+0x8e>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	4a14      	ldr	r2, [pc, #80]	; (8005950 <TIM_OC1_SetConfig+0xdc>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d111      	bne.n	8005926 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005908:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005910:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	695b      	ldr	r3, [r3, #20]
 8005916:	693a      	ldr	r2, [r7, #16]
 8005918:	4313      	orrs	r3, r2
 800591a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	699b      	ldr	r3, [r3, #24]
 8005920:	693a      	ldr	r2, [r7, #16]
 8005922:	4313      	orrs	r3, r2
 8005924:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	693a      	ldr	r2, [r7, #16]
 800592a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	68fa      	ldr	r2, [r7, #12]
 8005930:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	685a      	ldr	r2, [r3, #4]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	697a      	ldr	r2, [r7, #20]
 800593e:	621a      	str	r2, [r3, #32]
}
 8005940:	bf00      	nop
 8005942:	371c      	adds	r7, #28
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr
 800594c:	40010000 	.word	0x40010000
 8005950:	40010400 	.word	0x40010400

08005954 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005954:	b480      	push	{r7}
 8005956:	b087      	sub	sp, #28
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6a1b      	ldr	r3, [r3, #32]
 8005962:	f023 0210 	bic.w	r2, r3, #16
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6a1b      	ldr	r3, [r3, #32]
 800596e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	699b      	ldr	r3, [r3, #24]
 800597a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005982:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800598a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	021b      	lsls	r3, r3, #8
 8005992:	68fa      	ldr	r2, [r7, #12]
 8005994:	4313      	orrs	r3, r2
 8005996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	f023 0320 	bic.w	r3, r3, #32
 800599e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	011b      	lsls	r3, r3, #4
 80059a6:	697a      	ldr	r2, [r7, #20]
 80059a8:	4313      	orrs	r3, r2
 80059aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	4a22      	ldr	r2, [pc, #136]	; (8005a38 <TIM_OC2_SetConfig+0xe4>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d003      	beq.n	80059bc <TIM_OC2_SetConfig+0x68>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	4a21      	ldr	r2, [pc, #132]	; (8005a3c <TIM_OC2_SetConfig+0xe8>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d10d      	bne.n	80059d8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	011b      	lsls	r3, r3, #4
 80059ca:	697a      	ldr	r2, [r7, #20]
 80059cc:	4313      	orrs	r3, r2
 80059ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	4a17      	ldr	r2, [pc, #92]	; (8005a38 <TIM_OC2_SetConfig+0xe4>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d003      	beq.n	80059e8 <TIM_OC2_SetConfig+0x94>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	4a16      	ldr	r2, [pc, #88]	; (8005a3c <TIM_OC2_SetConfig+0xe8>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d113      	bne.n	8005a10 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80059ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80059f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	695b      	ldr	r3, [r3, #20]
 80059fc:	009b      	lsls	r3, r3, #2
 80059fe:	693a      	ldr	r2, [r7, #16]
 8005a00:	4313      	orrs	r3, r2
 8005a02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	699b      	ldr	r3, [r3, #24]
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	693a      	ldr	r2, [r7, #16]
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	693a      	ldr	r2, [r7, #16]
 8005a14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	68fa      	ldr	r2, [r7, #12]
 8005a1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	685a      	ldr	r2, [r3, #4]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	697a      	ldr	r2, [r7, #20]
 8005a28:	621a      	str	r2, [r3, #32]
}
 8005a2a:	bf00      	nop
 8005a2c:	371c      	adds	r7, #28
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr
 8005a36:	bf00      	nop
 8005a38:	40010000 	.word	0x40010000
 8005a3c:	40010400 	.word	0x40010400

08005a40 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b087      	sub	sp, #28
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6a1b      	ldr	r3, [r3, #32]
 8005a4e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6a1b      	ldr	r3, [r3, #32]
 8005a5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	69db      	ldr	r3, [r3, #28]
 8005a66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f023 0303 	bic.w	r3, r3, #3
 8005a76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	68fa      	ldr	r2, [r7, #12]
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	021b      	lsls	r3, r3, #8
 8005a90:	697a      	ldr	r2, [r7, #20]
 8005a92:	4313      	orrs	r3, r2
 8005a94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	4a21      	ldr	r2, [pc, #132]	; (8005b20 <TIM_OC3_SetConfig+0xe0>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d003      	beq.n	8005aa6 <TIM_OC3_SetConfig+0x66>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	4a20      	ldr	r2, [pc, #128]	; (8005b24 <TIM_OC3_SetConfig+0xe4>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d10d      	bne.n	8005ac2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005aac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	68db      	ldr	r3, [r3, #12]
 8005ab2:	021b      	lsls	r3, r3, #8
 8005ab4:	697a      	ldr	r2, [r7, #20]
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ac0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	4a16      	ldr	r2, [pc, #88]	; (8005b20 <TIM_OC3_SetConfig+0xe0>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d003      	beq.n	8005ad2 <TIM_OC3_SetConfig+0x92>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	4a15      	ldr	r2, [pc, #84]	; (8005b24 <TIM_OC3_SetConfig+0xe4>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d113      	bne.n	8005afa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ad8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ae0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	695b      	ldr	r3, [r3, #20]
 8005ae6:	011b      	lsls	r3, r3, #4
 8005ae8:	693a      	ldr	r2, [r7, #16]
 8005aea:	4313      	orrs	r3, r2
 8005aec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	699b      	ldr	r3, [r3, #24]
 8005af2:	011b      	lsls	r3, r3, #4
 8005af4:	693a      	ldr	r2, [r7, #16]
 8005af6:	4313      	orrs	r3, r2
 8005af8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	693a      	ldr	r2, [r7, #16]
 8005afe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	68fa      	ldr	r2, [r7, #12]
 8005b04:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	685a      	ldr	r2, [r3, #4]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	697a      	ldr	r2, [r7, #20]
 8005b12:	621a      	str	r2, [r3, #32]
}
 8005b14:	bf00      	nop
 8005b16:	371c      	adds	r7, #28
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr
 8005b20:	40010000 	.word	0x40010000
 8005b24:	40010400 	.word	0x40010400

08005b28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b087      	sub	sp, #28
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6a1b      	ldr	r3, [r3, #32]
 8005b36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6a1b      	ldr	r3, [r3, #32]
 8005b42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	69db      	ldr	r3, [r3, #28]
 8005b4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	021b      	lsls	r3, r3, #8
 8005b66:	68fa      	ldr	r2, [r7, #12]
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	031b      	lsls	r3, r3, #12
 8005b7a:	693a      	ldr	r2, [r7, #16]
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	4a12      	ldr	r2, [pc, #72]	; (8005bcc <TIM_OC4_SetConfig+0xa4>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d003      	beq.n	8005b90 <TIM_OC4_SetConfig+0x68>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	4a11      	ldr	r2, [pc, #68]	; (8005bd0 <TIM_OC4_SetConfig+0xa8>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d109      	bne.n	8005ba4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b96:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	695b      	ldr	r3, [r3, #20]
 8005b9c:	019b      	lsls	r3, r3, #6
 8005b9e:	697a      	ldr	r2, [r7, #20]
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	697a      	ldr	r2, [r7, #20]
 8005ba8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	68fa      	ldr	r2, [r7, #12]
 8005bae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	685a      	ldr	r2, [r3, #4]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	693a      	ldr	r2, [r7, #16]
 8005bbc:	621a      	str	r2, [r3, #32]
}
 8005bbe:	bf00      	nop
 8005bc0:	371c      	adds	r7, #28
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc8:	4770      	bx	lr
 8005bca:	bf00      	nop
 8005bcc:	40010000 	.word	0x40010000
 8005bd0:	40010400 	.word	0x40010400

08005bd4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b087      	sub	sp, #28
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	60f8      	str	r0, [r7, #12]
 8005bdc:	60b9      	str	r1, [r7, #8]
 8005bde:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	f003 031f 	and.w	r3, r3, #31
 8005be6:	2201      	movs	r2, #1
 8005be8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	6a1a      	ldr	r2, [r3, #32]
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	43db      	mvns	r3, r3
 8005bf6:	401a      	ands	r2, r3
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	6a1a      	ldr	r2, [r3, #32]
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	f003 031f 	and.w	r3, r3, #31
 8005c06:	6879      	ldr	r1, [r7, #4]
 8005c08:	fa01 f303 	lsl.w	r3, r1, r3
 8005c0c:	431a      	orrs	r2, r3
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	621a      	str	r2, [r3, #32]
}
 8005c12:	bf00      	nop
 8005c14:	371c      	adds	r7, #28
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr
	...

08005c20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b085      	sub	sp, #20
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d101      	bne.n	8005c38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c34:	2302      	movs	r3, #2
 8005c36:	e05a      	b.n	8005cee <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2202      	movs	r2, #2
 8005c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	68fa      	ldr	r2, [r7, #12]
 8005c66:	4313      	orrs	r3, r2
 8005c68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	68fa      	ldr	r2, [r7, #12]
 8005c70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a21      	ldr	r2, [pc, #132]	; (8005cfc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d022      	beq.n	8005cc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c84:	d01d      	beq.n	8005cc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a1d      	ldr	r2, [pc, #116]	; (8005d00 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d018      	beq.n	8005cc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a1b      	ldr	r2, [pc, #108]	; (8005d04 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d013      	beq.n	8005cc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a1a      	ldr	r2, [pc, #104]	; (8005d08 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d00e      	beq.n	8005cc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a18      	ldr	r2, [pc, #96]	; (8005d0c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d009      	beq.n	8005cc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a17      	ldr	r2, [pc, #92]	; (8005d10 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d004      	beq.n	8005cc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a15      	ldr	r2, [pc, #84]	; (8005d14 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d10c      	bne.n	8005cdc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cc8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	68ba      	ldr	r2, [r7, #8]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	68ba      	ldr	r2, [r7, #8]
 8005cda:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005cec:	2300      	movs	r3, #0
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3714      	adds	r7, #20
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr
 8005cfa:	bf00      	nop
 8005cfc:	40010000 	.word	0x40010000
 8005d00:	40000400 	.word	0x40000400
 8005d04:	40000800 	.word	0x40000800
 8005d08:	40000c00 	.word	0x40000c00
 8005d0c:	40010400 	.word	0x40010400
 8005d10:	40014000 	.word	0x40014000
 8005d14:	40001800 	.word	0x40001800

08005d18 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b083      	sub	sp, #12
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d20:	bf00      	nop
 8005d22:	370c      	adds	r7, #12
 8005d24:	46bd      	mov	sp, r7
 8005d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2a:	4770      	bx	lr

08005d2c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b083      	sub	sp, #12
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d34:	bf00      	nop
 8005d36:	370c      	adds	r7, #12
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr

08005d40 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8005d40:	b084      	sub	sp, #16
 8005d42:	b480      	push	{r7}
 8005d44:	b085      	sub	sp, #20
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	6078      	str	r0, [r7, #4]
 8005d4a:	f107 001c 	add.w	r0, r7, #28
 8005d4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8005d52:	2300      	movs	r3, #0
 8005d54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8005d56:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8005d58:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8005d5a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8005d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8005d5e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8005d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8005d62:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8005d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8005d66:	431a      	orrs	r2, r3
             Init.ClockDiv
 8005d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8005d6a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8005d6c:	68fa      	ldr	r2, [r7, #12]
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8005d7a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005d7e:	68fa      	ldr	r2, [r7, #12]
 8005d80:	431a      	orrs	r2, r3
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005d86:	2300      	movs	r3, #0
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3714      	adds	r7, #20
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d92:	b004      	add	sp, #16
 8005d94:	4770      	bx	lr

08005d96 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8005d96:	b480      	push	{r7}
 8005d98:	b083      	sub	sp, #12
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	370c      	adds	r7, #12
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr

08005db0 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8005db0:	b480      	push	{r7}
 8005db2:	b083      	sub	sp, #12
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005dc4:	2300      	movs	r3, #0
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	370c      	adds	r7, #12
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr

08005dd2 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8005dd2:	b480      	push	{r7}
 8005dd4:	b083      	sub	sp, #12
 8005dd6:	af00      	add	r7, sp, #0
 8005dd8:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2203      	movs	r2, #3
 8005dde:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005de0:	2300      	movs	r3, #0
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	370c      	adds	r7, #12
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr

08005dee <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8005dee:	b480      	push	{r7}
 8005df0:	b083      	sub	sp, #12
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f003 0303 	and.w	r3, r3, #3
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	370c      	adds	r7, #12
 8005e02:	46bd      	mov	sp, r7
 8005e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e08:	4770      	bx	lr

08005e0a <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8005e0a:	b480      	push	{r7}
 8005e0c:	b085      	sub	sp, #20
 8005e0e:	af00      	add	r7, sp, #0
 8005e10:	6078      	str	r0, [r7, #4]
 8005e12:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005e14:	2300      	movs	r3, #0
 8005e16:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	681a      	ldr	r2, [r3, #0]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005e28:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8005e2e:	431a      	orrs	r2, r3
                       Command->CPSM);
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8005e34:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005e36:	68fa      	ldr	r2, [r7, #12]
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	68db      	ldr	r3, [r3, #12]
 8005e40:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005e44:	f023 030f 	bic.w	r3, r3, #15
 8005e48:	68fa      	ldr	r2, [r7, #12]
 8005e4a:	431a      	orrs	r2, r3
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8005e50:	2300      	movs	r3, #0
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3714      	adds	r7, #20
 8005e56:	46bd      	mov	sp, r7
 8005e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5c:	4770      	bx	lr

08005e5e <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8005e5e:	b480      	push	{r7}
 8005e60:	b083      	sub	sp, #12
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	691b      	ldr	r3, [r3, #16]
 8005e6a:	b2db      	uxtb	r3, r3
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	370c      	adds	r7, #12
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr

08005e78 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b085      	sub	sp, #20
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	3314      	adds	r3, #20
 8005e86:	461a      	mov	r2, r3
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	4413      	add	r3, r2
 8005e8c:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
}  
 8005e92:	4618      	mov	r0, r3
 8005e94:	3714      	adds	r7, #20
 8005e96:	46bd      	mov	sp, r7
 8005e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9c:	4770      	bx	lr

08005e9e <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8005e9e:	b480      	push	{r7}
 8005ea0:	b085      	sub	sp, #20
 8005ea2:	af00      	add	r7, sp, #0
 8005ea4:	6078      	str	r0, [r7, #4]
 8005ea6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	681a      	ldr	r2, [r3, #0]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	685a      	ldr	r2, [r3, #4]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005ec4:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8005eca:	431a      	orrs	r2, r3
                       Data->DPSM);
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8005ed0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005ed2:	68fa      	ldr	r2, [r7, #12]
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005edc:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	431a      	orrs	r2, r3
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8005ee8:	2300      	movs	r3, #0

}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3714      	adds	r7, #20
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef4:	4770      	bx	lr

08005ef6 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8005ef6:	b580      	push	{r7, lr}
 8005ef8:	b088      	sub	sp, #32
 8005efa:	af00      	add	r7, sp, #0
 8005efc:	6078      	str	r0, [r7, #4]
 8005efe:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8005f04:	2310      	movs	r3, #16
 8005f06:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005f08:	2340      	movs	r3, #64	; 0x40
 8005f0a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005f10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f14:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005f16:	f107 0308 	add.w	r3, r7, #8
 8005f1a:	4619      	mov	r1, r3
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f7ff ff74 	bl	8005e0a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8005f22:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f26:	2110      	movs	r1, #16
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f000 fa19 	bl	8006360 <SDMMC_GetCmdResp1>
 8005f2e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005f30:	69fb      	ldr	r3, [r7, #28]
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3720      	adds	r7, #32
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}

08005f3a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005f3a:	b580      	push	{r7, lr}
 8005f3c:	b088      	sub	sp, #32
 8005f3e:	af00      	add	r7, sp, #0
 8005f40:	6078      	str	r0, [r7, #4]
 8005f42:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8005f48:	2311      	movs	r3, #17
 8005f4a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005f4c:	2340      	movs	r3, #64	; 0x40
 8005f4e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005f50:	2300      	movs	r3, #0
 8005f52:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005f54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f58:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005f5a:	f107 0308 	add.w	r3, r7, #8
 8005f5e:	4619      	mov	r1, r3
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f7ff ff52 	bl	8005e0a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8005f66:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f6a:	2111      	movs	r1, #17
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f000 f9f7 	bl	8006360 <SDMMC_GetCmdResp1>
 8005f72:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005f74:	69fb      	ldr	r3, [r7, #28]
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3720      	adds	r7, #32
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}

08005f7e <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005f7e:	b580      	push	{r7, lr}
 8005f80:	b088      	sub	sp, #32
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	6078      	str	r0, [r7, #4]
 8005f86:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8005f8c:	2312      	movs	r3, #18
 8005f8e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005f90:	2340      	movs	r3, #64	; 0x40
 8005f92:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005f94:	2300      	movs	r3, #0
 8005f96:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005f98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f9c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005f9e:	f107 0308 	add.w	r3, r7, #8
 8005fa2:	4619      	mov	r1, r3
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f7ff ff30 	bl	8005e0a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005faa:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fae:	2112      	movs	r1, #18
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f000 f9d5 	bl	8006360 <SDMMC_GetCmdResp1>
 8005fb6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005fb8:	69fb      	ldr	r3, [r7, #28]
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3720      	adds	r7, #32
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}

08005fc2 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8005fc2:	b580      	push	{r7, lr}
 8005fc4:	b088      	sub	sp, #32
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	6078      	str	r0, [r7, #4]
 8005fca:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8005fd0:	2318      	movs	r3, #24
 8005fd2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005fd4:	2340      	movs	r3, #64	; 0x40
 8005fd6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005fdc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005fe0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005fe2:	f107 0308 	add.w	r3, r7, #8
 8005fe6:	4619      	mov	r1, r3
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f7ff ff0e 	bl	8005e0a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8005fee:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ff2:	2118      	movs	r1, #24
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f000 f9b3 	bl	8006360 <SDMMC_GetCmdResp1>
 8005ffa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005ffc:	69fb      	ldr	r3, [r7, #28]
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3720      	adds	r7, #32
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}

08006006 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8006006:	b580      	push	{r7, lr}
 8006008:	b088      	sub	sp, #32
 800600a:	af00      	add	r7, sp, #0
 800600c:	6078      	str	r0, [r7, #4]
 800600e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8006014:	2319      	movs	r3, #25
 8006016:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006018:	2340      	movs	r3, #64	; 0x40
 800601a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800601c:	2300      	movs	r3, #0
 800601e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006020:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006024:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006026:	f107 0308 	add.w	r3, r7, #8
 800602a:	4619      	mov	r1, r3
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f7ff feec 	bl	8005e0a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8006032:	f241 3288 	movw	r2, #5000	; 0x1388
 8006036:	2119      	movs	r1, #25
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f000 f991 	bl	8006360 <SDMMC_GetCmdResp1>
 800603e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006040:	69fb      	ldr	r3, [r7, #28]
}
 8006042:	4618      	mov	r0, r3
 8006044:	3720      	adds	r7, #32
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}
	...

0800604c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b088      	sub	sp, #32
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8006054:	2300      	movs	r3, #0
 8006056:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8006058:	230c      	movs	r3, #12
 800605a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800605c:	2340      	movs	r3, #64	; 0x40
 800605e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006060:	2300      	movs	r3, #0
 8006062:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006064:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006068:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800606a:	f107 0308 	add.w	r3, r7, #8
 800606e:	4619      	mov	r1, r3
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f7ff feca 	bl	8005e0a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8006076:	4a05      	ldr	r2, [pc, #20]	; (800608c <SDMMC_CmdStopTransfer+0x40>)
 8006078:	210c      	movs	r1, #12
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f000 f970 	bl	8006360 <SDMMC_GetCmdResp1>
 8006080:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006082:	69fb      	ldr	r3, [r7, #28]
}
 8006084:	4618      	mov	r0, r3
 8006086:	3720      	adds	r7, #32
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}
 800608c:	05f5e100 	.word	0x05f5e100

08006090 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b08a      	sub	sp, #40	; 0x28
 8006094:	af00      	add	r7, sp, #0
 8006096:	60f8      	str	r0, [r7, #12]
 8006098:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80060a0:	2307      	movs	r3, #7
 80060a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80060a4:	2340      	movs	r3, #64	; 0x40
 80060a6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80060a8:	2300      	movs	r3, #0
 80060aa:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80060ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80060b0:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80060b2:	f107 0310 	add.w	r3, r7, #16
 80060b6:	4619      	mov	r1, r3
 80060b8:	68f8      	ldr	r0, [r7, #12]
 80060ba:	f7ff fea6 	bl	8005e0a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80060be:	f241 3288 	movw	r2, #5000	; 0x1388
 80060c2:	2107      	movs	r1, #7
 80060c4:	68f8      	ldr	r0, [r7, #12]
 80060c6:	f000 f94b 	bl	8006360 <SDMMC_GetCmdResp1>
 80060ca:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80060cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3728      	adds	r7, #40	; 0x28
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}

080060d6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80060d6:	b580      	push	{r7, lr}
 80060d8:	b088      	sub	sp, #32
 80060da:	af00      	add	r7, sp, #0
 80060dc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80060de:	2300      	movs	r3, #0
 80060e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80060e2:	2300      	movs	r3, #0
 80060e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80060e6:	2300      	movs	r3, #0
 80060e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80060ea:	2300      	movs	r3, #0
 80060ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80060ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80060f2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80060f4:	f107 0308 	add.w	r3, r7, #8
 80060f8:	4619      	mov	r1, r3
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f7ff fe85 	bl	8005e0a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f000 fb65 	bl	80067d0 <SDMMC_GetCmdError>
 8006106:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006108:	69fb      	ldr	r3, [r7, #28]
}
 800610a:	4618      	mov	r0, r3
 800610c:	3720      	adds	r7, #32
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}

08006112 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8006112:	b580      	push	{r7, lr}
 8006114:	b088      	sub	sp, #32
 8006116:	af00      	add	r7, sp, #0
 8006118:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800611a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800611e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8006120:	2308      	movs	r3, #8
 8006122:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006124:	2340      	movs	r3, #64	; 0x40
 8006126:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006128:	2300      	movs	r3, #0
 800612a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800612c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006130:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006132:	f107 0308 	add.w	r3, r7, #8
 8006136:	4619      	mov	r1, r3
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f7ff fe66 	bl	8005e0a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f000 faf8 	bl	8006734 <SDMMC_GetCmdResp7>
 8006144:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006146:	69fb      	ldr	r3, [r7, #28]
}
 8006148:	4618      	mov	r0, r3
 800614a:	3720      	adds	r7, #32
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}

08006150 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b088      	sub	sp, #32
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
 8006158:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800615e:	2337      	movs	r3, #55	; 0x37
 8006160:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006162:	2340      	movs	r3, #64	; 0x40
 8006164:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006166:	2300      	movs	r3, #0
 8006168:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800616a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800616e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006170:	f107 0308 	add.w	r3, r7, #8
 8006174:	4619      	mov	r1, r3
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f7ff fe47 	bl	8005e0a <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800617c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006180:	2137      	movs	r1, #55	; 0x37
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f000 f8ec 	bl	8006360 <SDMMC_GetCmdResp1>
 8006188:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800618a:	69fb      	ldr	r3, [r7, #28]
}
 800618c:	4618      	mov	r0, r3
 800618e:	3720      	adds	r7, #32
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}

08006194 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b088      	sub	sp, #32
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
 800619c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80061a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80061a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80061aa:	2329      	movs	r3, #41	; 0x29
 80061ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80061ae:	2340      	movs	r3, #64	; 0x40
 80061b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80061b2:	2300      	movs	r3, #0
 80061b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80061b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80061ba:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80061bc:	f107 0308 	add.w	r3, r7, #8
 80061c0:	4619      	mov	r1, r3
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f7ff fe21 	bl	8005e0a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f000 f9ff 	bl	80065cc <SDMMC_GetCmdResp3>
 80061ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80061d0:	69fb      	ldr	r3, [r7, #28]
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3720      	adds	r7, #32
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}

080061da <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 80061da:	b580      	push	{r7, lr}
 80061dc:	b088      	sub	sp, #32
 80061de:	af00      	add	r7, sp, #0
 80061e0:	6078      	str	r0, [r7, #4]
 80061e2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80061e8:	2306      	movs	r3, #6
 80061ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80061ec:	2340      	movs	r3, #64	; 0x40
 80061ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80061f0:	2300      	movs	r3, #0
 80061f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80061f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80061f8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80061fa:	f107 0308 	add.w	r3, r7, #8
 80061fe:	4619      	mov	r1, r3
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	f7ff fe02 	bl	8005e0a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8006206:	f241 3288 	movw	r2, #5000	; 0x1388
 800620a:	2106      	movs	r1, #6
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	f000 f8a7 	bl	8006360 <SDMMC_GetCmdResp1>
 8006212:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006214:	69fb      	ldr	r3, [r7, #28]
}
 8006216:	4618      	mov	r0, r3
 8006218:	3720      	adds	r7, #32
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}

0800621e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800621e:	b580      	push	{r7, lr}
 8006220:	b088      	sub	sp, #32
 8006222:	af00      	add	r7, sp, #0
 8006224:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8006226:	2300      	movs	r3, #0
 8006228:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800622a:	2333      	movs	r3, #51	; 0x33
 800622c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800622e:	2340      	movs	r3, #64	; 0x40
 8006230:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006232:	2300      	movs	r3, #0
 8006234:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006236:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800623a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800623c:	f107 0308 	add.w	r3, r7, #8
 8006240:	4619      	mov	r1, r3
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f7ff fde1 	bl	8005e0a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8006248:	f241 3288 	movw	r2, #5000	; 0x1388
 800624c:	2133      	movs	r1, #51	; 0x33
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f000 f886 	bl	8006360 <SDMMC_GetCmdResp1>
 8006254:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006256:	69fb      	ldr	r3, [r7, #28]
}
 8006258:	4618      	mov	r0, r3
 800625a:	3720      	adds	r7, #32
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}

08006260 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b088      	sub	sp, #32
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8006268:	2300      	movs	r3, #0
 800626a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800626c:	2302      	movs	r3, #2
 800626e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006270:	23c0      	movs	r3, #192	; 0xc0
 8006272:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006274:	2300      	movs	r3, #0
 8006276:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006278:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800627c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800627e:	f107 0308 	add.w	r3, r7, #8
 8006282:	4619      	mov	r1, r3
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f7ff fdc0 	bl	8005e0a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f000 f956 	bl	800653c <SDMMC_GetCmdResp2>
 8006290:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006292:	69fb      	ldr	r3, [r7, #28]
}
 8006294:	4618      	mov	r0, r3
 8006296:	3720      	adds	r7, #32
 8006298:	46bd      	mov	sp, r7
 800629a:	bd80      	pop	{r7, pc}

0800629c <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b088      	sub	sp, #32
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
 80062a4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80062aa:	2309      	movs	r3, #9
 80062ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80062ae:	23c0      	movs	r3, #192	; 0xc0
 80062b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80062b2:	2300      	movs	r3, #0
 80062b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80062b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80062ba:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80062bc:	f107 0308 	add.w	r3, r7, #8
 80062c0:	4619      	mov	r1, r3
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f7ff fda1 	bl	8005e0a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f000 f937 	bl	800653c <SDMMC_GetCmdResp2>
 80062ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80062d0:	69fb      	ldr	r3, [r7, #28]
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	3720      	adds	r7, #32
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}

080062da <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80062da:	b580      	push	{r7, lr}
 80062dc:	b088      	sub	sp, #32
 80062de:	af00      	add	r7, sp, #0
 80062e0:	6078      	str	r0, [r7, #4]
 80062e2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80062e4:	2300      	movs	r3, #0
 80062e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80062e8:	2303      	movs	r3, #3
 80062ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80062ec:	2340      	movs	r3, #64	; 0x40
 80062ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80062f0:	2300      	movs	r3, #0
 80062f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80062f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80062f8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80062fa:	f107 0308 	add.w	r3, r7, #8
 80062fe:	4619      	mov	r1, r3
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f7ff fd82 	bl	8005e0a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8006306:	683a      	ldr	r2, [r7, #0]
 8006308:	2103      	movs	r1, #3
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f000 f99c 	bl	8006648 <SDMMC_GetCmdResp6>
 8006310:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006312:	69fb      	ldr	r3, [r7, #28]
}
 8006314:	4618      	mov	r0, r3
 8006316:	3720      	adds	r7, #32
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}

0800631c <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b088      	sub	sp, #32
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
 8006324:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800632a:	230d      	movs	r3, #13
 800632c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800632e:	2340      	movs	r3, #64	; 0x40
 8006330:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006332:	2300      	movs	r3, #0
 8006334:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006336:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800633a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800633c:	f107 0308 	add.w	r3, r7, #8
 8006340:	4619      	mov	r1, r3
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f7ff fd61 	bl	8005e0a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8006348:	f241 3288 	movw	r2, #5000	; 0x1388
 800634c:	210d      	movs	r1, #13
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f000 f806 	bl	8006360 <SDMMC_GetCmdResp1>
 8006354:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006356:	69fb      	ldr	r3, [r7, #28]
}
 8006358:	4618      	mov	r0, r3
 800635a:	3720      	adds	r7, #32
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}

08006360 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b088      	sub	sp, #32
 8006364:	af00      	add	r7, sp, #0
 8006366:	60f8      	str	r0, [r7, #12]
 8006368:	460b      	mov	r3, r1
 800636a:	607a      	str	r2, [r7, #4]
 800636c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800636e:	4b70      	ldr	r3, [pc, #448]	; (8006530 <SDMMC_GetCmdResp1+0x1d0>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a70      	ldr	r2, [pc, #448]	; (8006534 <SDMMC_GetCmdResp1+0x1d4>)
 8006374:	fba2 2303 	umull	r2, r3, r2, r3
 8006378:	0a5a      	lsrs	r2, r3, #9
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	fb02 f303 	mul.w	r3, r2, r3
 8006380:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8006382:	69fb      	ldr	r3, [r7, #28]
 8006384:	1e5a      	subs	r2, r3, #1
 8006386:	61fa      	str	r2, [r7, #28]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d102      	bne.n	8006392 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800638c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006390:	e0c9      	b.n	8006526 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006396:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006398:	69bb      	ldr	r3, [r7, #24]
 800639a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d0ef      	beq.n	8006382 <SDMMC_GetCmdResp1+0x22>
 80063a2:	69bb      	ldr	r3, [r7, #24]
 80063a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d1ea      	bne.n	8006382 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063b0:	f003 0304 	and.w	r3, r3, #4
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d004      	beq.n	80063c2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2204      	movs	r2, #4
 80063bc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80063be:	2304      	movs	r3, #4
 80063c0:	e0b1      	b.n	8006526 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063c6:	f003 0301 	and.w	r3, r3, #1
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d004      	beq.n	80063d8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2201      	movs	r2, #1
 80063d2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80063d4:	2301      	movs	r3, #1
 80063d6:	e0a6      	b.n	8006526 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	22c5      	movs	r2, #197	; 0xc5
 80063dc:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80063de:	68f8      	ldr	r0, [r7, #12]
 80063e0:	f7ff fd3d 	bl	8005e5e <SDIO_GetCommandResponse>
 80063e4:	4603      	mov	r3, r0
 80063e6:	461a      	mov	r2, r3
 80063e8:	7afb      	ldrb	r3, [r7, #11]
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d001      	beq.n	80063f2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80063ee:	2301      	movs	r3, #1
 80063f0:	e099      	b.n	8006526 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80063f2:	2100      	movs	r1, #0
 80063f4:	68f8      	ldr	r0, [r7, #12]
 80063f6:	f7ff fd3f 	bl	8005e78 <SDIO_GetResponse>
 80063fa:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80063fc:	697a      	ldr	r2, [r7, #20]
 80063fe:	4b4e      	ldr	r3, [pc, #312]	; (8006538 <SDMMC_GetCmdResp1+0x1d8>)
 8006400:	4013      	ands	r3, r2
 8006402:	2b00      	cmp	r3, #0
 8006404:	d101      	bne.n	800640a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8006406:	2300      	movs	r3, #0
 8006408:	e08d      	b.n	8006526 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	2b00      	cmp	r3, #0
 800640e:	da02      	bge.n	8006416 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8006410:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006414:	e087      	b.n	8006526 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800641c:	2b00      	cmp	r3, #0
 800641e:	d001      	beq.n	8006424 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8006420:	2340      	movs	r3, #64	; 0x40
 8006422:	e080      	b.n	8006526 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800642a:	2b00      	cmp	r3, #0
 800642c:	d001      	beq.n	8006432 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800642e:	2380      	movs	r3, #128	; 0x80
 8006430:	e079      	b.n	8006526 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006438:	2b00      	cmp	r3, #0
 800643a:	d002      	beq.n	8006442 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800643c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006440:	e071      	b.n	8006526 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006448:	2b00      	cmp	r3, #0
 800644a:	d002      	beq.n	8006452 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800644c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006450:	e069      	b.n	8006526 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006458:	2b00      	cmp	r3, #0
 800645a:	d002      	beq.n	8006462 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800645c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006460:	e061      	b.n	8006526 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006468:	2b00      	cmp	r3, #0
 800646a:	d002      	beq.n	8006472 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800646c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006470:	e059      	b.n	8006526 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006478:	2b00      	cmp	r3, #0
 800647a:	d002      	beq.n	8006482 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800647c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006480:	e051      	b.n	8006526 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006488:	2b00      	cmp	r3, #0
 800648a:	d002      	beq.n	8006492 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800648c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006490:	e049      	b.n	8006526 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006498:	2b00      	cmp	r3, #0
 800649a:	d002      	beq.n	80064a2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800649c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80064a0:	e041      	b.n	8006526 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d002      	beq.n	80064b2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80064ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064b0:	e039      	b.n	8006526 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d002      	beq.n	80064c2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80064bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80064c0:	e031      	b.n	8006526 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d002      	beq.n	80064d2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80064cc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80064d0:	e029      	b.n	8006526 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d002      	beq.n	80064e2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80064dc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80064e0:	e021      	b.n	8006526 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d002      	beq.n	80064f2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80064ec:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80064f0:	e019      	b.n	8006526 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d002      	beq.n	8006502 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80064fc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006500:	e011      	b.n	8006526 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006508:	2b00      	cmp	r3, #0
 800650a:	d002      	beq.n	8006512 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800650c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006510:	e009      	b.n	8006526 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	f003 0308 	and.w	r3, r3, #8
 8006518:	2b00      	cmp	r3, #0
 800651a:	d002      	beq.n	8006522 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800651c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8006520:	e001      	b.n	8006526 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006522:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8006526:	4618      	mov	r0, r3
 8006528:	3720      	adds	r7, #32
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}
 800652e:	bf00      	nop
 8006530:	20000000 	.word	0x20000000
 8006534:	10624dd3 	.word	0x10624dd3
 8006538:	fdffe008 	.word	0xfdffe008

0800653c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800653c:	b480      	push	{r7}
 800653e:	b085      	sub	sp, #20
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006544:	4b1f      	ldr	r3, [pc, #124]	; (80065c4 <SDMMC_GetCmdResp2+0x88>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a1f      	ldr	r2, [pc, #124]	; (80065c8 <SDMMC_GetCmdResp2+0x8c>)
 800654a:	fba2 2303 	umull	r2, r3, r2, r3
 800654e:	0a5b      	lsrs	r3, r3, #9
 8006550:	f241 3288 	movw	r2, #5000	; 0x1388
 8006554:	fb02 f303 	mul.w	r3, r2, r3
 8006558:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	1e5a      	subs	r2, r3, #1
 800655e:	60fa      	str	r2, [r7, #12]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d102      	bne.n	800656a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006564:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006568:	e026      	b.n	80065b8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800656e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006576:	2b00      	cmp	r3, #0
 8006578:	d0ef      	beq.n	800655a <SDMMC_GetCmdResp2+0x1e>
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006580:	2b00      	cmp	r3, #0
 8006582:	d1ea      	bne.n	800655a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006588:	f003 0304 	and.w	r3, r3, #4
 800658c:	2b00      	cmp	r3, #0
 800658e:	d004      	beq.n	800659a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2204      	movs	r2, #4
 8006594:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006596:	2304      	movs	r3, #4
 8006598:	e00e      	b.n	80065b8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800659e:	f003 0301 	and.w	r3, r3, #1
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d004      	beq.n	80065b0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2201      	movs	r2, #1
 80065aa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80065ac:	2301      	movs	r3, #1
 80065ae:	e003      	b.n	80065b8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	22c5      	movs	r2, #197	; 0xc5
 80065b4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80065b6:	2300      	movs	r3, #0
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	3714      	adds	r7, #20
 80065bc:	46bd      	mov	sp, r7
 80065be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c2:	4770      	bx	lr
 80065c4:	20000000 	.word	0x20000000
 80065c8:	10624dd3 	.word	0x10624dd3

080065cc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b085      	sub	sp, #20
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80065d4:	4b1a      	ldr	r3, [pc, #104]	; (8006640 <SDMMC_GetCmdResp3+0x74>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a1a      	ldr	r2, [pc, #104]	; (8006644 <SDMMC_GetCmdResp3+0x78>)
 80065da:	fba2 2303 	umull	r2, r3, r2, r3
 80065de:	0a5b      	lsrs	r3, r3, #9
 80065e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80065e4:	fb02 f303 	mul.w	r3, r2, r3
 80065e8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	1e5a      	subs	r2, r3, #1
 80065ee:	60fa      	str	r2, [r7, #12]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d102      	bne.n	80065fa <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80065f4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80065f8:	e01b      	b.n	8006632 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065fe:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006606:	2b00      	cmp	r3, #0
 8006608:	d0ef      	beq.n	80065ea <SDMMC_GetCmdResp3+0x1e>
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006610:	2b00      	cmp	r3, #0
 8006612:	d1ea      	bne.n	80065ea <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006618:	f003 0304 	and.w	r3, r3, #4
 800661c:	2b00      	cmp	r3, #0
 800661e:	d004      	beq.n	800662a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2204      	movs	r2, #4
 8006624:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006626:	2304      	movs	r3, #4
 8006628:	e003      	b.n	8006632 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	22c5      	movs	r2, #197	; 0xc5
 800662e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8006630:	2300      	movs	r3, #0
}
 8006632:	4618      	mov	r0, r3
 8006634:	3714      	adds	r7, #20
 8006636:	46bd      	mov	sp, r7
 8006638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663c:	4770      	bx	lr
 800663e:	bf00      	nop
 8006640:	20000000 	.word	0x20000000
 8006644:	10624dd3 	.word	0x10624dd3

08006648 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b088      	sub	sp, #32
 800664c:	af00      	add	r7, sp, #0
 800664e:	60f8      	str	r0, [r7, #12]
 8006650:	460b      	mov	r3, r1
 8006652:	607a      	str	r2, [r7, #4]
 8006654:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006656:	4b35      	ldr	r3, [pc, #212]	; (800672c <SDMMC_GetCmdResp6+0xe4>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a35      	ldr	r2, [pc, #212]	; (8006730 <SDMMC_GetCmdResp6+0xe8>)
 800665c:	fba2 2303 	umull	r2, r3, r2, r3
 8006660:	0a5b      	lsrs	r3, r3, #9
 8006662:	f241 3288 	movw	r2, #5000	; 0x1388
 8006666:	fb02 f303 	mul.w	r3, r2, r3
 800666a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800666c:	69fb      	ldr	r3, [r7, #28]
 800666e:	1e5a      	subs	r2, r3, #1
 8006670:	61fa      	str	r2, [r7, #28]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d102      	bne.n	800667c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006676:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800667a:	e052      	b.n	8006722 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006680:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006682:	69bb      	ldr	r3, [r7, #24]
 8006684:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006688:	2b00      	cmp	r3, #0
 800668a:	d0ef      	beq.n	800666c <SDMMC_GetCmdResp6+0x24>
 800668c:	69bb      	ldr	r3, [r7, #24]
 800668e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006692:	2b00      	cmp	r3, #0
 8006694:	d1ea      	bne.n	800666c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800669a:	f003 0304 	and.w	r3, r3, #4
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d004      	beq.n	80066ac <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2204      	movs	r2, #4
 80066a6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80066a8:	2304      	movs	r3, #4
 80066aa:	e03a      	b.n	8006722 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066b0:	f003 0301 	and.w	r3, r3, #1
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d004      	beq.n	80066c2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2201      	movs	r2, #1
 80066bc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80066be:	2301      	movs	r3, #1
 80066c0:	e02f      	b.n	8006722 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80066c2:	68f8      	ldr	r0, [r7, #12]
 80066c4:	f7ff fbcb 	bl	8005e5e <SDIO_GetCommandResponse>
 80066c8:	4603      	mov	r3, r0
 80066ca:	461a      	mov	r2, r3
 80066cc:	7afb      	ldrb	r3, [r7, #11]
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d001      	beq.n	80066d6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80066d2:	2301      	movs	r3, #1
 80066d4:	e025      	b.n	8006722 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	22c5      	movs	r2, #197	; 0xc5
 80066da:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80066dc:	2100      	movs	r1, #0
 80066de:	68f8      	ldr	r0, [r7, #12]
 80066e0:	f7ff fbca 	bl	8005e78 <SDIO_GetResponse>
 80066e4:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d106      	bne.n	80066fe <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	0c1b      	lsrs	r3, r3, #16
 80066f4:	b29a      	uxth	r2, r3
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80066fa:	2300      	movs	r3, #0
 80066fc:	e011      	b.n	8006722 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006704:	2b00      	cmp	r3, #0
 8006706:	d002      	beq.n	800670e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006708:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800670c:	e009      	b.n	8006722 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006714:	2b00      	cmp	r3, #0
 8006716:	d002      	beq.n	800671e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006718:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800671c:	e001      	b.n	8006722 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800671e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8006722:	4618      	mov	r0, r3
 8006724:	3720      	adds	r7, #32
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}
 800672a:	bf00      	nop
 800672c:	20000000 	.word	0x20000000
 8006730:	10624dd3 	.word	0x10624dd3

08006734 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8006734:	b480      	push	{r7}
 8006736:	b085      	sub	sp, #20
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800673c:	4b22      	ldr	r3, [pc, #136]	; (80067c8 <SDMMC_GetCmdResp7+0x94>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a22      	ldr	r2, [pc, #136]	; (80067cc <SDMMC_GetCmdResp7+0x98>)
 8006742:	fba2 2303 	umull	r2, r3, r2, r3
 8006746:	0a5b      	lsrs	r3, r3, #9
 8006748:	f241 3288 	movw	r2, #5000	; 0x1388
 800674c:	fb02 f303 	mul.w	r3, r2, r3
 8006750:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	1e5a      	subs	r2, r3, #1
 8006756:	60fa      	str	r2, [r7, #12]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d102      	bne.n	8006762 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800675c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006760:	e02c      	b.n	80067bc <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006766:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800676e:	2b00      	cmp	r3, #0
 8006770:	d0ef      	beq.n	8006752 <SDMMC_GetCmdResp7+0x1e>
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006778:	2b00      	cmp	r3, #0
 800677a:	d1ea      	bne.n	8006752 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006780:	f003 0304 	and.w	r3, r3, #4
 8006784:	2b00      	cmp	r3, #0
 8006786:	d004      	beq.n	8006792 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2204      	movs	r2, #4
 800678c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800678e:	2304      	movs	r3, #4
 8006790:	e014      	b.n	80067bc <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006796:	f003 0301 	and.w	r3, r3, #1
 800679a:	2b00      	cmp	r3, #0
 800679c:	d004      	beq.n	80067a8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2201      	movs	r2, #1
 80067a2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80067a4:	2301      	movs	r3, #1
 80067a6:	e009      	b.n	80067bc <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d002      	beq.n	80067ba <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2240      	movs	r2, #64	; 0x40
 80067b8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80067ba:	2300      	movs	r3, #0
  
}
 80067bc:	4618      	mov	r0, r3
 80067be:	3714      	adds	r7, #20
 80067c0:	46bd      	mov	sp, r7
 80067c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c6:	4770      	bx	lr
 80067c8:	20000000 	.word	0x20000000
 80067cc:	10624dd3 	.word	0x10624dd3

080067d0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b085      	sub	sp, #20
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80067d8:	4b11      	ldr	r3, [pc, #68]	; (8006820 <SDMMC_GetCmdError+0x50>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a11      	ldr	r2, [pc, #68]	; (8006824 <SDMMC_GetCmdError+0x54>)
 80067de:	fba2 2303 	umull	r2, r3, r2, r3
 80067e2:	0a5b      	lsrs	r3, r3, #9
 80067e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80067e8:	fb02 f303 	mul.w	r3, r2, r3
 80067ec:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	1e5a      	subs	r2, r3, #1
 80067f2:	60fa      	str	r2, [r7, #12]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d102      	bne.n	80067fe <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80067f8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80067fc:	e009      	b.n	8006812 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006806:	2b00      	cmp	r3, #0
 8006808:	d0f1      	beq.n	80067ee <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	22c5      	movs	r2, #197	; 0xc5
 800680e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8006810:	2300      	movs	r3, #0
}
 8006812:	4618      	mov	r0, r3
 8006814:	3714      	adds	r7, #20
 8006816:	46bd      	mov	sp, r7
 8006818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681c:	4770      	bx	lr
 800681e:	bf00      	nop
 8006820:	20000000 	.word	0x20000000
 8006824:	10624dd3 	.word	0x10624dd3

08006828 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800682c:	4904      	ldr	r1, [pc, #16]	; (8006840 <MX_FATFS_Init+0x18>)
 800682e:	4805      	ldr	r0, [pc, #20]	; (8006844 <MX_FATFS_Init+0x1c>)
 8006830:	f002 ff7e 	bl	8009730 <FATFS_LinkDriver>
 8006834:	4603      	mov	r3, r0
 8006836:	461a      	mov	r2, r3
 8006838:	4b03      	ldr	r3, [pc, #12]	; (8006848 <MX_FATFS_Init+0x20>)
 800683a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800683c:	bf00      	nop
 800683e:	bd80      	pop	{r7, pc}
 8006840:	200002d8 	.word	0x200002d8
 8006844:	08010f10 	.word	0x08010f10
 8006848:	200002d4 	.word	0x200002d4

0800684c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800684c:	b480      	push	{r7}
 800684e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006850:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8006852:	4618      	mov	r0, r3
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr

0800685c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b082      	sub	sp, #8
 8006860:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8006862:	2300      	movs	r3, #0
 8006864:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8006866:	f000 f896 	bl	8006996 <BSP_SD_IsDetected>
 800686a:	4603      	mov	r3, r0
 800686c:	2b01      	cmp	r3, #1
 800686e:	d001      	beq.n	8006874 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8006870:	2301      	movs	r3, #1
 8006872:	e012      	b.n	800689a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8006874:	480b      	ldr	r0, [pc, #44]	; (80068a4 <BSP_SD_Init+0x48>)
 8006876:	f7fc fb67 	bl	8002f48 <HAL_SD_Init>
 800687a:	4603      	mov	r3, r0
 800687c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800687e:	79fb      	ldrb	r3, [r7, #7]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d109      	bne.n	8006898 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8006884:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006888:	4806      	ldr	r0, [pc, #24]	; (80068a4 <BSP_SD_Init+0x48>)
 800688a:	f7fd f935 	bl	8003af8 <HAL_SD_ConfigWideBusOperation>
 800688e:	4603      	mov	r3, r0
 8006890:	2b00      	cmp	r3, #0
 8006892:	d001      	beq.n	8006898 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8006894:	2301      	movs	r3, #1
 8006896:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8006898:	79fb      	ldrb	r3, [r7, #7]
}
 800689a:	4618      	mov	r0, r3
 800689c:	3708      	adds	r7, #8
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}
 80068a2:	bf00      	nop
 80068a4:	20000044 	.word	0x20000044

080068a8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b086      	sub	sp, #24
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	60f8      	str	r0, [r7, #12]
 80068b0:	60b9      	str	r1, [r7, #8]
 80068b2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80068b4:	2300      	movs	r3, #0
 80068b6:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	68ba      	ldr	r2, [r7, #8]
 80068bc:	68f9      	ldr	r1, [r7, #12]
 80068be:	4806      	ldr	r0, [pc, #24]	; (80068d8 <BSP_SD_ReadBlocks_DMA+0x30>)
 80068c0:	f7fc fbf2 	bl	80030a8 <HAL_SD_ReadBlocks_DMA>
 80068c4:	4603      	mov	r3, r0
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d001      	beq.n	80068ce <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80068ca:	2301      	movs	r3, #1
 80068cc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80068ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	3718      	adds	r7, #24
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}
 80068d8:	20000044 	.word	0x20000044

080068dc <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b086      	sub	sp, #24
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	60f8      	str	r0, [r7, #12]
 80068e4:	60b9      	str	r1, [r7, #8]
 80068e6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80068e8:	2300      	movs	r3, #0
 80068ea:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	68ba      	ldr	r2, [r7, #8]
 80068f0:	68f9      	ldr	r1, [r7, #12]
 80068f2:	4806      	ldr	r0, [pc, #24]	; (800690c <BSP_SD_WriteBlocks_DMA+0x30>)
 80068f4:	f7fc fcba 	bl	800326c <HAL_SD_WriteBlocks_DMA>
 80068f8:	4603      	mov	r3, r0
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d001      	beq.n	8006902 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80068fe:	2301      	movs	r3, #1
 8006900:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8006902:	7dfb      	ldrb	r3, [r7, #23]
}
 8006904:	4618      	mov	r0, r3
 8006906:	3718      	adds	r7, #24
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}
 800690c:	20000044 	.word	0x20000044

08006910 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8006914:	4805      	ldr	r0, [pc, #20]	; (800692c <BSP_SD_GetCardState+0x1c>)
 8006916:	f7fd f989 	bl	8003c2c <HAL_SD_GetCardState>
 800691a:	4603      	mov	r3, r0
 800691c:	2b04      	cmp	r3, #4
 800691e:	bf14      	ite	ne
 8006920:	2301      	movne	r3, #1
 8006922:	2300      	moveq	r3, #0
 8006924:	b2db      	uxtb	r3, r3
}
 8006926:	4618      	mov	r0, r3
 8006928:	bd80      	pop	{r7, pc}
 800692a:	bf00      	nop
 800692c:	20000044 	.word	0x20000044

08006930 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b082      	sub	sp, #8
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8006938:	6879      	ldr	r1, [r7, #4]
 800693a:	4803      	ldr	r0, [pc, #12]	; (8006948 <BSP_SD_GetCardInfo+0x18>)
 800693c:	f7fd f8b0 	bl	8003aa0 <HAL_SD_GetCardInfo>
}
 8006940:	bf00      	nop
 8006942:	3708      	adds	r7, #8
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}
 8006948:	20000044 	.word	0x20000044

0800694c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b082      	sub	sp, #8
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8006954:	f000 f818 	bl	8006988 <BSP_SD_AbortCallback>
}
 8006958:	bf00      	nop
 800695a:	3708      	adds	r7, #8
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}

08006960 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b082      	sub	sp, #8
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8006968:	f000 fa4a 	bl	8006e00 <BSP_SD_WriteCpltCallback>
}
 800696c:	bf00      	nop
 800696e:	3708      	adds	r7, #8
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}

08006974 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b082      	sub	sp, #8
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800697c:	f000 fa4c 	bl	8006e18 <BSP_SD_ReadCpltCallback>
}
 8006980:	bf00      	nop
 8006982:	3708      	adds	r7, #8
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}

08006988 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8006988:	b480      	push	{r7}
 800698a:	af00      	add	r7, sp, #0

}
 800698c:	bf00      	nop
 800698e:	46bd      	mov	sp, r7
 8006990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006994:	4770      	bx	lr

08006996 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8006996:	b580      	push	{r7, lr}
 8006998:	b082      	sub	sp, #8
 800699a:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800699c:	2301      	movs	r3, #1
 800699e:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80069a0:	f000 f80c 	bl	80069bc <BSP_PlatformIsDetected>
 80069a4:	4603      	mov	r3, r0
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d101      	bne.n	80069ae <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80069aa:	2300      	movs	r3, #0
 80069ac:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80069ae:	79fb      	ldrb	r3, [r7, #7]
 80069b0:	b2db      	uxtb	r3, r3
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	3708      	adds	r7, #8
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}
	...

080069bc <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80069bc:	b580      	push	{r7, lr}
 80069be:	b082      	sub	sp, #8
 80069c0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80069c2:	2301      	movs	r3, #1
 80069c4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80069c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80069ca:	4806      	ldr	r0, [pc, #24]	; (80069e4 <BSP_PlatformIsDetected+0x28>)
 80069cc:	f7fb fe14 	bl	80025f8 <HAL_GPIO_ReadPin>
 80069d0:	4603      	mov	r3, r0
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d001      	beq.n	80069da <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 80069d6:	2300      	movs	r3, #0
 80069d8:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80069da:	79fb      	ldrb	r3, [r7, #7]
}
 80069dc:	4618      	mov	r0, r3
 80069de:	3708      	adds	r7, #8
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd80      	pop	{r7, pc}
 80069e4:	40020000 	.word	0x40020000

080069e8 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b084      	sub	sp, #16
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 80069f0:	f7fa ffb6 	bl	8001960 <HAL_GetTick>
 80069f4:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 80069f6:	e006      	b.n	8006a06 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80069f8:	f7ff ff8a 	bl	8006910 <BSP_SD_GetCardState>
 80069fc:	4603      	mov	r3, r0
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d101      	bne.n	8006a06 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8006a02:	2300      	movs	r3, #0
 8006a04:	e009      	b.n	8006a1a <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8006a06:	f7fa ffab 	bl	8001960 <HAL_GetTick>
 8006a0a:	4602      	mov	r2, r0
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	1ad3      	subs	r3, r2, r3
 8006a10:	687a      	ldr	r2, [r7, #4]
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d8f0      	bhi.n	80069f8 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8006a16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	3710      	adds	r7, #16
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}
	...

08006a24 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b082      	sub	sp, #8
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8006a2e:	4b0b      	ldr	r3, [pc, #44]	; (8006a5c <SD_CheckStatus+0x38>)
 8006a30:	2201      	movs	r2, #1
 8006a32:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8006a34:	f7ff ff6c 	bl	8006910 <BSP_SD_GetCardState>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d107      	bne.n	8006a4e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8006a3e:	4b07      	ldr	r3, [pc, #28]	; (8006a5c <SD_CheckStatus+0x38>)
 8006a40:	781b      	ldrb	r3, [r3, #0]
 8006a42:	b2db      	uxtb	r3, r3
 8006a44:	f023 0301 	bic.w	r3, r3, #1
 8006a48:	b2da      	uxtb	r2, r3
 8006a4a:	4b04      	ldr	r3, [pc, #16]	; (8006a5c <SD_CheckStatus+0x38>)
 8006a4c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8006a4e:	4b03      	ldr	r3, [pc, #12]	; (8006a5c <SD_CheckStatus+0x38>)
 8006a50:	781b      	ldrb	r3, [r3, #0]
 8006a52:	b2db      	uxtb	r3, r3
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	3708      	adds	r7, #8
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bd80      	pop	{r7, pc}
 8006a5c:	20000009 	.word	0x20000009

08006a60 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b082      	sub	sp, #8
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	4603      	mov	r3, r0
 8006a68:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8006a6a:	f7ff fef7 	bl	800685c <BSP_SD_Init>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d107      	bne.n	8006a84 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8006a74:	79fb      	ldrb	r3, [r7, #7]
 8006a76:	4618      	mov	r0, r3
 8006a78:	f7ff ffd4 	bl	8006a24 <SD_CheckStatus>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	461a      	mov	r2, r3
 8006a80:	4b04      	ldr	r3, [pc, #16]	; (8006a94 <SD_initialize+0x34>)
 8006a82:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8006a84:	4b03      	ldr	r3, [pc, #12]	; (8006a94 <SD_initialize+0x34>)
 8006a86:	781b      	ldrb	r3, [r3, #0]
 8006a88:	b2db      	uxtb	r3, r3
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3708      	adds	r7, #8
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}
 8006a92:	bf00      	nop
 8006a94:	20000009 	.word	0x20000009

08006a98 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b082      	sub	sp, #8
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8006aa2:	79fb      	ldrb	r3, [r7, #7]
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	f7ff ffbd 	bl	8006a24 <SD_CheckStatus>
 8006aaa:	4603      	mov	r3, r0
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	3708      	adds	r7, #8
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}

08006ab4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b088      	sub	sp, #32
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	60b9      	str	r1, [r7, #8]
 8006abc:	607a      	str	r2, [r7, #4]
 8006abe:	603b      	str	r3, [r7, #0]
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8006ac8:	f247 5030 	movw	r0, #30000	; 0x7530
 8006acc:	f7ff ff8c 	bl	80069e8 <SD_CheckStatusWithTimeout>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	da01      	bge.n	8006ada <SD_read+0x26>
  {
    return res;
 8006ad6:	7ffb      	ldrb	r3, [r7, #31]
 8006ad8:	e08b      	b.n	8006bf2 <SD_read+0x13e>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	f003 0303 	and.w	r3, r3, #3
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d13b      	bne.n	8006b5c <SD_read+0xa8>
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8006ae4:	683a      	ldr	r2, [r7, #0]
 8006ae6:	6879      	ldr	r1, [r7, #4]
 8006ae8:	68b8      	ldr	r0, [r7, #8]
 8006aea:	f7ff fedd 	bl	80068a8 <BSP_SD_ReadBlocks_DMA>
 8006aee:	4603      	mov	r3, r0
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d17d      	bne.n	8006bf0 <SD_read+0x13c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8006af4:	4b41      	ldr	r3, [pc, #260]	; (8006bfc <SD_read+0x148>)
 8006af6:	2200      	movs	r2, #0
 8006af8:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8006afa:	f7fa ff31 	bl	8001960 <HAL_GetTick>
 8006afe:	6178      	str	r0, [r7, #20]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8006b00:	bf00      	nop
 8006b02:	4b3e      	ldr	r3, [pc, #248]	; (8006bfc <SD_read+0x148>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d108      	bne.n	8006b1c <SD_read+0x68>
 8006b0a:	f7fa ff29 	bl	8001960 <HAL_GetTick>
 8006b0e:	4602      	mov	r2, r0
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	1ad3      	subs	r3, r2, r3
 8006b14:	f247 522f 	movw	r2, #29999	; 0x752f
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d9f2      	bls.n	8006b02 <SD_read+0x4e>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8006b1c:	4b37      	ldr	r3, [pc, #220]	; (8006bfc <SD_read+0x148>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d102      	bne.n	8006b2a <SD_read+0x76>
      {
        res = RES_ERROR;
 8006b24:	2301      	movs	r3, #1
 8006b26:	77fb      	strb	r3, [r7, #31]
 8006b28:	e062      	b.n	8006bf0 <SD_read+0x13c>
      }
      else
      {
        ReadStatus = 0;
 8006b2a:	4b34      	ldr	r3, [pc, #208]	; (8006bfc <SD_read+0x148>)
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8006b30:	f7fa ff16 	bl	8001960 <HAL_GetTick>
 8006b34:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8006b36:	e007      	b.n	8006b48 <SD_read+0x94>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006b38:	f7ff feea 	bl	8006910 <BSP_SD_GetCardState>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d102      	bne.n	8006b48 <SD_read+0x94>
          {
            res = RES_OK;
 8006b42:	2300      	movs	r3, #0
 8006b44:	77fb      	strb	r3, [r7, #31]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8006b46:	e053      	b.n	8006bf0 <SD_read+0x13c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8006b48:	f7fa ff0a 	bl	8001960 <HAL_GetTick>
 8006b4c:	4602      	mov	r2, r0
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	1ad3      	subs	r3, r2, r3
 8006b52:	f247 522f 	movw	r2, #29999	; 0x752f
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d9ee      	bls.n	8006b38 <SD_read+0x84>
 8006b5a:	e049      	b.n	8006bf0 <SD_read+0x13c>
    else
    {
      /* Slow path, fetch each sector a part and memcpy to destination buffer */
      int i;

      for (i = 0; i < count; i++) {
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	61bb      	str	r3, [r7, #24]
 8006b60:	e037      	b.n	8006bd2 <SD_read+0x11e>
        ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	1c5a      	adds	r2, r3, #1
 8006b66:	607a      	str	r2, [r7, #4]
 8006b68:	2201      	movs	r2, #1
 8006b6a:	4619      	mov	r1, r3
 8006b6c:	4824      	ldr	r0, [pc, #144]	; (8006c00 <SD_read+0x14c>)
 8006b6e:	f7ff fe9b 	bl	80068a8 <BSP_SD_ReadBlocks_DMA>
 8006b72:	4603      	mov	r3, r0
 8006b74:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 8006b76:	7fbb      	ldrb	r3, [r7, #30]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d12f      	bne.n	8006bdc <SD_read+0x128>
          /* wait until the read is successful or a timeout occurs */

          timeout = HAL_GetTick();
 8006b7c:	f7fa fef0 	bl	8001960 <HAL_GetTick>
 8006b80:	6178      	str	r0, [r7, #20]
          while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8006b82:	bf00      	nop
 8006b84:	4b1d      	ldr	r3, [pc, #116]	; (8006bfc <SD_read+0x148>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d108      	bne.n	8006b9e <SD_read+0xea>
 8006b8c:	f7fa fee8 	bl	8001960 <HAL_GetTick>
 8006b90:	4602      	mov	r2, r0
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	1ad3      	subs	r3, r2, r3
 8006b96:	f247 522f 	movw	r2, #29999	; 0x752f
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d9f2      	bls.n	8006b84 <SD_read+0xd0>
          {
          }
          if (ReadStatus == 0)
 8006b9e:	4b17      	ldr	r3, [pc, #92]	; (8006bfc <SD_read+0x148>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d102      	bne.n	8006bac <SD_read+0xf8>
          {
            res = RES_ERROR;
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	77fb      	strb	r3, [r7, #31]
            break;
 8006baa:	e018      	b.n	8006bde <SD_read+0x12a>
          }
          ReadStatus = 0;
 8006bac:	4b13      	ldr	r3, [pc, #76]	; (8006bfc <SD_read+0x148>)
 8006bae:	2200      	movs	r2, #0
 8006bb0:	601a      	str	r2, [r3, #0]
          *
          * invalidate the scratch buffer before the next read to get the actual data instead of the cached one
          */
          SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif
          memcpy(buff, scratch, BLOCKSIZE);
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	4a12      	ldr	r2, [pc, #72]	; (8006c00 <SD_read+0x14c>)
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	4611      	mov	r1, r2
 8006bba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006bbe:	461a      	mov	r2, r3
 8006bc0:	f00a f912 	bl	8010de8 <memcpy>
          buff += BLOCKSIZE;
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006bca:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++) {
 8006bcc:	69bb      	ldr	r3, [r7, #24]
 8006bce:	3301      	adds	r3, #1
 8006bd0:	61bb      	str	r3, [r7, #24]
 8006bd2:	69bb      	ldr	r3, [r7, #24]
 8006bd4:	683a      	ldr	r2, [r7, #0]
 8006bd6:	429a      	cmp	r2, r3
 8006bd8:	d8c3      	bhi.n	8006b62 <SD_read+0xae>
 8006bda:	e000      	b.n	8006bde <SD_read+0x12a>
        }
        else
        {
          break;
 8006bdc:	bf00      	nop
        }
      }

      if ((i == count) && (ret == MSD_OK))
 8006bde:	69bb      	ldr	r3, [r7, #24]
 8006be0:	683a      	ldr	r2, [r7, #0]
 8006be2:	429a      	cmp	r2, r3
 8006be4:	d104      	bne.n	8006bf0 <SD_read+0x13c>
 8006be6:	7fbb      	ldrb	r3, [r7, #30]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d101      	bne.n	8006bf0 <SD_read+0x13c>
        res = RES_OK;
 8006bec:	2300      	movs	r3, #0
 8006bee:	77fb      	strb	r3, [r7, #31]
    }
#endif

  return res;
 8006bf0:	7ffb      	ldrb	r3, [r7, #31]
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3720      	adds	r7, #32
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}
 8006bfa:	bf00      	nop
 8006bfc:	20002544 	.word	0x20002544
 8006c00:	20002340 	.word	0x20002340

08006c04 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b088      	sub	sp, #32
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	60b9      	str	r1, [r7, #8]
 8006c0c:	607a      	str	r2, [r7, #4]
 8006c0e:	603b      	str	r3, [r7, #0]
 8006c10:	4603      	mov	r3, r0
 8006c12:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006c14:	2301      	movs	r3, #1
 8006c16:	77fb      	strb	r3, [r7, #31]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8006c18:	4b4b      	ldr	r3, [pc, #300]	; (8006d48 <SD_write+0x144>)
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8006c1e:	f247 5030 	movw	r0, #30000	; 0x7530
 8006c22:	f7ff fee1 	bl	80069e8 <SD_CheckStatusWithTimeout>
 8006c26:	4603      	mov	r3, r0
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	da01      	bge.n	8006c30 <SD_write+0x2c>
  {
    return res;
 8006c2c:	7ffb      	ldrb	r3, [r7, #31]
 8006c2e:	e087      	b.n	8006d40 <SD_write+0x13c>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	f003 0303 	and.w	r3, r3, #3
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d138      	bne.n	8006cac <SD_write+0xa8>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8006c3a:	683a      	ldr	r2, [r7, #0]
 8006c3c:	6879      	ldr	r1, [r7, #4]
 8006c3e:	68b8      	ldr	r0, [r7, #8]
 8006c40:	f7ff fe4c 	bl	80068dc <BSP_SD_WriteBlocks_DMA>
 8006c44:	4603      	mov	r3, r0
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d179      	bne.n	8006d3e <SD_write+0x13a>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8006c4a:	f7fa fe89 	bl	8001960 <HAL_GetTick>
 8006c4e:	6178      	str	r0, [r7, #20]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8006c50:	bf00      	nop
 8006c52:	4b3d      	ldr	r3, [pc, #244]	; (8006d48 <SD_write+0x144>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d108      	bne.n	8006c6c <SD_write+0x68>
 8006c5a:	f7fa fe81 	bl	8001960 <HAL_GetTick>
 8006c5e:	4602      	mov	r2, r0
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	1ad3      	subs	r3, r2, r3
 8006c64:	f247 522f 	movw	r2, #29999	; 0x752f
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d9f2      	bls.n	8006c52 <SD_write+0x4e>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8006c6c:	4b36      	ldr	r3, [pc, #216]	; (8006d48 <SD_write+0x144>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d102      	bne.n	8006c7a <SD_write+0x76>
      {
        res = RES_ERROR;
 8006c74:	2301      	movs	r3, #1
 8006c76:	77fb      	strb	r3, [r7, #31]
 8006c78:	e061      	b.n	8006d3e <SD_write+0x13a>
      }
      else
      {
        WriteStatus = 0;
 8006c7a:	4b33      	ldr	r3, [pc, #204]	; (8006d48 <SD_write+0x144>)
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8006c80:	f7fa fe6e 	bl	8001960 <HAL_GetTick>
 8006c84:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8006c86:	e007      	b.n	8006c98 <SD_write+0x94>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006c88:	f7ff fe42 	bl	8006910 <BSP_SD_GetCardState>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d102      	bne.n	8006c98 <SD_write+0x94>
          {
            res = RES_OK;
 8006c92:	2300      	movs	r3, #0
 8006c94:	77fb      	strb	r3, [r7, #31]
            break;
 8006c96:	e052      	b.n	8006d3e <SD_write+0x13a>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8006c98:	f7fa fe62 	bl	8001960 <HAL_GetTick>
 8006c9c:	4602      	mov	r2, r0
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	1ad3      	subs	r3, r2, r3
 8006ca2:	f247 522f 	movw	r2, #29999	; 0x752f
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d9ee      	bls.n	8006c88 <SD_write+0x84>
 8006caa:	e048      	b.n	8006d3e <SD_write+0x13a>
      * invalidate the scratch buffer before the next write to get the actual data instead of the cached one
      */
      SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif

      for (i = 0; i < count; i++)
 8006cac:	2300      	movs	r3, #0
 8006cae:	61bb      	str	r3, [r7, #24]
 8006cb0:	e034      	b.n	8006d1c <SD_write+0x118>
      {
        WriteStatus = 0;
 8006cb2:	4b25      	ldr	r3, [pc, #148]	; (8006d48 <SD_write+0x144>)
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	601a      	str	r2, [r3, #0]

        memcpy((void *)scratch, (void *)buff, BLOCKSIZE);
 8006cb8:	4a24      	ldr	r2, [pc, #144]	; (8006d4c <SD_write+0x148>)
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	4610      	mov	r0, r2
 8006cbe:	4619      	mov	r1, r3
 8006cc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006cc4:	461a      	mov	r2, r3
 8006cc6:	f00a f88f 	bl	8010de8 <memcpy>
        buff += BLOCKSIZE;
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006cd0:	60bb      	str	r3, [r7, #8]

        ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	1c5a      	adds	r2, r3, #1
 8006cd6:	607a      	str	r2, [r7, #4]
 8006cd8:	2201      	movs	r2, #1
 8006cda:	4619      	mov	r1, r3
 8006cdc:	481b      	ldr	r0, [pc, #108]	; (8006d4c <SD_write+0x148>)
 8006cde:	f7ff fdfd 	bl	80068dc <BSP_SD_WriteBlocks_DMA>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 8006ce6:	7fbb      	ldrb	r3, [r7, #30]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d11c      	bne.n	8006d26 <SD_write+0x122>
          /* wait for a message from the queue or a timeout */
          timeout = HAL_GetTick();
 8006cec:	f7fa fe38 	bl	8001960 <HAL_GetTick>
 8006cf0:	6178      	str	r0, [r7, #20]
          while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8006cf2:	bf00      	nop
 8006cf4:	4b14      	ldr	r3, [pc, #80]	; (8006d48 <SD_write+0x144>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d108      	bne.n	8006d0e <SD_write+0x10a>
 8006cfc:	f7fa fe30 	bl	8001960 <HAL_GetTick>
 8006d00:	4602      	mov	r2, r0
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	1ad3      	subs	r3, r2, r3
 8006d06:	f247 522f 	movw	r2, #29999	; 0x752f
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d9f2      	bls.n	8006cf4 <SD_write+0xf0>
          {
          }
          if (WriteStatus == 0)
 8006d0e:	4b0e      	ldr	r3, [pc, #56]	; (8006d48 <SD_write+0x144>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d009      	beq.n	8006d2a <SD_write+0x126>
      for (i = 0; i < count; i++)
 8006d16:	69bb      	ldr	r3, [r7, #24]
 8006d18:	3301      	adds	r3, #1
 8006d1a:	61bb      	str	r3, [r7, #24]
 8006d1c:	69bb      	ldr	r3, [r7, #24]
 8006d1e:	683a      	ldr	r2, [r7, #0]
 8006d20:	429a      	cmp	r2, r3
 8006d22:	d8c6      	bhi.n	8006cb2 <SD_write+0xae>
 8006d24:	e002      	b.n	8006d2c <SD_write+0x128>
          }

        }
        else
        {
          break;
 8006d26:	bf00      	nop
 8006d28:	e000      	b.n	8006d2c <SD_write+0x128>
            break;
 8006d2a:	bf00      	nop
        }
      }
      if ((i == count) && (ret == MSD_OK))
 8006d2c:	69bb      	ldr	r3, [r7, #24]
 8006d2e:	683a      	ldr	r2, [r7, #0]
 8006d30:	429a      	cmp	r2, r3
 8006d32:	d104      	bne.n	8006d3e <SD_write+0x13a>
 8006d34:	7fbb      	ldrb	r3, [r7, #30]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d101      	bne.n	8006d3e <SD_write+0x13a>
        res = RES_OK;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	77fb      	strb	r3, [r7, #31]
    }
#endif
  return res;
 8006d3e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	3720      	adds	r7, #32
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}
 8006d48:	20002540 	.word	0x20002540
 8006d4c:	20002340 	.word	0x20002340

08006d50 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b08c      	sub	sp, #48	; 0x30
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	4603      	mov	r3, r0
 8006d58:	603a      	str	r2, [r7, #0]
 8006d5a:	71fb      	strb	r3, [r7, #7]
 8006d5c:	460b      	mov	r3, r1
 8006d5e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8006d60:	2301      	movs	r3, #1
 8006d62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006d66:	4b25      	ldr	r3, [pc, #148]	; (8006dfc <SD_ioctl+0xac>)
 8006d68:	781b      	ldrb	r3, [r3, #0]
 8006d6a:	b2db      	uxtb	r3, r3
 8006d6c:	f003 0301 	and.w	r3, r3, #1
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d001      	beq.n	8006d78 <SD_ioctl+0x28>
 8006d74:	2303      	movs	r3, #3
 8006d76:	e03c      	b.n	8006df2 <SD_ioctl+0xa2>

  switch (cmd)
 8006d78:	79bb      	ldrb	r3, [r7, #6]
 8006d7a:	2b03      	cmp	r3, #3
 8006d7c:	d834      	bhi.n	8006de8 <SD_ioctl+0x98>
 8006d7e:	a201      	add	r2, pc, #4	; (adr r2, 8006d84 <SD_ioctl+0x34>)
 8006d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d84:	08006d95 	.word	0x08006d95
 8006d88:	08006d9d 	.word	0x08006d9d
 8006d8c:	08006db5 	.word	0x08006db5
 8006d90:	08006dcf 	.word	0x08006dcf
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8006d94:	2300      	movs	r3, #0
 8006d96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006d9a:	e028      	b.n	8006dee <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8006d9c:	f107 030c 	add.w	r3, r7, #12
 8006da0:	4618      	mov	r0, r3
 8006da2:	f7ff fdc5 	bl	8006930 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8006da6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006dac:	2300      	movs	r3, #0
 8006dae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006db2:	e01c      	b.n	8006dee <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006db4:	f107 030c 	add.w	r3, r7, #12
 8006db8:	4618      	mov	r0, r3
 8006dba:	f7ff fdb9 	bl	8006930 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8006dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dc0:	b29a      	uxth	r2, r3
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006dcc:	e00f      	b.n	8006dee <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006dce:	f107 030c 	add.w	r3, r7, #12
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f7ff fdac 	bl	8006930 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8006dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dda:	0ada      	lsrs	r2, r3, #11
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006de0:	2300      	movs	r3, #0
 8006de2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006de6:	e002      	b.n	8006dee <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8006de8:	2304      	movs	r3, #4
 8006dea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8006dee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3730      	adds	r7, #48	; 0x30
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}
 8006dfa:	bf00      	nop
 8006dfc:	20000009 	.word	0x20000009

08006e00 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8006e00:	b480      	push	{r7}
 8006e02:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8006e04:	4b03      	ldr	r3, [pc, #12]	; (8006e14 <BSP_SD_WriteCpltCallback+0x14>)
 8006e06:	2201      	movs	r2, #1
 8006e08:	601a      	str	r2, [r3, #0]
}
 8006e0a:	bf00      	nop
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e12:	4770      	bx	lr
 8006e14:	20002540 	.word	0x20002540

08006e18 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8006e1c:	4b03      	ldr	r3, [pc, #12]	; (8006e2c <BSP_SD_ReadCpltCallback+0x14>)
 8006e1e:	2201      	movs	r2, #1
 8006e20:	601a      	str	r2, [r3, #0]
}
 8006e22:	bf00      	nop
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr
 8006e2c:	20002544 	.word	0x20002544

08006e30 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b084      	sub	sp, #16
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	4603      	mov	r3, r0
 8006e38:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006e3a:	79fb      	ldrb	r3, [r7, #7]
 8006e3c:	4a08      	ldr	r2, [pc, #32]	; (8006e60 <disk_status+0x30>)
 8006e3e:	009b      	lsls	r3, r3, #2
 8006e40:	4413      	add	r3, r2
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	685b      	ldr	r3, [r3, #4]
 8006e46:	79fa      	ldrb	r2, [r7, #7]
 8006e48:	4905      	ldr	r1, [pc, #20]	; (8006e60 <disk_status+0x30>)
 8006e4a:	440a      	add	r2, r1
 8006e4c:	7a12      	ldrb	r2, [r2, #8]
 8006e4e:	4610      	mov	r0, r2
 8006e50:	4798      	blx	r3
 8006e52:	4603      	mov	r3, r0
 8006e54:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006e56:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	3710      	adds	r7, #16
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}
 8006e60:	20002570 	.word	0x20002570

08006e64 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b084      	sub	sp, #16
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8006e6e:	2300      	movs	r3, #0
 8006e70:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8006e72:	79fb      	ldrb	r3, [r7, #7]
 8006e74:	4a0d      	ldr	r2, [pc, #52]	; (8006eac <disk_initialize+0x48>)
 8006e76:	5cd3      	ldrb	r3, [r2, r3]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d111      	bne.n	8006ea0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8006e7c:	79fb      	ldrb	r3, [r7, #7]
 8006e7e:	4a0b      	ldr	r2, [pc, #44]	; (8006eac <disk_initialize+0x48>)
 8006e80:	2101      	movs	r1, #1
 8006e82:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006e84:	79fb      	ldrb	r3, [r7, #7]
 8006e86:	4a09      	ldr	r2, [pc, #36]	; (8006eac <disk_initialize+0x48>)
 8006e88:	009b      	lsls	r3, r3, #2
 8006e8a:	4413      	add	r3, r2
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	79fa      	ldrb	r2, [r7, #7]
 8006e92:	4906      	ldr	r1, [pc, #24]	; (8006eac <disk_initialize+0x48>)
 8006e94:	440a      	add	r2, r1
 8006e96:	7a12      	ldrb	r2, [r2, #8]
 8006e98:	4610      	mov	r0, r2
 8006e9a:	4798      	blx	r3
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8006ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3710      	adds	r7, #16
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}
 8006eaa:	bf00      	nop
 8006eac:	20002570 	.word	0x20002570

08006eb0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006eb0:	b590      	push	{r4, r7, lr}
 8006eb2:	b087      	sub	sp, #28
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	60b9      	str	r1, [r7, #8]
 8006eb8:	607a      	str	r2, [r7, #4]
 8006eba:	603b      	str	r3, [r7, #0]
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006ec0:	7bfb      	ldrb	r3, [r7, #15]
 8006ec2:	4a0a      	ldr	r2, [pc, #40]	; (8006eec <disk_read+0x3c>)
 8006ec4:	009b      	lsls	r3, r3, #2
 8006ec6:	4413      	add	r3, r2
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	689c      	ldr	r4, [r3, #8]
 8006ecc:	7bfb      	ldrb	r3, [r7, #15]
 8006ece:	4a07      	ldr	r2, [pc, #28]	; (8006eec <disk_read+0x3c>)
 8006ed0:	4413      	add	r3, r2
 8006ed2:	7a18      	ldrb	r0, [r3, #8]
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	687a      	ldr	r2, [r7, #4]
 8006ed8:	68b9      	ldr	r1, [r7, #8]
 8006eda:	47a0      	blx	r4
 8006edc:	4603      	mov	r3, r0
 8006ede:	75fb      	strb	r3, [r7, #23]
  return res;
 8006ee0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	371c      	adds	r7, #28
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd90      	pop	{r4, r7, pc}
 8006eea:	bf00      	nop
 8006eec:	20002570 	.word	0x20002570

08006ef0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006ef0:	b590      	push	{r4, r7, lr}
 8006ef2:	b087      	sub	sp, #28
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	60b9      	str	r1, [r7, #8]
 8006ef8:	607a      	str	r2, [r7, #4]
 8006efa:	603b      	str	r3, [r7, #0]
 8006efc:	4603      	mov	r3, r0
 8006efe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006f00:	7bfb      	ldrb	r3, [r7, #15]
 8006f02:	4a0a      	ldr	r2, [pc, #40]	; (8006f2c <disk_write+0x3c>)
 8006f04:	009b      	lsls	r3, r3, #2
 8006f06:	4413      	add	r3, r2
 8006f08:	685b      	ldr	r3, [r3, #4]
 8006f0a:	68dc      	ldr	r4, [r3, #12]
 8006f0c:	7bfb      	ldrb	r3, [r7, #15]
 8006f0e:	4a07      	ldr	r2, [pc, #28]	; (8006f2c <disk_write+0x3c>)
 8006f10:	4413      	add	r3, r2
 8006f12:	7a18      	ldrb	r0, [r3, #8]
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	687a      	ldr	r2, [r7, #4]
 8006f18:	68b9      	ldr	r1, [r7, #8]
 8006f1a:	47a0      	blx	r4
 8006f1c:	4603      	mov	r3, r0
 8006f1e:	75fb      	strb	r3, [r7, #23]
  return res;
 8006f20:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	371c      	adds	r7, #28
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd90      	pop	{r4, r7, pc}
 8006f2a:	bf00      	nop
 8006f2c:	20002570 	.word	0x20002570

08006f30 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b084      	sub	sp, #16
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	4603      	mov	r3, r0
 8006f38:	603a      	str	r2, [r7, #0]
 8006f3a:	71fb      	strb	r3, [r7, #7]
 8006f3c:	460b      	mov	r3, r1
 8006f3e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006f40:	79fb      	ldrb	r3, [r7, #7]
 8006f42:	4a09      	ldr	r2, [pc, #36]	; (8006f68 <disk_ioctl+0x38>)
 8006f44:	009b      	lsls	r3, r3, #2
 8006f46:	4413      	add	r3, r2
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	691b      	ldr	r3, [r3, #16]
 8006f4c:	79fa      	ldrb	r2, [r7, #7]
 8006f4e:	4906      	ldr	r1, [pc, #24]	; (8006f68 <disk_ioctl+0x38>)
 8006f50:	440a      	add	r2, r1
 8006f52:	7a10      	ldrb	r0, [r2, #8]
 8006f54:	79b9      	ldrb	r1, [r7, #6]
 8006f56:	683a      	ldr	r2, [r7, #0]
 8006f58:	4798      	blx	r3
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	73fb      	strb	r3, [r7, #15]
  return res;
 8006f5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	3710      	adds	r7, #16
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}
 8006f68:	20002570 	.word	0x20002570

08006f6c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b085      	sub	sp, #20
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	3301      	adds	r3, #1
 8006f78:	781b      	ldrb	r3, [r3, #0]
 8006f7a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006f7c:	89fb      	ldrh	r3, [r7, #14]
 8006f7e:	021b      	lsls	r3, r3, #8
 8006f80:	b21a      	sxth	r2, r3
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	781b      	ldrb	r3, [r3, #0]
 8006f86:	b21b      	sxth	r3, r3
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	b21b      	sxth	r3, r3
 8006f8c:	81fb      	strh	r3, [r7, #14]
	return rv;
 8006f8e:	89fb      	ldrh	r3, [r7, #14]
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	3714      	adds	r7, #20
 8006f94:	46bd      	mov	sp, r7
 8006f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9a:	4770      	bx	lr

08006f9c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b085      	sub	sp, #20
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	3303      	adds	r3, #3
 8006fa8:	781b      	ldrb	r3, [r3, #0]
 8006faa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	021b      	lsls	r3, r3, #8
 8006fb0:	687a      	ldr	r2, [r7, #4]
 8006fb2:	3202      	adds	r2, #2
 8006fb4:	7812      	ldrb	r2, [r2, #0]
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	021b      	lsls	r3, r3, #8
 8006fbe:	687a      	ldr	r2, [r7, #4]
 8006fc0:	3201      	adds	r2, #1
 8006fc2:	7812      	ldrb	r2, [r2, #0]
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	021b      	lsls	r3, r3, #8
 8006fcc:	687a      	ldr	r2, [r7, #4]
 8006fce:	7812      	ldrb	r2, [r2, #0]
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	60fb      	str	r3, [r7, #12]
	return rv;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	3714      	adds	r7, #20
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe0:	4770      	bx	lr

08006fe2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8006fe2:	b480      	push	{r7}
 8006fe4:	b083      	sub	sp, #12
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	6078      	str	r0, [r7, #4]
 8006fea:	460b      	mov	r3, r1
 8006fec:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	1c5a      	adds	r2, r3, #1
 8006ff2:	607a      	str	r2, [r7, #4]
 8006ff4:	887a      	ldrh	r2, [r7, #2]
 8006ff6:	b2d2      	uxtb	r2, r2
 8006ff8:	701a      	strb	r2, [r3, #0]
 8006ffa:	887b      	ldrh	r3, [r7, #2]
 8006ffc:	0a1b      	lsrs	r3, r3, #8
 8006ffe:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	1c5a      	adds	r2, r3, #1
 8007004:	607a      	str	r2, [r7, #4]
 8007006:	887a      	ldrh	r2, [r7, #2]
 8007008:	b2d2      	uxtb	r2, r2
 800700a:	701a      	strb	r2, [r3, #0]
}
 800700c:	bf00      	nop
 800700e:	370c      	adds	r7, #12
 8007010:	46bd      	mov	sp, r7
 8007012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007016:	4770      	bx	lr

08007018 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8007018:	b480      	push	{r7}
 800701a:	b083      	sub	sp, #12
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
 8007020:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	1c5a      	adds	r2, r3, #1
 8007026:	607a      	str	r2, [r7, #4]
 8007028:	683a      	ldr	r2, [r7, #0]
 800702a:	b2d2      	uxtb	r2, r2
 800702c:	701a      	strb	r2, [r3, #0]
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	0a1b      	lsrs	r3, r3, #8
 8007032:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	1c5a      	adds	r2, r3, #1
 8007038:	607a      	str	r2, [r7, #4]
 800703a:	683a      	ldr	r2, [r7, #0]
 800703c:	b2d2      	uxtb	r2, r2
 800703e:	701a      	strb	r2, [r3, #0]
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	0a1b      	lsrs	r3, r3, #8
 8007044:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	1c5a      	adds	r2, r3, #1
 800704a:	607a      	str	r2, [r7, #4]
 800704c:	683a      	ldr	r2, [r7, #0]
 800704e:	b2d2      	uxtb	r2, r2
 8007050:	701a      	strb	r2, [r3, #0]
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	0a1b      	lsrs	r3, r3, #8
 8007056:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	1c5a      	adds	r2, r3, #1
 800705c:	607a      	str	r2, [r7, #4]
 800705e:	683a      	ldr	r2, [r7, #0]
 8007060:	b2d2      	uxtb	r2, r2
 8007062:	701a      	strb	r2, [r3, #0]
}
 8007064:	bf00      	nop
 8007066:	370c      	adds	r7, #12
 8007068:	46bd      	mov	sp, r7
 800706a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706e:	4770      	bx	lr

08007070 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007070:	b480      	push	{r7}
 8007072:	b087      	sub	sp, #28
 8007074:	af00      	add	r7, sp, #0
 8007076:	60f8      	str	r0, [r7, #12]
 8007078:	60b9      	str	r1, [r7, #8]
 800707a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d00d      	beq.n	80070a6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800708a:	693a      	ldr	r2, [r7, #16]
 800708c:	1c53      	adds	r3, r2, #1
 800708e:	613b      	str	r3, [r7, #16]
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	1c59      	adds	r1, r3, #1
 8007094:	6179      	str	r1, [r7, #20]
 8007096:	7812      	ldrb	r2, [r2, #0]
 8007098:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	3b01      	subs	r3, #1
 800709e:	607b      	str	r3, [r7, #4]
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d1f1      	bne.n	800708a <mem_cpy+0x1a>
	}
}
 80070a6:	bf00      	nop
 80070a8:	371c      	adds	r7, #28
 80070aa:	46bd      	mov	sp, r7
 80070ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b0:	4770      	bx	lr

080070b2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80070b2:	b480      	push	{r7}
 80070b4:	b087      	sub	sp, #28
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	60f8      	str	r0, [r7, #12]
 80070ba:	60b9      	str	r1, [r7, #8]
 80070bc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	1c5a      	adds	r2, r3, #1
 80070c6:	617a      	str	r2, [r7, #20]
 80070c8:	68ba      	ldr	r2, [r7, #8]
 80070ca:	b2d2      	uxtb	r2, r2
 80070cc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	3b01      	subs	r3, #1
 80070d2:	607b      	str	r3, [r7, #4]
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d1f3      	bne.n	80070c2 <mem_set+0x10>
}
 80070da:	bf00      	nop
 80070dc:	bf00      	nop
 80070de:	371c      	adds	r7, #28
 80070e0:	46bd      	mov	sp, r7
 80070e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e6:	4770      	bx	lr

080070e8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80070e8:	b480      	push	{r7}
 80070ea:	b089      	sub	sp, #36	; 0x24
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	60f8      	str	r0, [r7, #12]
 80070f0:	60b9      	str	r1, [r7, #8]
 80070f2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	61fb      	str	r3, [r7, #28]
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80070fc:	2300      	movs	r3, #0
 80070fe:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8007100:	69fb      	ldr	r3, [r7, #28]
 8007102:	1c5a      	adds	r2, r3, #1
 8007104:	61fa      	str	r2, [r7, #28]
 8007106:	781b      	ldrb	r3, [r3, #0]
 8007108:	4619      	mov	r1, r3
 800710a:	69bb      	ldr	r3, [r7, #24]
 800710c:	1c5a      	adds	r2, r3, #1
 800710e:	61ba      	str	r2, [r7, #24]
 8007110:	781b      	ldrb	r3, [r3, #0]
 8007112:	1acb      	subs	r3, r1, r3
 8007114:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	3b01      	subs	r3, #1
 800711a:	607b      	str	r3, [r7, #4]
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d002      	beq.n	8007128 <mem_cmp+0x40>
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d0eb      	beq.n	8007100 <mem_cmp+0x18>

	return r;
 8007128:	697b      	ldr	r3, [r7, #20]
}
 800712a:	4618      	mov	r0, r3
 800712c:	3724      	adds	r7, #36	; 0x24
 800712e:	46bd      	mov	sp, r7
 8007130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007134:	4770      	bx	lr

08007136 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8007136:	b480      	push	{r7}
 8007138:	b083      	sub	sp, #12
 800713a:	af00      	add	r7, sp, #0
 800713c:	6078      	str	r0, [r7, #4]
 800713e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007140:	e002      	b.n	8007148 <chk_chr+0x12>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	3301      	adds	r3, #1
 8007146:	607b      	str	r3, [r7, #4]
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	781b      	ldrb	r3, [r3, #0]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d005      	beq.n	800715c <chk_chr+0x26>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	781b      	ldrb	r3, [r3, #0]
 8007154:	461a      	mov	r2, r3
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	4293      	cmp	r3, r2
 800715a:	d1f2      	bne.n	8007142 <chk_chr+0xc>
	return *str;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	781b      	ldrb	r3, [r3, #0]
}
 8007160:	4618      	mov	r0, r3
 8007162:	370c      	adds	r7, #12
 8007164:	46bd      	mov	sp, r7
 8007166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716a:	4770      	bx	lr

0800716c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800716c:	b480      	push	{r7}
 800716e:	b085      	sub	sp, #20
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
 8007174:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007176:	2300      	movs	r3, #0
 8007178:	60bb      	str	r3, [r7, #8]
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	60fb      	str	r3, [r7, #12]
 800717e:	e029      	b.n	80071d4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8007180:	4a27      	ldr	r2, [pc, #156]	; (8007220 <chk_lock+0xb4>)
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	011b      	lsls	r3, r3, #4
 8007186:	4413      	add	r3, r2
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d01d      	beq.n	80071ca <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800718e:	4a24      	ldr	r2, [pc, #144]	; (8007220 <chk_lock+0xb4>)
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	011b      	lsls	r3, r3, #4
 8007194:	4413      	add	r3, r2
 8007196:	681a      	ldr	r2, [r3, #0]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	429a      	cmp	r2, r3
 800719e:	d116      	bne.n	80071ce <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80071a0:	4a1f      	ldr	r2, [pc, #124]	; (8007220 <chk_lock+0xb4>)
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	011b      	lsls	r3, r3, #4
 80071a6:	4413      	add	r3, r2
 80071a8:	3304      	adds	r3, #4
 80071aa:	681a      	ldr	r2, [r3, #0]
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80071b0:	429a      	cmp	r2, r3
 80071b2:	d10c      	bne.n	80071ce <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80071b4:	4a1a      	ldr	r2, [pc, #104]	; (8007220 <chk_lock+0xb4>)
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	011b      	lsls	r3, r3, #4
 80071ba:	4413      	add	r3, r2
 80071bc:	3308      	adds	r3, #8
 80071be:	681a      	ldr	r2, [r3, #0]
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80071c4:	429a      	cmp	r2, r3
 80071c6:	d102      	bne.n	80071ce <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80071c8:	e007      	b.n	80071da <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80071ca:	2301      	movs	r3, #1
 80071cc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	3301      	adds	r3, #1
 80071d2:	60fb      	str	r3, [r7, #12]
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	2b01      	cmp	r3, #1
 80071d8:	d9d2      	bls.n	8007180 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	2b02      	cmp	r3, #2
 80071de:	d109      	bne.n	80071f4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d102      	bne.n	80071ec <chk_lock+0x80>
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	2b02      	cmp	r3, #2
 80071ea:	d101      	bne.n	80071f0 <chk_lock+0x84>
 80071ec:	2300      	movs	r3, #0
 80071ee:	e010      	b.n	8007212 <chk_lock+0xa6>
 80071f0:	2312      	movs	r3, #18
 80071f2:	e00e      	b.n	8007212 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d108      	bne.n	800720c <chk_lock+0xa0>
 80071fa:	4a09      	ldr	r2, [pc, #36]	; (8007220 <chk_lock+0xb4>)
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	011b      	lsls	r3, r3, #4
 8007200:	4413      	add	r3, r2
 8007202:	330c      	adds	r3, #12
 8007204:	881b      	ldrh	r3, [r3, #0]
 8007206:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800720a:	d101      	bne.n	8007210 <chk_lock+0xa4>
 800720c:	2310      	movs	r3, #16
 800720e:	e000      	b.n	8007212 <chk_lock+0xa6>
 8007210:	2300      	movs	r3, #0
}
 8007212:	4618      	mov	r0, r3
 8007214:	3714      	adds	r7, #20
 8007216:	46bd      	mov	sp, r7
 8007218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721c:	4770      	bx	lr
 800721e:	bf00      	nop
 8007220:	20002550 	.word	0x20002550

08007224 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8007224:	b480      	push	{r7}
 8007226:	b083      	sub	sp, #12
 8007228:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800722a:	2300      	movs	r3, #0
 800722c:	607b      	str	r3, [r7, #4]
 800722e:	e002      	b.n	8007236 <enq_lock+0x12>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	3301      	adds	r3, #1
 8007234:	607b      	str	r3, [r7, #4]
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2b01      	cmp	r3, #1
 800723a:	d806      	bhi.n	800724a <enq_lock+0x26>
 800723c:	4a09      	ldr	r2, [pc, #36]	; (8007264 <enq_lock+0x40>)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	011b      	lsls	r3, r3, #4
 8007242:	4413      	add	r3, r2
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d1f2      	bne.n	8007230 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2b02      	cmp	r3, #2
 800724e:	bf14      	ite	ne
 8007250:	2301      	movne	r3, #1
 8007252:	2300      	moveq	r3, #0
 8007254:	b2db      	uxtb	r3, r3
}
 8007256:	4618      	mov	r0, r3
 8007258:	370c      	adds	r7, #12
 800725a:	46bd      	mov	sp, r7
 800725c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007260:	4770      	bx	lr
 8007262:	bf00      	nop
 8007264:	20002550 	.word	0x20002550

08007268 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007268:	b480      	push	{r7}
 800726a:	b085      	sub	sp, #20
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
 8007270:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007272:	2300      	movs	r3, #0
 8007274:	60fb      	str	r3, [r7, #12]
 8007276:	e01f      	b.n	80072b8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8007278:	4a41      	ldr	r2, [pc, #260]	; (8007380 <inc_lock+0x118>)
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	011b      	lsls	r3, r3, #4
 800727e:	4413      	add	r3, r2
 8007280:	681a      	ldr	r2, [r3, #0]
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	429a      	cmp	r2, r3
 8007288:	d113      	bne.n	80072b2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800728a:	4a3d      	ldr	r2, [pc, #244]	; (8007380 <inc_lock+0x118>)
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	011b      	lsls	r3, r3, #4
 8007290:	4413      	add	r3, r2
 8007292:	3304      	adds	r3, #4
 8007294:	681a      	ldr	r2, [r3, #0]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800729a:	429a      	cmp	r2, r3
 800729c:	d109      	bne.n	80072b2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800729e:	4a38      	ldr	r2, [pc, #224]	; (8007380 <inc_lock+0x118>)
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	011b      	lsls	r3, r3, #4
 80072a4:	4413      	add	r3, r2
 80072a6:	3308      	adds	r3, #8
 80072a8:	681a      	ldr	r2, [r3, #0]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80072ae:	429a      	cmp	r2, r3
 80072b0:	d006      	beq.n	80072c0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	3301      	adds	r3, #1
 80072b6:	60fb      	str	r3, [r7, #12]
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2b01      	cmp	r3, #1
 80072bc:	d9dc      	bls.n	8007278 <inc_lock+0x10>
 80072be:	e000      	b.n	80072c2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80072c0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2b02      	cmp	r3, #2
 80072c6:	d132      	bne.n	800732e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80072c8:	2300      	movs	r3, #0
 80072ca:	60fb      	str	r3, [r7, #12]
 80072cc:	e002      	b.n	80072d4 <inc_lock+0x6c>
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	3301      	adds	r3, #1
 80072d2:	60fb      	str	r3, [r7, #12]
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	2b01      	cmp	r3, #1
 80072d8:	d806      	bhi.n	80072e8 <inc_lock+0x80>
 80072da:	4a29      	ldr	r2, [pc, #164]	; (8007380 <inc_lock+0x118>)
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	011b      	lsls	r3, r3, #4
 80072e0:	4413      	add	r3, r2
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d1f2      	bne.n	80072ce <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	2b02      	cmp	r3, #2
 80072ec:	d101      	bne.n	80072f2 <inc_lock+0x8a>
 80072ee:	2300      	movs	r3, #0
 80072f0:	e040      	b.n	8007374 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681a      	ldr	r2, [r3, #0]
 80072f6:	4922      	ldr	r1, [pc, #136]	; (8007380 <inc_lock+0x118>)
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	011b      	lsls	r3, r3, #4
 80072fc:	440b      	add	r3, r1
 80072fe:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	689a      	ldr	r2, [r3, #8]
 8007304:	491e      	ldr	r1, [pc, #120]	; (8007380 <inc_lock+0x118>)
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	011b      	lsls	r3, r3, #4
 800730a:	440b      	add	r3, r1
 800730c:	3304      	adds	r3, #4
 800730e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	695a      	ldr	r2, [r3, #20]
 8007314:	491a      	ldr	r1, [pc, #104]	; (8007380 <inc_lock+0x118>)
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	011b      	lsls	r3, r3, #4
 800731a:	440b      	add	r3, r1
 800731c:	3308      	adds	r3, #8
 800731e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8007320:	4a17      	ldr	r2, [pc, #92]	; (8007380 <inc_lock+0x118>)
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	011b      	lsls	r3, r3, #4
 8007326:	4413      	add	r3, r2
 8007328:	330c      	adds	r3, #12
 800732a:	2200      	movs	r2, #0
 800732c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d009      	beq.n	8007348 <inc_lock+0xe0>
 8007334:	4a12      	ldr	r2, [pc, #72]	; (8007380 <inc_lock+0x118>)
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	011b      	lsls	r3, r3, #4
 800733a:	4413      	add	r3, r2
 800733c:	330c      	adds	r3, #12
 800733e:	881b      	ldrh	r3, [r3, #0]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d001      	beq.n	8007348 <inc_lock+0xe0>
 8007344:	2300      	movs	r3, #0
 8007346:	e015      	b.n	8007374 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d108      	bne.n	8007360 <inc_lock+0xf8>
 800734e:	4a0c      	ldr	r2, [pc, #48]	; (8007380 <inc_lock+0x118>)
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	011b      	lsls	r3, r3, #4
 8007354:	4413      	add	r3, r2
 8007356:	330c      	adds	r3, #12
 8007358:	881b      	ldrh	r3, [r3, #0]
 800735a:	3301      	adds	r3, #1
 800735c:	b29a      	uxth	r2, r3
 800735e:	e001      	b.n	8007364 <inc_lock+0xfc>
 8007360:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007364:	4906      	ldr	r1, [pc, #24]	; (8007380 <inc_lock+0x118>)
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	011b      	lsls	r3, r3, #4
 800736a:	440b      	add	r3, r1
 800736c:	330c      	adds	r3, #12
 800736e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	3301      	adds	r3, #1
}
 8007374:	4618      	mov	r0, r3
 8007376:	3714      	adds	r7, #20
 8007378:	46bd      	mov	sp, r7
 800737a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737e:	4770      	bx	lr
 8007380:	20002550 	.word	0x20002550

08007384 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8007384:	b480      	push	{r7}
 8007386:	b085      	sub	sp, #20
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	3b01      	subs	r3, #1
 8007390:	607b      	str	r3, [r7, #4]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2b01      	cmp	r3, #1
 8007396:	d825      	bhi.n	80073e4 <dec_lock+0x60>
		n = Files[i].ctr;
 8007398:	4a17      	ldr	r2, [pc, #92]	; (80073f8 <dec_lock+0x74>)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	011b      	lsls	r3, r3, #4
 800739e:	4413      	add	r3, r2
 80073a0:	330c      	adds	r3, #12
 80073a2:	881b      	ldrh	r3, [r3, #0]
 80073a4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80073a6:	89fb      	ldrh	r3, [r7, #14]
 80073a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073ac:	d101      	bne.n	80073b2 <dec_lock+0x2e>
 80073ae:	2300      	movs	r3, #0
 80073b0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80073b2:	89fb      	ldrh	r3, [r7, #14]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d002      	beq.n	80073be <dec_lock+0x3a>
 80073b8:	89fb      	ldrh	r3, [r7, #14]
 80073ba:	3b01      	subs	r3, #1
 80073bc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80073be:	4a0e      	ldr	r2, [pc, #56]	; (80073f8 <dec_lock+0x74>)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	011b      	lsls	r3, r3, #4
 80073c4:	4413      	add	r3, r2
 80073c6:	330c      	adds	r3, #12
 80073c8:	89fa      	ldrh	r2, [r7, #14]
 80073ca:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80073cc:	89fb      	ldrh	r3, [r7, #14]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d105      	bne.n	80073de <dec_lock+0x5a>
 80073d2:	4a09      	ldr	r2, [pc, #36]	; (80073f8 <dec_lock+0x74>)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	011b      	lsls	r3, r3, #4
 80073d8:	4413      	add	r3, r2
 80073da:	2200      	movs	r2, #0
 80073dc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80073de:	2300      	movs	r3, #0
 80073e0:	737b      	strb	r3, [r7, #13]
 80073e2:	e001      	b.n	80073e8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80073e4:	2302      	movs	r3, #2
 80073e6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80073e8:	7b7b      	ldrb	r3, [r7, #13]
}
 80073ea:	4618      	mov	r0, r3
 80073ec:	3714      	adds	r7, #20
 80073ee:	46bd      	mov	sp, r7
 80073f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f4:	4770      	bx	lr
 80073f6:	bf00      	nop
 80073f8:	20002550 	.word	0x20002550

080073fc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80073fc:	b480      	push	{r7}
 80073fe:	b085      	sub	sp, #20
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007404:	2300      	movs	r3, #0
 8007406:	60fb      	str	r3, [r7, #12]
 8007408:	e010      	b.n	800742c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800740a:	4a0d      	ldr	r2, [pc, #52]	; (8007440 <clear_lock+0x44>)
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	011b      	lsls	r3, r3, #4
 8007410:	4413      	add	r3, r2
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	687a      	ldr	r2, [r7, #4]
 8007416:	429a      	cmp	r2, r3
 8007418:	d105      	bne.n	8007426 <clear_lock+0x2a>
 800741a:	4a09      	ldr	r2, [pc, #36]	; (8007440 <clear_lock+0x44>)
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	011b      	lsls	r3, r3, #4
 8007420:	4413      	add	r3, r2
 8007422:	2200      	movs	r2, #0
 8007424:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	3301      	adds	r3, #1
 800742a:	60fb      	str	r3, [r7, #12]
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	2b01      	cmp	r3, #1
 8007430:	d9eb      	bls.n	800740a <clear_lock+0xe>
	}
}
 8007432:	bf00      	nop
 8007434:	bf00      	nop
 8007436:	3714      	adds	r7, #20
 8007438:	46bd      	mov	sp, r7
 800743a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743e:	4770      	bx	lr
 8007440:	20002550 	.word	0x20002550

08007444 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b086      	sub	sp, #24
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800744c:	2300      	movs	r3, #0
 800744e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	78db      	ldrb	r3, [r3, #3]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d034      	beq.n	80074c2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800745c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	7858      	ldrb	r0, [r3, #1]
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007468:	2301      	movs	r3, #1
 800746a:	697a      	ldr	r2, [r7, #20]
 800746c:	f7ff fd40 	bl	8006ef0 <disk_write>
 8007470:	4603      	mov	r3, r0
 8007472:	2b00      	cmp	r3, #0
 8007474:	d002      	beq.n	800747c <sync_window+0x38>
			res = FR_DISK_ERR;
 8007476:	2301      	movs	r3, #1
 8007478:	73fb      	strb	r3, [r7, #15]
 800747a:	e022      	b.n	80074c2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2200      	movs	r2, #0
 8007480:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007486:	697a      	ldr	r2, [r7, #20]
 8007488:	1ad2      	subs	r2, r2, r3
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	69db      	ldr	r3, [r3, #28]
 800748e:	429a      	cmp	r2, r3
 8007490:	d217      	bcs.n	80074c2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	789b      	ldrb	r3, [r3, #2]
 8007496:	613b      	str	r3, [r7, #16]
 8007498:	e010      	b.n	80074bc <sync_window+0x78>
					wsect += fs->fsize;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	69db      	ldr	r3, [r3, #28]
 800749e:	697a      	ldr	r2, [r7, #20]
 80074a0:	4413      	add	r3, r2
 80074a2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	7858      	ldrb	r0, [r3, #1]
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80074ae:	2301      	movs	r3, #1
 80074b0:	697a      	ldr	r2, [r7, #20]
 80074b2:	f7ff fd1d 	bl	8006ef0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80074b6:	693b      	ldr	r3, [r7, #16]
 80074b8:	3b01      	subs	r3, #1
 80074ba:	613b      	str	r3, [r7, #16]
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	2b01      	cmp	r3, #1
 80074c0:	d8eb      	bhi.n	800749a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80074c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	3718      	adds	r7, #24
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}

080074cc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b084      	sub	sp, #16
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
 80074d4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80074d6:	2300      	movs	r3, #0
 80074d8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074de:	683a      	ldr	r2, [r7, #0]
 80074e0:	429a      	cmp	r2, r3
 80074e2:	d01b      	beq.n	800751c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f7ff ffad 	bl	8007444 <sync_window>
 80074ea:	4603      	mov	r3, r0
 80074ec:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80074ee:	7bfb      	ldrb	r3, [r7, #15]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d113      	bne.n	800751c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	7858      	ldrb	r0, [r3, #1]
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80074fe:	2301      	movs	r3, #1
 8007500:	683a      	ldr	r2, [r7, #0]
 8007502:	f7ff fcd5 	bl	8006eb0 <disk_read>
 8007506:	4603      	mov	r3, r0
 8007508:	2b00      	cmp	r3, #0
 800750a:	d004      	beq.n	8007516 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800750c:	f04f 33ff 	mov.w	r3, #4294967295
 8007510:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8007512:	2301      	movs	r3, #1
 8007514:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	683a      	ldr	r2, [r7, #0]
 800751a:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800751c:	7bfb      	ldrb	r3, [r7, #15]
}
 800751e:	4618      	mov	r0, r3
 8007520:	3710      	adds	r7, #16
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}
	...

08007528 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b084      	sub	sp, #16
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f7ff ff87 	bl	8007444 <sync_window>
 8007536:	4603      	mov	r3, r0
 8007538:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800753a:	7bfb      	ldrb	r3, [r7, #15]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d159      	bne.n	80075f4 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	781b      	ldrb	r3, [r3, #0]
 8007544:	2b03      	cmp	r3, #3
 8007546:	d149      	bne.n	80075dc <sync_fs+0xb4>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	791b      	ldrb	r3, [r3, #4]
 800754c:	2b01      	cmp	r3, #1
 800754e:	d145      	bne.n	80075dc <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	899b      	ldrh	r3, [r3, #12]
 800755a:	461a      	mov	r2, r3
 800755c:	2100      	movs	r1, #0
 800755e:	f7ff fda8 	bl	80070b2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	3334      	adds	r3, #52	; 0x34
 8007566:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800756a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800756e:	4618      	mov	r0, r3
 8007570:	f7ff fd37 	bl	8006fe2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	3334      	adds	r3, #52	; 0x34
 8007578:	4921      	ldr	r1, [pc, #132]	; (8007600 <sync_fs+0xd8>)
 800757a:	4618      	mov	r0, r3
 800757c:	f7ff fd4c 	bl	8007018 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	3334      	adds	r3, #52	; 0x34
 8007584:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007588:	491e      	ldr	r1, [pc, #120]	; (8007604 <sync_fs+0xdc>)
 800758a:	4618      	mov	r0, r3
 800758c:	f7ff fd44 	bl	8007018 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	3334      	adds	r3, #52	; 0x34
 8007594:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	695b      	ldr	r3, [r3, #20]
 800759c:	4619      	mov	r1, r3
 800759e:	4610      	mov	r0, r2
 80075a0:	f7ff fd3a 	bl	8007018 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	3334      	adds	r3, #52	; 0x34
 80075a8:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	691b      	ldr	r3, [r3, #16]
 80075b0:	4619      	mov	r1, r3
 80075b2:	4610      	mov	r0, r2
 80075b4:	f7ff fd30 	bl	8007018 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6a1b      	ldr	r3, [r3, #32]
 80075bc:	1c5a      	adds	r2, r3, #1
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	7858      	ldrb	r0, [r3, #1]
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80075d0:	2301      	movs	r3, #1
 80075d2:	f7ff fc8d 	bl	8006ef0 <disk_write>
			fs->fsi_flag = 0;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2200      	movs	r2, #0
 80075da:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	785b      	ldrb	r3, [r3, #1]
 80075e0:	2200      	movs	r2, #0
 80075e2:	2100      	movs	r1, #0
 80075e4:	4618      	mov	r0, r3
 80075e6:	f7ff fca3 	bl	8006f30 <disk_ioctl>
 80075ea:	4603      	mov	r3, r0
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d001      	beq.n	80075f4 <sync_fs+0xcc>
 80075f0:	2301      	movs	r3, #1
 80075f2:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80075f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	3710      	adds	r7, #16
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}
 80075fe:	bf00      	nop
 8007600:	41615252 	.word	0x41615252
 8007604:	61417272 	.word	0x61417272

08007608 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8007608:	b480      	push	{r7}
 800760a:	b083      	sub	sp, #12
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
 8007610:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	3b02      	subs	r3, #2
 8007616:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	699b      	ldr	r3, [r3, #24]
 800761c:	3b02      	subs	r3, #2
 800761e:	683a      	ldr	r2, [r7, #0]
 8007620:	429a      	cmp	r2, r3
 8007622:	d301      	bcc.n	8007628 <clust2sect+0x20>
 8007624:	2300      	movs	r3, #0
 8007626:	e008      	b.n	800763a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	895b      	ldrh	r3, [r3, #10]
 800762c:	461a      	mov	r2, r3
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	fb03 f202 	mul.w	r2, r3, r2
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007638:	4413      	add	r3, r2
}
 800763a:	4618      	mov	r0, r3
 800763c:	370c      	adds	r7, #12
 800763e:	46bd      	mov	sp, r7
 8007640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007644:	4770      	bx	lr

08007646 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8007646:	b580      	push	{r7, lr}
 8007648:	b086      	sub	sp, #24
 800764a:	af00      	add	r7, sp, #0
 800764c:	6078      	str	r0, [r7, #4]
 800764e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	2b01      	cmp	r3, #1
 800765a:	d904      	bls.n	8007666 <get_fat+0x20>
 800765c:	693b      	ldr	r3, [r7, #16]
 800765e:	699b      	ldr	r3, [r3, #24]
 8007660:	683a      	ldr	r2, [r7, #0]
 8007662:	429a      	cmp	r2, r3
 8007664:	d302      	bcc.n	800766c <get_fat+0x26>
		val = 1;	/* Internal error */
 8007666:	2301      	movs	r3, #1
 8007668:	617b      	str	r3, [r7, #20]
 800766a:	e0bb      	b.n	80077e4 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800766c:	f04f 33ff 	mov.w	r3, #4294967295
 8007670:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007672:	693b      	ldr	r3, [r7, #16]
 8007674:	781b      	ldrb	r3, [r3, #0]
 8007676:	2b03      	cmp	r3, #3
 8007678:	f000 8083 	beq.w	8007782 <get_fat+0x13c>
 800767c:	2b03      	cmp	r3, #3
 800767e:	f300 80a7 	bgt.w	80077d0 <get_fat+0x18a>
 8007682:	2b01      	cmp	r3, #1
 8007684:	d002      	beq.n	800768c <get_fat+0x46>
 8007686:	2b02      	cmp	r3, #2
 8007688:	d056      	beq.n	8007738 <get_fat+0xf2>
 800768a:	e0a1      	b.n	80077d0 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	60fb      	str	r3, [r7, #12]
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	085b      	lsrs	r3, r3, #1
 8007694:	68fa      	ldr	r2, [r7, #12]
 8007696:	4413      	add	r3, r2
 8007698:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	899b      	ldrh	r3, [r3, #12]
 80076a2:	4619      	mov	r1, r3
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80076aa:	4413      	add	r3, r2
 80076ac:	4619      	mov	r1, r3
 80076ae:	6938      	ldr	r0, [r7, #16]
 80076b0:	f7ff ff0c 	bl	80074cc <move_window>
 80076b4:	4603      	mov	r3, r0
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	f040 808d 	bne.w	80077d6 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	1c5a      	adds	r2, r3, #1
 80076c0:	60fa      	str	r2, [r7, #12]
 80076c2:	693a      	ldr	r2, [r7, #16]
 80076c4:	8992      	ldrh	r2, [r2, #12]
 80076c6:	fbb3 f1f2 	udiv	r1, r3, r2
 80076ca:	fb01 f202 	mul.w	r2, r1, r2
 80076ce:	1a9b      	subs	r3, r3, r2
 80076d0:	693a      	ldr	r2, [r7, #16]
 80076d2:	4413      	add	r3, r2
 80076d4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80076d8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80076de:	693b      	ldr	r3, [r7, #16]
 80076e0:	899b      	ldrh	r3, [r3, #12]
 80076e2:	4619      	mov	r1, r3
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80076ea:	4413      	add	r3, r2
 80076ec:	4619      	mov	r1, r3
 80076ee:	6938      	ldr	r0, [r7, #16]
 80076f0:	f7ff feec 	bl	80074cc <move_window>
 80076f4:	4603      	mov	r3, r0
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d16f      	bne.n	80077da <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 80076fa:	693b      	ldr	r3, [r7, #16]
 80076fc:	899b      	ldrh	r3, [r3, #12]
 80076fe:	461a      	mov	r2, r3
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	fbb3 f1f2 	udiv	r1, r3, r2
 8007706:	fb01 f202 	mul.w	r2, r1, r2
 800770a:	1a9b      	subs	r3, r3, r2
 800770c:	693a      	ldr	r2, [r7, #16]
 800770e:	4413      	add	r3, r2
 8007710:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007714:	021b      	lsls	r3, r3, #8
 8007716:	461a      	mov	r2, r3
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	4313      	orrs	r3, r2
 800771c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	f003 0301 	and.w	r3, r3, #1
 8007724:	2b00      	cmp	r3, #0
 8007726:	d002      	beq.n	800772e <get_fat+0xe8>
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	091b      	lsrs	r3, r3, #4
 800772c:	e002      	b.n	8007734 <get_fat+0xee>
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007734:	617b      	str	r3, [r7, #20]
			break;
 8007736:	e055      	b.n	80077e4 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007738:	693b      	ldr	r3, [r7, #16]
 800773a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800773c:	693b      	ldr	r3, [r7, #16]
 800773e:	899b      	ldrh	r3, [r3, #12]
 8007740:	085b      	lsrs	r3, r3, #1
 8007742:	b29b      	uxth	r3, r3
 8007744:	4619      	mov	r1, r3
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	fbb3 f3f1 	udiv	r3, r3, r1
 800774c:	4413      	add	r3, r2
 800774e:	4619      	mov	r1, r3
 8007750:	6938      	ldr	r0, [r7, #16]
 8007752:	f7ff febb 	bl	80074cc <move_window>
 8007756:	4603      	mov	r3, r0
 8007758:	2b00      	cmp	r3, #0
 800775a:	d140      	bne.n	80077de <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800775c:	693b      	ldr	r3, [r7, #16]
 800775e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	005b      	lsls	r3, r3, #1
 8007766:	693a      	ldr	r2, [r7, #16]
 8007768:	8992      	ldrh	r2, [r2, #12]
 800776a:	fbb3 f0f2 	udiv	r0, r3, r2
 800776e:	fb00 f202 	mul.w	r2, r0, r2
 8007772:	1a9b      	subs	r3, r3, r2
 8007774:	440b      	add	r3, r1
 8007776:	4618      	mov	r0, r3
 8007778:	f7ff fbf8 	bl	8006f6c <ld_word>
 800777c:	4603      	mov	r3, r0
 800777e:	617b      	str	r3, [r7, #20]
			break;
 8007780:	e030      	b.n	80077e4 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007782:	693b      	ldr	r3, [r7, #16]
 8007784:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007786:	693b      	ldr	r3, [r7, #16]
 8007788:	899b      	ldrh	r3, [r3, #12]
 800778a:	089b      	lsrs	r3, r3, #2
 800778c:	b29b      	uxth	r3, r3
 800778e:	4619      	mov	r1, r3
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	fbb3 f3f1 	udiv	r3, r3, r1
 8007796:	4413      	add	r3, r2
 8007798:	4619      	mov	r1, r3
 800779a:	6938      	ldr	r0, [r7, #16]
 800779c:	f7ff fe96 	bl	80074cc <move_window>
 80077a0:	4603      	mov	r3, r0
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d11d      	bne.n	80077e2 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80077a6:	693b      	ldr	r3, [r7, #16]
 80077a8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	009b      	lsls	r3, r3, #2
 80077b0:	693a      	ldr	r2, [r7, #16]
 80077b2:	8992      	ldrh	r2, [r2, #12]
 80077b4:	fbb3 f0f2 	udiv	r0, r3, r2
 80077b8:	fb00 f202 	mul.w	r2, r0, r2
 80077bc:	1a9b      	subs	r3, r3, r2
 80077be:	440b      	add	r3, r1
 80077c0:	4618      	mov	r0, r3
 80077c2:	f7ff fbeb 	bl	8006f9c <ld_dword>
 80077c6:	4603      	mov	r3, r0
 80077c8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80077cc:	617b      	str	r3, [r7, #20]
			break;
 80077ce:	e009      	b.n	80077e4 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80077d0:	2301      	movs	r3, #1
 80077d2:	617b      	str	r3, [r7, #20]
 80077d4:	e006      	b.n	80077e4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80077d6:	bf00      	nop
 80077d8:	e004      	b.n	80077e4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80077da:	bf00      	nop
 80077dc:	e002      	b.n	80077e4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80077de:	bf00      	nop
 80077e0:	e000      	b.n	80077e4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80077e2:	bf00      	nop
		}
	}

	return val;
 80077e4:	697b      	ldr	r3, [r7, #20]
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	3718      	adds	r7, #24
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}

080077ee <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80077ee:	b590      	push	{r4, r7, lr}
 80077f0:	b089      	sub	sp, #36	; 0x24
 80077f2:	af00      	add	r7, sp, #0
 80077f4:	60f8      	str	r0, [r7, #12]
 80077f6:	60b9      	str	r1, [r7, #8]
 80077f8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80077fa:	2302      	movs	r3, #2
 80077fc:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	2b01      	cmp	r3, #1
 8007802:	f240 8102 	bls.w	8007a0a <put_fat+0x21c>
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	699b      	ldr	r3, [r3, #24]
 800780a:	68ba      	ldr	r2, [r7, #8]
 800780c:	429a      	cmp	r2, r3
 800780e:	f080 80fc 	bcs.w	8007a0a <put_fat+0x21c>
		switch (fs->fs_type) {
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	781b      	ldrb	r3, [r3, #0]
 8007816:	2b03      	cmp	r3, #3
 8007818:	f000 80b6 	beq.w	8007988 <put_fat+0x19a>
 800781c:	2b03      	cmp	r3, #3
 800781e:	f300 80fd 	bgt.w	8007a1c <put_fat+0x22e>
 8007822:	2b01      	cmp	r3, #1
 8007824:	d003      	beq.n	800782e <put_fat+0x40>
 8007826:	2b02      	cmp	r3, #2
 8007828:	f000 8083 	beq.w	8007932 <put_fat+0x144>
 800782c:	e0f6      	b.n	8007a1c <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	61bb      	str	r3, [r7, #24]
 8007832:	69bb      	ldr	r3, [r7, #24]
 8007834:	085b      	lsrs	r3, r3, #1
 8007836:	69ba      	ldr	r2, [r7, #24]
 8007838:	4413      	add	r3, r2
 800783a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	899b      	ldrh	r3, [r3, #12]
 8007844:	4619      	mov	r1, r3
 8007846:	69bb      	ldr	r3, [r7, #24]
 8007848:	fbb3 f3f1 	udiv	r3, r3, r1
 800784c:	4413      	add	r3, r2
 800784e:	4619      	mov	r1, r3
 8007850:	68f8      	ldr	r0, [r7, #12]
 8007852:	f7ff fe3b 	bl	80074cc <move_window>
 8007856:	4603      	mov	r3, r0
 8007858:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800785a:	7ffb      	ldrb	r3, [r7, #31]
 800785c:	2b00      	cmp	r3, #0
 800785e:	f040 80d6 	bne.w	8007a0e <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007868:	69bb      	ldr	r3, [r7, #24]
 800786a:	1c5a      	adds	r2, r3, #1
 800786c:	61ba      	str	r2, [r7, #24]
 800786e:	68fa      	ldr	r2, [r7, #12]
 8007870:	8992      	ldrh	r2, [r2, #12]
 8007872:	fbb3 f0f2 	udiv	r0, r3, r2
 8007876:	fb00 f202 	mul.w	r2, r0, r2
 800787a:	1a9b      	subs	r3, r3, r2
 800787c:	440b      	add	r3, r1
 800787e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	f003 0301 	and.w	r3, r3, #1
 8007886:	2b00      	cmp	r3, #0
 8007888:	d00d      	beq.n	80078a6 <put_fat+0xb8>
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	781b      	ldrb	r3, [r3, #0]
 800788e:	b25b      	sxtb	r3, r3
 8007890:	f003 030f 	and.w	r3, r3, #15
 8007894:	b25a      	sxtb	r2, r3
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	b2db      	uxtb	r3, r3
 800789a:	011b      	lsls	r3, r3, #4
 800789c:	b25b      	sxtb	r3, r3
 800789e:	4313      	orrs	r3, r2
 80078a0:	b25b      	sxtb	r3, r3
 80078a2:	b2db      	uxtb	r3, r3
 80078a4:	e001      	b.n	80078aa <put_fat+0xbc>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	b2db      	uxtb	r3, r3
 80078aa:	697a      	ldr	r2, [r7, #20]
 80078ac:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	2201      	movs	r2, #1
 80078b2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	899b      	ldrh	r3, [r3, #12]
 80078bc:	4619      	mov	r1, r3
 80078be:	69bb      	ldr	r3, [r7, #24]
 80078c0:	fbb3 f3f1 	udiv	r3, r3, r1
 80078c4:	4413      	add	r3, r2
 80078c6:	4619      	mov	r1, r3
 80078c8:	68f8      	ldr	r0, [r7, #12]
 80078ca:	f7ff fdff 	bl	80074cc <move_window>
 80078ce:	4603      	mov	r3, r0
 80078d0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80078d2:	7ffb      	ldrb	r3, [r7, #31]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	f040 809c 	bne.w	8007a12 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	899b      	ldrh	r3, [r3, #12]
 80078e4:	461a      	mov	r2, r3
 80078e6:	69bb      	ldr	r3, [r7, #24]
 80078e8:	fbb3 f0f2 	udiv	r0, r3, r2
 80078ec:	fb00 f202 	mul.w	r2, r0, r2
 80078f0:	1a9b      	subs	r3, r3, r2
 80078f2:	440b      	add	r3, r1
 80078f4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	f003 0301 	and.w	r3, r3, #1
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d003      	beq.n	8007908 <put_fat+0x11a>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	091b      	lsrs	r3, r3, #4
 8007904:	b2db      	uxtb	r3, r3
 8007906:	e00e      	b.n	8007926 <put_fat+0x138>
 8007908:	697b      	ldr	r3, [r7, #20]
 800790a:	781b      	ldrb	r3, [r3, #0]
 800790c:	b25b      	sxtb	r3, r3
 800790e:	f023 030f 	bic.w	r3, r3, #15
 8007912:	b25a      	sxtb	r2, r3
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	0a1b      	lsrs	r3, r3, #8
 8007918:	b25b      	sxtb	r3, r3
 800791a:	f003 030f 	and.w	r3, r3, #15
 800791e:	b25b      	sxtb	r3, r3
 8007920:	4313      	orrs	r3, r2
 8007922:	b25b      	sxtb	r3, r3
 8007924:	b2db      	uxtb	r3, r3
 8007926:	697a      	ldr	r2, [r7, #20]
 8007928:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	2201      	movs	r2, #1
 800792e:	70da      	strb	r2, [r3, #3]
			break;
 8007930:	e074      	b.n	8007a1c <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	899b      	ldrh	r3, [r3, #12]
 800793a:	085b      	lsrs	r3, r3, #1
 800793c:	b29b      	uxth	r3, r3
 800793e:	4619      	mov	r1, r3
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	fbb3 f3f1 	udiv	r3, r3, r1
 8007946:	4413      	add	r3, r2
 8007948:	4619      	mov	r1, r3
 800794a:	68f8      	ldr	r0, [r7, #12]
 800794c:	f7ff fdbe 	bl	80074cc <move_window>
 8007950:	4603      	mov	r3, r0
 8007952:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007954:	7ffb      	ldrb	r3, [r7, #31]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d15d      	bne.n	8007a16 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	005b      	lsls	r3, r3, #1
 8007964:	68fa      	ldr	r2, [r7, #12]
 8007966:	8992      	ldrh	r2, [r2, #12]
 8007968:	fbb3 f0f2 	udiv	r0, r3, r2
 800796c:	fb00 f202 	mul.w	r2, r0, r2
 8007970:	1a9b      	subs	r3, r3, r2
 8007972:	440b      	add	r3, r1
 8007974:	687a      	ldr	r2, [r7, #4]
 8007976:	b292      	uxth	r2, r2
 8007978:	4611      	mov	r1, r2
 800797a:	4618      	mov	r0, r3
 800797c:	f7ff fb31 	bl	8006fe2 <st_word>
			fs->wflag = 1;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	2201      	movs	r2, #1
 8007984:	70da      	strb	r2, [r3, #3]
			break;
 8007986:	e049      	b.n	8007a1c <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	899b      	ldrh	r3, [r3, #12]
 8007990:	089b      	lsrs	r3, r3, #2
 8007992:	b29b      	uxth	r3, r3
 8007994:	4619      	mov	r1, r3
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	fbb3 f3f1 	udiv	r3, r3, r1
 800799c:	4413      	add	r3, r2
 800799e:	4619      	mov	r1, r3
 80079a0:	68f8      	ldr	r0, [r7, #12]
 80079a2:	f7ff fd93 	bl	80074cc <move_window>
 80079a6:	4603      	mov	r3, r0
 80079a8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80079aa:	7ffb      	ldrb	r3, [r7, #31]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d134      	bne.n	8007a1a <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	009b      	lsls	r3, r3, #2
 80079c0:	68fa      	ldr	r2, [r7, #12]
 80079c2:	8992      	ldrh	r2, [r2, #12]
 80079c4:	fbb3 f0f2 	udiv	r0, r3, r2
 80079c8:	fb00 f202 	mul.w	r2, r0, r2
 80079cc:	1a9b      	subs	r3, r3, r2
 80079ce:	440b      	add	r3, r1
 80079d0:	4618      	mov	r0, r3
 80079d2:	f7ff fae3 	bl	8006f9c <ld_dword>
 80079d6:	4603      	mov	r3, r0
 80079d8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80079dc:	4323      	orrs	r3, r4
 80079de:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	009b      	lsls	r3, r3, #2
 80079ea:	68fa      	ldr	r2, [r7, #12]
 80079ec:	8992      	ldrh	r2, [r2, #12]
 80079ee:	fbb3 f0f2 	udiv	r0, r3, r2
 80079f2:	fb00 f202 	mul.w	r2, r0, r2
 80079f6:	1a9b      	subs	r3, r3, r2
 80079f8:	440b      	add	r3, r1
 80079fa:	6879      	ldr	r1, [r7, #4]
 80079fc:	4618      	mov	r0, r3
 80079fe:	f7ff fb0b 	bl	8007018 <st_dword>
			fs->wflag = 1;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	2201      	movs	r2, #1
 8007a06:	70da      	strb	r2, [r3, #3]
			break;
 8007a08:	e008      	b.n	8007a1c <put_fat+0x22e>
		}
	}
 8007a0a:	bf00      	nop
 8007a0c:	e006      	b.n	8007a1c <put_fat+0x22e>
			if (res != FR_OK) break;
 8007a0e:	bf00      	nop
 8007a10:	e004      	b.n	8007a1c <put_fat+0x22e>
			if (res != FR_OK) break;
 8007a12:	bf00      	nop
 8007a14:	e002      	b.n	8007a1c <put_fat+0x22e>
			if (res != FR_OK) break;
 8007a16:	bf00      	nop
 8007a18:	e000      	b.n	8007a1c <put_fat+0x22e>
			if (res != FR_OK) break;
 8007a1a:	bf00      	nop
	return res;
 8007a1c:	7ffb      	ldrb	r3, [r7, #31]
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	3724      	adds	r7, #36	; 0x24
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd90      	pop	{r4, r7, pc}

08007a26 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8007a26:	b580      	push	{r7, lr}
 8007a28:	b088      	sub	sp, #32
 8007a2a:	af00      	add	r7, sp, #0
 8007a2c:	60f8      	str	r0, [r7, #12]
 8007a2e:	60b9      	str	r1, [r7, #8]
 8007a30:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007a32:	2300      	movs	r3, #0
 8007a34:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	2b01      	cmp	r3, #1
 8007a40:	d904      	bls.n	8007a4c <remove_chain+0x26>
 8007a42:	69bb      	ldr	r3, [r7, #24]
 8007a44:	699b      	ldr	r3, [r3, #24]
 8007a46:	68ba      	ldr	r2, [r7, #8]
 8007a48:	429a      	cmp	r2, r3
 8007a4a:	d301      	bcc.n	8007a50 <remove_chain+0x2a>
 8007a4c:	2302      	movs	r3, #2
 8007a4e:	e04b      	b.n	8007ae8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d00c      	beq.n	8007a70 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007a56:	f04f 32ff 	mov.w	r2, #4294967295
 8007a5a:	6879      	ldr	r1, [r7, #4]
 8007a5c:	69b8      	ldr	r0, [r7, #24]
 8007a5e:	f7ff fec6 	bl	80077ee <put_fat>
 8007a62:	4603      	mov	r3, r0
 8007a64:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8007a66:	7ffb      	ldrb	r3, [r7, #31]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d001      	beq.n	8007a70 <remove_chain+0x4a>
 8007a6c:	7ffb      	ldrb	r3, [r7, #31]
 8007a6e:	e03b      	b.n	8007ae8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007a70:	68b9      	ldr	r1, [r7, #8]
 8007a72:	68f8      	ldr	r0, [r7, #12]
 8007a74:	f7ff fde7 	bl	8007646 <get_fat>
 8007a78:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8007a7a:	697b      	ldr	r3, [r7, #20]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d031      	beq.n	8007ae4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007a80:	697b      	ldr	r3, [r7, #20]
 8007a82:	2b01      	cmp	r3, #1
 8007a84:	d101      	bne.n	8007a8a <remove_chain+0x64>
 8007a86:	2302      	movs	r3, #2
 8007a88:	e02e      	b.n	8007ae8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007a8a:	697b      	ldr	r3, [r7, #20]
 8007a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a90:	d101      	bne.n	8007a96 <remove_chain+0x70>
 8007a92:	2301      	movs	r3, #1
 8007a94:	e028      	b.n	8007ae8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007a96:	2200      	movs	r2, #0
 8007a98:	68b9      	ldr	r1, [r7, #8]
 8007a9a:	69b8      	ldr	r0, [r7, #24]
 8007a9c:	f7ff fea7 	bl	80077ee <put_fat>
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8007aa4:	7ffb      	ldrb	r3, [r7, #31]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d001      	beq.n	8007aae <remove_chain+0x88>
 8007aaa:	7ffb      	ldrb	r3, [r7, #31]
 8007aac:	e01c      	b.n	8007ae8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8007aae:	69bb      	ldr	r3, [r7, #24]
 8007ab0:	695a      	ldr	r2, [r3, #20]
 8007ab2:	69bb      	ldr	r3, [r7, #24]
 8007ab4:	699b      	ldr	r3, [r3, #24]
 8007ab6:	3b02      	subs	r3, #2
 8007ab8:	429a      	cmp	r2, r3
 8007aba:	d20b      	bcs.n	8007ad4 <remove_chain+0xae>
			fs->free_clst++;
 8007abc:	69bb      	ldr	r3, [r7, #24]
 8007abe:	695b      	ldr	r3, [r3, #20]
 8007ac0:	1c5a      	adds	r2, r3, #1
 8007ac2:	69bb      	ldr	r3, [r7, #24]
 8007ac4:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8007ac6:	69bb      	ldr	r3, [r7, #24]
 8007ac8:	791b      	ldrb	r3, [r3, #4]
 8007aca:	f043 0301 	orr.w	r3, r3, #1
 8007ace:	b2da      	uxtb	r2, r3
 8007ad0:	69bb      	ldr	r3, [r7, #24]
 8007ad2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007ad8:	69bb      	ldr	r3, [r7, #24]
 8007ada:	699b      	ldr	r3, [r3, #24]
 8007adc:	68ba      	ldr	r2, [r7, #8]
 8007ade:	429a      	cmp	r2, r3
 8007ae0:	d3c6      	bcc.n	8007a70 <remove_chain+0x4a>
 8007ae2:	e000      	b.n	8007ae6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8007ae4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8007ae6:	2300      	movs	r3, #0
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	3720      	adds	r7, #32
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}

08007af0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b088      	sub	sp, #32
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
 8007af8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d10d      	bne.n	8007b22 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	691b      	ldr	r3, [r3, #16]
 8007b0a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007b0c:	69bb      	ldr	r3, [r7, #24]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d004      	beq.n	8007b1c <create_chain+0x2c>
 8007b12:	693b      	ldr	r3, [r7, #16]
 8007b14:	699b      	ldr	r3, [r3, #24]
 8007b16:	69ba      	ldr	r2, [r7, #24]
 8007b18:	429a      	cmp	r2, r3
 8007b1a:	d31b      	bcc.n	8007b54 <create_chain+0x64>
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	61bb      	str	r3, [r7, #24]
 8007b20:	e018      	b.n	8007b54 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007b22:	6839      	ldr	r1, [r7, #0]
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f7ff fd8e 	bl	8007646 <get_fat>
 8007b2a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	2b01      	cmp	r3, #1
 8007b30:	d801      	bhi.n	8007b36 <create_chain+0x46>
 8007b32:	2301      	movs	r3, #1
 8007b34:	e070      	b.n	8007c18 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b3c:	d101      	bne.n	8007b42 <create_chain+0x52>
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	e06a      	b.n	8007c18 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007b42:	693b      	ldr	r3, [r7, #16]
 8007b44:	699b      	ldr	r3, [r3, #24]
 8007b46:	68fa      	ldr	r2, [r7, #12]
 8007b48:	429a      	cmp	r2, r3
 8007b4a:	d201      	bcs.n	8007b50 <create_chain+0x60>
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	e063      	b.n	8007c18 <create_chain+0x128>
		scl = clst;
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8007b54:	69bb      	ldr	r3, [r7, #24]
 8007b56:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8007b58:	69fb      	ldr	r3, [r7, #28]
 8007b5a:	3301      	adds	r3, #1
 8007b5c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007b5e:	693b      	ldr	r3, [r7, #16]
 8007b60:	699b      	ldr	r3, [r3, #24]
 8007b62:	69fa      	ldr	r2, [r7, #28]
 8007b64:	429a      	cmp	r2, r3
 8007b66:	d307      	bcc.n	8007b78 <create_chain+0x88>
				ncl = 2;
 8007b68:	2302      	movs	r3, #2
 8007b6a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8007b6c:	69fa      	ldr	r2, [r7, #28]
 8007b6e:	69bb      	ldr	r3, [r7, #24]
 8007b70:	429a      	cmp	r2, r3
 8007b72:	d901      	bls.n	8007b78 <create_chain+0x88>
 8007b74:	2300      	movs	r3, #0
 8007b76:	e04f      	b.n	8007c18 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007b78:	69f9      	ldr	r1, [r7, #28]
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f7ff fd63 	bl	8007646 <get_fat>
 8007b80:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d00e      	beq.n	8007ba6 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	2b01      	cmp	r3, #1
 8007b8c:	d003      	beq.n	8007b96 <create_chain+0xa6>
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b94:	d101      	bne.n	8007b9a <create_chain+0xaa>
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	e03e      	b.n	8007c18 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8007b9a:	69fa      	ldr	r2, [r7, #28]
 8007b9c:	69bb      	ldr	r3, [r7, #24]
 8007b9e:	429a      	cmp	r2, r3
 8007ba0:	d1da      	bne.n	8007b58 <create_chain+0x68>
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	e038      	b.n	8007c18 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8007ba6:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007ba8:	f04f 32ff 	mov.w	r2, #4294967295
 8007bac:	69f9      	ldr	r1, [r7, #28]
 8007bae:	6938      	ldr	r0, [r7, #16]
 8007bb0:	f7ff fe1d 	bl	80077ee <put_fat>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8007bb8:	7dfb      	ldrb	r3, [r7, #23]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d109      	bne.n	8007bd2 <create_chain+0xe2>
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d006      	beq.n	8007bd2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8007bc4:	69fa      	ldr	r2, [r7, #28]
 8007bc6:	6839      	ldr	r1, [r7, #0]
 8007bc8:	6938      	ldr	r0, [r7, #16]
 8007bca:	f7ff fe10 	bl	80077ee <put_fat>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8007bd2:	7dfb      	ldrb	r3, [r7, #23]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d116      	bne.n	8007c06 <create_chain+0x116>
		fs->last_clst = ncl;
 8007bd8:	693b      	ldr	r3, [r7, #16]
 8007bda:	69fa      	ldr	r2, [r7, #28]
 8007bdc:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8007bde:	693b      	ldr	r3, [r7, #16]
 8007be0:	695a      	ldr	r2, [r3, #20]
 8007be2:	693b      	ldr	r3, [r7, #16]
 8007be4:	699b      	ldr	r3, [r3, #24]
 8007be6:	3b02      	subs	r3, #2
 8007be8:	429a      	cmp	r2, r3
 8007bea:	d804      	bhi.n	8007bf6 <create_chain+0x106>
 8007bec:	693b      	ldr	r3, [r7, #16]
 8007bee:	695b      	ldr	r3, [r3, #20]
 8007bf0:	1e5a      	subs	r2, r3, #1
 8007bf2:	693b      	ldr	r3, [r7, #16]
 8007bf4:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8007bf6:	693b      	ldr	r3, [r7, #16]
 8007bf8:	791b      	ldrb	r3, [r3, #4]
 8007bfa:	f043 0301 	orr.w	r3, r3, #1
 8007bfe:	b2da      	uxtb	r2, r3
 8007c00:	693b      	ldr	r3, [r7, #16]
 8007c02:	711a      	strb	r2, [r3, #4]
 8007c04:	e007      	b.n	8007c16 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007c06:	7dfb      	ldrb	r3, [r7, #23]
 8007c08:	2b01      	cmp	r3, #1
 8007c0a:	d102      	bne.n	8007c12 <create_chain+0x122>
 8007c0c:	f04f 33ff 	mov.w	r3, #4294967295
 8007c10:	e000      	b.n	8007c14 <create_chain+0x124>
 8007c12:	2301      	movs	r3, #1
 8007c14:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8007c16:	69fb      	ldr	r3, [r7, #28]
}
 8007c18:	4618      	mov	r0, r3
 8007c1a:	3720      	adds	r7, #32
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bd80      	pop	{r7, pc}

08007c20 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b087      	sub	sp, #28
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
 8007c28:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c34:	3304      	adds	r3, #4
 8007c36:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	899b      	ldrh	r3, [r3, #12]
 8007c3c:	461a      	mov	r2, r3
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	fbb3 f3f2 	udiv	r3, r3, r2
 8007c44:	68fa      	ldr	r2, [r7, #12]
 8007c46:	8952      	ldrh	r2, [r2, #10]
 8007c48:	fbb3 f3f2 	udiv	r3, r3, r2
 8007c4c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007c4e:	693b      	ldr	r3, [r7, #16]
 8007c50:	1d1a      	adds	r2, r3, #4
 8007c52:	613a      	str	r2, [r7, #16]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d101      	bne.n	8007c62 <clmt_clust+0x42>
 8007c5e:	2300      	movs	r3, #0
 8007c60:	e010      	b.n	8007c84 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8007c62:	697a      	ldr	r2, [r7, #20]
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	429a      	cmp	r2, r3
 8007c68:	d307      	bcc.n	8007c7a <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8007c6a:	697a      	ldr	r2, [r7, #20]
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	1ad3      	subs	r3, r2, r3
 8007c70:	617b      	str	r3, [r7, #20]
 8007c72:	693b      	ldr	r3, [r7, #16]
 8007c74:	3304      	adds	r3, #4
 8007c76:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007c78:	e7e9      	b.n	8007c4e <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8007c7a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007c7c:	693b      	ldr	r3, [r7, #16]
 8007c7e:	681a      	ldr	r2, [r3, #0]
 8007c80:	697b      	ldr	r3, [r7, #20]
 8007c82:	4413      	add	r3, r2
}
 8007c84:	4618      	mov	r0, r3
 8007c86:	371c      	adds	r7, #28
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8e:	4770      	bx	lr

08007c90 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b086      	sub	sp, #24
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
 8007c98:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007ca6:	d204      	bcs.n	8007cb2 <dir_sdi+0x22>
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	f003 031f 	and.w	r3, r3, #31
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d001      	beq.n	8007cb6 <dir_sdi+0x26>
		return FR_INT_ERR;
 8007cb2:	2302      	movs	r3, #2
 8007cb4:	e071      	b.n	8007d9a <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	683a      	ldr	r2, [r7, #0]
 8007cba:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	689b      	ldr	r3, [r3, #8]
 8007cc0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d106      	bne.n	8007cd6 <dir_sdi+0x46>
 8007cc8:	693b      	ldr	r3, [r7, #16]
 8007cca:	781b      	ldrb	r3, [r3, #0]
 8007ccc:	2b02      	cmp	r3, #2
 8007cce:	d902      	bls.n	8007cd6 <dir_sdi+0x46>
		clst = fs->dirbase;
 8007cd0:	693b      	ldr	r3, [r7, #16]
 8007cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cd4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007cd6:	697b      	ldr	r3, [r7, #20]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d10c      	bne.n	8007cf6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	095b      	lsrs	r3, r3, #5
 8007ce0:	693a      	ldr	r2, [r7, #16]
 8007ce2:	8912      	ldrh	r2, [r2, #8]
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d301      	bcc.n	8007cec <dir_sdi+0x5c>
 8007ce8:	2302      	movs	r3, #2
 8007cea:	e056      	b.n	8007d9a <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8007cec:	693b      	ldr	r3, [r7, #16]
 8007cee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	61da      	str	r2, [r3, #28]
 8007cf4:	e02d      	b.n	8007d52 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007cf6:	693b      	ldr	r3, [r7, #16]
 8007cf8:	895b      	ldrh	r3, [r3, #10]
 8007cfa:	461a      	mov	r2, r3
 8007cfc:	693b      	ldr	r3, [r7, #16]
 8007cfe:	899b      	ldrh	r3, [r3, #12]
 8007d00:	fb02 f303 	mul.w	r3, r2, r3
 8007d04:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007d06:	e019      	b.n	8007d3c <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6979      	ldr	r1, [r7, #20]
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	f7ff fc9a 	bl	8007646 <get_fat>
 8007d12:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007d14:	697b      	ldr	r3, [r7, #20]
 8007d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d1a:	d101      	bne.n	8007d20 <dir_sdi+0x90>
 8007d1c:	2301      	movs	r3, #1
 8007d1e:	e03c      	b.n	8007d9a <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007d20:	697b      	ldr	r3, [r7, #20]
 8007d22:	2b01      	cmp	r3, #1
 8007d24:	d904      	bls.n	8007d30 <dir_sdi+0xa0>
 8007d26:	693b      	ldr	r3, [r7, #16]
 8007d28:	699b      	ldr	r3, [r3, #24]
 8007d2a:	697a      	ldr	r2, [r7, #20]
 8007d2c:	429a      	cmp	r2, r3
 8007d2e:	d301      	bcc.n	8007d34 <dir_sdi+0xa4>
 8007d30:	2302      	movs	r3, #2
 8007d32:	e032      	b.n	8007d9a <dir_sdi+0x10a>
			ofs -= csz;
 8007d34:	683a      	ldr	r2, [r7, #0]
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	1ad3      	subs	r3, r2, r3
 8007d3a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007d3c:	683a      	ldr	r2, [r7, #0]
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	429a      	cmp	r2, r3
 8007d42:	d2e1      	bcs.n	8007d08 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8007d44:	6979      	ldr	r1, [r7, #20]
 8007d46:	6938      	ldr	r0, [r7, #16]
 8007d48:	f7ff fc5e 	bl	8007608 <clust2sect>
 8007d4c:	4602      	mov	r2, r0
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	697a      	ldr	r2, [r7, #20]
 8007d56:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	69db      	ldr	r3, [r3, #28]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d101      	bne.n	8007d64 <dir_sdi+0xd4>
 8007d60:	2302      	movs	r3, #2
 8007d62:	e01a      	b.n	8007d9a <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	69da      	ldr	r2, [r3, #28]
 8007d68:	693b      	ldr	r3, [r7, #16]
 8007d6a:	899b      	ldrh	r3, [r3, #12]
 8007d6c:	4619      	mov	r1, r3
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	fbb3 f3f1 	udiv	r3, r3, r1
 8007d74:	441a      	add	r2, r3
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007d7a:	693b      	ldr	r3, [r7, #16]
 8007d7c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007d80:	693b      	ldr	r3, [r7, #16]
 8007d82:	899b      	ldrh	r3, [r3, #12]
 8007d84:	461a      	mov	r2, r3
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	fbb3 f0f2 	udiv	r0, r3, r2
 8007d8c:	fb00 f202 	mul.w	r2, r0, r2
 8007d90:	1a9b      	subs	r3, r3, r2
 8007d92:	18ca      	adds	r2, r1, r3
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007d98:	2300      	movs	r3, #0
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	3718      	adds	r7, #24
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}

08007da2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007da2:	b580      	push	{r7, lr}
 8007da4:	b086      	sub	sp, #24
 8007da6:	af00      	add	r7, sp, #0
 8007da8:	6078      	str	r0, [r7, #4]
 8007daa:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	695b      	ldr	r3, [r3, #20]
 8007db6:	3320      	adds	r3, #32
 8007db8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	69db      	ldr	r3, [r3, #28]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d003      	beq.n	8007dca <dir_next+0x28>
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007dc8:	d301      	bcc.n	8007dce <dir_next+0x2c>
 8007dca:	2304      	movs	r3, #4
 8007dcc:	e0bb      	b.n	8007f46 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	899b      	ldrh	r3, [r3, #12]
 8007dd2:	461a      	mov	r2, r3
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	fbb3 f1f2 	udiv	r1, r3, r2
 8007dda:	fb01 f202 	mul.w	r2, r1, r2
 8007dde:	1a9b      	subs	r3, r3, r2
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	f040 809d 	bne.w	8007f20 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	69db      	ldr	r3, [r3, #28]
 8007dea:	1c5a      	adds	r2, r3, #1
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	699b      	ldr	r3, [r3, #24]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d10b      	bne.n	8007e10 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	095b      	lsrs	r3, r3, #5
 8007dfc:	68fa      	ldr	r2, [r7, #12]
 8007dfe:	8912      	ldrh	r2, [r2, #8]
 8007e00:	4293      	cmp	r3, r2
 8007e02:	f0c0 808d 	bcc.w	8007f20 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	61da      	str	r2, [r3, #28]
 8007e0c:	2304      	movs	r3, #4
 8007e0e:	e09a      	b.n	8007f46 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	899b      	ldrh	r3, [r3, #12]
 8007e14:	461a      	mov	r2, r3
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e1c:	68fa      	ldr	r2, [r7, #12]
 8007e1e:	8952      	ldrh	r2, [r2, #10]
 8007e20:	3a01      	subs	r2, #1
 8007e22:	4013      	ands	r3, r2
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d17b      	bne.n	8007f20 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007e28:	687a      	ldr	r2, [r7, #4]
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	699b      	ldr	r3, [r3, #24]
 8007e2e:	4619      	mov	r1, r3
 8007e30:	4610      	mov	r0, r2
 8007e32:	f7ff fc08 	bl	8007646 <get_fat>
 8007e36:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007e38:	697b      	ldr	r3, [r7, #20]
 8007e3a:	2b01      	cmp	r3, #1
 8007e3c:	d801      	bhi.n	8007e42 <dir_next+0xa0>
 8007e3e:	2302      	movs	r3, #2
 8007e40:	e081      	b.n	8007f46 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007e42:	697b      	ldr	r3, [r7, #20]
 8007e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e48:	d101      	bne.n	8007e4e <dir_next+0xac>
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	e07b      	b.n	8007f46 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	699b      	ldr	r3, [r3, #24]
 8007e52:	697a      	ldr	r2, [r7, #20]
 8007e54:	429a      	cmp	r2, r3
 8007e56:	d359      	bcc.n	8007f0c <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d104      	bne.n	8007e68 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2200      	movs	r2, #0
 8007e62:	61da      	str	r2, [r3, #28]
 8007e64:	2304      	movs	r3, #4
 8007e66:	e06e      	b.n	8007f46 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007e68:	687a      	ldr	r2, [r7, #4]
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	699b      	ldr	r3, [r3, #24]
 8007e6e:	4619      	mov	r1, r3
 8007e70:	4610      	mov	r0, r2
 8007e72:	f7ff fe3d 	bl	8007af0 <create_chain>
 8007e76:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007e78:	697b      	ldr	r3, [r7, #20]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d101      	bne.n	8007e82 <dir_next+0xe0>
 8007e7e:	2307      	movs	r3, #7
 8007e80:	e061      	b.n	8007f46 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007e82:	697b      	ldr	r3, [r7, #20]
 8007e84:	2b01      	cmp	r3, #1
 8007e86:	d101      	bne.n	8007e8c <dir_next+0xea>
 8007e88:	2302      	movs	r3, #2
 8007e8a:	e05c      	b.n	8007f46 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007e8c:	697b      	ldr	r3, [r7, #20]
 8007e8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e92:	d101      	bne.n	8007e98 <dir_next+0xf6>
 8007e94:	2301      	movs	r3, #1
 8007e96:	e056      	b.n	8007f46 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007e98:	68f8      	ldr	r0, [r7, #12]
 8007e9a:	f7ff fad3 	bl	8007444 <sync_window>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d001      	beq.n	8007ea8 <dir_next+0x106>
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	e04e      	b.n	8007f46 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	899b      	ldrh	r3, [r3, #12]
 8007eb2:	461a      	mov	r2, r3
 8007eb4:	2100      	movs	r1, #0
 8007eb6:	f7ff f8fc 	bl	80070b2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007eba:	2300      	movs	r3, #0
 8007ebc:	613b      	str	r3, [r7, #16]
 8007ebe:	6979      	ldr	r1, [r7, #20]
 8007ec0:	68f8      	ldr	r0, [r7, #12]
 8007ec2:	f7ff fba1 	bl	8007608 <clust2sect>
 8007ec6:	4602      	mov	r2, r0
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	631a      	str	r2, [r3, #48]	; 0x30
 8007ecc:	e012      	b.n	8007ef4 <dir_next+0x152>
						fs->wflag = 1;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	2201      	movs	r2, #1
 8007ed2:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007ed4:	68f8      	ldr	r0, [r7, #12]
 8007ed6:	f7ff fab5 	bl	8007444 <sync_window>
 8007eda:	4603      	mov	r3, r0
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d001      	beq.n	8007ee4 <dir_next+0x142>
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	e030      	b.n	8007f46 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	3301      	adds	r3, #1
 8007ee8:	613b      	str	r3, [r7, #16]
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eee:	1c5a      	adds	r2, r3, #1
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	631a      	str	r2, [r3, #48]	; 0x30
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	895b      	ldrh	r3, [r3, #10]
 8007ef8:	461a      	mov	r2, r3
 8007efa:	693b      	ldr	r3, [r7, #16]
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d3e6      	bcc.n	8007ece <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f04:	693b      	ldr	r3, [r7, #16]
 8007f06:	1ad2      	subs	r2, r2, r3
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	697a      	ldr	r2, [r7, #20]
 8007f10:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8007f12:	6979      	ldr	r1, [r7, #20]
 8007f14:	68f8      	ldr	r0, [r7, #12]
 8007f16:	f7ff fb77 	bl	8007608 <clust2sect>
 8007f1a:	4602      	mov	r2, r0
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	68ba      	ldr	r2, [r7, #8]
 8007f24:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	899b      	ldrh	r3, [r3, #12]
 8007f30:	461a      	mov	r2, r3
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	fbb3 f0f2 	udiv	r0, r3, r2
 8007f38:	fb00 f202 	mul.w	r2, r0, r2
 8007f3c:	1a9b      	subs	r3, r3, r2
 8007f3e:	18ca      	adds	r2, r1, r3
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007f44:	2300      	movs	r3, #0
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	3718      	adds	r7, #24
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}

08007f4e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8007f4e:	b580      	push	{r7, lr}
 8007f50:	b086      	sub	sp, #24
 8007f52:	af00      	add	r7, sp, #0
 8007f54:	6078      	str	r0, [r7, #4]
 8007f56:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007f5e:	2100      	movs	r1, #0
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	f7ff fe95 	bl	8007c90 <dir_sdi>
 8007f66:	4603      	mov	r3, r0
 8007f68:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007f6a:	7dfb      	ldrb	r3, [r7, #23]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d12b      	bne.n	8007fc8 <dir_alloc+0x7a>
		n = 0;
 8007f70:	2300      	movs	r3, #0
 8007f72:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	69db      	ldr	r3, [r3, #28]
 8007f78:	4619      	mov	r1, r3
 8007f7a:	68f8      	ldr	r0, [r7, #12]
 8007f7c:	f7ff faa6 	bl	80074cc <move_window>
 8007f80:	4603      	mov	r3, r0
 8007f82:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007f84:	7dfb      	ldrb	r3, [r7, #23]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d11d      	bne.n	8007fc6 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6a1b      	ldr	r3, [r3, #32]
 8007f8e:	781b      	ldrb	r3, [r3, #0]
 8007f90:	2be5      	cmp	r3, #229	; 0xe5
 8007f92:	d004      	beq.n	8007f9e <dir_alloc+0x50>
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6a1b      	ldr	r3, [r3, #32]
 8007f98:	781b      	ldrb	r3, [r3, #0]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d107      	bne.n	8007fae <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007f9e:	693b      	ldr	r3, [r7, #16]
 8007fa0:	3301      	adds	r3, #1
 8007fa2:	613b      	str	r3, [r7, #16]
 8007fa4:	693a      	ldr	r2, [r7, #16]
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	429a      	cmp	r2, r3
 8007faa:	d102      	bne.n	8007fb2 <dir_alloc+0x64>
 8007fac:	e00c      	b.n	8007fc8 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007fae:	2300      	movs	r3, #0
 8007fb0:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8007fb2:	2101      	movs	r1, #1
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f7ff fef4 	bl	8007da2 <dir_next>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8007fbe:	7dfb      	ldrb	r3, [r7, #23]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d0d7      	beq.n	8007f74 <dir_alloc+0x26>
 8007fc4:	e000      	b.n	8007fc8 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8007fc6:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007fc8:	7dfb      	ldrb	r3, [r7, #23]
 8007fca:	2b04      	cmp	r3, #4
 8007fcc:	d101      	bne.n	8007fd2 <dir_alloc+0x84>
 8007fce:	2307      	movs	r3, #7
 8007fd0:	75fb      	strb	r3, [r7, #23]
	return res;
 8007fd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	3718      	adds	r7, #24
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}

08007fdc <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b084      	sub	sp, #16
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
 8007fe4:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	331a      	adds	r3, #26
 8007fea:	4618      	mov	r0, r3
 8007fec:	f7fe ffbe 	bl	8006f6c <ld_word>
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	781b      	ldrb	r3, [r3, #0]
 8007ff8:	2b03      	cmp	r3, #3
 8007ffa:	d109      	bne.n	8008010 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	3314      	adds	r3, #20
 8008000:	4618      	mov	r0, r3
 8008002:	f7fe ffb3 	bl	8006f6c <ld_word>
 8008006:	4603      	mov	r3, r0
 8008008:	041b      	lsls	r3, r3, #16
 800800a:	68fa      	ldr	r2, [r7, #12]
 800800c:	4313      	orrs	r3, r2
 800800e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8008010:	68fb      	ldr	r3, [r7, #12]
}
 8008012:	4618      	mov	r0, r3
 8008014:	3710      	adds	r7, #16
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}

0800801a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800801a:	b580      	push	{r7, lr}
 800801c:	b084      	sub	sp, #16
 800801e:	af00      	add	r7, sp, #0
 8008020:	60f8      	str	r0, [r7, #12]
 8008022:	60b9      	str	r1, [r7, #8]
 8008024:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	331a      	adds	r3, #26
 800802a:	687a      	ldr	r2, [r7, #4]
 800802c:	b292      	uxth	r2, r2
 800802e:	4611      	mov	r1, r2
 8008030:	4618      	mov	r0, r3
 8008032:	f7fe ffd6 	bl	8006fe2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	781b      	ldrb	r3, [r3, #0]
 800803a:	2b03      	cmp	r3, #3
 800803c:	d109      	bne.n	8008052 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	f103 0214 	add.w	r2, r3, #20
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	0c1b      	lsrs	r3, r3, #16
 8008048:	b29b      	uxth	r3, r3
 800804a:	4619      	mov	r1, r3
 800804c:	4610      	mov	r0, r2
 800804e:	f7fe ffc8 	bl	8006fe2 <st_word>
	}
}
 8008052:	bf00      	nop
 8008054:	3710      	adds	r7, #16
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}

0800805a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800805a:	b580      	push	{r7, lr}
 800805c:	b086      	sub	sp, #24
 800805e:	af00      	add	r7, sp, #0
 8008060:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008068:	2100      	movs	r1, #0
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f7ff fe10 	bl	8007c90 <dir_sdi>
 8008070:	4603      	mov	r3, r0
 8008072:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8008074:	7dfb      	ldrb	r3, [r7, #23]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d001      	beq.n	800807e <dir_find+0x24>
 800807a:	7dfb      	ldrb	r3, [r7, #23]
 800807c:	e03e      	b.n	80080fc <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	69db      	ldr	r3, [r3, #28]
 8008082:	4619      	mov	r1, r3
 8008084:	6938      	ldr	r0, [r7, #16]
 8008086:	f7ff fa21 	bl	80074cc <move_window>
 800808a:	4603      	mov	r3, r0
 800808c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800808e:	7dfb      	ldrb	r3, [r7, #23]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d12f      	bne.n	80080f4 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6a1b      	ldr	r3, [r3, #32]
 8008098:	781b      	ldrb	r3, [r3, #0]
 800809a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800809c:	7bfb      	ldrb	r3, [r7, #15]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d102      	bne.n	80080a8 <dir_find+0x4e>
 80080a2:	2304      	movs	r3, #4
 80080a4:	75fb      	strb	r3, [r7, #23]
 80080a6:	e028      	b.n	80080fa <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6a1b      	ldr	r3, [r3, #32]
 80080ac:	330b      	adds	r3, #11
 80080ae:	781b      	ldrb	r3, [r3, #0]
 80080b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80080b4:	b2da      	uxtb	r2, r3
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6a1b      	ldr	r3, [r3, #32]
 80080be:	330b      	adds	r3, #11
 80080c0:	781b      	ldrb	r3, [r3, #0]
 80080c2:	f003 0308 	and.w	r3, r3, #8
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d10a      	bne.n	80080e0 <dir_find+0x86>
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6a18      	ldr	r0, [r3, #32]
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	3324      	adds	r3, #36	; 0x24
 80080d2:	220b      	movs	r2, #11
 80080d4:	4619      	mov	r1, r3
 80080d6:	f7ff f807 	bl	80070e8 <mem_cmp>
 80080da:	4603      	mov	r3, r0
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d00b      	beq.n	80080f8 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80080e0:	2100      	movs	r1, #0
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f7ff fe5d 	bl	8007da2 <dir_next>
 80080e8:	4603      	mov	r3, r0
 80080ea:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80080ec:	7dfb      	ldrb	r3, [r7, #23]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d0c5      	beq.n	800807e <dir_find+0x24>
 80080f2:	e002      	b.n	80080fa <dir_find+0xa0>
		if (res != FR_OK) break;
 80080f4:	bf00      	nop
 80080f6:	e000      	b.n	80080fa <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80080f8:	bf00      	nop

	return res;
 80080fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	3718      	adds	r7, #24
 8008100:	46bd      	mov	sp, r7
 8008102:	bd80      	pop	{r7, pc}

08008104 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b084      	sub	sp, #16
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8008112:	2101      	movs	r1, #1
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f7ff ff1a 	bl	8007f4e <dir_alloc>
 800811a:	4603      	mov	r3, r0
 800811c:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800811e:	7bfb      	ldrb	r3, [r7, #15]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d11c      	bne.n	800815e <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	69db      	ldr	r3, [r3, #28]
 8008128:	4619      	mov	r1, r3
 800812a:	68b8      	ldr	r0, [r7, #8]
 800812c:	f7ff f9ce 	bl	80074cc <move_window>
 8008130:	4603      	mov	r3, r0
 8008132:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008134:	7bfb      	ldrb	r3, [r7, #15]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d111      	bne.n	800815e <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6a1b      	ldr	r3, [r3, #32]
 800813e:	2220      	movs	r2, #32
 8008140:	2100      	movs	r1, #0
 8008142:	4618      	mov	r0, r3
 8008144:	f7fe ffb5 	bl	80070b2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6a18      	ldr	r0, [r3, #32]
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	3324      	adds	r3, #36	; 0x24
 8008150:	220b      	movs	r2, #11
 8008152:	4619      	mov	r1, r3
 8008154:	f7fe ff8c 	bl	8007070 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	2201      	movs	r2, #1
 800815c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800815e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008160:	4618      	mov	r0, r3
 8008162:	3710      	adds	r7, #16
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}

08008168 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b088      	sub	sp, #32
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
 8008170:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	60fb      	str	r3, [r7, #12]
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	3324      	adds	r3, #36	; 0x24
 800817c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800817e:	220b      	movs	r2, #11
 8008180:	2120      	movs	r1, #32
 8008182:	68b8      	ldr	r0, [r7, #8]
 8008184:	f7fe ff95 	bl	80070b2 <mem_set>
	si = i = 0; ni = 8;
 8008188:	2300      	movs	r3, #0
 800818a:	613b      	str	r3, [r7, #16]
 800818c:	693b      	ldr	r3, [r7, #16]
 800818e:	61fb      	str	r3, [r7, #28]
 8008190:	2308      	movs	r3, #8
 8008192:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8008194:	69fb      	ldr	r3, [r7, #28]
 8008196:	1c5a      	adds	r2, r3, #1
 8008198:	61fa      	str	r2, [r7, #28]
 800819a:	68fa      	ldr	r2, [r7, #12]
 800819c:	4413      	add	r3, r2
 800819e:	781b      	ldrb	r3, [r3, #0]
 80081a0:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80081a2:	7efb      	ldrb	r3, [r7, #27]
 80081a4:	2b20      	cmp	r3, #32
 80081a6:	d94e      	bls.n	8008246 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80081a8:	7efb      	ldrb	r3, [r7, #27]
 80081aa:	2b2f      	cmp	r3, #47	; 0x2f
 80081ac:	d006      	beq.n	80081bc <create_name+0x54>
 80081ae:	7efb      	ldrb	r3, [r7, #27]
 80081b0:	2b5c      	cmp	r3, #92	; 0x5c
 80081b2:	d110      	bne.n	80081d6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80081b4:	e002      	b.n	80081bc <create_name+0x54>
 80081b6:	69fb      	ldr	r3, [r7, #28]
 80081b8:	3301      	adds	r3, #1
 80081ba:	61fb      	str	r3, [r7, #28]
 80081bc:	68fa      	ldr	r2, [r7, #12]
 80081be:	69fb      	ldr	r3, [r7, #28]
 80081c0:	4413      	add	r3, r2
 80081c2:	781b      	ldrb	r3, [r3, #0]
 80081c4:	2b2f      	cmp	r3, #47	; 0x2f
 80081c6:	d0f6      	beq.n	80081b6 <create_name+0x4e>
 80081c8:	68fa      	ldr	r2, [r7, #12]
 80081ca:	69fb      	ldr	r3, [r7, #28]
 80081cc:	4413      	add	r3, r2
 80081ce:	781b      	ldrb	r3, [r3, #0]
 80081d0:	2b5c      	cmp	r3, #92	; 0x5c
 80081d2:	d0f0      	beq.n	80081b6 <create_name+0x4e>
			break;
 80081d4:	e038      	b.n	8008248 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80081d6:	7efb      	ldrb	r3, [r7, #27]
 80081d8:	2b2e      	cmp	r3, #46	; 0x2e
 80081da:	d003      	beq.n	80081e4 <create_name+0x7c>
 80081dc:	693a      	ldr	r2, [r7, #16]
 80081de:	697b      	ldr	r3, [r7, #20]
 80081e0:	429a      	cmp	r2, r3
 80081e2:	d30c      	bcc.n	80081fe <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	2b0b      	cmp	r3, #11
 80081e8:	d002      	beq.n	80081f0 <create_name+0x88>
 80081ea:	7efb      	ldrb	r3, [r7, #27]
 80081ec:	2b2e      	cmp	r3, #46	; 0x2e
 80081ee:	d001      	beq.n	80081f4 <create_name+0x8c>
 80081f0:	2306      	movs	r3, #6
 80081f2:	e044      	b.n	800827e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80081f4:	2308      	movs	r3, #8
 80081f6:	613b      	str	r3, [r7, #16]
 80081f8:	230b      	movs	r3, #11
 80081fa:	617b      	str	r3, [r7, #20]
			continue;
 80081fc:	e022      	b.n	8008244 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80081fe:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8008202:	2b00      	cmp	r3, #0
 8008204:	da04      	bge.n	8008210 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8008206:	7efb      	ldrb	r3, [r7, #27]
 8008208:	3b80      	subs	r3, #128	; 0x80
 800820a:	4a1f      	ldr	r2, [pc, #124]	; (8008288 <create_name+0x120>)
 800820c:	5cd3      	ldrb	r3, [r2, r3]
 800820e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8008210:	7efb      	ldrb	r3, [r7, #27]
 8008212:	4619      	mov	r1, r3
 8008214:	481d      	ldr	r0, [pc, #116]	; (800828c <create_name+0x124>)
 8008216:	f7fe ff8e 	bl	8007136 <chk_chr>
 800821a:	4603      	mov	r3, r0
 800821c:	2b00      	cmp	r3, #0
 800821e:	d001      	beq.n	8008224 <create_name+0xbc>
 8008220:	2306      	movs	r3, #6
 8008222:	e02c      	b.n	800827e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8008224:	7efb      	ldrb	r3, [r7, #27]
 8008226:	2b60      	cmp	r3, #96	; 0x60
 8008228:	d905      	bls.n	8008236 <create_name+0xce>
 800822a:	7efb      	ldrb	r3, [r7, #27]
 800822c:	2b7a      	cmp	r3, #122	; 0x7a
 800822e:	d802      	bhi.n	8008236 <create_name+0xce>
 8008230:	7efb      	ldrb	r3, [r7, #27]
 8008232:	3b20      	subs	r3, #32
 8008234:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8008236:	693b      	ldr	r3, [r7, #16]
 8008238:	1c5a      	adds	r2, r3, #1
 800823a:	613a      	str	r2, [r7, #16]
 800823c:	68ba      	ldr	r2, [r7, #8]
 800823e:	4413      	add	r3, r2
 8008240:	7efa      	ldrb	r2, [r7, #27]
 8008242:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8008244:	e7a6      	b.n	8008194 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008246:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8008248:	68fa      	ldr	r2, [r7, #12]
 800824a:	69fb      	ldr	r3, [r7, #28]
 800824c:	441a      	add	r2, r3
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8008252:	693b      	ldr	r3, [r7, #16]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d101      	bne.n	800825c <create_name+0xf4>
 8008258:	2306      	movs	r3, #6
 800825a:	e010      	b.n	800827e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	781b      	ldrb	r3, [r3, #0]
 8008260:	2be5      	cmp	r3, #229	; 0xe5
 8008262:	d102      	bne.n	800826a <create_name+0x102>
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	2205      	movs	r2, #5
 8008268:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800826a:	7efb      	ldrb	r3, [r7, #27]
 800826c:	2b20      	cmp	r3, #32
 800826e:	d801      	bhi.n	8008274 <create_name+0x10c>
 8008270:	2204      	movs	r2, #4
 8008272:	e000      	b.n	8008276 <create_name+0x10e>
 8008274:	2200      	movs	r2, #0
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	330b      	adds	r3, #11
 800827a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800827c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800827e:	4618      	mov	r0, r3
 8008280:	3720      	adds	r7, #32
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}
 8008286:	bf00      	nop
 8008288:	08010f24 	.word	0x08010f24
 800828c:	08010e54 	.word	0x08010e54

08008290 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b086      	sub	sp, #24
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
 8008298:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800829e:	693b      	ldr	r3, [r7, #16]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80082a4:	e002      	b.n	80082ac <follow_path+0x1c>
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	3301      	adds	r3, #1
 80082aa:	603b      	str	r3, [r7, #0]
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	781b      	ldrb	r3, [r3, #0]
 80082b0:	2b2f      	cmp	r3, #47	; 0x2f
 80082b2:	d0f8      	beq.n	80082a6 <follow_path+0x16>
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	781b      	ldrb	r3, [r3, #0]
 80082b8:	2b5c      	cmp	r3, #92	; 0x5c
 80082ba:	d0f4      	beq.n	80082a6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80082bc:	693b      	ldr	r3, [r7, #16]
 80082be:	2200      	movs	r2, #0
 80082c0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	781b      	ldrb	r3, [r3, #0]
 80082c6:	2b1f      	cmp	r3, #31
 80082c8:	d80a      	bhi.n	80082e0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2280      	movs	r2, #128	; 0x80
 80082ce:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80082d2:	2100      	movs	r1, #0
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f7ff fcdb 	bl	8007c90 <dir_sdi>
 80082da:	4603      	mov	r3, r0
 80082dc:	75fb      	strb	r3, [r7, #23]
 80082de:	e048      	b.n	8008372 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80082e0:	463b      	mov	r3, r7
 80082e2:	4619      	mov	r1, r3
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f7ff ff3f 	bl	8008168 <create_name>
 80082ea:	4603      	mov	r3, r0
 80082ec:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80082ee:	7dfb      	ldrb	r3, [r7, #23]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d139      	bne.n	8008368 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f7ff feb0 	bl	800805a <dir_find>
 80082fa:	4603      	mov	r3, r0
 80082fc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008304:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8008306:	7dfb      	ldrb	r3, [r7, #23]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d00a      	beq.n	8008322 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800830c:	7dfb      	ldrb	r3, [r7, #23]
 800830e:	2b04      	cmp	r3, #4
 8008310:	d12c      	bne.n	800836c <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8008312:	7afb      	ldrb	r3, [r7, #11]
 8008314:	f003 0304 	and.w	r3, r3, #4
 8008318:	2b00      	cmp	r3, #0
 800831a:	d127      	bne.n	800836c <follow_path+0xdc>
 800831c:	2305      	movs	r3, #5
 800831e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8008320:	e024      	b.n	800836c <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008322:	7afb      	ldrb	r3, [r7, #11]
 8008324:	f003 0304 	and.w	r3, r3, #4
 8008328:	2b00      	cmp	r3, #0
 800832a:	d121      	bne.n	8008370 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800832c:	693b      	ldr	r3, [r7, #16]
 800832e:	799b      	ldrb	r3, [r3, #6]
 8008330:	f003 0310 	and.w	r3, r3, #16
 8008334:	2b00      	cmp	r3, #0
 8008336:	d102      	bne.n	800833e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8008338:	2305      	movs	r3, #5
 800833a:	75fb      	strb	r3, [r7, #23]
 800833c:	e019      	b.n	8008372 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	695b      	ldr	r3, [r3, #20]
 8008348:	68fa      	ldr	r2, [r7, #12]
 800834a:	8992      	ldrh	r2, [r2, #12]
 800834c:	fbb3 f0f2 	udiv	r0, r3, r2
 8008350:	fb00 f202 	mul.w	r2, r0, r2
 8008354:	1a9b      	subs	r3, r3, r2
 8008356:	440b      	add	r3, r1
 8008358:	4619      	mov	r1, r3
 800835a:	68f8      	ldr	r0, [r7, #12]
 800835c:	f7ff fe3e 	bl	8007fdc <ld_clust>
 8008360:	4602      	mov	r2, r0
 8008362:	693b      	ldr	r3, [r7, #16]
 8008364:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008366:	e7bb      	b.n	80082e0 <follow_path+0x50>
			if (res != FR_OK) break;
 8008368:	bf00      	nop
 800836a:	e002      	b.n	8008372 <follow_path+0xe2>
				break;
 800836c:	bf00      	nop
 800836e:	e000      	b.n	8008372 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008370:	bf00      	nop
			}
		}
	}

	return res;
 8008372:	7dfb      	ldrb	r3, [r7, #23]
}
 8008374:	4618      	mov	r0, r3
 8008376:	3718      	adds	r7, #24
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}

0800837c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800837c:	b480      	push	{r7}
 800837e:	b087      	sub	sp, #28
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008384:	f04f 33ff 	mov.w	r3, #4294967295
 8008388:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d031      	beq.n	80083f6 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	617b      	str	r3, [r7, #20]
 8008398:	e002      	b.n	80083a0 <get_ldnumber+0x24>
 800839a:	697b      	ldr	r3, [r7, #20]
 800839c:	3301      	adds	r3, #1
 800839e:	617b      	str	r3, [r7, #20]
 80083a0:	697b      	ldr	r3, [r7, #20]
 80083a2:	781b      	ldrb	r3, [r3, #0]
 80083a4:	2b20      	cmp	r3, #32
 80083a6:	d903      	bls.n	80083b0 <get_ldnumber+0x34>
 80083a8:	697b      	ldr	r3, [r7, #20]
 80083aa:	781b      	ldrb	r3, [r3, #0]
 80083ac:	2b3a      	cmp	r3, #58	; 0x3a
 80083ae:	d1f4      	bne.n	800839a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80083b0:	697b      	ldr	r3, [r7, #20]
 80083b2:	781b      	ldrb	r3, [r3, #0]
 80083b4:	2b3a      	cmp	r3, #58	; 0x3a
 80083b6:	d11c      	bne.n	80083f2 <get_ldnumber+0x76>
			tp = *path;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	1c5a      	adds	r2, r3, #1
 80083c2:	60fa      	str	r2, [r7, #12]
 80083c4:	781b      	ldrb	r3, [r3, #0]
 80083c6:	3b30      	subs	r3, #48	; 0x30
 80083c8:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	2b09      	cmp	r3, #9
 80083ce:	d80e      	bhi.n	80083ee <get_ldnumber+0x72>
 80083d0:	68fa      	ldr	r2, [r7, #12]
 80083d2:	697b      	ldr	r3, [r7, #20]
 80083d4:	429a      	cmp	r2, r3
 80083d6:	d10a      	bne.n	80083ee <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d107      	bne.n	80083ee <get_ldnumber+0x72>
					vol = (int)i;
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80083e2:	697b      	ldr	r3, [r7, #20]
 80083e4:	3301      	adds	r3, #1
 80083e6:	617b      	str	r3, [r7, #20]
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	697a      	ldr	r2, [r7, #20]
 80083ec:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80083ee:	693b      	ldr	r3, [r7, #16]
 80083f0:	e002      	b.n	80083f8 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80083f2:	2300      	movs	r3, #0
 80083f4:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80083f6:	693b      	ldr	r3, [r7, #16]
}
 80083f8:	4618      	mov	r0, r3
 80083fa:	371c      	adds	r7, #28
 80083fc:	46bd      	mov	sp, r7
 80083fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008402:	4770      	bx	lr

08008404 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b082      	sub	sp, #8
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
 800840c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2200      	movs	r2, #0
 8008412:	70da      	strb	r2, [r3, #3]
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f04f 32ff 	mov.w	r2, #4294967295
 800841a:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800841c:	6839      	ldr	r1, [r7, #0]
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f7ff f854 	bl	80074cc <move_window>
 8008424:	4603      	mov	r3, r0
 8008426:	2b00      	cmp	r3, #0
 8008428:	d001      	beq.n	800842e <check_fs+0x2a>
 800842a:	2304      	movs	r3, #4
 800842c:	e038      	b.n	80084a0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	3334      	adds	r3, #52	; 0x34
 8008432:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008436:	4618      	mov	r0, r3
 8008438:	f7fe fd98 	bl	8006f6c <ld_word>
 800843c:	4603      	mov	r3, r0
 800843e:	461a      	mov	r2, r3
 8008440:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008444:	429a      	cmp	r2, r3
 8008446:	d001      	beq.n	800844c <check_fs+0x48>
 8008448:	2303      	movs	r3, #3
 800844a:	e029      	b.n	80084a0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008452:	2be9      	cmp	r3, #233	; 0xe9
 8008454:	d009      	beq.n	800846a <check_fs+0x66>
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800845c:	2beb      	cmp	r3, #235	; 0xeb
 800845e:	d11e      	bne.n	800849e <check_fs+0x9a>
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8008466:	2b90      	cmp	r3, #144	; 0x90
 8008468:	d119      	bne.n	800849e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	3334      	adds	r3, #52	; 0x34
 800846e:	3336      	adds	r3, #54	; 0x36
 8008470:	4618      	mov	r0, r3
 8008472:	f7fe fd93 	bl	8006f9c <ld_dword>
 8008476:	4603      	mov	r3, r0
 8008478:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800847c:	4a0a      	ldr	r2, [pc, #40]	; (80084a8 <check_fs+0xa4>)
 800847e:	4293      	cmp	r3, r2
 8008480:	d101      	bne.n	8008486 <check_fs+0x82>
 8008482:	2300      	movs	r3, #0
 8008484:	e00c      	b.n	80084a0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	3334      	adds	r3, #52	; 0x34
 800848a:	3352      	adds	r3, #82	; 0x52
 800848c:	4618      	mov	r0, r3
 800848e:	f7fe fd85 	bl	8006f9c <ld_dword>
 8008492:	4603      	mov	r3, r0
 8008494:	4a05      	ldr	r2, [pc, #20]	; (80084ac <check_fs+0xa8>)
 8008496:	4293      	cmp	r3, r2
 8008498:	d101      	bne.n	800849e <check_fs+0x9a>
 800849a:	2300      	movs	r3, #0
 800849c:	e000      	b.n	80084a0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800849e:	2302      	movs	r3, #2
}
 80084a0:	4618      	mov	r0, r3
 80084a2:	3708      	adds	r7, #8
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bd80      	pop	{r7, pc}
 80084a8:	00544146 	.word	0x00544146
 80084ac:	33544146 	.word	0x33544146

080084b0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b096      	sub	sp, #88	; 0x58
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	60f8      	str	r0, [r7, #12]
 80084b8:	60b9      	str	r1, [r7, #8]
 80084ba:	4613      	mov	r3, r2
 80084bc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	2200      	movs	r2, #0
 80084c2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80084c4:	68f8      	ldr	r0, [r7, #12]
 80084c6:	f7ff ff59 	bl	800837c <get_ldnumber>
 80084ca:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80084cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	da01      	bge.n	80084d6 <find_volume+0x26>
 80084d2:	230b      	movs	r3, #11
 80084d4:	e262      	b.n	800899c <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80084d6:	4a9f      	ldr	r2, [pc, #636]	; (8008754 <find_volume+0x2a4>)
 80084d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80084de:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80084e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d101      	bne.n	80084ea <find_volume+0x3a>
 80084e6:	230c      	movs	r3, #12
 80084e8:	e258      	b.n	800899c <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80084ee:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80084f0:	79fb      	ldrb	r3, [r7, #7]
 80084f2:	f023 0301 	bic.w	r3, r3, #1
 80084f6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80084f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084fa:	781b      	ldrb	r3, [r3, #0]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d01a      	beq.n	8008536 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8008500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008502:	785b      	ldrb	r3, [r3, #1]
 8008504:	4618      	mov	r0, r3
 8008506:	f7fe fc93 	bl	8006e30 <disk_status>
 800850a:	4603      	mov	r3, r0
 800850c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008510:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008514:	f003 0301 	and.w	r3, r3, #1
 8008518:	2b00      	cmp	r3, #0
 800851a:	d10c      	bne.n	8008536 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800851c:	79fb      	ldrb	r3, [r7, #7]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d007      	beq.n	8008532 <find_volume+0x82>
 8008522:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008526:	f003 0304 	and.w	r3, r3, #4
 800852a:	2b00      	cmp	r3, #0
 800852c:	d001      	beq.n	8008532 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800852e:	230a      	movs	r3, #10
 8008530:	e234      	b.n	800899c <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 8008532:	2300      	movs	r3, #0
 8008534:	e232      	b.n	800899c <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008538:	2200      	movs	r2, #0
 800853a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800853c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800853e:	b2da      	uxtb	r2, r3
 8008540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008542:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008546:	785b      	ldrb	r3, [r3, #1]
 8008548:	4618      	mov	r0, r3
 800854a:	f7fe fc8b 	bl	8006e64 <disk_initialize>
 800854e:	4603      	mov	r3, r0
 8008550:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008554:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008558:	f003 0301 	and.w	r3, r3, #1
 800855c:	2b00      	cmp	r3, #0
 800855e:	d001      	beq.n	8008564 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008560:	2303      	movs	r3, #3
 8008562:	e21b      	b.n	800899c <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008564:	79fb      	ldrb	r3, [r7, #7]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d007      	beq.n	800857a <find_volume+0xca>
 800856a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800856e:	f003 0304 	and.w	r3, r3, #4
 8008572:	2b00      	cmp	r3, #0
 8008574:	d001      	beq.n	800857a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8008576:	230a      	movs	r3, #10
 8008578:	e210      	b.n	800899c <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800857a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800857c:	7858      	ldrb	r0, [r3, #1]
 800857e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008580:	330c      	adds	r3, #12
 8008582:	461a      	mov	r2, r3
 8008584:	2102      	movs	r1, #2
 8008586:	f7fe fcd3 	bl	8006f30 <disk_ioctl>
 800858a:	4603      	mov	r3, r0
 800858c:	2b00      	cmp	r3, #0
 800858e:	d001      	beq.n	8008594 <find_volume+0xe4>
 8008590:	2301      	movs	r3, #1
 8008592:	e203      	b.n	800899c <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8008594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008596:	899b      	ldrh	r3, [r3, #12]
 8008598:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800859c:	d80d      	bhi.n	80085ba <find_volume+0x10a>
 800859e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085a0:	899b      	ldrh	r3, [r3, #12]
 80085a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085a6:	d308      	bcc.n	80085ba <find_volume+0x10a>
 80085a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085aa:	899b      	ldrh	r3, [r3, #12]
 80085ac:	461a      	mov	r2, r3
 80085ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085b0:	899b      	ldrh	r3, [r3, #12]
 80085b2:	3b01      	subs	r3, #1
 80085b4:	4013      	ands	r3, r2
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d001      	beq.n	80085be <find_volume+0x10e>
 80085ba:	2301      	movs	r3, #1
 80085bc:	e1ee      	b.n	800899c <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80085be:	2300      	movs	r3, #0
 80085c0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80085c2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80085c4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80085c6:	f7ff ff1d 	bl	8008404 <check_fs>
 80085ca:	4603      	mov	r3, r0
 80085cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80085d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80085d4:	2b02      	cmp	r3, #2
 80085d6:	d149      	bne.n	800866c <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80085d8:	2300      	movs	r3, #0
 80085da:	643b      	str	r3, [r7, #64]	; 0x40
 80085dc:	e01e      	b.n	800861c <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80085de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085e0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80085e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085e6:	011b      	lsls	r3, r3, #4
 80085e8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80085ec:	4413      	add	r3, r2
 80085ee:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80085f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085f2:	3304      	adds	r3, #4
 80085f4:	781b      	ldrb	r3, [r3, #0]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d006      	beq.n	8008608 <find_volume+0x158>
 80085fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085fc:	3308      	adds	r3, #8
 80085fe:	4618      	mov	r0, r3
 8008600:	f7fe fccc 	bl	8006f9c <ld_dword>
 8008604:	4602      	mov	r2, r0
 8008606:	e000      	b.n	800860a <find_volume+0x15a>
 8008608:	2200      	movs	r2, #0
 800860a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800860c:	009b      	lsls	r3, r3, #2
 800860e:	3358      	adds	r3, #88	; 0x58
 8008610:	443b      	add	r3, r7
 8008612:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008616:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008618:	3301      	adds	r3, #1
 800861a:	643b      	str	r3, [r7, #64]	; 0x40
 800861c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800861e:	2b03      	cmp	r3, #3
 8008620:	d9dd      	bls.n	80085de <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8008622:	2300      	movs	r3, #0
 8008624:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8008626:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008628:	2b00      	cmp	r3, #0
 800862a:	d002      	beq.n	8008632 <find_volume+0x182>
 800862c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800862e:	3b01      	subs	r3, #1
 8008630:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8008632:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008634:	009b      	lsls	r3, r3, #2
 8008636:	3358      	adds	r3, #88	; 0x58
 8008638:	443b      	add	r3, r7
 800863a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800863e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008640:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008642:	2b00      	cmp	r3, #0
 8008644:	d005      	beq.n	8008652 <find_volume+0x1a2>
 8008646:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008648:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800864a:	f7ff fedb 	bl	8008404 <check_fs>
 800864e:	4603      	mov	r3, r0
 8008650:	e000      	b.n	8008654 <find_volume+0x1a4>
 8008652:	2303      	movs	r3, #3
 8008654:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008658:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800865c:	2b01      	cmp	r3, #1
 800865e:	d905      	bls.n	800866c <find_volume+0x1bc>
 8008660:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008662:	3301      	adds	r3, #1
 8008664:	643b      	str	r3, [r7, #64]	; 0x40
 8008666:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008668:	2b03      	cmp	r3, #3
 800866a:	d9e2      	bls.n	8008632 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800866c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008670:	2b04      	cmp	r3, #4
 8008672:	d101      	bne.n	8008678 <find_volume+0x1c8>
 8008674:	2301      	movs	r3, #1
 8008676:	e191      	b.n	800899c <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008678:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800867c:	2b01      	cmp	r3, #1
 800867e:	d901      	bls.n	8008684 <find_volume+0x1d4>
 8008680:	230d      	movs	r3, #13
 8008682:	e18b      	b.n	800899c <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008686:	3334      	adds	r3, #52	; 0x34
 8008688:	330b      	adds	r3, #11
 800868a:	4618      	mov	r0, r3
 800868c:	f7fe fc6e 	bl	8006f6c <ld_word>
 8008690:	4603      	mov	r3, r0
 8008692:	461a      	mov	r2, r3
 8008694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008696:	899b      	ldrh	r3, [r3, #12]
 8008698:	429a      	cmp	r2, r3
 800869a:	d001      	beq.n	80086a0 <find_volume+0x1f0>
 800869c:	230d      	movs	r3, #13
 800869e:	e17d      	b.n	800899c <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80086a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086a2:	3334      	adds	r3, #52	; 0x34
 80086a4:	3316      	adds	r3, #22
 80086a6:	4618      	mov	r0, r3
 80086a8:	f7fe fc60 	bl	8006f6c <ld_word>
 80086ac:	4603      	mov	r3, r0
 80086ae:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80086b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d106      	bne.n	80086c4 <find_volume+0x214>
 80086b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086b8:	3334      	adds	r3, #52	; 0x34
 80086ba:	3324      	adds	r3, #36	; 0x24
 80086bc:	4618      	mov	r0, r3
 80086be:	f7fe fc6d 	bl	8006f9c <ld_dword>
 80086c2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80086c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80086c8:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80086ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086cc:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80086d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086d2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80086d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086d6:	789b      	ldrb	r3, [r3, #2]
 80086d8:	2b01      	cmp	r3, #1
 80086da:	d005      	beq.n	80086e8 <find_volume+0x238>
 80086dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086de:	789b      	ldrb	r3, [r3, #2]
 80086e0:	2b02      	cmp	r3, #2
 80086e2:	d001      	beq.n	80086e8 <find_volume+0x238>
 80086e4:	230d      	movs	r3, #13
 80086e6:	e159      	b.n	800899c <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80086e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ea:	789b      	ldrb	r3, [r3, #2]
 80086ec:	461a      	mov	r2, r3
 80086ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086f0:	fb02 f303 	mul.w	r3, r2, r3
 80086f4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80086f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80086fc:	b29a      	uxth	r2, r3
 80086fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008700:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008704:	895b      	ldrh	r3, [r3, #10]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d008      	beq.n	800871c <find_volume+0x26c>
 800870a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800870c:	895b      	ldrh	r3, [r3, #10]
 800870e:	461a      	mov	r2, r3
 8008710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008712:	895b      	ldrh	r3, [r3, #10]
 8008714:	3b01      	subs	r3, #1
 8008716:	4013      	ands	r3, r2
 8008718:	2b00      	cmp	r3, #0
 800871a:	d001      	beq.n	8008720 <find_volume+0x270>
 800871c:	230d      	movs	r3, #13
 800871e:	e13d      	b.n	800899c <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008722:	3334      	adds	r3, #52	; 0x34
 8008724:	3311      	adds	r3, #17
 8008726:	4618      	mov	r0, r3
 8008728:	f7fe fc20 	bl	8006f6c <ld_word>
 800872c:	4603      	mov	r3, r0
 800872e:	461a      	mov	r2, r3
 8008730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008732:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008736:	891b      	ldrh	r3, [r3, #8]
 8008738:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800873a:	8992      	ldrh	r2, [r2, #12]
 800873c:	0952      	lsrs	r2, r2, #5
 800873e:	b292      	uxth	r2, r2
 8008740:	fbb3 f1f2 	udiv	r1, r3, r2
 8008744:	fb01 f202 	mul.w	r2, r1, r2
 8008748:	1a9b      	subs	r3, r3, r2
 800874a:	b29b      	uxth	r3, r3
 800874c:	2b00      	cmp	r3, #0
 800874e:	d003      	beq.n	8008758 <find_volume+0x2a8>
 8008750:	230d      	movs	r3, #13
 8008752:	e123      	b.n	800899c <find_volume+0x4ec>
 8008754:	20002548 	.word	0x20002548

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8008758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800875a:	3334      	adds	r3, #52	; 0x34
 800875c:	3313      	adds	r3, #19
 800875e:	4618      	mov	r0, r3
 8008760:	f7fe fc04 	bl	8006f6c <ld_word>
 8008764:	4603      	mov	r3, r0
 8008766:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8008768:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800876a:	2b00      	cmp	r3, #0
 800876c:	d106      	bne.n	800877c <find_volume+0x2cc>
 800876e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008770:	3334      	adds	r3, #52	; 0x34
 8008772:	3320      	adds	r3, #32
 8008774:	4618      	mov	r0, r3
 8008776:	f7fe fc11 	bl	8006f9c <ld_dword>
 800877a:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800877c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800877e:	3334      	adds	r3, #52	; 0x34
 8008780:	330e      	adds	r3, #14
 8008782:	4618      	mov	r0, r3
 8008784:	f7fe fbf2 	bl	8006f6c <ld_word>
 8008788:	4603      	mov	r3, r0
 800878a:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800878c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800878e:	2b00      	cmp	r3, #0
 8008790:	d101      	bne.n	8008796 <find_volume+0x2e6>
 8008792:	230d      	movs	r3, #13
 8008794:	e102      	b.n	800899c <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008796:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008798:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800879a:	4413      	add	r3, r2
 800879c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800879e:	8911      	ldrh	r1, [r2, #8]
 80087a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80087a2:	8992      	ldrh	r2, [r2, #12]
 80087a4:	0952      	lsrs	r2, r2, #5
 80087a6:	b292      	uxth	r2, r2
 80087a8:	fbb1 f2f2 	udiv	r2, r1, r2
 80087ac:	b292      	uxth	r2, r2
 80087ae:	4413      	add	r3, r2
 80087b0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80087b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80087b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087b6:	429a      	cmp	r2, r3
 80087b8:	d201      	bcs.n	80087be <find_volume+0x30e>
 80087ba:	230d      	movs	r3, #13
 80087bc:	e0ee      	b.n	800899c <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80087be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80087c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087c2:	1ad3      	subs	r3, r2, r3
 80087c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80087c6:	8952      	ldrh	r2, [r2, #10]
 80087c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80087cc:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80087ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d101      	bne.n	80087d8 <find_volume+0x328>
 80087d4:	230d      	movs	r3, #13
 80087d6:	e0e1      	b.n	800899c <find_volume+0x4ec>
		fmt = FS_FAT32;
 80087d8:	2303      	movs	r3, #3
 80087da:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80087de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80087e4:	4293      	cmp	r3, r2
 80087e6:	d802      	bhi.n	80087ee <find_volume+0x33e>
 80087e8:	2302      	movs	r3, #2
 80087ea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80087ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087f0:	f640 72f5 	movw	r2, #4085	; 0xff5
 80087f4:	4293      	cmp	r3, r2
 80087f6:	d802      	bhi.n	80087fe <find_volume+0x34e>
 80087f8:	2301      	movs	r3, #1
 80087fa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80087fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008800:	1c9a      	adds	r2, r3, #2
 8008802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008804:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8008806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008808:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800880a:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800880c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800880e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008810:	441a      	add	r2, r3
 8008812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008814:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8008816:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800881a:	441a      	add	r2, r3
 800881c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800881e:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8008820:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008824:	2b03      	cmp	r3, #3
 8008826:	d11e      	bne.n	8008866 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800882a:	3334      	adds	r3, #52	; 0x34
 800882c:	332a      	adds	r3, #42	; 0x2a
 800882e:	4618      	mov	r0, r3
 8008830:	f7fe fb9c 	bl	8006f6c <ld_word>
 8008834:	4603      	mov	r3, r0
 8008836:	2b00      	cmp	r3, #0
 8008838:	d001      	beq.n	800883e <find_volume+0x38e>
 800883a:	230d      	movs	r3, #13
 800883c:	e0ae      	b.n	800899c <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800883e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008840:	891b      	ldrh	r3, [r3, #8]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d001      	beq.n	800884a <find_volume+0x39a>
 8008846:	230d      	movs	r3, #13
 8008848:	e0a8      	b.n	800899c <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800884a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800884c:	3334      	adds	r3, #52	; 0x34
 800884e:	332c      	adds	r3, #44	; 0x2c
 8008850:	4618      	mov	r0, r3
 8008852:	f7fe fba3 	bl	8006f9c <ld_dword>
 8008856:	4602      	mov	r2, r0
 8008858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800885a:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800885c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800885e:	699b      	ldr	r3, [r3, #24]
 8008860:	009b      	lsls	r3, r3, #2
 8008862:	647b      	str	r3, [r7, #68]	; 0x44
 8008864:	e01f      	b.n	80088a6 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008868:	891b      	ldrh	r3, [r3, #8]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d101      	bne.n	8008872 <find_volume+0x3c2>
 800886e:	230d      	movs	r3, #13
 8008870:	e094      	b.n	800899c <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008874:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008876:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008878:	441a      	add	r2, r3
 800887a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800887c:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800887e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008882:	2b02      	cmp	r3, #2
 8008884:	d103      	bne.n	800888e <find_volume+0x3de>
 8008886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008888:	699b      	ldr	r3, [r3, #24]
 800888a:	005b      	lsls	r3, r3, #1
 800888c:	e00a      	b.n	80088a4 <find_volume+0x3f4>
 800888e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008890:	699a      	ldr	r2, [r3, #24]
 8008892:	4613      	mov	r3, r2
 8008894:	005b      	lsls	r3, r3, #1
 8008896:	4413      	add	r3, r2
 8008898:	085a      	lsrs	r2, r3, #1
 800889a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800889c:	699b      	ldr	r3, [r3, #24]
 800889e:	f003 0301 	and.w	r3, r3, #1
 80088a2:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80088a4:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80088a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088a8:	69da      	ldr	r2, [r3, #28]
 80088aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088ac:	899b      	ldrh	r3, [r3, #12]
 80088ae:	4619      	mov	r1, r3
 80088b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088b2:	440b      	add	r3, r1
 80088b4:	3b01      	subs	r3, #1
 80088b6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80088b8:	8989      	ldrh	r1, [r1, #12]
 80088ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80088be:	429a      	cmp	r2, r3
 80088c0:	d201      	bcs.n	80088c6 <find_volume+0x416>
 80088c2:	230d      	movs	r3, #13
 80088c4:	e06a      	b.n	800899c <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80088c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088c8:	f04f 32ff 	mov.w	r2, #4294967295
 80088cc:	615a      	str	r2, [r3, #20]
 80088ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088d0:	695a      	ldr	r2, [r3, #20]
 80088d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088d4:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 80088d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088d8:	2280      	movs	r2, #128	; 0x80
 80088da:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80088dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80088e0:	2b03      	cmp	r3, #3
 80088e2:	d149      	bne.n	8008978 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80088e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088e6:	3334      	adds	r3, #52	; 0x34
 80088e8:	3330      	adds	r3, #48	; 0x30
 80088ea:	4618      	mov	r0, r3
 80088ec:	f7fe fb3e 	bl	8006f6c <ld_word>
 80088f0:	4603      	mov	r3, r0
 80088f2:	2b01      	cmp	r3, #1
 80088f4:	d140      	bne.n	8008978 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 80088f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80088f8:	3301      	adds	r3, #1
 80088fa:	4619      	mov	r1, r3
 80088fc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80088fe:	f7fe fde5 	bl	80074cc <move_window>
 8008902:	4603      	mov	r3, r0
 8008904:	2b00      	cmp	r3, #0
 8008906:	d137      	bne.n	8008978 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8008908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800890a:	2200      	movs	r2, #0
 800890c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800890e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008910:	3334      	adds	r3, #52	; 0x34
 8008912:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008916:	4618      	mov	r0, r3
 8008918:	f7fe fb28 	bl	8006f6c <ld_word>
 800891c:	4603      	mov	r3, r0
 800891e:	461a      	mov	r2, r3
 8008920:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008924:	429a      	cmp	r2, r3
 8008926:	d127      	bne.n	8008978 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800892a:	3334      	adds	r3, #52	; 0x34
 800892c:	4618      	mov	r0, r3
 800892e:	f7fe fb35 	bl	8006f9c <ld_dword>
 8008932:	4603      	mov	r3, r0
 8008934:	4a1b      	ldr	r2, [pc, #108]	; (80089a4 <find_volume+0x4f4>)
 8008936:	4293      	cmp	r3, r2
 8008938:	d11e      	bne.n	8008978 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800893a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800893c:	3334      	adds	r3, #52	; 0x34
 800893e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008942:	4618      	mov	r0, r3
 8008944:	f7fe fb2a 	bl	8006f9c <ld_dword>
 8008948:	4603      	mov	r3, r0
 800894a:	4a17      	ldr	r2, [pc, #92]	; (80089a8 <find_volume+0x4f8>)
 800894c:	4293      	cmp	r3, r2
 800894e:	d113      	bne.n	8008978 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008952:	3334      	adds	r3, #52	; 0x34
 8008954:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8008958:	4618      	mov	r0, r3
 800895a:	f7fe fb1f 	bl	8006f9c <ld_dword>
 800895e:	4602      	mov	r2, r0
 8008960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008962:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008966:	3334      	adds	r3, #52	; 0x34
 8008968:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800896c:	4618      	mov	r0, r3
 800896e:	f7fe fb15 	bl	8006f9c <ld_dword>
 8008972:	4602      	mov	r2, r0
 8008974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008976:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800897a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800897e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008980:	4b0a      	ldr	r3, [pc, #40]	; (80089ac <find_volume+0x4fc>)
 8008982:	881b      	ldrh	r3, [r3, #0]
 8008984:	3301      	adds	r3, #1
 8008986:	b29a      	uxth	r2, r3
 8008988:	4b08      	ldr	r3, [pc, #32]	; (80089ac <find_volume+0x4fc>)
 800898a:	801a      	strh	r2, [r3, #0]
 800898c:	4b07      	ldr	r3, [pc, #28]	; (80089ac <find_volume+0x4fc>)
 800898e:	881a      	ldrh	r2, [r3, #0]
 8008990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008992:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8008994:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008996:	f7fe fd31 	bl	80073fc <clear_lock>
#endif
	return FR_OK;
 800899a:	2300      	movs	r3, #0
}
 800899c:	4618      	mov	r0, r3
 800899e:	3758      	adds	r7, #88	; 0x58
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}
 80089a4:	41615252 	.word	0x41615252
 80089a8:	61417272 	.word	0x61417272
 80089ac:	2000254c 	.word	0x2000254c

080089b0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b084      	sub	sp, #16
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
 80089b8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80089ba:	2309      	movs	r3, #9
 80089bc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d01c      	beq.n	80089fe <validate+0x4e>
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d018      	beq.n	80089fe <validate+0x4e>
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	781b      	ldrb	r3, [r3, #0]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d013      	beq.n	80089fe <validate+0x4e>
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	889a      	ldrh	r2, [r3, #4]
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	88db      	ldrh	r3, [r3, #6]
 80089e0:	429a      	cmp	r2, r3
 80089e2:	d10c      	bne.n	80089fe <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	785b      	ldrb	r3, [r3, #1]
 80089ea:	4618      	mov	r0, r3
 80089ec:	f7fe fa20 	bl	8006e30 <disk_status>
 80089f0:	4603      	mov	r3, r0
 80089f2:	f003 0301 	and.w	r3, r3, #1
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d101      	bne.n	80089fe <validate+0x4e>
			res = FR_OK;
 80089fa:	2300      	movs	r3, #0
 80089fc:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80089fe:	7bfb      	ldrb	r3, [r7, #15]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d102      	bne.n	8008a0a <validate+0x5a>
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	e000      	b.n	8008a0c <validate+0x5c>
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	683a      	ldr	r2, [r7, #0]
 8008a0e:	6013      	str	r3, [r2, #0]
	return res;
 8008a10:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a12:	4618      	mov	r0, r3
 8008a14:	3710      	adds	r7, #16
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bd80      	pop	{r7, pc}
	...

08008a1c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b088      	sub	sp, #32
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	60f8      	str	r0, [r7, #12]
 8008a24:	60b9      	str	r1, [r7, #8]
 8008a26:	4613      	mov	r3, r2
 8008a28:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008a2a:	68bb      	ldr	r3, [r7, #8]
 8008a2c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8008a2e:	f107 0310 	add.w	r3, r7, #16
 8008a32:	4618      	mov	r0, r3
 8008a34:	f7ff fca2 	bl	800837c <get_ldnumber>
 8008a38:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008a3a:	69fb      	ldr	r3, [r7, #28]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	da01      	bge.n	8008a44 <f_mount+0x28>
 8008a40:	230b      	movs	r3, #11
 8008a42:	e02b      	b.n	8008a9c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008a44:	4a17      	ldr	r2, [pc, #92]	; (8008aa4 <f_mount+0x88>)
 8008a46:	69fb      	ldr	r3, [r7, #28]
 8008a48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a4c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008a4e:	69bb      	ldr	r3, [r7, #24]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d005      	beq.n	8008a60 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008a54:	69b8      	ldr	r0, [r7, #24]
 8008a56:	f7fe fcd1 	bl	80073fc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008a5a:	69bb      	ldr	r3, [r7, #24]
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d002      	beq.n	8008a6c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	2200      	movs	r2, #0
 8008a6a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008a6c:	68fa      	ldr	r2, [r7, #12]
 8008a6e:	490d      	ldr	r1, [pc, #52]	; (8008aa4 <f_mount+0x88>)
 8008a70:	69fb      	ldr	r3, [r7, #28]
 8008a72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d002      	beq.n	8008a82 <f_mount+0x66>
 8008a7c:	79fb      	ldrb	r3, [r7, #7]
 8008a7e:	2b01      	cmp	r3, #1
 8008a80:	d001      	beq.n	8008a86 <f_mount+0x6a>
 8008a82:	2300      	movs	r3, #0
 8008a84:	e00a      	b.n	8008a9c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8008a86:	f107 010c 	add.w	r1, r7, #12
 8008a8a:	f107 0308 	add.w	r3, r7, #8
 8008a8e:	2200      	movs	r2, #0
 8008a90:	4618      	mov	r0, r3
 8008a92:	f7ff fd0d 	bl	80084b0 <find_volume>
 8008a96:	4603      	mov	r3, r0
 8008a98:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008a9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	3720      	adds	r7, #32
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd80      	pop	{r7, pc}
 8008aa4:	20002548 	.word	0x20002548

08008aa8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b098      	sub	sp, #96	; 0x60
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	60f8      	str	r0, [r7, #12]
 8008ab0:	60b9      	str	r1, [r7, #8]
 8008ab2:	4613      	mov	r3, r2
 8008ab4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d101      	bne.n	8008ac0 <f_open+0x18>
 8008abc:	2309      	movs	r3, #9
 8008abe:	e1bb      	b.n	8008e38 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008ac0:	79fb      	ldrb	r3, [r7, #7]
 8008ac2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008ac6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8008ac8:	79fa      	ldrb	r2, [r7, #7]
 8008aca:	f107 0110 	add.w	r1, r7, #16
 8008ace:	f107 0308 	add.w	r3, r7, #8
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	f7ff fcec 	bl	80084b0 <find_volume>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8008ade:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	f040 819f 	bne.w	8008e26 <f_open+0x37e>
		dj.obj.fs = fs;
 8008ae8:	693b      	ldr	r3, [r7, #16]
 8008aea:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008aec:	68ba      	ldr	r2, [r7, #8]
 8008aee:	f107 0314 	add.w	r3, r7, #20
 8008af2:	4611      	mov	r1, r2
 8008af4:	4618      	mov	r0, r3
 8008af6:	f7ff fbcb 	bl	8008290 <follow_path>
 8008afa:	4603      	mov	r3, r0
 8008afc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008b00:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d11a      	bne.n	8008b3e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008b08:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008b0c:	b25b      	sxtb	r3, r3
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	da03      	bge.n	8008b1a <f_open+0x72>
				res = FR_INVALID_NAME;
 8008b12:	2306      	movs	r3, #6
 8008b14:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008b18:	e011      	b.n	8008b3e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008b1a:	79fb      	ldrb	r3, [r7, #7]
 8008b1c:	f023 0301 	bic.w	r3, r3, #1
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	bf14      	ite	ne
 8008b24:	2301      	movne	r3, #1
 8008b26:	2300      	moveq	r3, #0
 8008b28:	b2db      	uxtb	r3, r3
 8008b2a:	461a      	mov	r2, r3
 8008b2c:	f107 0314 	add.w	r3, r7, #20
 8008b30:	4611      	mov	r1, r2
 8008b32:	4618      	mov	r0, r3
 8008b34:	f7fe fb1a 	bl	800716c <chk_lock>
 8008b38:	4603      	mov	r3, r0
 8008b3a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008b3e:	79fb      	ldrb	r3, [r7, #7]
 8008b40:	f003 031c 	and.w	r3, r3, #28
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d07f      	beq.n	8008c48 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8008b48:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d017      	beq.n	8008b80 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008b50:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b54:	2b04      	cmp	r3, #4
 8008b56:	d10e      	bne.n	8008b76 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008b58:	f7fe fb64 	bl	8007224 <enq_lock>
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d006      	beq.n	8008b70 <f_open+0xc8>
 8008b62:	f107 0314 	add.w	r3, r7, #20
 8008b66:	4618      	mov	r0, r3
 8008b68:	f7ff facc 	bl	8008104 <dir_register>
 8008b6c:	4603      	mov	r3, r0
 8008b6e:	e000      	b.n	8008b72 <f_open+0xca>
 8008b70:	2312      	movs	r3, #18
 8008b72:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008b76:	79fb      	ldrb	r3, [r7, #7]
 8008b78:	f043 0308 	orr.w	r3, r3, #8
 8008b7c:	71fb      	strb	r3, [r7, #7]
 8008b7e:	e010      	b.n	8008ba2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008b80:	7ebb      	ldrb	r3, [r7, #26]
 8008b82:	f003 0311 	and.w	r3, r3, #17
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d003      	beq.n	8008b92 <f_open+0xea>
					res = FR_DENIED;
 8008b8a:	2307      	movs	r3, #7
 8008b8c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008b90:	e007      	b.n	8008ba2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8008b92:	79fb      	ldrb	r3, [r7, #7]
 8008b94:	f003 0304 	and.w	r3, r3, #4
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d002      	beq.n	8008ba2 <f_open+0xfa>
 8008b9c:	2308      	movs	r3, #8
 8008b9e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008ba2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d168      	bne.n	8008c7c <f_open+0x1d4>
 8008baa:	79fb      	ldrb	r3, [r7, #7]
 8008bac:	f003 0308 	and.w	r3, r3, #8
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d063      	beq.n	8008c7c <f_open+0x1d4>
				dw = GET_FATTIME();
 8008bb4:	f7fd fe4a 	bl	800684c <get_fattime>
 8008bb8:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8008bba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bbc:	330e      	adds	r3, #14
 8008bbe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	f7fe fa29 	bl	8007018 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8008bc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bc8:	3316      	adds	r3, #22
 8008bca:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008bcc:	4618      	mov	r0, r3
 8008bce:	f7fe fa23 	bl	8007018 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8008bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bd4:	330b      	adds	r3, #11
 8008bd6:	2220      	movs	r2, #32
 8008bd8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8008bda:	693b      	ldr	r3, [r7, #16]
 8008bdc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008bde:	4611      	mov	r1, r2
 8008be0:	4618      	mov	r0, r3
 8008be2:	f7ff f9fb 	bl	8007fdc <ld_clust>
 8008be6:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008be8:	693b      	ldr	r3, [r7, #16]
 8008bea:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008bec:	2200      	movs	r2, #0
 8008bee:	4618      	mov	r0, r3
 8008bf0:	f7ff fa13 	bl	800801a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008bf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bf6:	331c      	adds	r3, #28
 8008bf8:	2100      	movs	r1, #0
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	f7fe fa0c 	bl	8007018 <st_dword>
					fs->wflag = 1;
 8008c00:	693b      	ldr	r3, [r7, #16]
 8008c02:	2201      	movs	r2, #1
 8008c04:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8008c06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d037      	beq.n	8008c7c <f_open+0x1d4>
						dw = fs->winsect;
 8008c0c:	693b      	ldr	r3, [r7, #16]
 8008c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c10:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8008c12:	f107 0314 	add.w	r3, r7, #20
 8008c16:	2200      	movs	r2, #0
 8008c18:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	f7fe ff03 	bl	8007a26 <remove_chain>
 8008c20:	4603      	mov	r3, r0
 8008c22:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8008c26:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d126      	bne.n	8008c7c <f_open+0x1d4>
							res = move_window(fs, dw);
 8008c2e:	693b      	ldr	r3, [r7, #16]
 8008c30:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008c32:	4618      	mov	r0, r3
 8008c34:	f7fe fc4a 	bl	80074cc <move_window>
 8008c38:	4603      	mov	r3, r0
 8008c3a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8008c3e:	693b      	ldr	r3, [r7, #16]
 8008c40:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008c42:	3a01      	subs	r2, #1
 8008c44:	611a      	str	r2, [r3, #16]
 8008c46:	e019      	b.n	8008c7c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008c48:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d115      	bne.n	8008c7c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008c50:	7ebb      	ldrb	r3, [r7, #26]
 8008c52:	f003 0310 	and.w	r3, r3, #16
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d003      	beq.n	8008c62 <f_open+0x1ba>
					res = FR_NO_FILE;
 8008c5a:	2304      	movs	r3, #4
 8008c5c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008c60:	e00c      	b.n	8008c7c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8008c62:	79fb      	ldrb	r3, [r7, #7]
 8008c64:	f003 0302 	and.w	r3, r3, #2
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d007      	beq.n	8008c7c <f_open+0x1d4>
 8008c6c:	7ebb      	ldrb	r3, [r7, #26]
 8008c6e:	f003 0301 	and.w	r3, r3, #1
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d002      	beq.n	8008c7c <f_open+0x1d4>
						res = FR_DENIED;
 8008c76:	2307      	movs	r3, #7
 8008c78:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8008c7c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d128      	bne.n	8008cd6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008c84:	79fb      	ldrb	r3, [r7, #7]
 8008c86:	f003 0308 	and.w	r3, r3, #8
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d003      	beq.n	8008c96 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8008c8e:	79fb      	ldrb	r3, [r7, #7]
 8008c90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c94:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8008c96:	693b      	ldr	r3, [r7, #16]
 8008c98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8008c9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008ca4:	79fb      	ldrb	r3, [r7, #7]
 8008ca6:	f023 0301 	bic.w	r3, r3, #1
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	bf14      	ite	ne
 8008cae:	2301      	movne	r3, #1
 8008cb0:	2300      	moveq	r3, #0
 8008cb2:	b2db      	uxtb	r3, r3
 8008cb4:	461a      	mov	r2, r3
 8008cb6:	f107 0314 	add.w	r3, r7, #20
 8008cba:	4611      	mov	r1, r2
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	f7fe fad3 	bl	8007268 <inc_lock>
 8008cc2:	4602      	mov	r2, r0
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	691b      	ldr	r3, [r3, #16]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d102      	bne.n	8008cd6 <f_open+0x22e>
 8008cd0:	2302      	movs	r3, #2
 8008cd2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8008cd6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	f040 80a3 	bne.w	8008e26 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008ce0:	693b      	ldr	r3, [r7, #16]
 8008ce2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ce4:	4611      	mov	r1, r2
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	f7ff f978 	bl	8007fdc <ld_clust>
 8008cec:	4602      	mov	r2, r0
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008cf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cf4:	331c      	adds	r3, #28
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	f7fe f950 	bl	8006f9c <ld_dword>
 8008cfc:	4602      	mov	r2, r0
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	2200      	movs	r2, #0
 8008d06:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008d08:	693a      	ldr	r2, [r7, #16]
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8008d0e:	693b      	ldr	r3, [r7, #16]
 8008d10:	88da      	ldrh	r2, [r3, #6]
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	79fa      	ldrb	r2, [r7, #7]
 8008d1a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	2200      	movs	r2, #0
 8008d20:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	2200      	movs	r2, #0
 8008d26:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	3330      	adds	r3, #48	; 0x30
 8008d32:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008d36:	2100      	movs	r1, #0
 8008d38:	4618      	mov	r0, r3
 8008d3a:	f7fe f9ba 	bl	80070b2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008d3e:	79fb      	ldrb	r3, [r7, #7]
 8008d40:	f003 0320 	and.w	r3, r3, #32
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d06e      	beq.n	8008e26 <f_open+0x37e>
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	68db      	ldr	r3, [r3, #12]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d06a      	beq.n	8008e26 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	68da      	ldr	r2, [r3, #12]
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008d58:	693b      	ldr	r3, [r7, #16]
 8008d5a:	895b      	ldrh	r3, [r3, #10]
 8008d5c:	461a      	mov	r2, r3
 8008d5e:	693b      	ldr	r3, [r7, #16]
 8008d60:	899b      	ldrh	r3, [r3, #12]
 8008d62:	fb02 f303 	mul.w	r3, r2, r3
 8008d66:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	689b      	ldr	r3, [r3, #8]
 8008d6c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	68db      	ldr	r3, [r3, #12]
 8008d72:	657b      	str	r3, [r7, #84]	; 0x54
 8008d74:	e016      	b.n	8008da4 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	f7fe fc63 	bl	8007646 <get_fat>
 8008d80:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8008d82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008d84:	2b01      	cmp	r3, #1
 8008d86:	d802      	bhi.n	8008d8e <f_open+0x2e6>
 8008d88:	2302      	movs	r3, #2
 8008d8a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008d8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d94:	d102      	bne.n	8008d9c <f_open+0x2f4>
 8008d96:	2301      	movs	r3, #1
 8008d98:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008d9c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008d9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008da0:	1ad3      	subs	r3, r2, r3
 8008da2:	657b      	str	r3, [r7, #84]	; 0x54
 8008da4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d103      	bne.n	8008db4 <f_open+0x30c>
 8008dac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008dae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008db0:	429a      	cmp	r2, r3
 8008db2:	d8e0      	bhi.n	8008d76 <f_open+0x2ce>
				}
				fp->clust = clst;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008db8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008dba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d131      	bne.n	8008e26 <f_open+0x37e>
 8008dc2:	693b      	ldr	r3, [r7, #16]
 8008dc4:	899b      	ldrh	r3, [r3, #12]
 8008dc6:	461a      	mov	r2, r3
 8008dc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008dca:	fbb3 f1f2 	udiv	r1, r3, r2
 8008dce:	fb01 f202 	mul.w	r2, r1, r2
 8008dd2:	1a9b      	subs	r3, r3, r2
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d026      	beq.n	8008e26 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008dd8:	693b      	ldr	r3, [r7, #16]
 8008dda:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008ddc:	4618      	mov	r0, r3
 8008dde:	f7fe fc13 	bl	8007608 <clust2sect>
 8008de2:	6478      	str	r0, [r7, #68]	; 0x44
 8008de4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d103      	bne.n	8008df2 <f_open+0x34a>
						res = FR_INT_ERR;
 8008dea:	2302      	movs	r3, #2
 8008dec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008df0:	e019      	b.n	8008e26 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8008df2:	693b      	ldr	r3, [r7, #16]
 8008df4:	899b      	ldrh	r3, [r3, #12]
 8008df6:	461a      	mov	r2, r3
 8008df8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008dfa:	fbb3 f2f2 	udiv	r2, r3, r2
 8008dfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e00:	441a      	add	r2, r3
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8008e06:	693b      	ldr	r3, [r7, #16]
 8008e08:	7858      	ldrb	r0, [r3, #1]
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	6a1a      	ldr	r2, [r3, #32]
 8008e14:	2301      	movs	r3, #1
 8008e16:	f7fe f84b 	bl	8006eb0 <disk_read>
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d002      	beq.n	8008e26 <f_open+0x37e>
 8008e20:	2301      	movs	r3, #1
 8008e22:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008e26:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d002      	beq.n	8008e34 <f_open+0x38c>
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	2200      	movs	r2, #0
 8008e32:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008e34:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8008e38:	4618      	mov	r0, r3
 8008e3a:	3760      	adds	r7, #96	; 0x60
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bd80      	pop	{r7, pc}

08008e40 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b08e      	sub	sp, #56	; 0x38
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	60f8      	str	r0, [r7, #12]
 8008e48:	60b9      	str	r1, [r7, #8]
 8008e4a:	607a      	str	r2, [r7, #4]
 8008e4c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8008e4e:	68bb      	ldr	r3, [r7, #8]
 8008e50:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	2200      	movs	r2, #0
 8008e56:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	f107 0214 	add.w	r2, r7, #20
 8008e5e:	4611      	mov	r1, r2
 8008e60:	4618      	mov	r0, r3
 8008e62:	f7ff fda5 	bl	80089b0 <validate>
 8008e66:	4603      	mov	r3, r0
 8008e68:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008e6c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d107      	bne.n	8008e84 <f_read+0x44>
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	7d5b      	ldrb	r3, [r3, #21]
 8008e78:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8008e7c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d002      	beq.n	8008e8a <f_read+0x4a>
 8008e84:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008e88:	e135      	b.n	80090f6 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	7d1b      	ldrb	r3, [r3, #20]
 8008e8e:	f003 0301 	and.w	r3, r3, #1
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d101      	bne.n	8008e9a <f_read+0x5a>
 8008e96:	2307      	movs	r3, #7
 8008e98:	e12d      	b.n	80090f6 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	68da      	ldr	r2, [r3, #12]
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	699b      	ldr	r3, [r3, #24]
 8008ea2:	1ad3      	subs	r3, r2, r3
 8008ea4:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8008ea6:	687a      	ldr	r2, [r7, #4]
 8008ea8:	6a3b      	ldr	r3, [r7, #32]
 8008eaa:	429a      	cmp	r2, r3
 8008eac:	f240 811e 	bls.w	80090ec <f_read+0x2ac>
 8008eb0:	6a3b      	ldr	r3, [r7, #32]
 8008eb2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8008eb4:	e11a      	b.n	80090ec <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	699b      	ldr	r3, [r3, #24]
 8008eba:	697a      	ldr	r2, [r7, #20]
 8008ebc:	8992      	ldrh	r2, [r2, #12]
 8008ebe:	fbb3 f1f2 	udiv	r1, r3, r2
 8008ec2:	fb01 f202 	mul.w	r2, r1, r2
 8008ec6:	1a9b      	subs	r3, r3, r2
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	f040 80d5 	bne.w	8009078 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	699b      	ldr	r3, [r3, #24]
 8008ed2:	697a      	ldr	r2, [r7, #20]
 8008ed4:	8992      	ldrh	r2, [r2, #12]
 8008ed6:	fbb3 f3f2 	udiv	r3, r3, r2
 8008eda:	697a      	ldr	r2, [r7, #20]
 8008edc:	8952      	ldrh	r2, [r2, #10]
 8008ede:	3a01      	subs	r2, #1
 8008ee0:	4013      	ands	r3, r2
 8008ee2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8008ee4:	69fb      	ldr	r3, [r7, #28]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d12f      	bne.n	8008f4a <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	699b      	ldr	r3, [r3, #24]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d103      	bne.n	8008efa <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	689b      	ldr	r3, [r3, #8]
 8008ef6:	633b      	str	r3, [r7, #48]	; 0x30
 8008ef8:	e013      	b.n	8008f22 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d007      	beq.n	8008f12 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	699b      	ldr	r3, [r3, #24]
 8008f06:	4619      	mov	r1, r3
 8008f08:	68f8      	ldr	r0, [r7, #12]
 8008f0a:	f7fe fe89 	bl	8007c20 <clmt_clust>
 8008f0e:	6338      	str	r0, [r7, #48]	; 0x30
 8008f10:	e007      	b.n	8008f22 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8008f12:	68fa      	ldr	r2, [r7, #12]
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	69db      	ldr	r3, [r3, #28]
 8008f18:	4619      	mov	r1, r3
 8008f1a:	4610      	mov	r0, r2
 8008f1c:	f7fe fb93 	bl	8007646 <get_fat>
 8008f20:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8008f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f24:	2b01      	cmp	r3, #1
 8008f26:	d804      	bhi.n	8008f32 <f_read+0xf2>
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	2202      	movs	r2, #2
 8008f2c:	755a      	strb	r2, [r3, #21]
 8008f2e:	2302      	movs	r3, #2
 8008f30:	e0e1      	b.n	80090f6 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f38:	d104      	bne.n	8008f44 <f_read+0x104>
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	2201      	movs	r2, #1
 8008f3e:	755a      	strb	r2, [r3, #21]
 8008f40:	2301      	movs	r3, #1
 8008f42:	e0d8      	b.n	80090f6 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f48:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008f4a:	697a      	ldr	r2, [r7, #20]
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	69db      	ldr	r3, [r3, #28]
 8008f50:	4619      	mov	r1, r3
 8008f52:	4610      	mov	r0, r2
 8008f54:	f7fe fb58 	bl	8007608 <clust2sect>
 8008f58:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008f5a:	69bb      	ldr	r3, [r7, #24]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d104      	bne.n	8008f6a <f_read+0x12a>
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	2202      	movs	r2, #2
 8008f64:	755a      	strb	r2, [r3, #21]
 8008f66:	2302      	movs	r3, #2
 8008f68:	e0c5      	b.n	80090f6 <f_read+0x2b6>
			sect += csect;
 8008f6a:	69ba      	ldr	r2, [r7, #24]
 8008f6c:	69fb      	ldr	r3, [r7, #28]
 8008f6e:	4413      	add	r3, r2
 8008f70:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8008f72:	697b      	ldr	r3, [r7, #20]
 8008f74:	899b      	ldrh	r3, [r3, #12]
 8008f76:	461a      	mov	r2, r3
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	fbb3 f3f2 	udiv	r3, r3, r2
 8008f7e:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8008f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d041      	beq.n	800900a <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008f86:	69fa      	ldr	r2, [r7, #28]
 8008f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f8a:	4413      	add	r3, r2
 8008f8c:	697a      	ldr	r2, [r7, #20]
 8008f8e:	8952      	ldrh	r2, [r2, #10]
 8008f90:	4293      	cmp	r3, r2
 8008f92:	d905      	bls.n	8008fa0 <f_read+0x160>
					cc = fs->csize - csect;
 8008f94:	697b      	ldr	r3, [r7, #20]
 8008f96:	895b      	ldrh	r3, [r3, #10]
 8008f98:	461a      	mov	r2, r3
 8008f9a:	69fb      	ldr	r3, [r7, #28]
 8008f9c:	1ad3      	subs	r3, r2, r3
 8008f9e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008fa0:	697b      	ldr	r3, [r7, #20]
 8008fa2:	7858      	ldrb	r0, [r3, #1]
 8008fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fa6:	69ba      	ldr	r2, [r7, #24]
 8008fa8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008faa:	f7fd ff81 	bl	8006eb0 <disk_read>
 8008fae:	4603      	mov	r3, r0
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d004      	beq.n	8008fbe <f_read+0x17e>
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	2201      	movs	r2, #1
 8008fb8:	755a      	strb	r2, [r3, #21]
 8008fba:	2301      	movs	r3, #1
 8008fbc:	e09b      	b.n	80090f6 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	7d1b      	ldrb	r3, [r3, #20]
 8008fc2:	b25b      	sxtb	r3, r3
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	da18      	bge.n	8008ffa <f_read+0x1ba>
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	6a1a      	ldr	r2, [r3, #32]
 8008fcc:	69bb      	ldr	r3, [r7, #24]
 8008fce:	1ad3      	subs	r3, r2, r3
 8008fd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008fd2:	429a      	cmp	r2, r3
 8008fd4:	d911      	bls.n	8008ffa <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	6a1a      	ldr	r2, [r3, #32]
 8008fda:	69bb      	ldr	r3, [r7, #24]
 8008fdc:	1ad3      	subs	r3, r2, r3
 8008fde:	697a      	ldr	r2, [r7, #20]
 8008fe0:	8992      	ldrh	r2, [r2, #12]
 8008fe2:	fb02 f303 	mul.w	r3, r2, r3
 8008fe6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fe8:	18d0      	adds	r0, r2, r3
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008ff0:	697b      	ldr	r3, [r7, #20]
 8008ff2:	899b      	ldrh	r3, [r3, #12]
 8008ff4:	461a      	mov	r2, r3
 8008ff6:	f7fe f83b 	bl	8007070 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8008ffa:	697b      	ldr	r3, [r7, #20]
 8008ffc:	899b      	ldrh	r3, [r3, #12]
 8008ffe:	461a      	mov	r2, r3
 8009000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009002:	fb02 f303 	mul.w	r3, r2, r3
 8009006:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8009008:	e05c      	b.n	80090c4 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	6a1b      	ldr	r3, [r3, #32]
 800900e:	69ba      	ldr	r2, [r7, #24]
 8009010:	429a      	cmp	r2, r3
 8009012:	d02e      	beq.n	8009072 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	7d1b      	ldrb	r3, [r3, #20]
 8009018:	b25b      	sxtb	r3, r3
 800901a:	2b00      	cmp	r3, #0
 800901c:	da18      	bge.n	8009050 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800901e:	697b      	ldr	r3, [r7, #20]
 8009020:	7858      	ldrb	r0, [r3, #1]
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	6a1a      	ldr	r2, [r3, #32]
 800902c:	2301      	movs	r3, #1
 800902e:	f7fd ff5f 	bl	8006ef0 <disk_write>
 8009032:	4603      	mov	r3, r0
 8009034:	2b00      	cmp	r3, #0
 8009036:	d004      	beq.n	8009042 <f_read+0x202>
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	2201      	movs	r2, #1
 800903c:	755a      	strb	r2, [r3, #21]
 800903e:	2301      	movs	r3, #1
 8009040:	e059      	b.n	80090f6 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	7d1b      	ldrb	r3, [r3, #20]
 8009046:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800904a:	b2da      	uxtb	r2, r3
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8009050:	697b      	ldr	r3, [r7, #20]
 8009052:	7858      	ldrb	r0, [r3, #1]
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800905a:	2301      	movs	r3, #1
 800905c:	69ba      	ldr	r2, [r7, #24]
 800905e:	f7fd ff27 	bl	8006eb0 <disk_read>
 8009062:	4603      	mov	r3, r0
 8009064:	2b00      	cmp	r3, #0
 8009066:	d004      	beq.n	8009072 <f_read+0x232>
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	2201      	movs	r2, #1
 800906c:	755a      	strb	r2, [r3, #21]
 800906e:	2301      	movs	r3, #1
 8009070:	e041      	b.n	80090f6 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	69ba      	ldr	r2, [r7, #24]
 8009076:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009078:	697b      	ldr	r3, [r7, #20]
 800907a:	899b      	ldrh	r3, [r3, #12]
 800907c:	4618      	mov	r0, r3
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	699b      	ldr	r3, [r3, #24]
 8009082:	697a      	ldr	r2, [r7, #20]
 8009084:	8992      	ldrh	r2, [r2, #12]
 8009086:	fbb3 f1f2 	udiv	r1, r3, r2
 800908a:	fb01 f202 	mul.w	r2, r1, r2
 800908e:	1a9b      	subs	r3, r3, r2
 8009090:	1ac3      	subs	r3, r0, r3
 8009092:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8009094:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	429a      	cmp	r2, r3
 800909a:	d901      	bls.n	80090a0 <f_read+0x260>
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	699b      	ldr	r3, [r3, #24]
 80090aa:	697a      	ldr	r2, [r7, #20]
 80090ac:	8992      	ldrh	r2, [r2, #12]
 80090ae:	fbb3 f0f2 	udiv	r0, r3, r2
 80090b2:	fb00 f202 	mul.w	r2, r0, r2
 80090b6:	1a9b      	subs	r3, r3, r2
 80090b8:	440b      	add	r3, r1
 80090ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80090bc:	4619      	mov	r1, r3
 80090be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80090c0:	f7fd ffd6 	bl	8007070 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80090c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090c8:	4413      	add	r3, r2
 80090ca:	627b      	str	r3, [r7, #36]	; 0x24
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	699a      	ldr	r2, [r3, #24]
 80090d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090d2:	441a      	add	r2, r3
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	619a      	str	r2, [r3, #24]
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	681a      	ldr	r2, [r3, #0]
 80090dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090de:	441a      	add	r2, r3
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	601a      	str	r2, [r3, #0]
 80090e4:	687a      	ldr	r2, [r7, #4]
 80090e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090e8:	1ad3      	subs	r3, r2, r3
 80090ea:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	f47f aee1 	bne.w	8008eb6 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80090f4:	2300      	movs	r3, #0
}
 80090f6:	4618      	mov	r0, r3
 80090f8:	3738      	adds	r7, #56	; 0x38
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd80      	pop	{r7, pc}

080090fe <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80090fe:	b580      	push	{r7, lr}
 8009100:	b086      	sub	sp, #24
 8009102:	af00      	add	r7, sp, #0
 8009104:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	f107 0208 	add.w	r2, r7, #8
 800910c:	4611      	mov	r1, r2
 800910e:	4618      	mov	r0, r3
 8009110:	f7ff fc4e 	bl	80089b0 <validate>
 8009114:	4603      	mov	r3, r0
 8009116:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009118:	7dfb      	ldrb	r3, [r7, #23]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d168      	bne.n	80091f0 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	7d1b      	ldrb	r3, [r3, #20]
 8009122:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009126:	2b00      	cmp	r3, #0
 8009128:	d062      	beq.n	80091f0 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	7d1b      	ldrb	r3, [r3, #20]
 800912e:	b25b      	sxtb	r3, r3
 8009130:	2b00      	cmp	r3, #0
 8009132:	da15      	bge.n	8009160 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	7858      	ldrb	r0, [r3, #1]
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	6a1a      	ldr	r2, [r3, #32]
 8009142:	2301      	movs	r3, #1
 8009144:	f7fd fed4 	bl	8006ef0 <disk_write>
 8009148:	4603      	mov	r3, r0
 800914a:	2b00      	cmp	r3, #0
 800914c:	d001      	beq.n	8009152 <f_sync+0x54>
 800914e:	2301      	movs	r3, #1
 8009150:	e04f      	b.n	80091f2 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	7d1b      	ldrb	r3, [r3, #20]
 8009156:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800915a:	b2da      	uxtb	r2, r3
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8009160:	f7fd fb74 	bl	800684c <get_fattime>
 8009164:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8009166:	68ba      	ldr	r2, [r7, #8]
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800916c:	4619      	mov	r1, r3
 800916e:	4610      	mov	r0, r2
 8009170:	f7fe f9ac 	bl	80074cc <move_window>
 8009174:	4603      	mov	r3, r0
 8009176:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8009178:	7dfb      	ldrb	r3, [r7, #23]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d138      	bne.n	80091f0 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009182:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	330b      	adds	r3, #11
 8009188:	781a      	ldrb	r2, [r3, #0]
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	330b      	adds	r3, #11
 800918e:	f042 0220 	orr.w	r2, r2, #32
 8009192:	b2d2      	uxtb	r2, r2
 8009194:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6818      	ldr	r0, [r3, #0]
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	689b      	ldr	r3, [r3, #8]
 800919e:	461a      	mov	r2, r3
 80091a0:	68f9      	ldr	r1, [r7, #12]
 80091a2:	f7fe ff3a 	bl	800801a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	f103 021c 	add.w	r2, r3, #28
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	68db      	ldr	r3, [r3, #12]
 80091b0:	4619      	mov	r1, r3
 80091b2:	4610      	mov	r0, r2
 80091b4:	f7fd ff30 	bl	8007018 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	3316      	adds	r3, #22
 80091bc:	6939      	ldr	r1, [r7, #16]
 80091be:	4618      	mov	r0, r3
 80091c0:	f7fd ff2a 	bl	8007018 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	3312      	adds	r3, #18
 80091c8:	2100      	movs	r1, #0
 80091ca:	4618      	mov	r0, r3
 80091cc:	f7fd ff09 	bl	8006fe2 <st_word>
					fs->wflag = 1;
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	2201      	movs	r2, #1
 80091d4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80091d6:	68bb      	ldr	r3, [r7, #8]
 80091d8:	4618      	mov	r0, r3
 80091da:	f7fe f9a5 	bl	8007528 <sync_fs>
 80091de:	4603      	mov	r3, r0
 80091e0:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	7d1b      	ldrb	r3, [r3, #20]
 80091e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80091ea:	b2da      	uxtb	r2, r3
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80091f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80091f2:	4618      	mov	r0, r3
 80091f4:	3718      	adds	r7, #24
 80091f6:	46bd      	mov	sp, r7
 80091f8:	bd80      	pop	{r7, pc}

080091fa <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80091fa:	b580      	push	{r7, lr}
 80091fc:	b084      	sub	sp, #16
 80091fe:	af00      	add	r7, sp, #0
 8009200:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f7ff ff7b 	bl	80090fe <f_sync>
 8009208:	4603      	mov	r3, r0
 800920a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800920c:	7bfb      	ldrb	r3, [r7, #15]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d118      	bne.n	8009244 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	f107 0208 	add.w	r2, r7, #8
 8009218:	4611      	mov	r1, r2
 800921a:	4618      	mov	r0, r3
 800921c:	f7ff fbc8 	bl	80089b0 <validate>
 8009220:	4603      	mov	r3, r0
 8009222:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009224:	7bfb      	ldrb	r3, [r7, #15]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d10c      	bne.n	8009244 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	691b      	ldr	r3, [r3, #16]
 800922e:	4618      	mov	r0, r3
 8009230:	f7fe f8a8 	bl	8007384 <dec_lock>
 8009234:	4603      	mov	r3, r0
 8009236:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8009238:	7bfb      	ldrb	r3, [r7, #15]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d102      	bne.n	8009244 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	2200      	movs	r2, #0
 8009242:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8009244:	7bfb      	ldrb	r3, [r7, #15]
}
 8009246:	4618      	mov	r0, r3
 8009248:	3710      	adds	r7, #16
 800924a:	46bd      	mov	sp, r7
 800924c:	bd80      	pop	{r7, pc}

0800924e <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800924e:	b580      	push	{r7, lr}
 8009250:	b090      	sub	sp, #64	; 0x40
 8009252:	af00      	add	r7, sp, #0
 8009254:	6078      	str	r0, [r7, #4]
 8009256:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	f107 0208 	add.w	r2, r7, #8
 800925e:	4611      	mov	r1, r2
 8009260:	4618      	mov	r0, r3
 8009262:	f7ff fba5 	bl	80089b0 <validate>
 8009266:	4603      	mov	r3, r0
 8009268:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800926c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009270:	2b00      	cmp	r3, #0
 8009272:	d103      	bne.n	800927c <f_lseek+0x2e>
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	7d5b      	ldrb	r3, [r3, #21]
 8009278:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800927c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009280:	2b00      	cmp	r3, #0
 8009282:	d002      	beq.n	800928a <f_lseek+0x3c>
 8009284:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009288:	e201      	b.n	800968e <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800928e:	2b00      	cmp	r3, #0
 8009290:	f000 80d9 	beq.w	8009446 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800929a:	d15a      	bne.n	8009352 <f_lseek+0x104>
			tbl = fp->cltbl;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092a0:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80092a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092a4:	1d1a      	adds	r2, r3, #4
 80092a6:	627a      	str	r2, [r7, #36]	; 0x24
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	617b      	str	r3, [r7, #20]
 80092ac:	2302      	movs	r3, #2
 80092ae:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	689b      	ldr	r3, [r3, #8]
 80092b4:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 80092b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d03a      	beq.n	8009332 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80092bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092be:	613b      	str	r3, [r7, #16]
 80092c0:	2300      	movs	r3, #0
 80092c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80092c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092c6:	3302      	adds	r3, #2
 80092c8:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 80092ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092cc:	60fb      	str	r3, [r7, #12]
 80092ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092d0:	3301      	adds	r3, #1
 80092d2:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80092d8:	4618      	mov	r0, r3
 80092da:	f7fe f9b4 	bl	8007646 <get_fat>
 80092de:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 80092e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092e2:	2b01      	cmp	r3, #1
 80092e4:	d804      	bhi.n	80092f0 <f_lseek+0xa2>
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2202      	movs	r2, #2
 80092ea:	755a      	strb	r2, [r3, #21]
 80092ec:	2302      	movs	r3, #2
 80092ee:	e1ce      	b.n	800968e <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80092f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092f6:	d104      	bne.n	8009302 <f_lseek+0xb4>
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2201      	movs	r2, #1
 80092fc:	755a      	strb	r2, [r3, #21]
 80092fe:	2301      	movs	r3, #1
 8009300:	e1c5      	b.n	800968e <f_lseek+0x440>
					} while (cl == pcl + 1);
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	3301      	adds	r3, #1
 8009306:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009308:	429a      	cmp	r2, r3
 800930a:	d0de      	beq.n	80092ca <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800930c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800930e:	697b      	ldr	r3, [r7, #20]
 8009310:	429a      	cmp	r2, r3
 8009312:	d809      	bhi.n	8009328 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8009314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009316:	1d1a      	adds	r2, r3, #4
 8009318:	627a      	str	r2, [r7, #36]	; 0x24
 800931a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800931c:	601a      	str	r2, [r3, #0]
 800931e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009320:	1d1a      	adds	r2, r3, #4
 8009322:	627a      	str	r2, [r7, #36]	; 0x24
 8009324:	693a      	ldr	r2, [r7, #16]
 8009326:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8009328:	68bb      	ldr	r3, [r7, #8]
 800932a:	699b      	ldr	r3, [r3, #24]
 800932c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800932e:	429a      	cmp	r2, r3
 8009330:	d3c4      	bcc.n	80092bc <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009336:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009338:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800933a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800933c:	697b      	ldr	r3, [r7, #20]
 800933e:	429a      	cmp	r2, r3
 8009340:	d803      	bhi.n	800934a <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8009342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009344:	2200      	movs	r2, #0
 8009346:	601a      	str	r2, [r3, #0]
 8009348:	e19f      	b.n	800968a <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800934a:	2311      	movs	r3, #17
 800934c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8009350:	e19b      	b.n	800968a <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	68db      	ldr	r3, [r3, #12]
 8009356:	683a      	ldr	r2, [r7, #0]
 8009358:	429a      	cmp	r2, r3
 800935a:	d902      	bls.n	8009362 <f_lseek+0x114>
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	68db      	ldr	r3, [r3, #12]
 8009360:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	683a      	ldr	r2, [r7, #0]
 8009366:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	2b00      	cmp	r3, #0
 800936c:	f000 818d 	beq.w	800968a <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	3b01      	subs	r3, #1
 8009374:	4619      	mov	r1, r3
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f7fe fc52 	bl	8007c20 <clmt_clust>
 800937c:	4602      	mov	r2, r0
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8009382:	68ba      	ldr	r2, [r7, #8]
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	69db      	ldr	r3, [r3, #28]
 8009388:	4619      	mov	r1, r3
 800938a:	4610      	mov	r0, r2
 800938c:	f7fe f93c 	bl	8007608 <clust2sect>
 8009390:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8009392:	69bb      	ldr	r3, [r7, #24]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d104      	bne.n	80093a2 <f_lseek+0x154>
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2202      	movs	r2, #2
 800939c:	755a      	strb	r2, [r3, #21]
 800939e:	2302      	movs	r3, #2
 80093a0:	e175      	b.n	800968e <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	3b01      	subs	r3, #1
 80093a6:	68ba      	ldr	r2, [r7, #8]
 80093a8:	8992      	ldrh	r2, [r2, #12]
 80093aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80093ae:	68ba      	ldr	r2, [r7, #8]
 80093b0:	8952      	ldrh	r2, [r2, #10]
 80093b2:	3a01      	subs	r2, #1
 80093b4:	4013      	ands	r3, r2
 80093b6:	69ba      	ldr	r2, [r7, #24]
 80093b8:	4413      	add	r3, r2
 80093ba:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	699b      	ldr	r3, [r3, #24]
 80093c0:	68ba      	ldr	r2, [r7, #8]
 80093c2:	8992      	ldrh	r2, [r2, #12]
 80093c4:	fbb3 f1f2 	udiv	r1, r3, r2
 80093c8:	fb01 f202 	mul.w	r2, r1, r2
 80093cc:	1a9b      	subs	r3, r3, r2
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	f000 815b 	beq.w	800968a <f_lseek+0x43c>
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	6a1b      	ldr	r3, [r3, #32]
 80093d8:	69ba      	ldr	r2, [r7, #24]
 80093da:	429a      	cmp	r2, r3
 80093dc:	f000 8155 	beq.w	800968a <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	7d1b      	ldrb	r3, [r3, #20]
 80093e4:	b25b      	sxtb	r3, r3
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	da18      	bge.n	800941c <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80093ea:	68bb      	ldr	r3, [r7, #8]
 80093ec:	7858      	ldrb	r0, [r3, #1]
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	6a1a      	ldr	r2, [r3, #32]
 80093f8:	2301      	movs	r3, #1
 80093fa:	f7fd fd79 	bl	8006ef0 <disk_write>
 80093fe:	4603      	mov	r3, r0
 8009400:	2b00      	cmp	r3, #0
 8009402:	d004      	beq.n	800940e <f_lseek+0x1c0>
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2201      	movs	r2, #1
 8009408:	755a      	strb	r2, [r3, #21]
 800940a:	2301      	movs	r3, #1
 800940c:	e13f      	b.n	800968e <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	7d1b      	ldrb	r3, [r3, #20]
 8009412:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009416:	b2da      	uxtb	r2, r3
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800941c:	68bb      	ldr	r3, [r7, #8]
 800941e:	7858      	ldrb	r0, [r3, #1]
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009426:	2301      	movs	r3, #1
 8009428:	69ba      	ldr	r2, [r7, #24]
 800942a:	f7fd fd41 	bl	8006eb0 <disk_read>
 800942e:	4603      	mov	r3, r0
 8009430:	2b00      	cmp	r3, #0
 8009432:	d004      	beq.n	800943e <f_lseek+0x1f0>
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2201      	movs	r2, #1
 8009438:	755a      	strb	r2, [r3, #21]
 800943a:	2301      	movs	r3, #1
 800943c:	e127      	b.n	800968e <f_lseek+0x440>
#endif
					fp->sect = dsc;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	69ba      	ldr	r2, [r7, #24]
 8009442:	621a      	str	r2, [r3, #32]
 8009444:	e121      	b.n	800968a <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	68db      	ldr	r3, [r3, #12]
 800944a:	683a      	ldr	r2, [r7, #0]
 800944c:	429a      	cmp	r2, r3
 800944e:	d908      	bls.n	8009462 <f_lseek+0x214>
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	7d1b      	ldrb	r3, [r3, #20]
 8009454:	f003 0302 	and.w	r3, r3, #2
 8009458:	2b00      	cmp	r3, #0
 800945a:	d102      	bne.n	8009462 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	68db      	ldr	r3, [r3, #12]
 8009460:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	699b      	ldr	r3, [r3, #24]
 8009466:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8009468:	2300      	movs	r3, #0
 800946a:	637b      	str	r3, [r7, #52]	; 0x34
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009470:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	2b00      	cmp	r3, #0
 8009476:	f000 80b5 	beq.w	80095e4 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800947a:	68bb      	ldr	r3, [r7, #8]
 800947c:	895b      	ldrh	r3, [r3, #10]
 800947e:	461a      	mov	r2, r3
 8009480:	68bb      	ldr	r3, [r7, #8]
 8009482:	899b      	ldrh	r3, [r3, #12]
 8009484:	fb02 f303 	mul.w	r3, r2, r3
 8009488:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800948a:	6a3b      	ldr	r3, [r7, #32]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d01b      	beq.n	80094c8 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	1e5a      	subs	r2, r3, #1
 8009494:	69fb      	ldr	r3, [r7, #28]
 8009496:	fbb2 f2f3 	udiv	r2, r2, r3
 800949a:	6a3b      	ldr	r3, [r7, #32]
 800949c:	1e59      	subs	r1, r3, #1
 800949e:	69fb      	ldr	r3, [r7, #28]
 80094a0:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 80094a4:	429a      	cmp	r2, r3
 80094a6:	d30f      	bcc.n	80094c8 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80094a8:	6a3b      	ldr	r3, [r7, #32]
 80094aa:	1e5a      	subs	r2, r3, #1
 80094ac:	69fb      	ldr	r3, [r7, #28]
 80094ae:	425b      	negs	r3, r3
 80094b0:	401a      	ands	r2, r3
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	699b      	ldr	r3, [r3, #24]
 80094ba:	683a      	ldr	r2, [r7, #0]
 80094bc:	1ad3      	subs	r3, r2, r3
 80094be:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	69db      	ldr	r3, [r3, #28]
 80094c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80094c6:	e022      	b.n	800950e <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	689b      	ldr	r3, [r3, #8]
 80094cc:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80094ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d119      	bne.n	8009508 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2100      	movs	r1, #0
 80094d8:	4618      	mov	r0, r3
 80094da:	f7fe fb09 	bl	8007af0 <create_chain>
 80094de:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 80094e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094e2:	2b01      	cmp	r3, #1
 80094e4:	d104      	bne.n	80094f0 <f_lseek+0x2a2>
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	2202      	movs	r2, #2
 80094ea:	755a      	strb	r2, [r3, #21]
 80094ec:	2302      	movs	r3, #2
 80094ee:	e0ce      	b.n	800968e <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80094f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094f6:	d104      	bne.n	8009502 <f_lseek+0x2b4>
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2201      	movs	r2, #1
 80094fc:	755a      	strb	r2, [r3, #21]
 80094fe:	2301      	movs	r3, #1
 8009500:	e0c5      	b.n	800968e <f_lseek+0x440>
					fp->obj.sclust = clst;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009506:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800950c:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800950e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009510:	2b00      	cmp	r3, #0
 8009512:	d067      	beq.n	80095e4 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8009514:	e03a      	b.n	800958c <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8009516:	683a      	ldr	r2, [r7, #0]
 8009518:	69fb      	ldr	r3, [r7, #28]
 800951a:	1ad3      	subs	r3, r2, r3
 800951c:	603b      	str	r3, [r7, #0]
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	699a      	ldr	r2, [r3, #24]
 8009522:	69fb      	ldr	r3, [r7, #28]
 8009524:	441a      	add	r2, r3
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	7d1b      	ldrb	r3, [r3, #20]
 800952e:	f003 0302 	and.w	r3, r3, #2
 8009532:	2b00      	cmp	r3, #0
 8009534:	d00b      	beq.n	800954e <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800953a:	4618      	mov	r0, r3
 800953c:	f7fe fad8 	bl	8007af0 <create_chain>
 8009540:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8009542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009544:	2b00      	cmp	r3, #0
 8009546:	d108      	bne.n	800955a <f_lseek+0x30c>
							ofs = 0; break;
 8009548:	2300      	movs	r3, #0
 800954a:	603b      	str	r3, [r7, #0]
 800954c:	e022      	b.n	8009594 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009552:	4618      	mov	r0, r3
 8009554:	f7fe f877 	bl	8007646 <get_fat>
 8009558:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800955a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800955c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009560:	d104      	bne.n	800956c <f_lseek+0x31e>
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	2201      	movs	r2, #1
 8009566:	755a      	strb	r2, [r3, #21]
 8009568:	2301      	movs	r3, #1
 800956a:	e090      	b.n	800968e <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800956c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800956e:	2b01      	cmp	r3, #1
 8009570:	d904      	bls.n	800957c <f_lseek+0x32e>
 8009572:	68bb      	ldr	r3, [r7, #8]
 8009574:	699b      	ldr	r3, [r3, #24]
 8009576:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009578:	429a      	cmp	r2, r3
 800957a:	d304      	bcc.n	8009586 <f_lseek+0x338>
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2202      	movs	r2, #2
 8009580:	755a      	strb	r2, [r3, #21]
 8009582:	2302      	movs	r3, #2
 8009584:	e083      	b.n	800968e <f_lseek+0x440>
					fp->clust = clst;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800958a:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800958c:	683a      	ldr	r2, [r7, #0]
 800958e:	69fb      	ldr	r3, [r7, #28]
 8009590:	429a      	cmp	r2, r3
 8009592:	d8c0      	bhi.n	8009516 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	699a      	ldr	r2, [r3, #24]
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	441a      	add	r2, r3
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 80095a0:	68bb      	ldr	r3, [r7, #8]
 80095a2:	899b      	ldrh	r3, [r3, #12]
 80095a4:	461a      	mov	r2, r3
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	fbb3 f1f2 	udiv	r1, r3, r2
 80095ac:	fb01 f202 	mul.w	r2, r1, r2
 80095b0:	1a9b      	subs	r3, r3, r2
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d016      	beq.n	80095e4 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 80095b6:	68bb      	ldr	r3, [r7, #8]
 80095b8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80095ba:	4618      	mov	r0, r3
 80095bc:	f7fe f824 	bl	8007608 <clust2sect>
 80095c0:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 80095c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d104      	bne.n	80095d2 <f_lseek+0x384>
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2202      	movs	r2, #2
 80095cc:	755a      	strb	r2, [r3, #21]
 80095ce:	2302      	movs	r3, #2
 80095d0:	e05d      	b.n	800968e <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	899b      	ldrh	r3, [r3, #12]
 80095d6:	461a      	mov	r2, r3
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	fbb3 f3f2 	udiv	r3, r3, r2
 80095de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80095e0:	4413      	add	r3, r2
 80095e2:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	699a      	ldr	r2, [r3, #24]
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	68db      	ldr	r3, [r3, #12]
 80095ec:	429a      	cmp	r2, r3
 80095ee:	d90a      	bls.n	8009606 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	699a      	ldr	r2, [r3, #24]
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	7d1b      	ldrb	r3, [r3, #20]
 80095fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009600:	b2da      	uxtb	r2, r3
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	699b      	ldr	r3, [r3, #24]
 800960a:	68ba      	ldr	r2, [r7, #8]
 800960c:	8992      	ldrh	r2, [r2, #12]
 800960e:	fbb3 f1f2 	udiv	r1, r3, r2
 8009612:	fb01 f202 	mul.w	r2, r1, r2
 8009616:	1a9b      	subs	r3, r3, r2
 8009618:	2b00      	cmp	r3, #0
 800961a:	d036      	beq.n	800968a <f_lseek+0x43c>
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	6a1b      	ldr	r3, [r3, #32]
 8009620:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009622:	429a      	cmp	r2, r3
 8009624:	d031      	beq.n	800968a <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	7d1b      	ldrb	r3, [r3, #20]
 800962a:	b25b      	sxtb	r3, r3
 800962c:	2b00      	cmp	r3, #0
 800962e:	da18      	bge.n	8009662 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009630:	68bb      	ldr	r3, [r7, #8]
 8009632:	7858      	ldrb	r0, [r3, #1]
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6a1a      	ldr	r2, [r3, #32]
 800963e:	2301      	movs	r3, #1
 8009640:	f7fd fc56 	bl	8006ef0 <disk_write>
 8009644:	4603      	mov	r3, r0
 8009646:	2b00      	cmp	r3, #0
 8009648:	d004      	beq.n	8009654 <f_lseek+0x406>
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2201      	movs	r2, #1
 800964e:	755a      	strb	r2, [r3, #21]
 8009650:	2301      	movs	r3, #1
 8009652:	e01c      	b.n	800968e <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	7d1b      	ldrb	r3, [r3, #20]
 8009658:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800965c:	b2da      	uxtb	r2, r3
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8009662:	68bb      	ldr	r3, [r7, #8]
 8009664:	7858      	ldrb	r0, [r3, #1]
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800966c:	2301      	movs	r3, #1
 800966e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009670:	f7fd fc1e 	bl	8006eb0 <disk_read>
 8009674:	4603      	mov	r3, r0
 8009676:	2b00      	cmp	r3, #0
 8009678:	d004      	beq.n	8009684 <f_lseek+0x436>
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	2201      	movs	r2, #1
 800967e:	755a      	strb	r2, [r3, #21]
 8009680:	2301      	movs	r3, #1
 8009682:	e004      	b.n	800968e <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009688:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800968a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800968e:	4618      	mov	r0, r3
 8009690:	3740      	adds	r7, #64	; 0x40
 8009692:	46bd      	mov	sp, r7
 8009694:	bd80      	pop	{r7, pc}
	...

08009698 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009698:	b480      	push	{r7}
 800969a:	b087      	sub	sp, #28
 800969c:	af00      	add	r7, sp, #0
 800969e:	60f8      	str	r0, [r7, #12]
 80096a0:	60b9      	str	r1, [r7, #8]
 80096a2:	4613      	mov	r3, r2
 80096a4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80096a6:	2301      	movs	r3, #1
 80096a8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80096aa:	2300      	movs	r3, #0
 80096ac:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80096ae:	4b1f      	ldr	r3, [pc, #124]	; (800972c <FATFS_LinkDriverEx+0x94>)
 80096b0:	7a5b      	ldrb	r3, [r3, #9]
 80096b2:	b2db      	uxtb	r3, r3
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d131      	bne.n	800971c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80096b8:	4b1c      	ldr	r3, [pc, #112]	; (800972c <FATFS_LinkDriverEx+0x94>)
 80096ba:	7a5b      	ldrb	r3, [r3, #9]
 80096bc:	b2db      	uxtb	r3, r3
 80096be:	461a      	mov	r2, r3
 80096c0:	4b1a      	ldr	r3, [pc, #104]	; (800972c <FATFS_LinkDriverEx+0x94>)
 80096c2:	2100      	movs	r1, #0
 80096c4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80096c6:	4b19      	ldr	r3, [pc, #100]	; (800972c <FATFS_LinkDriverEx+0x94>)
 80096c8:	7a5b      	ldrb	r3, [r3, #9]
 80096ca:	b2db      	uxtb	r3, r3
 80096cc:	4a17      	ldr	r2, [pc, #92]	; (800972c <FATFS_LinkDriverEx+0x94>)
 80096ce:	009b      	lsls	r3, r3, #2
 80096d0:	4413      	add	r3, r2
 80096d2:	68fa      	ldr	r2, [r7, #12]
 80096d4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80096d6:	4b15      	ldr	r3, [pc, #84]	; (800972c <FATFS_LinkDriverEx+0x94>)
 80096d8:	7a5b      	ldrb	r3, [r3, #9]
 80096da:	b2db      	uxtb	r3, r3
 80096dc:	461a      	mov	r2, r3
 80096de:	4b13      	ldr	r3, [pc, #76]	; (800972c <FATFS_LinkDriverEx+0x94>)
 80096e0:	4413      	add	r3, r2
 80096e2:	79fa      	ldrb	r2, [r7, #7]
 80096e4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80096e6:	4b11      	ldr	r3, [pc, #68]	; (800972c <FATFS_LinkDriverEx+0x94>)
 80096e8:	7a5b      	ldrb	r3, [r3, #9]
 80096ea:	b2db      	uxtb	r3, r3
 80096ec:	1c5a      	adds	r2, r3, #1
 80096ee:	b2d1      	uxtb	r1, r2
 80096f0:	4a0e      	ldr	r2, [pc, #56]	; (800972c <FATFS_LinkDriverEx+0x94>)
 80096f2:	7251      	strb	r1, [r2, #9]
 80096f4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80096f6:	7dbb      	ldrb	r3, [r7, #22]
 80096f8:	3330      	adds	r3, #48	; 0x30
 80096fa:	b2da      	uxtb	r2, r3
 80096fc:	68bb      	ldr	r3, [r7, #8]
 80096fe:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009700:	68bb      	ldr	r3, [r7, #8]
 8009702:	3301      	adds	r3, #1
 8009704:	223a      	movs	r2, #58	; 0x3a
 8009706:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	3302      	adds	r3, #2
 800970c:	222f      	movs	r2, #47	; 0x2f
 800970e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009710:	68bb      	ldr	r3, [r7, #8]
 8009712:	3303      	adds	r3, #3
 8009714:	2200      	movs	r2, #0
 8009716:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009718:	2300      	movs	r3, #0
 800971a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800971c:	7dfb      	ldrb	r3, [r7, #23]
}
 800971e:	4618      	mov	r0, r3
 8009720:	371c      	adds	r7, #28
 8009722:	46bd      	mov	sp, r7
 8009724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009728:	4770      	bx	lr
 800972a:	bf00      	nop
 800972c:	20002570 	.word	0x20002570

08009730 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b082      	sub	sp, #8
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
 8009738:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800973a:	2200      	movs	r2, #0
 800973c:	6839      	ldr	r1, [r7, #0]
 800973e:	6878      	ldr	r0, [r7, #4]
 8009740:	f7ff ffaa 	bl	8009698 <FATFS_LinkDriverEx>
 8009744:	4603      	mov	r3, r0
}
 8009746:	4618      	mov	r0, r3
 8009748:	3708      	adds	r7, #8
 800974a:	46bd      	mov	sp, r7
 800974c:	bd80      	pop	{r7, pc}

0800974e <_ZN6ScreenC1EP19__SPI_HandleTypeDef>:


class Screen
{
public:
	explicit Screen(SPI_HandleTypeDef *_spi):spi(_spi) {
 800974e:	b480      	push	{r7}
 8009750:	b083      	sub	sp, #12
 8009752:	af00      	add	r7, sp, #0
 8009754:	6078      	str	r0, [r7, #4]
 8009756:	6039      	str	r1, [r7, #0]
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2200      	movs	r2, #0
 800975c:	701a      	strb	r2, [r3, #0]
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	683a      	ldr	r2, [r7, #0]
 8009762:	605a      	str	r2, [r3, #4]
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2200      	movs	r2, #0
 8009768:	721a      	strb	r2, [r3, #8]
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	2201      	movs	r2, #1
 800976e:	725a      	strb	r2, [r3, #9]
	}
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	4618      	mov	r0, r3
 8009774:	370c      	adds	r7, #12
 8009776:	46bd      	mov	sp, r7
 8009778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977c:	4770      	bx	lr

0800977e <_ZN3AviC1Ev>:
	//uint8_t *buffer;

	void readChunk(ChunkHeader *header);

public:
	Avi() = default;
 800977e:	b480      	push	{r7}
 8009780:	b083      	sub	sp, #12
 8009782:	af00      	add	r7, sp, #0
 8009784:	6078      	str	r0, [r7, #4]
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	2200      	movs	r2, #0
 800978a:	609a      	str	r2, [r3, #8]
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2200      	movs	r2, #0
 8009790:	60da      	str	r2, [r3, #12]
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2200      	movs	r2, #0
 8009796:	611a      	str	r2, [r3, #16]
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	4618      	mov	r0, r3
 800979c:	370c      	adds	r7, #12
 800979e:	46bd      	mov	sp, r7
 80097a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a4:	4770      	bx	lr
	...

080097a8 <Main>:
int DrawJpeg(JPEGDRAW *pfnDraw);

void jpeg(uint8_t *buffer,int length);

void Main()
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b082      	sub	sp, #8
 80097ac:	af00      	add	r7, sp, #0
	LCD.ModuleInit();
 80097ae:	4825      	ldr	r0, [pc, #148]	; (8009844 <Main+0x9c>)
 80097b0:	f7f6 feda 	bl	8000568 <_ZN6Screen10ModuleInitEv>
	LCD.SetBackLight(1000);
 80097b4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80097b8:	4822      	ldr	r0, [pc, #136]	; (8009844 <Main+0x9c>)
 80097ba:	f7f7 fb2d 	bl	8000e18 <_ZN6Screen12SetBackLightEt>
	LCD.LCDInit(Screen::DEGREE_0);
 80097be:	2100      	movs	r1, #0
 80097c0:	4820      	ldr	r0, [pc, #128]	; (8009844 <Main+0x9c>)
 80097c2:	f7f7 fa97 	bl	8000cf4 <_ZN6Screen7LCDInitENS_11OrientationE>
	LCD.Clear(BLACK);
 80097c6:	2100      	movs	r1, #0
 80097c8:	481e      	ldr	r0, [pc, #120]	; (8009844 <Main+0x9c>)
 80097ca:	f7f7 fae6 	bl	8000d9a <_ZN6Screen5ClearEt>
	avi.Init();
 80097ce:	481e      	ldr	r0, [pc, #120]	; (8009848 <Main+0xa0>)
 80097d0:	f000 f934 	bl	8009a3c <_ZN3Avi4InitEv>

	for(uint8_t i=0;i<8; i++)
 80097d4:	2300      	movs	r3, #0
 80097d6:	71fb      	strb	r3, [r7, #7]
 80097d8:	79fb      	ldrb	r3, [r7, #7]
 80097da:	2b07      	cmp	r3, #7
 80097dc:	d82e      	bhi.n	800983c <Main+0x94>
	{
		avi.readMovi(names[i]);
 80097de:	79fb      	ldrb	r3, [r7, #7]
 80097e0:	4a1a      	ldr	r2, [pc, #104]	; (800984c <Main+0xa4>)
 80097e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80097e6:	4619      	mov	r1, r3
 80097e8:	4817      	ldr	r0, [pc, #92]	; (8009848 <Main+0xa0>)
 80097ea:	f000 fa27 	bl	8009c3c <_ZN3Avi8readMoviEPKc>
		LCD.begin_Write();
 80097ee:	4815      	ldr	r0, [pc, #84]	; (8009844 <Main+0x9c>)
 80097f0:	f7f6 fef3 	bl	80005da <_ZN6Screen11begin_WriteEv>
		while(avi.getFrame(buffSdio, size)){
 80097f4:	4a16      	ldr	r2, [pc, #88]	; (8009850 <Main+0xa8>)
 80097f6:	4917      	ldr	r1, [pc, #92]	; (8009854 <Main+0xac>)
 80097f8:	4813      	ldr	r0, [pc, #76]	; (8009848 <Main+0xa0>)
 80097fa:	f000 f93b 	bl	8009a74 <_ZN3Avi8getFrameEPhRi>
 80097fe:	4603      	mov	r3, r0
 8009800:	2b00      	cmp	r3, #0
 8009802:	d011      	beq.n	8009828 <Main+0x80>
			sizeSpi = size;
 8009804:	4b12      	ldr	r3, [pc, #72]	; (8009850 <Main+0xa8>)
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	4a13      	ldr	r2, [pc, #76]	; (8009858 <Main+0xb0>)
 800980a:	6013      	str	r3, [r2, #0]
			memcpy(buffSpi,buffSdio,sizeSpi);
 800980c:	4b12      	ldr	r3, [pc, #72]	; (8009858 <Main+0xb0>)
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	461a      	mov	r2, r3
 8009812:	4910      	ldr	r1, [pc, #64]	; (8009854 <Main+0xac>)
 8009814:	4811      	ldr	r0, [pc, #68]	; (800985c <Main+0xb4>)
 8009816:	f007 fae7 	bl	8010de8 <memcpy>
			jpeg(buffSpi,sizeSpi);
 800981a:	4b0f      	ldr	r3, [pc, #60]	; (8009858 <Main+0xb0>)
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	4619      	mov	r1, r3
 8009820:	480e      	ldr	r0, [pc, #56]	; (800985c <Main+0xb4>)
 8009822:	f000 f81d 	bl	8009860 <_Z4jpegPhi>
		while(avi.getFrame(buffSdio, size)){
 8009826:	e7e5      	b.n	80097f4 <Main+0x4c>
			}
		LCD.end_Write();
 8009828:	4806      	ldr	r0, [pc, #24]	; (8009844 <Main+0x9c>)
 800982a:	f7f6 fee2 	bl	80005f2 <_ZN6Screen9end_WriteEv>
		avi.Close();
 800982e:	4806      	ldr	r0, [pc, #24]	; (8009848 <Main+0xa0>)
 8009830:	f000 fa8a 	bl	8009d48 <_ZN3Avi5CloseEv>
	for(uint8_t i=0;i<8; i++)
 8009834:	79fb      	ldrb	r3, [r7, #7]
 8009836:	3301      	adds	r3, #1
 8009838:	71fb      	strb	r3, [r7, #7]
 800983a:	e7cd      	b.n	80097d8 <Main+0x30>
	}
}
 800983c:	bf00      	nop
 800983e:	3708      	adds	r7, #8
 8009840:	46bd      	mov	sp, r7
 8009842:	bd80      	pop	{r7, pc}
 8009844:	2000257c 	.word	0x2000257c
 8009848:	20006b64 	.word	0x20006b64
 800984c:	2000000c 	.word	0x2000000c
 8009850:	20008f78 	.word	0x20008f78
 8009854:	20006b78 	.word	0x20006b78
 8009858:	20008f7c 	.word	0x20008f7c
 800985c:	20007d78 	.word	0x20007d78

08009860 <_Z4jpegPhi>:

void jpeg(uint8_t *buffer,int length){
 8009860:	b580      	push	{r7, lr}
 8009862:	b082      	sub	sp, #8
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
 8009868:	6039      	str	r1, [r7, #0]
	if(mjpeg.openRAM(buffer,length, DrawJpeg))
 800986a:	4b0f      	ldr	r3, [pc, #60]	; (80098a8 <_Z4jpegPhi+0x48>)
 800986c:	683a      	ldr	r2, [r7, #0]
 800986e:	6879      	ldr	r1, [r7, #4]
 8009870:	480e      	ldr	r0, [pc, #56]	; (80098ac <_Z4jpegPhi+0x4c>)
 8009872:	f007 fa2f 	bl	8010cd4 <_ZN7JPEGDEC7openRAMEPhiPFiP13jpeg_draw_tagE>
 8009876:	4603      	mov	r3, r0
 8009878:	2b00      	cmp	r3, #0
 800987a:	bf14      	ite	ne
 800987c:	2301      	movne	r3, #1
 800987e:	2300      	moveq	r3, #0
 8009880:	b2db      	uxtb	r3, r3
 8009882:	2b00      	cmp	r3, #0
 8009884:	d009      	beq.n	800989a <_Z4jpegPhi+0x3a>
	{
		mjpeg.setPixelType(RGB565_LITTLE_ENDIAN);
 8009886:	2100      	movs	r1, #0
 8009888:	4808      	ldr	r0, [pc, #32]	; (80098ac <_Z4jpegPhi+0x4c>)
 800988a:	f007 fa07 	bl	8010c9c <_ZN7JPEGDEC12setPixelTypeEi>
		mjpeg.decode(0, 0, 0);
 800988e:	2300      	movs	r3, #0
 8009890:	2200      	movs	r2, #0
 8009892:	2100      	movs	r1, #0
 8009894:	4805      	ldr	r0, [pc, #20]	; (80098ac <_Z4jpegPhi+0x4c>)
 8009896:	f007 fa6a 	bl	8010d6e <_ZN7JPEGDEC6decodeEiii>
	}
	mjpeg.close();
 800989a:	4804      	ldr	r0, [pc, #16]	; (80098ac <_Z4jpegPhi+0x4c>)
 800989c:	f007 fa54 	bl	8010d48 <_ZN7JPEGDEC5closeEv>
}
 80098a0:	bf00      	nop
 80098a2:	3708      	adds	r7, #8
 80098a4:	46bd      	mov	sp, r7
 80098a6:	bd80      	pop	{r7, pc}
 80098a8:	080098b1 	.word	0x080098b1
 80098ac:	20002588 	.word	0x20002588

080098b0 <_Z8DrawJpegP13jpeg_draw_tag>:

int DrawJpeg(JPEGDRAW *pfnDraw){
 80098b0:	b5b0      	push	{r4, r5, r7, lr}
 80098b2:	b08e      	sub	sp, #56	; 0x38
 80098b4:	af04      	add	r7, sp, #16
 80098b6:	6078      	str	r0, [r7, #4]
	//while (LCD.isBusy);
	uint16_t x = pfnDraw->x;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t y = pfnDraw->y;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	685b      	ldr	r3, [r3, #4]
 80098c2:	847b      	strh	r3, [r7, #34]	; 0x22
	uint16_t width = pfnDraw->iWidth;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	689b      	ldr	r3, [r3, #8]
 80098c8:	843b      	strh	r3, [r7, #32]
	uint16_t height = pfnDraw->iHeight;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	68db      	ldr	r3, [r3, #12]
 80098ce:	83fb      	strh	r3, [r7, #30]
	uint32_t len = width * height * 2;
 80098d0:	8c3b      	ldrh	r3, [r7, #32]
 80098d2:	8bfa      	ldrh	r2, [r7, #30]
 80098d4:	fb02 f303 	mul.w	r3, r2, r3
 80098d8:	005b      	lsls	r3, r3, #1
 80098da:	61bb      	str	r3, [r7, #24]

	uint8_t* activeBuffer = select ? bufferA : bufferB;
 80098dc:	4b38      	ldr	r3, [pc, #224]	; (80099c0 <_Z8DrawJpegP13jpeg_draw_tag+0x110>)
 80098de:	781b      	ldrb	r3, [r3, #0]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d001      	beq.n	80098e8 <_Z8DrawJpegP13jpeg_draw_tag+0x38>
 80098e4:	4b37      	ldr	r3, [pc, #220]	; (80099c4 <_Z8DrawJpegP13jpeg_draw_tag+0x114>)
 80098e6:	e000      	b.n	80098ea <_Z8DrawJpegP13jpeg_draw_tag+0x3a>
 80098e8:	4b37      	ldr	r3, [pc, #220]	; (80099c8 <_Z8DrawJpegP13jpeg_draw_tag+0x118>)
 80098ea:	617b      	str	r3, [r7, #20]
	uint16_t bufferSize = select ? sizeA : sizeB;
 80098ec:	4b34      	ldr	r3, [pc, #208]	; (80099c0 <_Z8DrawJpegP13jpeg_draw_tag+0x110>)
 80098ee:	781b      	ldrb	r3, [r3, #0]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d002      	beq.n	80098fa <_Z8DrawJpegP13jpeg_draw_tag+0x4a>
 80098f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80098f8:	e001      	b.n	80098fe <_Z8DrawJpegP13jpeg_draw_tag+0x4e>
 80098fa:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 80098fe:	827b      	strh	r3, [r7, #18]

	uint32_t pixelsToTransfer = (len < bufferSize) ? len / 2 : bufferSize / 2;
 8009900:	8a7b      	ldrh	r3, [r7, #18]
 8009902:	69ba      	ldr	r2, [r7, #24]
 8009904:	429a      	cmp	r2, r3
 8009906:	d202      	bcs.n	800990e <_Z8DrawJpegP13jpeg_draw_tag+0x5e>
 8009908:	69bb      	ldr	r3, [r7, #24]
 800990a:	085b      	lsrs	r3, r3, #1
 800990c:	e002      	b.n	8009914 <_Z8DrawJpegP13jpeg_draw_tag+0x64>
 800990e:	8a7b      	ldrh	r3, [r7, #18]
 8009910:	085b      	lsrs	r3, r3, #1
 8009912:	b29b      	uxth	r3, r3
 8009914:	60fb      	str	r3, [r7, #12]

	for (uint16_t i = 0; i < pixelsToTransfer; i++) {
 8009916:	2300      	movs	r3, #0
 8009918:	84fb      	strh	r3, [r7, #38]	; 0x26
 800991a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800991c:	68fa      	ldr	r2, [r7, #12]
 800991e:	429a      	cmp	r2, r3
 8009920:	d91f      	bls.n	8009962 <_Z8DrawJpegP13jpeg_draw_tag+0xb2>
		activeBuffer[i * 2] = (pfnDraw->pPixels[i] >> 8) & 0xFF;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	699a      	ldr	r2, [r3, #24]
 8009926:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009928:	005b      	lsls	r3, r3, #1
 800992a:	4413      	add	r3, r2
 800992c:	881b      	ldrh	r3, [r3, #0]
 800992e:	0a1b      	lsrs	r3, r3, #8
 8009930:	b29a      	uxth	r2, r3
 8009932:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009934:	005b      	lsls	r3, r3, #1
 8009936:	4619      	mov	r1, r3
 8009938:	697b      	ldr	r3, [r7, #20]
 800993a:	440b      	add	r3, r1
 800993c:	b2d2      	uxtb	r2, r2
 800993e:	701a      	strb	r2, [r3, #0]
	    activeBuffer[i * 2 + 1] = pfnDraw->pPixels[i] & 0xFF;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	699a      	ldr	r2, [r3, #24]
 8009944:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009946:	005b      	lsls	r3, r3, #1
 8009948:	4413      	add	r3, r2
 800994a:	8819      	ldrh	r1, [r3, #0]
 800994c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800994e:	005b      	lsls	r3, r3, #1
 8009950:	3301      	adds	r3, #1
 8009952:	697a      	ldr	r2, [r7, #20]
 8009954:	4413      	add	r3, r2
 8009956:	b2ca      	uxtb	r2, r1
 8009958:	701a      	strb	r2, [r3, #0]
	for (uint16_t i = 0; i < pixelsToTransfer; i++) {
 800995a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800995c:	3301      	adds	r3, #1
 800995e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8009960:	e7db      	b.n	800991a <_Z8DrawJpegP13jpeg_draw_tag+0x6a>
	    }

	select = (select == 0 ? 1 : 0); // ping pong buffer
 8009962:	4b17      	ldr	r3, [pc, #92]	; (80099c0 <_Z8DrawJpegP13jpeg_draw_tag+0x110>)
 8009964:	781b      	ldrb	r3, [r3, #0]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d101      	bne.n	800996e <_Z8DrawJpegP13jpeg_draw_tag+0xbe>
 800996a:	2201      	movs	r2, #1
 800996c:	e000      	b.n	8009970 <_Z8DrawJpegP13jpeg_draw_tag+0xc0>
 800996e:	2200      	movs	r2, #0
 8009970:	4b13      	ldr	r3, [pc, #76]	; (80099c0 <_Z8DrawJpegP13jpeg_draw_tag+0x110>)
 8009972:	701a      	strb	r2, [r3, #0]
	while (LCD.isBusy);
 8009974:	4b15      	ldr	r3, [pc, #84]	; (80099cc <_Z8DrawJpegP13jpeg_draw_tag+0x11c>)
 8009976:	781b      	ldrb	r3, [r3, #0]
 8009978:	b2db      	uxtb	r3, r3
 800997a:	2b00      	cmp	r3, #0
 800997c:	d000      	beq.n	8009980 <_Z8DrawJpegP13jpeg_draw_tag+0xd0>
 800997e:	e7f9      	b.n	8009974 <_Z8DrawJpegP13jpeg_draw_tag+0xc4>
	LCD.WriteFrameBuffer(x, y, x + width-1, y + height-1, activeBuffer, bufferSize);
 8009980:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009982:	8c3b      	ldrh	r3, [r7, #32]
 8009984:	4413      	add	r3, r2
 8009986:	b29b      	uxth	r3, r3
 8009988:	3b01      	subs	r3, #1
 800998a:	b29c      	uxth	r4, r3
 800998c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800998e:	8bfb      	ldrh	r3, [r7, #30]
 8009990:	4413      	add	r3, r2
 8009992:	b29b      	uxth	r3, r3
 8009994:	3b01      	subs	r3, #1
 8009996:	b29b      	uxth	r3, r3
 8009998:	8a7a      	ldrh	r2, [r7, #18]
 800999a:	8c78      	ldrh	r0, [r7, #34]	; 0x22
 800999c:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800999e:	2500      	movs	r5, #0
 80099a0:	9503      	str	r5, [sp, #12]
 80099a2:	9202      	str	r2, [sp, #8]
 80099a4:	697a      	ldr	r2, [r7, #20]
 80099a6:	9201      	str	r2, [sp, #4]
 80099a8:	9300      	str	r3, [sp, #0]
 80099aa:	4623      	mov	r3, r4
 80099ac:	4602      	mov	r2, r0
 80099ae:	4807      	ldr	r0, [pc, #28]	; (80099cc <_Z8DrawJpegP13jpeg_draw_tag+0x11c>)
 80099b0:	f7f7 fa44 	bl	8000e3c <_ZN6Screen16WriteFrameBufferEttttPhmb>

	return 1;
 80099b4:	2301      	movs	r3, #1
}
 80099b6:	4618      	mov	r0, r3
 80099b8:	3728      	adds	r7, #40	; 0x28
 80099ba:	46bd      	mov	sp, r7
 80099bc:	bdb0      	pop	{r4, r5, r7, pc}
 80099be:	bf00      	nop
 80099c0:	2000000a 	.word	0x2000000a
 80099c4:	20008f80 	.word	0x20008f80
 80099c8:	20009f80 	.word	0x20009f80
 80099cc:	2000257c 	.word	0x2000257c

080099d0 <HAL_SPI_TxCpltCallback>:

extern "C"
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi){
 80099d0:	b480      	push	{r7}
 80099d2:	b083      	sub	sp, #12
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
	LCD.isBusy = false;
 80099d8:	4b04      	ldr	r3, [pc, #16]	; (80099ec <HAL_SPI_TxCpltCallback+0x1c>)
 80099da:	2200      	movs	r2, #0
 80099dc:	701a      	strb	r2, [r3, #0]
}
 80099de:	bf00      	nop
 80099e0:	370c      	adds	r7, #12
 80099e2:	46bd      	mov	sp, r7
 80099e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e8:	4770      	bx	lr
 80099ea:	bf00      	nop
 80099ec:	2000257c 	.word	0x2000257c

080099f0 <_Z41__static_initialization_and_destruction_0ii>:
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b082      	sub	sp, #8
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
 80099f8:	6039      	str	r1, [r7, #0]
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	2b01      	cmp	r3, #1
 80099fe:	d10b      	bne.n	8009a18 <_Z41__static_initialization_and_destruction_0ii+0x28>
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009a06:	4293      	cmp	r3, r2
 8009a08:	d106      	bne.n	8009a18 <_Z41__static_initialization_and_destruction_0ii+0x28>
Screen LCD(&hspi1);
 8009a0a:	4905      	ldr	r1, [pc, #20]	; (8009a20 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8009a0c:	4805      	ldr	r0, [pc, #20]	; (8009a24 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8009a0e:	f7ff fe9e 	bl	800974e <_ZN6ScreenC1EP19__SPI_HandleTypeDef>
Avi avi;
 8009a12:	4805      	ldr	r0, [pc, #20]	; (8009a28 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8009a14:	f7ff feb3 	bl	800977e <_ZN3AviC1Ev>
}
 8009a18:	bf00      	nop
 8009a1a:	3708      	adds	r7, #8
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	bd80      	pop	{r7, pc}
 8009a20:	20000188 	.word	0x20000188
 8009a24:	2000257c 	.word	0x2000257c
 8009a28:	20006b64 	.word	0x20006b64

08009a2c <_GLOBAL__sub_I_LCD>:
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	af00      	add	r7, sp, #0
 8009a30:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009a34:	2001      	movs	r0, #1
 8009a36:	f7ff ffdb 	bl	80099f0 <_Z41__static_initialization_and_destruction_0ii>
 8009a3a:	bd80      	pop	{r7, pc}

08009a3c <_ZN3Avi4InitEv>:
#include "aviparser.h"


bool Avi::Init(){
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b082      	sub	sp, #8
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&SDFatFS, SDPath, FA_READ);
 8009a44:	2201      	movs	r2, #1
 8009a46:	4909      	ldr	r1, [pc, #36]	; (8009a6c <_ZN3Avi4InitEv+0x30>)
 8009a48:	4809      	ldr	r0, [pc, #36]	; (8009a70 <_ZN3Avi4InitEv+0x34>)
 8009a4a:	f7fe ffe7 	bl	8008a1c <f_mount>
 8009a4e:	4603      	mov	r3, r0
 8009a50:	461a      	mov	r2, r3
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	701a      	strb	r2, [r3, #0]
	if(fresult == FR_OK){
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	781b      	ldrb	r3, [r3, #0]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d101      	bne.n	8009a62 <_ZN3Avi4InitEv+0x26>
		return true;
 8009a5e:	2301      	movs	r3, #1
 8009a60:	e000      	b.n	8009a64 <_ZN3Avi4InitEv+0x28>
	}
	return false;
 8009a62:	2300      	movs	r3, #0
}
 8009a64:	4618      	mov	r0, r3
 8009a66:	3708      	adds	r7, #8
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	bd80      	pop	{r7, pc}
 8009a6c:	200002d8 	.word	0x200002d8
 8009a70:	200002dc 	.word	0x200002dc

08009a74 <_ZN3Avi8getFrameEPhRi>:

bool Avi::getFrame(uint8_t *_buffer,int &_length){
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b088      	sub	sp, #32
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	60f8      	str	r0, [r7, #12]
 8009a7c:	60b9      	str	r1, [r7, #8]
 8009a7e:	607a      	str	r2, [r7, #4]
	UINT len;
	if(mMoviListLength == 0){
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	68db      	ldr	r3, [r3, #12]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d101      	bne.n	8009a8c <_ZN3Avi8getFrameEPhRi+0x18>
		return false;
 8009a88:	2300      	movs	r3, #0
 8009a8a:	e07c      	b.n	8009b86 <_ZN3Avi8getFrameEPhRi+0x112>
	}
	ChunkHeader header;
	while(mMoviListLength > 0){
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	68db      	ldr	r3, [r3, #12]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	dd77      	ble.n	8009b84 <_ZN3Avi8getFrameEPhRi+0x110>
		offset = f_tell(&SDFile);
 8009a94:	4b3e      	ldr	r3, [pc, #248]	; (8009b90 <_ZN3Avi8getFrameEPhRi+0x11c>)
 8009a96:	699b      	ldr	r3, [r3, #24]
 8009a98:	461a      	mov	r2, r3
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	611a      	str	r2, [r3, #16]
		readChunk(&header);
 8009a9e:	f107 0314 	add.w	r3, r7, #20
 8009aa2:	4619      	mov	r1, r3
 8009aa4:	68f8      	ldr	r0, [r7, #12]
 8009aa6:	f000 f877 	bl	8009b98 <_ZN3Avi9readChunkEPNS_11ChunkHeaderE>
		if(strncmp(header.id,"00dc",4) == 0){
 8009aaa:	f107 0314 	add.w	r3, r7, #20
 8009aae:	2204      	movs	r2, #4
 8009ab0:	4938      	ldr	r1, [pc, #224]	; (8009b94 <_ZN3Avi8getFrameEPhRi+0x120>)
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	f007 f9ae 	bl	8010e14 <strncmp>
 8009ab8:	4603      	mov	r3, r0
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d138      	bne.n	8009b30 <_ZN3Avi8getFrameEPhRi+0xbc>
			fresult = f_read(&SDFile,_buffer,header.size,&len);
 8009abe:	69bb      	ldr	r3, [r7, #24]
 8009ac0:	461a      	mov	r2, r3
 8009ac2:	f107 031c 	add.w	r3, r7, #28
 8009ac6:	68b9      	ldr	r1, [r7, #8]
 8009ac8:	4831      	ldr	r0, [pc, #196]	; (8009b90 <_ZN3Avi8getFrameEPhRi+0x11c>)
 8009aca:	f7ff f9b9 	bl	8008e40 <f_read>
 8009ace:	4603      	mov	r3, r0
 8009ad0:	461a      	mov	r2, r3
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	701a      	strb	r2, [r3, #0]
			_length = header.size;
 8009ad6:	69ba      	ldr	r2, [r7, #24]
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	601a      	str	r2, [r3, #0]
			mMoviListLength -= header.size;
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	68da      	ldr	r2, [r3, #12]
 8009ae0:	69bb      	ldr	r3, [r7, #24]
 8009ae2:	1ad2      	subs	r2, r2, r3
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	60da      	str	r2, [r3, #12]

			if(header.size %2 != 0){
 8009ae8:	69bb      	ldr	r3, [r7, #24]
 8009aea:	f003 0301 	and.w	r3, r3, #1
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d011      	beq.n	8009b16 <_ZN3Avi8getFrameEPhRi+0xa2>
				offset = f_tell(&SDFile) + 1;
 8009af2:	4b27      	ldr	r3, [pc, #156]	; (8009b90 <_ZN3Avi8getFrameEPhRi+0x11c>)
 8009af4:	699b      	ldr	r3, [r3, #24]
 8009af6:	3301      	adds	r3, #1
 8009af8:	461a      	mov	r2, r3
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	611a      	str	r2, [r3, #16]
				mMoviListLength --;
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	68db      	ldr	r3, [r3, #12]
 8009b02:	1e5a      	subs	r2, r3, #1
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	60da      	str	r2, [r3, #12]
				f_lseek(&SDFile, offset);
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	691b      	ldr	r3, [r3, #16]
 8009b0c:	4619      	mov	r1, r3
 8009b0e:	4820      	ldr	r0, [pc, #128]	; (8009b90 <_ZN3Avi8getFrameEPhRi+0x11c>)
 8009b10:	f7ff fb9d 	bl	800924e <f_lseek>
 8009b14:	e00a      	b.n	8009b2c <_ZN3Avi8getFrameEPhRi+0xb8>
			}
			else{
				offset = f_tell(&SDFile);
 8009b16:	4b1e      	ldr	r3, [pc, #120]	; (8009b90 <_ZN3Avi8getFrameEPhRi+0x11c>)
 8009b18:	699b      	ldr	r3, [r3, #24]
 8009b1a:	461a      	mov	r2, r3
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	611a      	str	r2, [r3, #16]
				f_lseek(&SDFile, offset);
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	691b      	ldr	r3, [r3, #16]
 8009b24:	4619      	mov	r1, r3
 8009b26:	481a      	ldr	r0, [pc, #104]	; (8009b90 <_ZN3Avi8getFrameEPhRi+0x11c>)
 8009b28:	f7ff fb91 	bl	800924e <f_lseek>
			}
			return true;
 8009b2c:	2301      	movs	r3, #1
 8009b2e:	e02a      	b.n	8009b86 <_ZN3Avi8getFrameEPhRi+0x112>
		}
		else if(header.size %2 !=0){
 8009b30:	69bb      	ldr	r3, [r7, #24]
 8009b32:	f003 0301 	and.w	r3, r3, #1
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d012      	beq.n	8009b60 <_ZN3Avi8getFrameEPhRi+0xec>
			offset = f_tell(&SDFile) + 1;
 8009b3a:	4b15      	ldr	r3, [pc, #84]	; (8009b90 <_ZN3Avi8getFrameEPhRi+0x11c>)
 8009b3c:	699b      	ldr	r3, [r3, #24]
 8009b3e:	3301      	adds	r3, #1
 8009b40:	461a      	mov	r2, r3
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	611a      	str	r2, [r3, #16]
			f_lseek(&SDFile, offset);
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	691b      	ldr	r3, [r3, #16]
 8009b4a:	4619      	mov	r1, r3
 8009b4c:	4810      	ldr	r0, [pc, #64]	; (8009b90 <_ZN3Avi8getFrameEPhRi+0x11c>)
 8009b4e:	f7ff fb7e 	bl	800924e <f_lseek>
			mMoviListLength -=header.size;
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	68da      	ldr	r2, [r3, #12]
 8009b56:	69bb      	ldr	r3, [r7, #24]
 8009b58:	1ad2      	subs	r2, r2, r3
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	60da      	str	r2, [r3, #12]
 8009b5e:	e795      	b.n	8009a8c <_ZN3Avi8getFrameEPhRi+0x18>
		}
		else{
			offset = f_tell(&SDFile);
 8009b60:	4b0b      	ldr	r3, [pc, #44]	; (8009b90 <_ZN3Avi8getFrameEPhRi+0x11c>)
 8009b62:	699b      	ldr	r3, [r3, #24]
 8009b64:	461a      	mov	r2, r3
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	611a      	str	r2, [r3, #16]
			f_lseek(&SDFile, offset);
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	691b      	ldr	r3, [r3, #16]
 8009b6e:	4619      	mov	r1, r3
 8009b70:	4807      	ldr	r0, [pc, #28]	; (8009b90 <_ZN3Avi8getFrameEPhRi+0x11c>)
 8009b72:	f7ff fb6c 	bl	800924e <f_lseek>
			mMoviListLength -=header.size;
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	68da      	ldr	r2, [r3, #12]
 8009b7a:	69bb      	ldr	r3, [r7, #24]
 8009b7c:	1ad2      	subs	r2, r2, r3
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	60da      	str	r2, [r3, #12]
	while(mMoviListLength > 0){
 8009b82:	e783      	b.n	8009a8c <_ZN3Avi8getFrameEPhRi+0x18>
		}
	}
	return false;
 8009b84:	2300      	movs	r3, #0

}
 8009b86:	4618      	mov	r0, r3
 8009b88:	3720      	adds	r7, #32
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	bd80      	pop	{r7, pc}
 8009b8e:	bf00      	nop
 8009b90:	20001310 	.word	0x20001310
 8009b94:	08010ec8 	.word	0x08010ec8

08009b98 <_ZN3Avi9readChunkEPNS_11ChunkHeaderE>:

void Avi::readChunk(ChunkHeader *header){
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b082      	sub	sp, #8
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
 8009ba0:	6039      	str	r1, [r7, #0]
		f_read(&SDFile,&header->id,4,&mybites);
 8009ba2:	6839      	ldr	r1, [r7, #0]
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	3304      	adds	r3, #4
 8009ba8:	2204      	movs	r2, #4
 8009baa:	4807      	ldr	r0, [pc, #28]	; (8009bc8 <_ZN3Avi9readChunkEPNS_11ChunkHeaderE+0x30>)
 8009bac:	f7ff f948 	bl	8008e40 <f_read>
		f_read(&SDFile,&header->size,4,&mybites);
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	1d19      	adds	r1, r3, #4
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	3304      	adds	r3, #4
 8009bb8:	2204      	movs	r2, #4
 8009bba:	4803      	ldr	r0, [pc, #12]	; (8009bc8 <_ZN3Avi9readChunkEPNS_11ChunkHeaderE+0x30>)
 8009bbc:	f7ff f940 	bl	8008e40 <f_read>
}
 8009bc0:	bf00      	nop
 8009bc2:	3708      	adds	r7, #8
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	bd80      	pop	{r7, pc}
 8009bc8:	20001310 	.word	0x20001310

08009bcc <_ZN3Avi10isMoviListEm>:

bool Avi::isMoviList(uint32_t size){
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b084      	sub	sp, #16
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
 8009bd4:	6039      	str	r1, [r7, #0]
	char type[4];
	f_read(&SDFile,type,4,&mybites);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	3304      	adds	r3, #4
 8009bda:	f107 010c 	add.w	r1, r7, #12
 8009bde:	2204      	movs	r2, #4
 8009be0:	4814      	ldr	r0, [pc, #80]	; (8009c34 <_ZN3Avi10isMoviListEm+0x68>)
 8009be2:	f7ff f92d 	bl	8008e40 <f_read>
	if(strncmp(type,"movi",4)==0){
 8009be6:	f107 030c 	add.w	r3, r7, #12
 8009bea:	2204      	movs	r2, #4
 8009bec:	4912      	ldr	r1, [pc, #72]	; (8009c38 <_ZN3Avi10isMoviListEm+0x6c>)
 8009bee:	4618      	mov	r0, r3
 8009bf0:	f007 f910 	bl	8010e14 <strncmp>
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d109      	bne.n	8009c0e <_ZN3Avi10isMoviListEm+0x42>
		mMoviListPosition = f_tell(&SDFile);
 8009bfa:	4b0e      	ldr	r3, [pc, #56]	; (8009c34 <_ZN3Avi10isMoviListEm+0x68>)
 8009bfc:	699b      	ldr	r3, [r3, #24]
 8009bfe:	461a      	mov	r2, r3
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	609a      	str	r2, [r3, #8]
		mMoviListLength = size;
 8009c04:	683a      	ldr	r2, [r7, #0]
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	60da      	str	r2, [r3, #12]
		return true;
 8009c0a:	2301      	movs	r3, #1
 8009c0c:	e00e      	b.n	8009c2c <_ZN3Avi10isMoviListEm+0x60>
	}
	else{
		offset = f_tell(&SDFile) + size - 4;
 8009c0e:	4b09      	ldr	r3, [pc, #36]	; (8009c34 <_ZN3Avi10isMoviListEm+0x68>)
 8009c10:	699a      	ldr	r2, [r3, #24]
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	4413      	add	r3, r2
 8009c16:	3b04      	subs	r3, #4
 8009c18:	461a      	mov	r2, r3
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	611a      	str	r2, [r3, #16]
		f_lseek(&SDFile, offset);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	691b      	ldr	r3, [r3, #16]
 8009c22:	4619      	mov	r1, r3
 8009c24:	4803      	ldr	r0, [pc, #12]	; (8009c34 <_ZN3Avi10isMoviListEm+0x68>)
 8009c26:	f7ff fb12 	bl	800924e <f_lseek>
	}
	return false;
 8009c2a:	2300      	movs	r3, #0
}
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	3710      	adds	r7, #16
 8009c30:	46bd      	mov	sp, r7
 8009c32:	bd80      	pop	{r7, pc}
 8009c34:	20001310 	.word	0x20001310
 8009c38:	08010ed0 	.word	0x08010ed0

08009c3c <_ZN3Avi8readMoviEPKc>:

bool Avi::readMovi(const char *filename){
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b086      	sub	sp, #24
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
 8009c44:	6039      	str	r1, [r7, #0]
	ChunkHeader header;
	if(f_open(&SDFile,filename,FA_READ) == FR_OK){
 8009c46:	2201      	movs	r2, #1
 8009c48:	6839      	ldr	r1, [r7, #0]
 8009c4a:	483b      	ldr	r0, [pc, #236]	; (8009d38 <_ZN3Avi8readMoviEPKc+0xfc>)
 8009c4c:	f7fe ff2c 	bl	8008aa8 <f_open>
 8009c50:	4603      	mov	r3, r0
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	bf0c      	ite	eq
 8009c56:	2301      	moveq	r3, #1
 8009c58:	2300      	movne	r3, #0
 8009c5a:	b2db      	uxtb	r3, r3
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d066      	beq.n	8009d2e <_ZN3Avi8readMoviEPKc+0xf2>
		readChunk(&header);
 8009c60:	f107 0310 	add.w	r3, r7, #16
 8009c64:	4619      	mov	r1, r3
 8009c66:	6878      	ldr	r0, [r7, #4]
 8009c68:	f7ff ff96 	bl	8009b98 <_ZN3Avi9readChunkEPNS_11ChunkHeaderE>
		if(strncmp(header.id,"RIFF",4) != 0){
 8009c6c:	f107 0310 	add.w	r3, r7, #16
 8009c70:	2204      	movs	r2, #4
 8009c72:	4932      	ldr	r1, [pc, #200]	; (8009d3c <_ZN3Avi8readMoviEPKc+0x100>)
 8009c74:	4618      	mov	r0, r3
 8009c76:	f007 f8cd 	bl	8010e14 <strncmp>
 8009c7a:	4603      	mov	r3, r0
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d001      	beq.n	8009c84 <_ZN3Avi8readMoviEPKc+0x48>
			return false;
 8009c80:	2300      	movs	r3, #0
 8009c82:	e055      	b.n	8009d30 <_ZN3Avi8readMoviEPKc+0xf4>
		}
		char type[4];
		f_read(&SDFile,&type,4,&mybites);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	3304      	adds	r3, #4
 8009c88:	f107 010c 	add.w	r1, r7, #12
 8009c8c:	2204      	movs	r2, #4
 8009c8e:	482a      	ldr	r0, [pc, #168]	; (8009d38 <_ZN3Avi8readMoviEPKc+0xfc>)
 8009c90:	f7ff f8d6 	bl	8008e40 <f_read>
		if(strncmp(type,"AVI ",4)!=0){
 8009c94:	f107 030c 	add.w	r3, r7, #12
 8009c98:	2204      	movs	r2, #4
 8009c9a:	4929      	ldr	r1, [pc, #164]	; (8009d40 <_ZN3Avi8readMoviEPKc+0x104>)
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	f007 f8b9 	bl	8010e14 <strncmp>
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d001      	beq.n	8009cac <_ZN3Avi8readMoviEPKc+0x70>
			return false;
 8009ca8:	2300      	movs	r3, #0
 8009caa:	e041      	b.n	8009d30 <_ZN3Avi8readMoviEPKc+0xf4>
		}

		while(!f_eof(&SDFile) && !f_error(&SDFile)){
 8009cac:	4b22      	ldr	r3, [pc, #136]	; (8009d38 <_ZN3Avi8readMoviEPKc+0xfc>)
 8009cae:	699a      	ldr	r2, [r3, #24]
 8009cb0:	4b21      	ldr	r3, [pc, #132]	; (8009d38 <_ZN3Avi8readMoviEPKc+0xfc>)
 8009cb2:	68db      	ldr	r3, [r3, #12]
 8009cb4:	429a      	cmp	r2, r3
 8009cb6:	d034      	beq.n	8009d22 <_ZN3Avi8readMoviEPKc+0xe6>
 8009cb8:	4b1f      	ldr	r3, [pc, #124]	; (8009d38 <_ZN3Avi8readMoviEPKc+0xfc>)
 8009cba:	7d5b      	ldrb	r3, [r3, #21]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d130      	bne.n	8009d22 <_ZN3Avi8readMoviEPKc+0xe6>
			readChunk(&header);
 8009cc0:	f107 0310 	add.w	r3, r7, #16
 8009cc4:	4619      	mov	r1, r3
 8009cc6:	6878      	ldr	r0, [r7, #4]
 8009cc8:	f7ff ff66 	bl	8009b98 <_ZN3Avi9readChunkEPNS_11ChunkHeaderE>
			if(f_eof(&SDFile) || f_error(&SDFile)){
 8009ccc:	4b1a      	ldr	r3, [pc, #104]	; (8009d38 <_ZN3Avi8readMoviEPKc+0xfc>)
 8009cce:	699a      	ldr	r2, [r3, #24]
 8009cd0:	4b19      	ldr	r3, [pc, #100]	; (8009d38 <_ZN3Avi8readMoviEPKc+0xfc>)
 8009cd2:	68db      	ldr	r3, [r3, #12]
 8009cd4:	429a      	cmp	r2, r3
 8009cd6:	d024      	beq.n	8009d22 <_ZN3Avi8readMoviEPKc+0xe6>
 8009cd8:	4b17      	ldr	r3, [pc, #92]	; (8009d38 <_ZN3Avi8readMoviEPKc+0xfc>)
 8009cda:	7d5b      	ldrb	r3, [r3, #21]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d120      	bne.n	8009d22 <_ZN3Avi8readMoviEPKc+0xe6>
				break;
			}
			if(strncmp(header.id,"LIST",4)==0){
 8009ce0:	f107 0310 	add.w	r3, r7, #16
 8009ce4:	2204      	movs	r2, #4
 8009ce6:	4917      	ldr	r1, [pc, #92]	; (8009d44 <_ZN3Avi8readMoviEPKc+0x108>)
 8009ce8:	4618      	mov	r0, r3
 8009cea:	f007 f893 	bl	8010e14 <strncmp>
 8009cee:	4603      	mov	r3, r0
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d108      	bne.n	8009d06 <_ZN3Avi8readMoviEPKc+0xca>
				if(isMoviList(header.size)){
 8009cf4:	697b      	ldr	r3, [r7, #20]
 8009cf6:	4619      	mov	r1, r3
 8009cf8:	6878      	ldr	r0, [r7, #4]
 8009cfa:	f7ff ff67 	bl	8009bcc <_ZN3Avi10isMoviListEm>
 8009cfe:	4603      	mov	r3, r0
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d0d3      	beq.n	8009cac <_ZN3Avi8readMoviEPKc+0x70>
					break;
 8009d04:	e00d      	b.n	8009d22 <_ZN3Avi8readMoviEPKc+0xe6>
				}
			}
			else{
				offset = f_tell(&SDFile) + header.size;
 8009d06:	4b0c      	ldr	r3, [pc, #48]	; (8009d38 <_ZN3Avi8readMoviEPKc+0xfc>)
 8009d08:	699b      	ldr	r3, [r3, #24]
 8009d0a:	697a      	ldr	r2, [r7, #20]
 8009d0c:	4413      	add	r3, r2
 8009d0e:	461a      	mov	r2, r3
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	611a      	str	r2, [r3, #16]
				f_lseek(&SDFile,offset);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	691b      	ldr	r3, [r3, #16]
 8009d18:	4619      	mov	r1, r3
 8009d1a:	4807      	ldr	r0, [pc, #28]	; (8009d38 <_ZN3Avi8readMoviEPKc+0xfc>)
 8009d1c:	f7ff fa97 	bl	800924e <f_lseek>
		while(!f_eof(&SDFile) && !f_error(&SDFile)){
 8009d20:	e7c4      	b.n	8009cac <_ZN3Avi8readMoviEPKc+0x70>
			}
		}
		if(mMoviListLength == 0){
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	68db      	ldr	r3, [r3, #12]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d101      	bne.n	8009d2e <_ZN3Avi8readMoviEPKc+0xf2>
			return false;
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	e000      	b.n	8009d30 <_ZN3Avi8readMoviEPKc+0xf4>
		}
	}
	return true;
 8009d2e:	2301      	movs	r3, #1
}
 8009d30:	4618      	mov	r0, r3
 8009d32:	3718      	adds	r7, #24
 8009d34:	46bd      	mov	sp, r7
 8009d36:	bd80      	pop	{r7, pc}
 8009d38:	20001310 	.word	0x20001310
 8009d3c:	08010ed8 	.word	0x08010ed8
 8009d40:	08010ee0 	.word	0x08010ee0
 8009d44:	08010ee8 	.word	0x08010ee8

08009d48 <_ZN3Avi5CloseEv>:

void Avi::Close()
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b082      	sub	sp, #8
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
	f_close(&SDFile);
 8009d50:	4803      	ldr	r0, [pc, #12]	; (8009d60 <_ZN3Avi5CloseEv+0x18>)
 8009d52:	f7ff fa52 	bl	80091fa <f_close>
}
 8009d56:	bf00      	nop
 8009d58:	3708      	adds	r7, #8
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	bd80      	pop	{r7, pc}
 8009d5e:	bf00      	nop
 8009d60:	20001310 	.word	0x20001310

08009d64 <_ZL7readRAMP13jpeg_file_tagPhl>:

//
// Helper functions for memory based images
//
static int32_t readRAM(JPEGFILE *pFile, uint8_t *pBuf, int32_t iLen)
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b086      	sub	sp, #24
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	60f8      	str	r0, [r7, #12]
 8009d6c:	60b9      	str	r1, [r7, #8]
 8009d6e:	607a      	str	r2, [r7, #4]
    int32_t iBytesRead;

    iBytesRead = iLen;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	617b      	str	r3, [r7, #20]
    if ((pFile->iSize - pFile->iPos) < iLen)
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	685a      	ldr	r2, [r3, #4]
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	1ad3      	subs	r3, r2, r3
 8009d7e:	687a      	ldr	r2, [r7, #4]
 8009d80:	429a      	cmp	r2, r3
 8009d82:	dd05      	ble.n	8009d90 <_ZL7readRAMP13jpeg_file_tagPhl+0x2c>
       iBytesRead = pFile->iSize - pFile->iPos;
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	685a      	ldr	r2, [r3, #4]
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	1ad3      	subs	r3, r2, r3
 8009d8e:	617b      	str	r3, [r7, #20]
    if (iBytesRead <= 0)
 8009d90:	697b      	ldr	r3, [r7, #20]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	dc01      	bgt.n	8009d9a <_ZL7readRAMP13jpeg_file_tagPhl+0x36>
       return 0;
 8009d96:	2300      	movs	r3, #0
 8009d98:	e010      	b.n	8009dbc <_ZL7readRAMP13jpeg_file_tagPhl+0x58>
    memcpy(pBuf, &pFile->pData[pFile->iPos], iBytesRead);
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	689b      	ldr	r3, [r3, #8]
 8009d9e:	68fa      	ldr	r2, [r7, #12]
 8009da0:	6812      	ldr	r2, [r2, #0]
 8009da2:	4413      	add	r3, r2
 8009da4:	697a      	ldr	r2, [r7, #20]
 8009da6:	4619      	mov	r1, r3
 8009da8:	68b8      	ldr	r0, [r7, #8]
 8009daa:	f007 f81d 	bl	8010de8 <memcpy>
    pFile->iPos += iBytesRead;
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	681a      	ldr	r2, [r3, #0]
 8009db2:	697b      	ldr	r3, [r7, #20]
 8009db4:	441a      	add	r2, r3
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	601a      	str	r2, [r3, #0]
    return iBytesRead;
 8009dba:	697b      	ldr	r3, [r7, #20]
} /* readRAM() */
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	3718      	adds	r7, #24
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	bd80      	pop	{r7, pc}

08009dc4 <_ZL7seekMemP13jpeg_file_tagl>:
    pFile->iPos += iBytesRead;
    return iBytesRead;
} /* readFLASH() */

static int32_t seekMem(JPEGFILE *pFile, int32_t iPosition)
{
 8009dc4:	b480      	push	{r7}
 8009dc6:	b083      	sub	sp, #12
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
 8009dcc:	6039      	str	r1, [r7, #0]
    if (iPosition < 0) iPosition = 0;
 8009dce:	683b      	ldr	r3, [r7, #0]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	da02      	bge.n	8009dda <_ZL7seekMemP13jpeg_file_tagl+0x16>
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	603b      	str	r3, [r7, #0]
 8009dd8:	e008      	b.n	8009dec <_ZL7seekMemP13jpeg_file_tagl+0x28>
    else if (iPosition >= pFile->iSize) iPosition = pFile->iSize-1;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	685b      	ldr	r3, [r3, #4]
 8009dde:	683a      	ldr	r2, [r7, #0]
 8009de0:	429a      	cmp	r2, r3
 8009de2:	db03      	blt.n	8009dec <_ZL7seekMemP13jpeg_file_tagl+0x28>
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	685b      	ldr	r3, [r3, #4]
 8009de8:	3b01      	subs	r3, #1
 8009dea:	603b      	str	r3, [r7, #0]
    pFile->iPos = iPosition;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	683a      	ldr	r2, [r7, #0]
 8009df0:	601a      	str	r2, [r3, #0]
    return iPosition;
 8009df2:	683b      	ldr	r3, [r7, #0]
} /* seekMem() */
 8009df4:	4618      	mov	r0, r3
 8009df6:	370c      	adds	r7, #12
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfe:	4770      	bx	lr

08009e00 <_ZL8JPEGInitP14jpeg_image_tag>:
// Initialize a JPEG file and callback access from a file on SD or memory
// returns 1 for success, 0 for failure
// Fills in the basic image info fields of the JPEGIMAGE structure
//
static int JPEGInit(JPEGIMAGE *pJPEG)
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b082      	sub	sp, #8
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
    return JPEGParseInfo(pJPEG, 0); // gather info for image
 8009e08:	2100      	movs	r1, #0
 8009e0a:	6878      	ldr	r0, [r7, #4]
 8009e0c:	f000 fd9c 	bl	800a948 <_ZL13JPEGParseInfoP14jpeg_image_tagi>
 8009e10:	4603      	mov	r3, r0
} /* JPEGInit() */
 8009e12:	4618      	mov	r0, r3
 8009e14:	3708      	adds	r7, #8
 8009e16:	46bd      	mov	sp, r7
 8009e18:	bd80      	pop	{r7, pc}

08009e1a <_ZL17JPEGGetHuffTablesPhiP14jpeg_image_tag>:
//
// Unpack the Huffman tables
//
static int JPEGGetHuffTables(uint8_t *pBuf, int iLen, JPEGIMAGE *pJPEG)
{
 8009e1a:	b480      	push	{r7}
 8009e1c:	b08b      	sub	sp, #44	; 0x2c
 8009e1e:	af00      	add	r7, sp, #0
 8009e20:	60f8      	str	r0, [r7, #12]
 8009e22:	60b9      	str	r1, [r7, #8]
 8009e24:	607a      	str	r2, [r7, #4]
    int i, j, iOffset, iTableOffset;
    uint8_t ucTable, *pHuffVals;
    
    iOffset = 0;
 8009e26:	2300      	movs	r3, #0
 8009e28:	61fb      	str	r3, [r7, #28]
    pHuffVals = (uint8_t *)pJPEG->usPixels; // temp holding area to save RAM
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009e30:	617b      	str	r3, [r7, #20]
    while (iLen > 17)  // while there are tables to copy (we may have combined more than 1 table together)
 8009e32:	68bb      	ldr	r3, [r7, #8]
 8009e34:	2b11      	cmp	r3, #17
 8009e36:	dd7b      	ble.n	8009f30 <_ZL17JPEGGetHuffTablesPhiP14jpeg_image_tag+0x116>
    {
        ucTable = pBuf[iOffset++]; // get table index
 8009e38:	69fb      	ldr	r3, [r7, #28]
 8009e3a:	1c5a      	adds	r2, r3, #1
 8009e3c:	61fa      	str	r2, [r7, #28]
 8009e3e:	461a      	mov	r2, r3
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	4413      	add	r3, r2
 8009e44:	781b      	ldrb	r3, [r3, #0]
 8009e46:	76fb      	strb	r3, [r7, #27]
        if (ucTable & 0x10) // convert AC offset of 0x10 into offset of 4
 8009e48:	7efb      	ldrb	r3, [r7, #27]
 8009e4a:	f003 0310 	and.w	r3, r3, #16
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d003      	beq.n	8009e5a <_ZL17JPEGGetHuffTablesPhiP14jpeg_image_tag+0x40>
            ucTable ^= 0x14;
 8009e52:	7efb      	ldrb	r3, [r7, #27]
 8009e54:	f083 0314 	eor.w	r3, r3, #20
 8009e58:	76fb      	strb	r3, [r7, #27]
        pJPEG->ucHuffTableUsed |= (1 << ucTable); // mark this table as being defined
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8009e60:	b25a      	sxtb	r2, r3
 8009e62:	7efb      	ldrb	r3, [r7, #27]
 8009e64:	2101      	movs	r1, #1
 8009e66:	fa01 f303 	lsl.w	r3, r1, r3
 8009e6a:	b25b      	sxtb	r3, r3
 8009e6c:	4313      	orrs	r3, r2
 8009e6e:	b25b      	sxtb	r3, r3
 8009e70:	b2da      	uxtb	r2, r3
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
        if (ucTable <= 7) // tables are 0-3, AC+DC
 8009e78:	7efb      	ldrb	r3, [r7, #27]
 8009e7a:	2b07      	cmp	r3, #7
 8009e7c:	d8d9      	bhi.n	8009e32 <_ZL17JPEGGetHuffTablesPhiP14jpeg_image_tag+0x18>
        {
            iTableOffset = ucTable * HUFF_TABLEN;
 8009e7e:	7efa      	ldrb	r2, [r7, #27]
 8009e80:	4613      	mov	r3, r2
 8009e82:	011b      	lsls	r3, r3, #4
 8009e84:	4413      	add	r3, r2
 8009e86:	011b      	lsls	r3, r3, #4
 8009e88:	4413      	add	r3, r2
 8009e8a:	613b      	str	r3, [r7, #16]
            j = 0; // total bits
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	623b      	str	r3, [r7, #32]
            for (i=0; i<16; i++)
 8009e90:	2300      	movs	r3, #0
 8009e92:	627b      	str	r3, [r7, #36]	; 0x24
 8009e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e96:	2b0f      	cmp	r3, #15
 8009e98:	dc19      	bgt.n	8009ece <_ZL17JPEGGetHuffTablesPhiP14jpeg_image_tag+0xb4>
            {
                j += pBuf[iOffset];
 8009e9a:	69fb      	ldr	r3, [r7, #28]
 8009e9c:	68fa      	ldr	r2, [r7, #12]
 8009e9e:	4413      	add	r3, r2
 8009ea0:	781b      	ldrb	r3, [r3, #0]
 8009ea2:	461a      	mov	r2, r3
 8009ea4:	6a3b      	ldr	r3, [r7, #32]
 8009ea6:	4413      	add	r3, r2
 8009ea8:	623b      	str	r3, [r7, #32]
                pHuffVals[iTableOffset+i] = pBuf[iOffset++];
 8009eaa:	69fb      	ldr	r3, [r7, #28]
 8009eac:	1c5a      	adds	r2, r3, #1
 8009eae:	61fa      	str	r2, [r7, #28]
 8009eb0:	461a      	mov	r2, r3
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	441a      	add	r2, r3
 8009eb6:	6939      	ldr	r1, [r7, #16]
 8009eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eba:	440b      	add	r3, r1
 8009ebc:	4619      	mov	r1, r3
 8009ebe:	697b      	ldr	r3, [r7, #20]
 8009ec0:	440b      	add	r3, r1
 8009ec2:	7812      	ldrb	r2, [r2, #0]
 8009ec4:	701a      	strb	r2, [r3, #0]
            for (i=0; i<16; i++)
 8009ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ec8:	3301      	adds	r3, #1
 8009eca:	627b      	str	r3, [r7, #36]	; 0x24
 8009ecc:	e7e2      	b.n	8009e94 <_ZL17JPEGGetHuffTablesPhiP14jpeg_image_tag+0x7a>
            }
            iLen -= 17; // subtract length of bit lengths
 8009ece:	68bb      	ldr	r3, [r7, #8]
 8009ed0:	3b11      	subs	r3, #17
 8009ed2:	60bb      	str	r3, [r7, #8]
            if (j == 0 || j > 256 || j > iLen) // bogus bit lengths
 8009ed4:	6a3b      	ldr	r3, [r7, #32]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d007      	beq.n	8009eea <_ZL17JPEGGetHuffTablesPhiP14jpeg_image_tag+0xd0>
 8009eda:	6a3b      	ldr	r3, [r7, #32]
 8009edc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ee0:	dc03      	bgt.n	8009eea <_ZL17JPEGGetHuffTablesPhiP14jpeg_image_tag+0xd0>
 8009ee2:	6a3a      	ldr	r2, [r7, #32]
 8009ee4:	68bb      	ldr	r3, [r7, #8]
 8009ee6:	429a      	cmp	r2, r3
 8009ee8:	dd02      	ble.n	8009ef0 <_ZL17JPEGGetHuffTablesPhiP14jpeg_image_tag+0xd6>
            {
                return -1;
 8009eea:	f04f 33ff 	mov.w	r3, #4294967295
 8009eee:	e020      	b.n	8009f32 <_ZL17JPEGGetHuffTablesPhiP14jpeg_image_tag+0x118>
            }
            iTableOffset += 16;
 8009ef0:	693b      	ldr	r3, [r7, #16]
 8009ef2:	3310      	adds	r3, #16
 8009ef4:	613b      	str	r3, [r7, #16]
            for (i=0; i<j; i++)
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	627b      	str	r3, [r7, #36]	; 0x24
 8009efa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009efc:	6a3b      	ldr	r3, [r7, #32]
 8009efe:	429a      	cmp	r2, r3
 8009f00:	da11      	bge.n	8009f26 <_ZL17JPEGGetHuffTablesPhiP14jpeg_image_tag+0x10c>
            {  // copy huffman table
                pHuffVals[iTableOffset+i] = pBuf[iOffset++];
 8009f02:	69fb      	ldr	r3, [r7, #28]
 8009f04:	1c5a      	adds	r2, r3, #1
 8009f06:	61fa      	str	r2, [r7, #28]
 8009f08:	461a      	mov	r2, r3
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	441a      	add	r2, r3
 8009f0e:	6939      	ldr	r1, [r7, #16]
 8009f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f12:	440b      	add	r3, r1
 8009f14:	4619      	mov	r1, r3
 8009f16:	697b      	ldr	r3, [r7, #20]
 8009f18:	440b      	add	r3, r1
 8009f1a:	7812      	ldrb	r2, [r2, #0]
 8009f1c:	701a      	strb	r2, [r3, #0]
            for (i=0; i<j; i++)
 8009f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f20:	3301      	adds	r3, #1
 8009f22:	627b      	str	r3, [r7, #36]	; 0x24
 8009f24:	e7e9      	b.n	8009efa <_ZL17JPEGGetHuffTablesPhiP14jpeg_image_tag+0xe0>
            }
            iLen -= j;
 8009f26:	68ba      	ldr	r2, [r7, #8]
 8009f28:	6a3b      	ldr	r3, [r7, #32]
 8009f2a:	1ad3      	subs	r3, r2, r3
 8009f2c:	60bb      	str	r3, [r7, #8]
    while (iLen > 17)  // while there are tables to copy (we may have combined more than 1 table together)
 8009f2e:	e780      	b.n	8009e32 <_ZL17JPEGGetHuffTablesPhiP14jpeg_image_tag+0x18>
        }
    }
    return 0;
 8009f30:	2300      	movs	r3, #0
} /* JPEGGetHuffTables() */
 8009f32:	4618      	mov	r0, r3
 8009f34:	372c      	adds	r7, #44	; 0x2c
 8009f36:	46bd      	mov	sp, r7
 8009f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3c:	4770      	bx	lr

08009f3e <_ZL18JPEGMakeHuffTablesP14jpeg_image_tagi>:
//
// Expand the Huffman tables for fast decoding
// returns 1 for success, 0 for failure
//
static int JPEGMakeHuffTables(JPEGIMAGE *pJPEG, int bThumbnail)
{
 8009f3e:	b580      	push	{r7, lr}
 8009f40:	b0a0      	sub	sp, #128	; 0x80
 8009f42:	af00      	add	r7, sp, #0
 8009f44:	6078      	str	r0, [r7, #4]
 8009f46:	6039      	str	r1, [r7, #0]
    int cc; // code
    uint8_t *p, *pBits, ucCode;
    int iMaxLength, iMaxMask;
    int iTablesUsed;
    
    iTablesUsed = 0;
 8009f48:	2300      	movs	r3, #0
 8009f4a:	64bb      	str	r3, [r7, #72]	; 0x48
    pHuffVals = (uint8_t *)pJPEG->usPixels;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009f52:	63bb      	str	r3, [r7, #56]	; 0x38
    for (j=0; j<4; j++)
 8009f54:	2300      	movs	r3, #0
 8009f56:	677b      	str	r3, [r7, #116]	; 0x74
 8009f58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009f5a:	2b03      	cmp	r3, #3
 8009f5c:	dc11      	bgt.n	8009f82 <_ZL18JPEGMakeHuffTablesP14jpeg_image_tagi+0x44>
    {
        if (pJPEG->ucHuffTableUsed & (1 << j))
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8009f64:	461a      	mov	r2, r3
 8009f66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009f68:	fa42 f303 	asr.w	r3, r2, r3
 8009f6c:	f003 0301 	and.w	r3, r3, #1
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d002      	beq.n	8009f7a <_ZL18JPEGMakeHuffTablesP14jpeg_image_tagi+0x3c>
            iTablesUsed++;
 8009f74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f76:	3301      	adds	r3, #1
 8009f78:	64bb      	str	r3, [r7, #72]	; 0x48
    for (j=0; j<4; j++)
 8009f7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009f7c:	3301      	adds	r3, #1
 8009f7e:	677b      	str	r3, [r7, #116]	; 0x74
 8009f80:	e7ea      	b.n	8009f58 <_ZL18JPEGMakeHuffTablesP14jpeg_image_tagi+0x1a>
    }
    // first do DC components (up to 4 tables of 12-bit codes)
    // we can save time and memory for the DC codes by knowing that there exist short codes (<= 6 bits)
    // and long codes (>6 bits, but the first 5 bits are 1's).  This allows us to create 2 tables: a 6-bit and 7 or 8-bit
    // to handle any DC codes
    iMaxLength = 12; // assume DC codes can be 12-bits
 8009f82:	230c      	movs	r3, #12
 8009f84:	637b      	str	r3, [r7, #52]	; 0x34
    iMaxMask = 0x7f; // lower 7 bits after truncate 5 leading 1's
 8009f86:	237f      	movs	r3, #127	; 0x7f
 8009f88:	633b      	str	r3, [r7, #48]	; 0x30
    for (iTable = 0; iTable < 4; iTable++)
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009f8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f90:	2b03      	cmp	r3, #3
 8009f92:	f300 810f 	bgt.w	800a1b4 <_ZL18JPEGMakeHuffTablesP14jpeg_image_tagi+0x276>
    {
        if (pJPEG->ucHuffTableUsed & (1 << iTable))
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8009f9c:	461a      	mov	r2, r3
 8009f9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009fa0:	fa42 f303 	asr.w	r3, r2, r3
 8009fa4:	f003 0301 	and.w	r3, r3, #1
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	f000 80ff 	beq.w	800a1ac <_ZL18JPEGMakeHuffTablesP14jpeg_image_tagi+0x26e>
        {
            //         pJPEG->huffdcFast[iTable] = (int *)PILIOAlloc(0x180); // short table = 128 bytes, long table = 256 bytes
            pucShort = &pJPEG->ucHuffDC[iTable*DC_TABLE_SIZE];
 8009fae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009fb0:	029b      	lsls	r3, r3, #10
 8009fb2:	f503 53ee 	add.w	r3, r3, #7616	; 0x1dc0
 8009fb6:	3318      	adds	r3, #24
 8009fb8:	687a      	ldr	r2, [r7, #4]
 8009fba:	4413      	add	r3, r2
 8009fbc:	3304      	adds	r3, #4
 8009fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
            //         pJPEG->huffdc[iTable] = pJPEG->huffdcFast[iTable] + 0x20; // 0x20 longs = 128 bytes
            pucLong = &pJPEG->ucHuffDC[iTable*DC_TABLE_SIZE + 128];
 8009fc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009fc2:	029b      	lsls	r3, r3, #10
 8009fc4:	3380      	adds	r3, #128	; 0x80
 8009fc6:	f503 53ee 	add.w	r3, r3, #7616	; 0x1dc0
 8009fca:	3318      	adds	r3, #24
 8009fcc:	687a      	ldr	r2, [r7, #4]
 8009fce:	4413      	add	r3, r2
 8009fd0:	3304      	adds	r3, #4
 8009fd2:	62bb      	str	r3, [r7, #40]	; 0x28
            pBits = &pHuffVals[iTable * HUFF_TABLEN];
 8009fd4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009fd6:	4613      	mov	r3, r2
 8009fd8:	011b      	lsls	r3, r3, #4
 8009fda:	4413      	add	r3, r2
 8009fdc:	011b      	lsls	r3, r3, #4
 8009fde:	4413      	add	r3, r2
 8009fe0:	461a      	mov	r2, r3
 8009fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fe4:	4413      	add	r3, r2
 8009fe6:	653b      	str	r3, [r7, #80]	; 0x50
            p = pBits;
 8009fe8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009fea:	657b      	str	r3, [r7, #84]	; 0x54
            p += 16; // point to bit data
 8009fec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009fee:	3310      	adds	r3, #16
 8009ff0:	657b      	str	r3, [r7, #84]	; 0x54
            cc = 0; // start with a code of 0
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	65bb      	str	r3, [r7, #88]	; 0x58
            for (iBitNum = 1; iBitNum <= 16; iBitNum++)
 8009ff6:	2301      	movs	r3, #1
 8009ff8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009ffa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009ffc:	2b10      	cmp	r3, #16
 8009ffe:	f300 80d5 	bgt.w	800a1ac <_ZL18JPEGMakeHuffTablesP14jpeg_image_tagi+0x26e>
            {
                iLen = *pBits++; // get number of codes for this bit length
 800a002:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a004:	1c5a      	adds	r2, r3, #1
 800a006:	653a      	str	r2, [r7, #80]	; 0x50
 800a008:	781b      	ldrb	r3, [r3, #0]
 800a00a:	673b      	str	r3, [r7, #112]	; 0x70
                if (iBitNum > iMaxLength && iLen > 0) // we can't handle codes longer a certain length
 800a00c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a00e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a010:	429a      	cmp	r2, r3
 800a012:	dd04      	ble.n	800a01e <_ZL18JPEGMakeHuffTablesP14jpeg_image_tagi+0xe0>
 800a014:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a016:	2b00      	cmp	r3, #0
 800a018:	dd01      	ble.n	800a01e <_ZL18JPEGMakeHuffTablesP14jpeg_image_tagi+0xe0>
                {
                    return 0;
 800a01a:	2300      	movs	r3, #0
 800a01c:	e1a0      	b.n	800a360 <_ZL18JPEGMakeHuffTablesP14jpeg_image_tagi+0x422>
                }
                while (iLen)
 800a01e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a020:	2b00      	cmp	r3, #0
 800a022:	f000 80bc 	beq.w	800a19e <_ZL18JPEGMakeHuffTablesP14jpeg_image_tagi+0x260>
                {
                    //               if (iBitNum > 6) // do long table
                    if ((cc >> (iBitNum-5)) == 0x1f) // first 5 bits are 1 - use long table
 800a026:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a028:	3b05      	subs	r3, #5
 800a02a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a02c:	fa42 f303 	asr.w	r3, r2, r3
 800a030:	2b1f      	cmp	r3, #31
 800a032:	d110      	bne.n	800a056 <_ZL18JPEGMakeHuffTablesP14jpeg_image_tagi+0x118>
                    {
                        count = iMaxLength - iBitNum;
 800a034:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a036:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a038:	1ad3      	subs	r3, r2, r3
 800a03a:	67bb      	str	r3, [r7, #120]	; 0x78
                        codestart = cc << count;
 800a03c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a03e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a040:	fa02 f303 	lsl.w	r3, r2, r3
 800a044:	627b      	str	r3, [r7, #36]	; 0x24
                        pucTable = &pucLong[codestart & iMaxMask]; // use lower 7/8 bits of code
 800a046:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a04a:	4013      	ands	r3, r2
 800a04c:	461a      	mov	r2, r3
 800a04e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a050:	4413      	add	r3, r2
 800a052:	667b      	str	r3, [r7, #100]	; 0x64
 800a054:	e011      	b.n	800a07a <_ZL18JPEGMakeHuffTablesP14jpeg_image_tagi+0x13c>
                    }
                    else // do short table
                    {
                        count = 6 - iBitNum;
 800a056:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a058:	f1c3 0306 	rsb	r3, r3, #6
 800a05c:	67bb      	str	r3, [r7, #120]	; 0x78
                        if (count < 0)
 800a05e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a060:	2b00      	cmp	r3, #0
 800a062:	da01      	bge.n	800a068 <_ZL18JPEGMakeHuffTablesP14jpeg_image_tagi+0x12a>
                            return 0; // DEBUG - something went wrong
 800a064:	2300      	movs	r3, #0
 800a066:	e17b      	b.n	800a360 <_ZL18JPEGMakeHuffTablesP14jpeg_image_tagi+0x422>
                        codestart = cc << count;
 800a068:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a06a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a06c:	fa02 f303 	lsl.w	r3, r2, r3
 800a070:	627b      	str	r3, [r7, #36]	; 0x24
                        pucTable = &pucShort[codestart];
 800a072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a074:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a076:	4413      	add	r3, r2
 800a078:	667b      	str	r3, [r7, #100]	; 0x64
                    }
                    ucCode = *p++;  // get actual huffman code
 800a07a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a07c:	1c5a      	adds	r2, r3, #1
 800a07e:	657a      	str	r2, [r7, #84]	; 0x54
 800a080:	781b      	ldrb	r3, [r3, #0]
 800a082:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                    // does precalculating the DC value save time on ARM?
#ifndef USE_ARM_ASM
                    if (ucCode != 0 && (ucCode + iBitNum) <= 6 && pJPEG->ucMode != 0xc2) // we can fit the magnitude value in the code lookup (not for progressive)
 800a086:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d061      	beq.n	800a152 <_ZL18JPEGMakeHuffTablesP14jpeg_image_tagi+0x214>
 800a08e:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800a092:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a094:	4413      	add	r3, r2
 800a096:	2b06      	cmp	r3, #6
 800a098:	dc5b      	bgt.n	800a152 <_ZL18JPEGMakeHuffTablesP14jpeg_image_tagi+0x214>
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a0a0:	2bc2      	cmp	r3, #194	; 0xc2
 800a0a2:	d056      	beq.n	800a152 <_ZL18JPEGMakeHuffTablesP14jpeg_image_tagi+0x214>
                    {
                        int k, iLoop;
                        unsigned char ucCoeff;
                        unsigned char *d = &pucTable[512];
 800a0a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a0a6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800a0aa:	63fb      	str	r3, [r7, #60]	; 0x3c
                        unsigned char ucMag = ucCode;
 800a0ac:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a0b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                        ucCode |= ((iBitNum+ucCode) << 4); // add magnitude bits to length
 800a0b4:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800a0b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a0ba:	4413      	add	r3, r2
 800a0bc:	011b      	lsls	r3, r3, #4
 800a0be:	b25a      	sxtb	r2, r3
 800a0c0:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800a0c4:	4313      	orrs	r3, r2
 800a0c6:	b25b      	sxtb	r3, r3
 800a0c8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                        repeat = 1<<ucMag;
 800a0cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a0d0:	2201      	movs	r2, #1
 800a0d2:	fa02 f303 	lsl.w	r3, r2, r3
 800a0d6:	61fb      	str	r3, [r7, #28]
                        iLoop = 1<<(count-ucMag);
 800a0d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a0dc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a0de:	1ad3      	subs	r3, r2, r3
 800a0e0:	2201      	movs	r2, #1
 800a0e2:	fa02 f303 	lsl.w	r3, r2, r3
 800a0e6:	61bb      	str	r3, [r7, #24]
                        for (j=0; j<repeat; j++)
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	677b      	str	r3, [r7, #116]	; 0x74
 800a0ec:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a0ee:	69fb      	ldr	r3, [r7, #28]
 800a0f0:	429a      	cmp	r2, r3
 800a0f2:	da38      	bge.n	800a166 <_ZL18JPEGMakeHuffTablesP14jpeg_image_tagi+0x228>
                        { // calcuate the magnitude coeff already
                            if (j & 1<<(ucMag-1)) // positive number
 800a0f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a0f8:	3b01      	subs	r3, #1
 800a0fa:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a0fc:	fa42 f303 	asr.w	r3, r2, r3
 800a100:	f003 0301 	and.w	r3, r3, #1
 800a104:	2b00      	cmp	r3, #0
 800a106:	d003      	beq.n	800a110 <_ZL18JPEGMakeHuffTablesP14jpeg_image_tagi+0x1d2>
                                ucCoeff = (unsigned char)j;
 800a108:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a10a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a10e:	e00c      	b.n	800a12a <_ZL18JPEGMakeHuffTablesP14jpeg_image_tagi+0x1ec>
                            else // negative number
                                ucCoeff = (unsigned char)(j - ((1<<ucMag)-1));
 800a110:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a112:	b2da      	uxtb	r2, r3
 800a114:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a118:	2101      	movs	r1, #1
 800a11a:	fa01 f303 	lsl.w	r3, r1, r3
 800a11e:	b2db      	uxtb	r3, r3
 800a120:	1ad3      	subs	r3, r2, r3
 800a122:	b2db      	uxtb	r3, r3
 800a124:	3301      	adds	r3, #1
 800a126:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
                            for (k=0; k<iLoop; k++)
 800a12a:	2300      	movs	r3, #0
 800a12c:	647b      	str	r3, [r7, #68]	; 0x44
 800a12e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a130:	69bb      	ldr	r3, [r7, #24]
 800a132:	429a      	cmp	r2, r3
 800a134:	da09      	bge.n	800a14a <_ZL18JPEGMakeHuffTablesP14jpeg_image_tagi+0x20c>
                            {
                                *d++ = ucCoeff;
 800a136:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a138:	1c5a      	adds	r2, r3, #1
 800a13a:	63fa      	str	r2, [r7, #60]	; 0x3c
 800a13c:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 800a140:	701a      	strb	r2, [r3, #0]
                            for (k=0; k<iLoop; k++)
 800a142:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a144:	3301      	adds	r3, #1
 800a146:	647b      	str	r3, [r7, #68]	; 0x44
 800a148:	e7f1      	b.n	800a12e <_ZL18JPEGMakeHuffTablesP14jpeg_image_tagi+0x1f0>
                        for (j=0; j<repeat; j++)
 800a14a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a14c:	3301      	adds	r3, #1
 800a14e:	677b      	str	r3, [r7, #116]	; 0x74
 800a150:	e7cc      	b.n	800a0ec <_ZL18JPEGMakeHuffTablesP14jpeg_image_tagi+0x1ae>
                        } // for j
                    }
#endif
                    else
                    {
                        ucCode |= (iBitNum << 4);
 800a152:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a154:	011b      	lsls	r3, r3, #4
 800a156:	b25a      	sxtb	r2, r3
 800a158:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800a15c:	4313      	orrs	r3, r2
 800a15e:	b25b      	sxtb	r3, r3
 800a160:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800a164:	e000      	b.n	800a168 <_ZL18JPEGMakeHuffTablesP14jpeg_image_tagi+0x22a>
                        } // for j
 800a166:	bf00      	nop
                    }
                    if (count) // do it as dwords to save time
 800a168:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d00c      	beq.n	800a188 <_ZL18JPEGMakeHuffTablesP14jpeg_image_tagi+0x24a>
                    {
                        repeat = (1<<count);
 800a16e:	2201      	movs	r2, #1
 800a170:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a172:	fa02 f303 	lsl.w	r3, r2, r3
 800a176:	61fb      	str	r3, [r7, #28]
                        memset(pucTable, ucCode, repeat);
 800a178:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a17c:	69fa      	ldr	r2, [r7, #28]
 800a17e:	4619      	mov	r1, r3
 800a180:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800a182:	f006 fe3f 	bl	8010e04 <memset>
 800a186:	e003      	b.n	800a190 <_ZL18JPEGMakeHuffTablesP14jpeg_image_tagi+0x252>
                        //                  for (j=0; j<repeat; j++)
                        //                     *pLongTable++ = ul;
                    }
                    else
                    {
                        pucTable[0] = ucCode;
 800a188:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a18a:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800a18e:	701a      	strb	r2, [r3, #0]
                    }
                    cc++;
 800a190:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a192:	3301      	adds	r3, #1
 800a194:	65bb      	str	r3, [r7, #88]	; 0x58
                    iLen--;
 800a196:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a198:	3b01      	subs	r3, #1
 800a19a:	673b      	str	r3, [r7, #112]	; 0x70
                while (iLen)
 800a19c:	e73f      	b.n	800a01e <_ZL18JPEGMakeHuffTablesP14jpeg_image_tagi+0xe0>
                }
                cc <<= 1;
 800a19e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a1a0:	005b      	lsls	r3, r3, #1
 800a1a2:	65bb      	str	r3, [r7, #88]	; 0x58
            for (iBitNum = 1; iBitNum <= 16; iBitNum++)
 800a1a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a1a6:	3301      	adds	r3, #1
 800a1a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a1aa:	e726      	b.n	8009ffa <_ZL18JPEGMakeHuffTablesP14jpeg_image_tagi+0xbc>
    for (iTable = 0; iTable < 4; iTable++)
 800a1ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a1ae:	3301      	adds	r3, #1
 800a1b0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a1b2:	e6ec      	b.n	8009f8e <_ZL18JPEGMakeHuffTablesP14jpeg_image_tagi+0x50>
            }
        } // if table defined
    }
    // now do AC components (up to 4 tables of 16-bit codes)
    // We split the codes into a short table (9 bits or less) and a long table (first 5 bits are 1)
    for (iTable = 0; iTable < 4; iTable++)
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a1b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a1ba:	2b03      	cmp	r3, #3
 800a1bc:	f300 80cf 	bgt.w	800a35e <_ZL18JPEGMakeHuffTablesP14jpeg_image_tagi+0x420>
    {
        if (pJPEG->ucHuffTableUsed & (1 << (iTable+4)))  // if this table is defined
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800a1c6:	461a      	mov	r2, r3
 800a1c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a1ca:	3304      	adds	r3, #4
 800a1cc:	fa42 f303 	asr.w	r3, r2, r3
 800a1d0:	f003 0301 	and.w	r3, r3, #1
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	f000 80be 	beq.w	800a356 <_ZL18JPEGMakeHuffTablesP14jpeg_image_tagi+0x418>
        {
            pBits = &pHuffVals[(iTable+4) * HUFF_TABLEN];
 800a1da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a1dc:	1d1a      	adds	r2, r3, #4
 800a1de:	4613      	mov	r3, r2
 800a1e0:	011b      	lsls	r3, r3, #4
 800a1e2:	4413      	add	r3, r2
 800a1e4:	011b      	lsls	r3, r3, #4
 800a1e6:	4413      	add	r3, r2
 800a1e8:	461a      	mov	r2, r3
 800a1ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1ec:	4413      	add	r3, r2
 800a1ee:	653b      	str	r3, [r7, #80]	; 0x50
            p = pBits;
 800a1f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a1f2:	657b      	str	r3, [r7, #84]	; 0x54
            p += 16; // point to bit data
 800a1f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a1f6:	3310      	adds	r3, #16
 800a1f8:	657b      	str	r3, [r7, #84]	; 0x54
            if (iTable * HUFF11SIZE >= sizeof(pJPEG->usHuffAC) / 2)
 800a1fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a1fc:	02db      	lsls	r3, r3, #11
 800a1fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a202:	d301      	bcc.n	800a208 <_ZL18JPEGMakeHuffTablesP14jpeg_image_tagi+0x2ca>
                return 0;
 800a204:	2300      	movs	r3, #0
 800a206:	e0ab      	b.n	800a360 <_ZL18JPEGMakeHuffTablesP14jpeg_image_tagi+0x422>
            pShort = &pJPEG->usHuffAC[iTable*HUFF11SIZE];
 800a208:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a20a:	02db      	lsls	r3, r3, #11
 800a20c:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 800a210:	330c      	adds	r3, #12
 800a212:	005b      	lsls	r3, r3, #1
 800a214:	687a      	ldr	r2, [r7, #4]
 800a216:	4413      	add	r3, r2
 800a218:	3304      	adds	r3, #4
 800a21a:	617b      	str	r3, [r7, #20]
            pLong = &pJPEG->usHuffAC[iTable*HUFF11SIZE + 1024];
 800a21c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a21e:	02db      	lsls	r3, r3, #11
 800a220:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a224:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 800a228:	330c      	adds	r3, #12
 800a22a:	005b      	lsls	r3, r3, #1
 800a22c:	687a      	ldr	r2, [r7, #4]
 800a22e:	4413      	add	r3, r2
 800a230:	3304      	adds	r3, #4
 800a232:	613b      	str	r3, [r7, #16]
            cc = 0; // start with a code of 0
 800a234:	2300      	movs	r3, #0
 800a236:	65bb      	str	r3, [r7, #88]	; 0x58
            // construct the decode table
            for (iBitNum = 1; iBitNum <= 16; iBitNum++)
 800a238:	2301      	movs	r3, #1
 800a23a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a23c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a23e:	2b10      	cmp	r3, #16
 800a240:	f300 8089 	bgt.w	800a356 <_ZL18JPEGMakeHuffTablesP14jpeg_image_tagi+0x418>
            {
                iLen = *pBits++; // get number of codes for this bit length
 800a244:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a246:	1c5a      	adds	r2, r3, #1
 800a248:	653a      	str	r2, [r7, #80]	; 0x50
 800a24a:	781b      	ldrb	r3, [r3, #0]
 800a24c:	673b      	str	r3, [r7, #112]	; 0x70
                while (iLen)
 800a24e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a250:	2b00      	cmp	r3, #0
 800a252:	d079      	beq.n	800a348 <_ZL18JPEGMakeHuffTablesP14jpeg_image_tagi+0x40a>
                {
                    if ((cc >> (iBitNum-6)) == 0x3f) // first 6 bits are 1 - use long table
 800a254:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a256:	3b06      	subs	r3, #6
 800a258:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a25a:	fa42 f303 	asr.w	r3, r2, r3
 800a25e:	2b3f      	cmp	r3, #63	; 0x3f
 800a260:	d110      	bne.n	800a284 <_ZL18JPEGMakeHuffTablesP14jpeg_image_tagi+0x346>
                    {
                        count = 16 - iBitNum;
 800a262:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a264:	f1c3 0310 	rsb	r3, r3, #16
 800a268:	67bb      	str	r3, [r7, #120]	; 0x78
                        codestart = cc << count;
 800a26a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a26c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a26e:	fa02 f303 	lsl.w	r3, r2, r3
 800a272:	627b      	str	r3, [r7, #36]	; 0x24
                        pTable = &pLong[codestart & 0x3ff]; // use lower 10 bits of code
 800a274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a276:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a27a:	005b      	lsls	r3, r3, #1
 800a27c:	693a      	ldr	r2, [r7, #16]
 800a27e:	4413      	add	r3, r2
 800a280:	66bb      	str	r3, [r7, #104]	; 0x68
 800a282:	e01b      	b.n	800a2bc <_ZL18JPEGMakeHuffTablesP14jpeg_image_tagi+0x37e>
                    }
                    else
                    {
                        count = 10 - iBitNum;
 800a284:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a286:	f1c3 030a 	rsb	r3, r3, #10
 800a28a:	67bb      	str	r3, [r7, #120]	; 0x78
                        if (count < 0) // an 11/12-bit? code - that doesn't fit our optimized scheme, see if we can do a bigger table version
 800a28c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a28e:	2b00      	cmp	r3, #0
 800a290:	da0a      	bge.n	800a2a8 <_ZL18JPEGMakeHuffTablesP14jpeg_image_tagi+0x36a>
                        {
                            if (count == -1 && iTablesUsed <= 4) // we need to create "slow" tables
 800a292:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a294:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a298:	d104      	bne.n	800a2a4 <_ZL18JPEGMakeHuffTablesP14jpeg_image_tagi+0x366>
 800a29a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a29c:	2b04      	cmp	r3, #4
 800a29e:	dc01      	bgt.n	800a2a4 <_ZL18JPEGMakeHuffTablesP14jpeg_image_tagi+0x366>
                            { // DEBUG
//                                j = JPEGMakeHuffTables_Slow(pJPEG, bThumbnail);
                                return 0;
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	e05d      	b.n	800a360 <_ZL18JPEGMakeHuffTablesP14jpeg_image_tagi+0x422>
                            }
                            else
                                return 0; // DEBUG - fatal error, more than 2 big tables we currently don't support
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	e05b      	b.n	800a360 <_ZL18JPEGMakeHuffTablesP14jpeg_image_tagi+0x422>
                        }
                        codestart = cc << count;
 800a2a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a2aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a2ac:	fa02 f303 	lsl.w	r3, r2, r3
 800a2b0:	627b      	str	r3, [r7, #36]	; 0x24
                        pTable = &pShort[codestart]; // 10 bits or shorter
 800a2b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2b4:	005b      	lsls	r3, r3, #1
 800a2b6:	697a      	ldr	r2, [r7, #20]
 800a2b8:	4413      	add	r3, r2
 800a2ba:	66bb      	str	r3, [r7, #104]	; 0x68
                    }
                    code = *p++;  // get actual huffman code
 800a2bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a2be:	1c5a      	adds	r2, r3, #1
 800a2c0:	657a      	str	r2, [r7, #84]	; 0x54
 800a2c2:	781b      	ldrb	r3, [r3, #0]
 800a2c4:	67fb      	str	r3, [r7, #124]	; 0x7c
                    if (bThumbnail && code != 0) // add "extra" bits to code length since we skip these codes
 800a2c6:	683b      	ldr	r3, [r7, #0]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d00e      	beq.n	800a2ea <_ZL18JPEGMakeHuffTablesP14jpeg_image_tagi+0x3ac>
 800a2cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d00b      	beq.n	800a2ea <_ZL18JPEGMakeHuffTablesP14jpeg_image_tagi+0x3ac>
                    {
                        // get rid of extra bits in code and add increment (1) for AC index
                        code = ((iBitNum+(code & 0xf)) << 8) | ((code >> 4)+1);
 800a2d2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a2d4:	f003 020f 	and.w	r2, r3, #15
 800a2d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a2da:	4413      	add	r3, r2
 800a2dc:	021a      	lsls	r2, r3, #8
 800a2de:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a2e0:	111b      	asrs	r3, r3, #4
 800a2e2:	3301      	adds	r3, #1
 800a2e4:	4313      	orrs	r3, r2
 800a2e6:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a2e8:	e004      	b.n	800a2f4 <_ZL18JPEGMakeHuffTablesP14jpeg_image_tagi+0x3b6>
                        } // for j
                    }
#endif
                    else
                    {
                        code |= (iBitNum << 8);
 800a2ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a2ec:	021b      	lsls	r3, r3, #8
 800a2ee:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800a2f0:	4313      	orrs	r3, r2
 800a2f2:	67fb      	str	r3, [r7, #124]	; 0x7c
                    }
                    if (count) // do it as dwords to save time
 800a2f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d01b      	beq.n	800a332 <_ZL18JPEGMakeHuffTablesP14jpeg_image_tagi+0x3f4>
                    {
                        repeat = 1 << (count-1); // store as dwords (/2)
 800a2fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a2fc:	3b01      	subs	r3, #1
 800a2fe:	2201      	movs	r2, #1
 800a300:	fa02 f303 	lsl.w	r3, r2, r3
 800a304:	61fb      	str	r3, [r7, #28]
                        ul = code | (code << 16);
 800a306:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a308:	041a      	lsls	r2, r3, #16
 800a30a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a30c:	4313      	orrs	r3, r2
 800a30e:	60fb      	str	r3, [r7, #12]
                        pLongTable = (uint32_t *)pTable;
 800a310:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a312:	663b      	str	r3, [r7, #96]	; 0x60
                        for (j=0; j<repeat; j++)
 800a314:	2300      	movs	r3, #0
 800a316:	677b      	str	r3, [r7, #116]	; 0x74
 800a318:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a31a:	69fb      	ldr	r3, [r7, #28]
 800a31c:	429a      	cmp	r2, r3
 800a31e:	da0c      	bge.n	800a33a <_ZL18JPEGMakeHuffTablesP14jpeg_image_tagi+0x3fc>
                            *pLongTable++ = ul;
 800a320:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a322:	1d1a      	adds	r2, r3, #4
 800a324:	663a      	str	r2, [r7, #96]	; 0x60
 800a326:	68fa      	ldr	r2, [r7, #12]
 800a328:	601a      	str	r2, [r3, #0]
                        for (j=0; j<repeat; j++)
 800a32a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a32c:	3301      	adds	r3, #1
 800a32e:	677b      	str	r3, [r7, #116]	; 0x74
 800a330:	e7f2      	b.n	800a318 <_ZL18JPEGMakeHuffTablesP14jpeg_image_tagi+0x3da>
                    }
                    else
                    {
                        pTable[0] = (unsigned short)code;
 800a332:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a334:	b29a      	uxth	r2, r3
 800a336:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a338:	801a      	strh	r2, [r3, #0]
                    }
                    cc++;
 800a33a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a33c:	3301      	adds	r3, #1
 800a33e:	65bb      	str	r3, [r7, #88]	; 0x58
                    iLen--;
 800a340:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a342:	3b01      	subs	r3, #1
 800a344:	673b      	str	r3, [r7, #112]	; 0x70
                while (iLen)
 800a346:	e782      	b.n	800a24e <_ZL18JPEGMakeHuffTablesP14jpeg_image_tagi+0x310>
                }
                cc <<= 1;
 800a348:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a34a:	005b      	lsls	r3, r3, #1
 800a34c:	65bb      	str	r3, [r7, #88]	; 0x58
            for (iBitNum = 1; iBitNum <= 16; iBitNum++)
 800a34e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a350:	3301      	adds	r3, #1
 800a352:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a354:	e772      	b.n	800a23c <_ZL18JPEGMakeHuffTablesP14jpeg_image_tagi+0x2fe>
    for (iTable = 0; iTable < 4; iTable++)
 800a356:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a358:	3301      	adds	r3, #1
 800a35a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a35c:	e72c      	b.n	800a1b8 <_ZL18JPEGMakeHuffTablesP14jpeg_image_tagi+0x27a>
            } // for each bit length
        } // if table defined
    }
    return 1;
 800a35e:	2301      	movs	r3, #1
} /* JPEGMakeHuffTables() */
 800a360:	4618      	mov	r0, r3
 800a362:	3780      	adds	r7, #128	; 0x80
 800a364:	46bd      	mov	sp, r7
 800a366:	bd80      	pop	{r7, pc}

0800a368 <_ZL9TIFFSHORTPhi>:
// TIFFSHORT
// read a 16-bit unsigned integer from the given pointer
// and interpret the data as big endian (Motorola) or little endian (Intel)
//
static uint16_t TIFFSHORT(unsigned char *p, int bMotorola)
{
 800a368:	b480      	push	{r7}
 800a36a:	b085      	sub	sp, #20
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
 800a370:	6039      	str	r1, [r7, #0]
    unsigned short s;

    if (bMotorola)
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d00b      	beq.n	800a390 <_ZL9TIFFSHORTPhi+0x28>
        s = *p * 0x100 + *(p+1); // big endian (AKA Motorola byte order)
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	781b      	ldrb	r3, [r3, #0]
 800a37c:	b29b      	uxth	r3, r3
 800a37e:	021b      	lsls	r3, r3, #8
 800a380:	b29a      	uxth	r2, r3
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	3301      	adds	r3, #1
 800a386:	781b      	ldrb	r3, [r3, #0]
 800a388:	b29b      	uxth	r3, r3
 800a38a:	4413      	add	r3, r2
 800a38c:	81fb      	strh	r3, [r7, #14]
 800a38e:	e00a      	b.n	800a3a6 <_ZL9TIFFSHORTPhi+0x3e>
    else
        s = *p + *(p+1)*0x100; // little endian (AKA Intel byte order)
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	781b      	ldrb	r3, [r3, #0]
 800a394:	b29a      	uxth	r2, r3
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	3301      	adds	r3, #1
 800a39a:	781b      	ldrb	r3, [r3, #0]
 800a39c:	b29b      	uxth	r3, r3
 800a39e:	021b      	lsls	r3, r3, #8
 800a3a0:	b29b      	uxth	r3, r3
 800a3a2:	4413      	add	r3, r2
 800a3a4:	81fb      	strh	r3, [r7, #14]
    return s;
 800a3a6:	89fb      	ldrh	r3, [r7, #14]
} /* TIFFSHORT() */
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	3714      	adds	r7, #20
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b2:	4770      	bx	lr

0800a3b4 <_ZL8TIFFLONGPhi>:
// TIFFLONG
// read a 32-bit unsigned integer from the given pointer
// and interpret the data as big endian (Motorola) or little endian (Intel)
//
static uint32_t TIFFLONG(unsigned char *p, int bMotorola)
{
 800a3b4:	b480      	push	{r7}
 800a3b6:	b085      	sub	sp, #20
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
 800a3bc:	6039      	str	r1, [r7, #0]
    uint32_t l;

    if (bMotorola)
 800a3be:	683b      	ldr	r3, [r7, #0]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d012      	beq.n	800a3ea <_ZL8TIFFLONGPhi+0x36>
        l = *p * 0x1000000 + *(p+1) * 0x10000 + *(p+2) * 0x100 + *(p+3); // big endian
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	781b      	ldrb	r3, [r3, #0]
 800a3c8:	021b      	lsls	r3, r3, #8
 800a3ca:	687a      	ldr	r2, [r7, #4]
 800a3cc:	3201      	adds	r2, #1
 800a3ce:	7812      	ldrb	r2, [r2, #0]
 800a3d0:	4413      	add	r3, r2
 800a3d2:	021b      	lsls	r3, r3, #8
 800a3d4:	687a      	ldr	r2, [r7, #4]
 800a3d6:	3202      	adds	r2, #2
 800a3d8:	7812      	ldrb	r2, [r2, #0]
 800a3da:	4413      	add	r3, r2
 800a3dc:	021b      	lsls	r3, r3, #8
 800a3de:	687a      	ldr	r2, [r7, #4]
 800a3e0:	3203      	adds	r2, #3
 800a3e2:	7812      	ldrb	r2, [r2, #0]
 800a3e4:	4413      	add	r3, r2
 800a3e6:	60fb      	str	r3, [r7, #12]
 800a3e8:	e012      	b.n	800a410 <_ZL8TIFFLONGPhi+0x5c>
    else
        l = *p + *(p+1) * 0x100 + *(p+2) * 0x10000 + *(p+3) * 0x1000000; // little endian
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	781b      	ldrb	r3, [r3, #0]
 800a3ee:	461a      	mov	r2, r3
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	3301      	adds	r3, #1
 800a3f4:	781b      	ldrb	r3, [r3, #0]
 800a3f6:	021b      	lsls	r3, r3, #8
 800a3f8:	441a      	add	r2, r3
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	3302      	adds	r3, #2
 800a3fe:	781b      	ldrb	r3, [r3, #0]
 800a400:	041b      	lsls	r3, r3, #16
 800a402:	441a      	add	r2, r3
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	3303      	adds	r3, #3
 800a408:	781b      	ldrb	r3, [r3, #0]
 800a40a:	061b      	lsls	r3, r3, #24
 800a40c:	4413      	add	r3, r2
 800a40e:	60fb      	str	r3, [r7, #12]
    return l;
 800a410:	68fb      	ldr	r3, [r7, #12]
} /* TIFFLONG() */
 800a412:	4618      	mov	r0, r3
 800a414:	3714      	adds	r7, #20
 800a416:	46bd      	mov	sp, r7
 800a418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41c:	4770      	bx	lr
	...

0800a420 <_ZL9TIFFVALUEPhi>:
// TIFFVALUE
// read an integer value encoded in a TIFF TAG (12-byte structure)
// and interpret the data as big endian (Motorola) or little endian (Intel)
//
static int TIFFVALUE(unsigned char *p, int bMotorola)
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b084      	sub	sp, #16
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
 800a428:	6039      	str	r1, [r7, #0]
    int i, iType;
    
    iType = TIFFSHORT(p+2, bMotorola);
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	3302      	adds	r3, #2
 800a42e:	6839      	ldr	r1, [r7, #0]
 800a430:	4618      	mov	r0, r3
 800a432:	f7ff ff99 	bl	800a368 <_ZL9TIFFSHORTPhi>
 800a436:	4603      	mov	r3, r0
 800a438:	60bb      	str	r3, [r7, #8]
    /* If pointer to a list of items, must be a long */
    if (TIFFSHORT(p+4, bMotorola) > 1)
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	3304      	adds	r3, #4
 800a43e:	6839      	ldr	r1, [r7, #0]
 800a440:	4618      	mov	r0, r3
 800a442:	f7ff ff91 	bl	800a368 <_ZL9TIFFSHORTPhi>
 800a446:	4603      	mov	r3, r0
 800a448:	2b01      	cmp	r3, #1
 800a44a:	bf8c      	ite	hi
 800a44c:	2301      	movhi	r3, #1
 800a44e:	2300      	movls	r3, #0
 800a450:	b2db      	uxtb	r3, r3
 800a452:	2b00      	cmp	r3, #0
 800a454:	d001      	beq.n	800a45a <_ZL9TIFFVALUEPhi+0x3a>
    {
        iType = 4;
 800a456:	2304      	movs	r3, #4
 800a458:	60bb      	str	r3, [r7, #8]
    }
    switch (iType)
 800a45a:	68bb      	ldr	r3, [r7, #8]
 800a45c:	3b02      	subs	r3, #2
 800a45e:	2b08      	cmp	r3, #8
 800a460:	d835      	bhi.n	800a4ce <_ZL9TIFFVALUEPhi+0xae>
 800a462:	a201      	add	r2, pc, #4	; (adr r2, 800a468 <_ZL9TIFFVALUEPhi+0x48>)
 800a464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a468:	0800a4bd 	.word	0x0800a4bd
 800a46c:	0800a48d 	.word	0x0800a48d
 800a470:	0800a49f 	.word	0x0800a49f
 800a474:	0800a4bd 	.word	0x0800a4bd
 800a478:	0800a4b1 	.word	0x0800a4b1
 800a47c:	0800a49f 	.word	0x0800a49f
 800a480:	0800a4cf 	.word	0x0800a4cf
 800a484:	0800a4cf 	.word	0x0800a4cf
 800a488:	0800a4bd 	.word	0x0800a4bd
    {
        case 3: /* Short */
            i = TIFFSHORT(p+8, bMotorola);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	3308      	adds	r3, #8
 800a490:	6839      	ldr	r1, [r7, #0]
 800a492:	4618      	mov	r0, r3
 800a494:	f7ff ff68 	bl	800a368 <_ZL9TIFFSHORTPhi>
 800a498:	4603      	mov	r3, r0
 800a49a:	60fb      	str	r3, [r7, #12]
            break;
 800a49c:	e01a      	b.n	800a4d4 <_ZL9TIFFVALUEPhi+0xb4>
        case 4: /* Long */
        case 7: // undefined (treat it as a long since it's usually a multibyte buffer)
            i = TIFFLONG(p+8, bMotorola);
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	3308      	adds	r3, #8
 800a4a2:	6839      	ldr	r1, [r7, #0]
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	f7ff ff85 	bl	800a3b4 <_ZL8TIFFLONGPhi>
 800a4aa:	4603      	mov	r3, r0
 800a4ac:	60fb      	str	r3, [r7, #12]
            break;
 800a4ae:	e011      	b.n	800a4d4 <_ZL9TIFFVALUEPhi+0xb4>
        case 6: // signed byte
            i = (signed char)p[8];
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	3308      	adds	r3, #8
 800a4b4:	781b      	ldrb	r3, [r3, #0]
 800a4b6:	b25b      	sxtb	r3, r3
 800a4b8:	60fb      	str	r3, [r7, #12]
            break;
 800a4ba:	e00b      	b.n	800a4d4 <_ZL9TIFFVALUEPhi+0xb4>
        case 2: /* ASCII */
        case 5: /* Unsigned Rational */
        case 10: /* Signed Rational */
            i = TIFFLONG(p+8, bMotorola);
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	3308      	adds	r3, #8
 800a4c0:	6839      	ldr	r1, [r7, #0]
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	f7ff ff76 	bl	800a3b4 <_ZL8TIFFLONGPhi>
 800a4c8:	4603      	mov	r3, r0
 800a4ca:	60fb      	str	r3, [r7, #12]
            break;
 800a4cc:	e002      	b.n	800a4d4 <_ZL9TIFFVALUEPhi+0xb4>
        default: /* to suppress compiler warning */
            i = 0;
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	60fb      	str	r3, [r7, #12]
            break;
 800a4d2:	bf00      	nop
    }
    return i;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
    
} /* TIFFVALUE() */
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	3710      	adds	r7, #16
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	bd80      	pop	{r7, pc}
 800a4de:	bf00      	nop

0800a4e0 <_ZL11GetTIFFInfoP14jpeg_image_tagii>:
static void GetTIFFInfo(JPEGIMAGE *pPage, int bMotorola, int iOffset)
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b08a      	sub	sp, #40	; 0x28
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	60f8      	str	r0, [r7, #12]
 800a4e8:	60b9      	str	r1, [r7, #8]
 800a4ea:	607a      	str	r2, [r7, #4]
    int iTag, iTagCount, i;
    uint8_t *cBuf = pPage->ucFileBuf;
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	f503 53ae 	add.w	r3, r3, #5568	; 0x15c0
 800a4f2:	331c      	adds	r3, #28
 800a4f4:	623b      	str	r3, [r7, #32]
    
    iTagCount = TIFFSHORT(&cBuf[iOffset], bMotorola);  /* Number of tags in this dir */
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	6a3a      	ldr	r2, [r7, #32]
 800a4fa:	4413      	add	r3, r2
 800a4fc:	68b9      	ldr	r1, [r7, #8]
 800a4fe:	4618      	mov	r0, r3
 800a500:	f7ff ff32 	bl	800a368 <_ZL9TIFFSHORTPhi>
 800a504:	4603      	mov	r3, r0
 800a506:	61fb      	str	r3, [r7, #28]
    if (iTagCount < 1 || iTagCount > 256) // invalid tag count
 800a508:	69fb      	ldr	r3, [r7, #28]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	dd52      	ble.n	800a5b4 <_ZL11GetTIFFInfoP14jpeg_image_tagii+0xd4>
 800a50e:	69fb      	ldr	r3, [r7, #28]
 800a510:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a514:	dc4e      	bgt.n	800a5b4 <_ZL11GetTIFFInfoP14jpeg_image_tagii+0xd4>
        return; /* Bad header info */
    /*--- Search the TIFF tags ---*/
    for (i=0; i<iTagCount; i++)
 800a516:	2300      	movs	r3, #0
 800a518:	627b      	str	r3, [r7, #36]	; 0x24
 800a51a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a51c:	69fb      	ldr	r3, [r7, #28]
 800a51e:	429a      	cmp	r2, r3
 800a520:	da49      	bge.n	800a5b6 <_ZL11GetTIFFInfoP14jpeg_image_tagii+0xd6>
    {
        unsigned char *p = &cBuf[iOffset + (i*12) +2];
 800a522:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a524:	4613      	mov	r3, r2
 800a526:	005b      	lsls	r3, r3, #1
 800a528:	4413      	add	r3, r2
 800a52a:	009b      	lsls	r3, r3, #2
 800a52c:	461a      	mov	r2, r3
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	4413      	add	r3, r2
 800a532:	3302      	adds	r3, #2
 800a534:	6a3a      	ldr	r2, [r7, #32]
 800a536:	4413      	add	r3, r2
 800a538:	61bb      	str	r3, [r7, #24]
        iTag = TIFFSHORT(p, bMotorola);  /* current tag value */
 800a53a:	68b9      	ldr	r1, [r7, #8]
 800a53c:	69b8      	ldr	r0, [r7, #24]
 800a53e:	f7ff ff13 	bl	800a368 <_ZL9TIFFSHORTPhi>
 800a542:	4603      	mov	r3, r0
 800a544:	617b      	str	r3, [r7, #20]
        if (iTag == 274) // orientation tag
 800a546:	697b      	ldr	r3, [r7, #20]
 800a548:	f5b3 7f89 	cmp.w	r3, #274	; 0x112
 800a54c:	d109      	bne.n	800a562 <_ZL11GetTIFFInfoP14jpeg_image_tagii+0x82>
        {
            pPage->ucOrientation = TIFFVALUE(p, bMotorola);
 800a54e:	68b9      	ldr	r1, [r7, #8]
 800a550:	69b8      	ldr	r0, [r7, #24]
 800a552:	f7ff ff65 	bl	800a420 <_ZL9TIFFVALUEPhi>
 800a556:	4603      	mov	r3, r0
 800a558:	b2da      	uxtb	r2, r3
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800a560:	e024      	b.n	800a5ac <_ZL11GetTIFFInfoP14jpeg_image_tagii+0xcc>
        }
        else if (iTag == 256) // width of thumbnail
 800a562:	697b      	ldr	r3, [r7, #20]
 800a564:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a568:	d107      	bne.n	800a57a <_ZL11GetTIFFInfoP14jpeg_image_tagii+0x9a>
        {
            pPage->iThumbWidth = TIFFVALUE(p, bMotorola);
 800a56a:	68b9      	ldr	r1, [r7, #8]
 800a56c:	69b8      	ldr	r0, [r7, #24]
 800a56e:	f7ff ff57 	bl	800a420 <_ZL9TIFFVALUEPhi>
 800a572:	4602      	mov	r2, r0
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	609a      	str	r2, [r3, #8]
 800a578:	e018      	b.n	800a5ac <_ZL11GetTIFFInfoP14jpeg_image_tagii+0xcc>
        }
        else if (iTag == 257) // height of thumbnail
 800a57a:	697b      	ldr	r3, [r7, #20]
 800a57c:	f240 1201 	movw	r2, #257	; 0x101
 800a580:	4293      	cmp	r3, r2
 800a582:	d107      	bne.n	800a594 <_ZL11GetTIFFInfoP14jpeg_image_tagii+0xb4>
        {
            pPage->iThumbHeight = TIFFVALUE(p, bMotorola);
 800a584:	68b9      	ldr	r1, [r7, #8]
 800a586:	69b8      	ldr	r0, [r7, #24]
 800a588:	f7ff ff4a 	bl	800a420 <_ZL9TIFFVALUEPhi>
 800a58c:	4602      	mov	r2, r0
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	60da      	str	r2, [r3, #12]
 800a592:	e00b      	b.n	800a5ac <_ZL11GetTIFFInfoP14jpeg_image_tagii+0xcc>
        }
        else if (iTag == 513) // offset to JPEG data
 800a594:	697b      	ldr	r3, [r7, #20]
 800a596:	f240 2201 	movw	r2, #513	; 0x201
 800a59a:	4293      	cmp	r3, r2
 800a59c:	d106      	bne.n	800a5ac <_ZL11GetTIFFInfoP14jpeg_image_tagii+0xcc>
        {
            pPage->iThumbData = TIFFVALUE(p, bMotorola);
 800a59e:	68b9      	ldr	r1, [r7, #8]
 800a5a0:	69b8      	ldr	r0, [r7, #24]
 800a5a2:	f7ff ff3d 	bl	800a420 <_ZL9TIFFVALUEPhi>
 800a5a6:	4602      	mov	r2, r0
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	611a      	str	r2, [r3, #16]
    for (i=0; i<iTagCount; i++)
 800a5ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ae:	3301      	adds	r3, #1
 800a5b0:	627b      	str	r3, [r7, #36]	; 0x24
 800a5b2:	e7b2      	b.n	800a51a <_ZL11GetTIFFInfoP14jpeg_image_tagii+0x3a>
        return; /* Bad header info */
 800a5b4:	bf00      	nop
        }
    }
} /* GetTIFFInfo() */
 800a5b6:	3728      	adds	r7, #40	; 0x28
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	bd80      	pop	{r7, pc}

0800a5bc <_ZL10JPEGGetSOSP14jpeg_image_tagPi>:

static int JPEGGetSOS(JPEGIMAGE *pJPEG, int *iOff)
{
 800a5bc:	b480      	push	{r7}
 800a5be:	b089      	sub	sp, #36	; 0x24
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
 800a5c4:	6039      	str	r1, [r7, #0]
    int16_t sLen;
    int iOffset = *iOff;
 800a5c6:	683b      	ldr	r3, [r7, #0]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	61bb      	str	r3, [r7, #24]
    int i, j;
    uint8_t uc,c,cc;
    uint8_t *buf = pJPEG->ucFileBuf;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	f503 53ae 	add.w	r3, r3, #5568	; 0x15c0
 800a5d2:	331c      	adds	r3, #28
 800a5d4:	60fb      	str	r3, [r7, #12]
    
    sLen = MOTOSHORT(&buf[iOffset]);
 800a5d6:	69bb      	ldr	r3, [r7, #24]
 800a5d8:	68fa      	ldr	r2, [r7, #12]
 800a5da:	4413      	add	r3, r2
 800a5dc:	781b      	ldrb	r3, [r3, #0]
 800a5de:	b29b      	uxth	r3, r3
 800a5e0:	021b      	lsls	r3, r3, #8
 800a5e2:	b29a      	uxth	r2, r3
 800a5e4:	69bb      	ldr	r3, [r7, #24]
 800a5e6:	3301      	adds	r3, #1
 800a5e8:	68f9      	ldr	r1, [r7, #12]
 800a5ea:	440b      	add	r3, r1
 800a5ec:	781b      	ldrb	r3, [r3, #0]
 800a5ee:	b29b      	uxth	r3, r3
 800a5f0:	4413      	add	r3, r2
 800a5f2:	b29b      	uxth	r3, r3
 800a5f4:	83fb      	strh	r3, [r7, #30]
    iOffset += 2;
 800a5f6:	69bb      	ldr	r3, [r7, #24]
 800a5f8:	3302      	adds	r3, #2
 800a5fa:	61bb      	str	r3, [r7, #24]
    
    // Assume no components in this scan
    for (i=0; i<4; i++)
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	617b      	str	r3, [r7, #20]
 800a600:	697b      	ldr	r3, [r7, #20]
 800a602:	2b03      	cmp	r3, #3
 800a604:	dc0d      	bgt.n	800a622 <_ZL10JPEGGetSOSP14jpeg_image_tagPi+0x66>
        pJPEG->JPCI[i].component_needed = 0;
 800a606:	6879      	ldr	r1, [r7, #4]
 800a608:	697a      	ldr	r2, [r7, #20]
 800a60a:	4613      	mov	r3, r2
 800a60c:	005b      	lsls	r3, r3, #1
 800a60e:	4413      	add	r3, r2
 800a610:	005b      	lsls	r3, r3, #1
 800a612:	440b      	add	r3, r1
 800a614:	3374      	adds	r3, #116	; 0x74
 800a616:	2200      	movs	r2, #0
 800a618:	701a      	strb	r2, [r3, #0]
    for (i=0; i<4; i++)
 800a61a:	697b      	ldr	r3, [r7, #20]
 800a61c:	3301      	adds	r3, #1
 800a61e:	617b      	str	r3, [r7, #20]
 800a620:	e7ee      	b.n	800a600 <_ZL10JPEGGetSOSP14jpeg_image_tagPi+0x44>
    
    uc = buf[iOffset++]; // get number of components
 800a622:	69bb      	ldr	r3, [r7, #24]
 800a624:	1c5a      	adds	r2, r3, #1
 800a626:	61ba      	str	r2, [r7, #24]
 800a628:	461a      	mov	r2, r3
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	4413      	add	r3, r2
 800a62e:	781b      	ldrb	r3, [r3, #0]
 800a630:	72fb      	strb	r3, [r7, #11]
    pJPEG->ucComponentsInScan = uc;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	7afa      	ldrb	r2, [r7, #11]
 800a636:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
    sLen -= 3;
 800a63a:	8bfb      	ldrh	r3, [r7, #30]
 800a63c:	3b03      	subs	r3, #3
 800a63e:	b29b      	uxth	r3, r3
 800a640:	83fb      	strh	r3, [r7, #30]
    if (uc < 1 || uc > MAX_COMPS_IN_SCAN || sLen != (uc*2+3)) // check length of data packet
 800a642:	7afb      	ldrb	r3, [r7, #11]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d009      	beq.n	800a65c <_ZL10JPEGGetSOSP14jpeg_image_tagPi+0xa0>
 800a648:	7afb      	ldrb	r3, [r7, #11]
 800a64a:	2b04      	cmp	r3, #4
 800a64c:	d806      	bhi.n	800a65c <_ZL10JPEGGetSOSP14jpeg_image_tagPi+0xa0>
 800a64e:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800a652:	7afb      	ldrb	r3, [r7, #11]
 800a654:	005b      	lsls	r3, r3, #1
 800a656:	3303      	adds	r3, #3
 800a658:	429a      	cmp	r2, r3
 800a65a:	d001      	beq.n	800a660 <_ZL10JPEGGetSOSP14jpeg_image_tagPi+0xa4>
        return 1; // error
 800a65c:	2301      	movs	r3, #1
 800a65e:	e096      	b.n	800a78e <_ZL10JPEGGetSOSP14jpeg_image_tagPi+0x1d2>
    for (i=0; i<uc; i++)
 800a660:	2300      	movs	r3, #0
 800a662:	617b      	str	r3, [r7, #20]
 800a664:	7afb      	ldrb	r3, [r7, #11]
 800a666:	697a      	ldr	r2, [r7, #20]
 800a668:	429a      	cmp	r2, r3
 800a66a:	da63      	bge.n	800a734 <_ZL10JPEGGetSOSP14jpeg_image_tagPi+0x178>
    {
        cc = buf[iOffset++];
 800a66c:	69bb      	ldr	r3, [r7, #24]
 800a66e:	1c5a      	adds	r2, r3, #1
 800a670:	61ba      	str	r2, [r7, #24]
 800a672:	461a      	mov	r2, r3
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	4413      	add	r3, r2
 800a678:	781b      	ldrb	r3, [r3, #0]
 800a67a:	72bb      	strb	r3, [r7, #10]
        c = buf[iOffset++];
 800a67c:	69bb      	ldr	r3, [r7, #24]
 800a67e:	1c5a      	adds	r2, r3, #1
 800a680:	61ba      	str	r2, [r7, #24]
 800a682:	461a      	mov	r2, r3
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	4413      	add	r3, r2
 800a688:	781b      	ldrb	r3, [r3, #0]
 800a68a:	727b      	strb	r3, [r7, #9]
        sLen -= 2;
 800a68c:	8bfb      	ldrh	r3, [r7, #30]
 800a68e:	3b02      	subs	r3, #2
 800a690:	b29b      	uxth	r3, r3
 800a692:	83fb      	strh	r3, [r7, #30]
        for (j=0; j<4; j++) // search for component id
 800a694:	2300      	movs	r3, #0
 800a696:	613b      	str	r3, [r7, #16]
 800a698:	693b      	ldr	r3, [r7, #16]
 800a69a:	2b03      	cmp	r3, #3
 800a69c:	dc10      	bgt.n	800a6c0 <_ZL10JPEGGetSOSP14jpeg_image_tagPi+0x104>
        {
            if (pJPEG->JPCI[j].component_id == cc)
 800a69e:	6879      	ldr	r1, [r7, #4]
 800a6a0:	693a      	ldr	r2, [r7, #16]
 800a6a2:	4613      	mov	r3, r2
 800a6a4:	005b      	lsls	r3, r3, #1
 800a6a6:	4413      	add	r3, r2
 800a6a8:	005b      	lsls	r3, r3, #1
 800a6aa:	440b      	add	r3, r1
 800a6ac:	3375      	adds	r3, #117	; 0x75
 800a6ae:	781b      	ldrb	r3, [r3, #0]
 800a6b0:	7aba      	ldrb	r2, [r7, #10]
 800a6b2:	429a      	cmp	r2, r3
 800a6b4:	d003      	beq.n	800a6be <_ZL10JPEGGetSOSP14jpeg_image_tagPi+0x102>
        for (j=0; j<4; j++) // search for component id
 800a6b6:	693b      	ldr	r3, [r7, #16]
 800a6b8:	3301      	adds	r3, #1
 800a6ba:	613b      	str	r3, [r7, #16]
 800a6bc:	e7ec      	b.n	800a698 <_ZL10JPEGGetSOSP14jpeg_image_tagPi+0xdc>
                break;
 800a6be:	bf00      	nop
        }
        if (j == 4) // error, not found
 800a6c0:	693b      	ldr	r3, [r7, #16]
 800a6c2:	2b04      	cmp	r3, #4
 800a6c4:	d101      	bne.n	800a6ca <_ZL10JPEGGetSOSP14jpeg_image_tagPi+0x10e>
            return 1;
 800a6c6:	2301      	movs	r3, #1
 800a6c8:	e061      	b.n	800a78e <_ZL10JPEGGetSOSP14jpeg_image_tagPi+0x1d2>
        if ((c & 0xf) > 3 || (c & 0xf0) > 0x30)
 800a6ca:	7a7b      	ldrb	r3, [r7, #9]
 800a6cc:	f003 030c 	and.w	r3, r3, #12
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d104      	bne.n	800a6de <_ZL10JPEGGetSOSP14jpeg_image_tagPi+0x122>
 800a6d4:	7a7b      	ldrb	r3, [r7, #9]
 800a6d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a6da:	2b30      	cmp	r3, #48	; 0x30
 800a6dc:	dd01      	ble.n	800a6e2 <_ZL10JPEGGetSOSP14jpeg_image_tagPi+0x126>
            return 1; // bogus table numbers
 800a6de:	2301      	movs	r3, #1
 800a6e0:	e055      	b.n	800a78e <_ZL10JPEGGetSOSP14jpeg_image_tagPi+0x1d2>
        pJPEG->JPCI[j].dc_tbl_no = c >> 4;
 800a6e2:	7a7b      	ldrb	r3, [r7, #9]
 800a6e4:	091b      	lsrs	r3, r3, #4
 800a6e6:	b2d8      	uxtb	r0, r3
 800a6e8:	6879      	ldr	r1, [r7, #4]
 800a6ea:	693a      	ldr	r2, [r7, #16]
 800a6ec:	4613      	mov	r3, r2
 800a6ee:	005b      	lsls	r3, r3, #1
 800a6f0:	4413      	add	r3, r2
 800a6f2:	005b      	lsls	r3, r3, #1
 800a6f4:	440b      	add	r3, r1
 800a6f6:	3378      	adds	r3, #120	; 0x78
 800a6f8:	4602      	mov	r2, r0
 800a6fa:	701a      	strb	r2, [r3, #0]
        pJPEG->JPCI[j].ac_tbl_no = c & 0xf;
 800a6fc:	7a7b      	ldrb	r3, [r7, #9]
 800a6fe:	f003 030f 	and.w	r3, r3, #15
 800a702:	b2d8      	uxtb	r0, r3
 800a704:	6879      	ldr	r1, [r7, #4]
 800a706:	693a      	ldr	r2, [r7, #16]
 800a708:	4613      	mov	r3, r2
 800a70a:	005b      	lsls	r3, r3, #1
 800a70c:	4413      	add	r3, r2
 800a70e:	005b      	lsls	r3, r3, #1
 800a710:	440b      	add	r3, r1
 800a712:	3379      	adds	r3, #121	; 0x79
 800a714:	4602      	mov	r2, r0
 800a716:	701a      	strb	r2, [r3, #0]
        pJPEG->JPCI[j].component_needed = 1; // mark this component as being included in the scan
 800a718:	6879      	ldr	r1, [r7, #4]
 800a71a:	693a      	ldr	r2, [r7, #16]
 800a71c:	4613      	mov	r3, r2
 800a71e:	005b      	lsls	r3, r3, #1
 800a720:	4413      	add	r3, r2
 800a722:	005b      	lsls	r3, r3, #1
 800a724:	440b      	add	r3, r1
 800a726:	3374      	adds	r3, #116	; 0x74
 800a728:	2201      	movs	r2, #1
 800a72a:	701a      	strb	r2, [r3, #0]
    for (i=0; i<uc; i++)
 800a72c:	697b      	ldr	r3, [r7, #20]
 800a72e:	3301      	adds	r3, #1
 800a730:	617b      	str	r3, [r7, #20]
 800a732:	e797      	b.n	800a664 <_ZL10JPEGGetSOSP14jpeg_image_tagPi+0xa8>
    }
    pJPEG->iScanStart = buf[iOffset++]; // Get the scan start (or lossless predictor) for this scan
 800a734:	69bb      	ldr	r3, [r7, #24]
 800a736:	1c5a      	adds	r2, r3, #1
 800a738:	61ba      	str	r2, [r7, #24]
 800a73a:	461a      	mov	r2, r3
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	4413      	add	r3, r2
 800a740:	781a      	ldrb	r2, [r3, #0]
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    pJPEG->iScanEnd = buf[iOffset++]; // Get the scan end for this scan
 800a748:	69bb      	ldr	r3, [r7, #24]
 800a74a:	1c5a      	adds	r2, r3, #1
 800a74c:	61ba      	str	r2, [r7, #24]
 800a74e:	461a      	mov	r2, r3
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	4413      	add	r3, r2
 800a754:	781a      	ldrb	r2, [r3, #0]
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
    c = buf[iOffset++]; // successive approximation bits
 800a75c:	69bb      	ldr	r3, [r7, #24]
 800a75e:	1c5a      	adds	r2, r3, #1
 800a760:	61ba      	str	r2, [r7, #24]
 800a762:	461a      	mov	r2, r3
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	4413      	add	r3, r2
 800a768:	781b      	ldrb	r3, [r3, #0]
 800a76a:	727b      	strb	r3, [r7, #9]
    pJPEG->cApproxBitsLow = c & 0xf; // also point transform in lossless mode
 800a76c:	7a7b      	ldrb	r3, [r7, #9]
 800a76e:	f003 030f 	and.w	r3, r3, #15
 800a772:	b2da      	uxtb	r2, r3
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    pJPEG->cApproxBitsHigh = c >> 4;
 800a77a:	7a7b      	ldrb	r3, [r7, #9]
 800a77c:	091b      	lsrs	r3, r3, #4
 800a77e:	b2da      	uxtb	r2, r3
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    *iOff = iOffset;
 800a786:	683b      	ldr	r3, [r7, #0]
 800a788:	69ba      	ldr	r2, [r7, #24]
 800a78a:	601a      	str	r2, [r3, #0]
    return 0;
 800a78c:	2300      	movs	r3, #0
    
} /* JPEGGetSOS() */
 800a78e:	4618      	mov	r0, r3
 800a790:	3724      	adds	r7, #36	; 0x24
 800a792:	46bd      	mov	sp, r7
 800a794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a798:	4770      	bx	lr

0800a79a <_ZL10JPEGFilterPhS_iS_>:
// Remove markers from the data stream to allow faster decode
// Stuffed zeros and restart interval markers aren't needed to properly decode
// the data, but they make reading VLC data slower, so I pull them out first
//
static int JPEGFilter(uint8_t *pBuf, uint8_t *d, int iLen, uint8_t *bFF)
{
 800a79a:	b480      	push	{r7}
 800a79c:	b089      	sub	sp, #36	; 0x24
 800a79e:	af00      	add	r7, sp, #0
 800a7a0:	60f8      	str	r0, [r7, #12]
 800a7a2:	60b9      	str	r1, [r7, #8]
 800a7a4:	607a      	str	r2, [r7, #4]
 800a7a6:	603b      	str	r3, [r7, #0]
#endif // OLD_NEON
#endif // HAS_NEON

    unsigned char c, *s, *pEnd, *pStart;
    
    pStart = d;
 800a7a8:	68bb      	ldr	r3, [r7, #8]
 800a7aa:	61bb      	str	r3, [r7, #24]
    s = pBuf;
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	61fb      	str	r3, [r7, #28]
    pEnd = &s[iLen-1]; // stop just shy of the end to not miss a final marker/stuffed 0
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	3b01      	subs	r3, #1
 800a7b4:	69fa      	ldr	r2, [r7, #28]
 800a7b6:	4413      	add	r3, r2
 800a7b8:	617b      	str	r3, [r7, #20]
    if (*bFF) // last byte was a FF, check the next one
 800a7ba:	683b      	ldr	r3, [r7, #0]
 800a7bc:	781b      	ldrb	r3, [r3, #0]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d00e      	beq.n	800a7e0 <_ZL10JPEGFilterPhS_iS_+0x46>
    {
        if (s[0] == 0) // stuffed 0, keep the FF
 800a7c2:	69fb      	ldr	r3, [r7, #28]
 800a7c4:	781b      	ldrb	r3, [r3, #0]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d104      	bne.n	800a7d4 <_ZL10JPEGFilterPhS_iS_+0x3a>
            *d++ = 0xff;
 800a7ca:	68bb      	ldr	r3, [r7, #8]
 800a7cc:	1c5a      	adds	r2, r3, #1
 800a7ce:	60ba      	str	r2, [r7, #8]
 800a7d0:	22ff      	movs	r2, #255	; 0xff
 800a7d2:	701a      	strb	r2, [r3, #0]
        s++;
 800a7d4:	69fb      	ldr	r3, [r7, #28]
 800a7d6:	3301      	adds	r3, #1
 800a7d8:	61fb      	str	r3, [r7, #28]
        *bFF = 0;
 800a7da:	683b      	ldr	r3, [r7, #0]
 800a7dc:	2200      	movs	r2, #0
 800a7de:	701a      	strb	r2, [r3, #0]
			} // while processing the 16 "slow" bytes
			} // if need to remove stuffed FF's or markers
		} // while processing buffer with SIMD
#endif // HAS_NEON

    while (s < pEnd)
 800a7e0:	69fa      	ldr	r2, [r7, #28]
 800a7e2:	697b      	ldr	r3, [r7, #20]
 800a7e4:	429a      	cmp	r2, r3
 800a7e6:	d217      	bcs.n	800a818 <_ZL10JPEGFilterPhS_iS_+0x7e>
    {
        c = *d++ = *s++;
 800a7e8:	69fa      	ldr	r2, [r7, #28]
 800a7ea:	1c53      	adds	r3, r2, #1
 800a7ec:	61fb      	str	r3, [r7, #28]
 800a7ee:	68bb      	ldr	r3, [r7, #8]
 800a7f0:	1c59      	adds	r1, r3, #1
 800a7f2:	60b9      	str	r1, [r7, #8]
 800a7f4:	7812      	ldrb	r2, [r2, #0]
 800a7f6:	701a      	strb	r2, [r3, #0]
 800a7f8:	781b      	ldrb	r3, [r3, #0]
 800a7fa:	74fb      	strb	r3, [r7, #19]
        if (c == 0xff) // marker or stuffed zeros?
 800a7fc:	7cfb      	ldrb	r3, [r7, #19]
 800a7fe:	2bff      	cmp	r3, #255	; 0xff
 800a800:	d1ee      	bne.n	800a7e0 <_ZL10JPEGFilterPhS_iS_+0x46>
        {
            if (s[0] != 0) // it's a marker, skip both
 800a802:	69fb      	ldr	r3, [r7, #28]
 800a804:	781b      	ldrb	r3, [r3, #0]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d002      	beq.n	800a810 <_ZL10JPEGFilterPhS_iS_+0x76>
            {
                d--;
 800a80a:	68bb      	ldr	r3, [r7, #8]
 800a80c:	3b01      	subs	r3, #1
 800a80e:	60bb      	str	r3, [r7, #8]
            }
            s++; // for stuffed 0's, store the FF, skip the 00
 800a810:	69fb      	ldr	r3, [r7, #28]
 800a812:	3301      	adds	r3, #1
 800a814:	61fb      	str	r3, [r7, #28]
    while (s < pEnd)
 800a816:	e7e3      	b.n	800a7e0 <_ZL10JPEGFilterPhS_iS_+0x46>
        }
    }
    if (s == pEnd) // need to test the last byte
 800a818:	69fa      	ldr	r2, [r7, #28]
 800a81a:	697b      	ldr	r3, [r7, #20]
 800a81c:	429a      	cmp	r2, r3
 800a81e:	d10e      	bne.n	800a83e <_ZL10JPEGFilterPhS_iS_+0xa4>
    {
        c = s[0];
 800a820:	69fb      	ldr	r3, [r7, #28]
 800a822:	781b      	ldrb	r3, [r3, #0]
 800a824:	74fb      	strb	r3, [r7, #19]
        if (c == 0xff) // last byte is FF, take care of it next time through
 800a826:	7cfb      	ldrb	r3, [r7, #19]
 800a828:	2bff      	cmp	r3, #255	; 0xff
 800a82a:	d103      	bne.n	800a834 <_ZL10JPEGFilterPhS_iS_+0x9a>
            *bFF = 1; // take care of it next time through
 800a82c:	683b      	ldr	r3, [r7, #0]
 800a82e:	2201      	movs	r2, #1
 800a830:	701a      	strb	r2, [r3, #0]
 800a832:	e004      	b.n	800a83e <_ZL10JPEGFilterPhS_iS_+0xa4>
        else
            *d++ = c; // nope, just store it
 800a834:	68bb      	ldr	r3, [r7, #8]
 800a836:	1c5a      	adds	r2, r3, #1
 800a838:	60ba      	str	r2, [r7, #8]
 800a83a:	7cfa      	ldrb	r2, [r7, #19]
 800a83c:	701a      	strb	r2, [r3, #0]
    }
    return (int)(d-pStart); // filtered output length
 800a83e:	68ba      	ldr	r2, [r7, #8]
 800a840:	69bb      	ldr	r3, [r7, #24]
 800a842:	1ad3      	subs	r3, r2, r3
} /* JPEGFilter() */
 800a844:	4618      	mov	r0, r3
 800a846:	3724      	adds	r7, #36	; 0x24
 800a848:	46bd      	mov	sp, r7
 800a84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84e:	4770      	bx	lr

0800a850 <_ZL15JPEGGetMoreDataP14jpeg_image_tag>:
//
// Read and filter more VLC data for decoding
//
static void JPEGGetMoreData(JPEGIMAGE *pPage)
{
 800a850:	b590      	push	{r4, r7, lr}
 800a852:	b085      	sub	sp, #20
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
    int iDelta = pPage->iVLCSize - pPage->iVLCOff;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a860:	1ad3      	subs	r3, r2, r3
 800a862:	60fb      	str	r3, [r7, #12]
//    printf("Getting more data...size=%d, off=%d\n", pPage->iVLCSize, pPage->iVLCOff);
    // move any existing data down
    if (iDelta >= (JPEG_FILE_BUF_SIZE-64) || iDelta < 0)
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	f5b3 6ff8 	cmp.w	r3, #1984	; 0x7c0
 800a86a:	da68      	bge.n	800a93e <_ZL15JPEGGetMoreDataP14jpeg_image_tag+0xee>
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	db65      	blt.n	800a93e <_ZL15JPEGGetMoreDataP14jpeg_image_tag+0xee>
        return; // buffer is already full; no need to read more data
    if (pPage->iVLCOff != 0)
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a876:	2b00      	cmp	r3, #0
 800a878:	d024      	beq.n	800a8c4 <_ZL15JPEGGetMoreDataP14jpeg_image_tag+0x74>
    {
        memcpy(pPage->ucFileBuf, &pPage->ucFileBuf[pPage->iVLCOff], pPage->iVLCSize - pPage->iVLCOff);
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	f503 50ae 	add.w	r0, r3, #5568	; 0x15c0
 800a880:	301c      	adds	r0, #28
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a886:	f503 53ae 	add.w	r3, r3, #5568	; 0x15c0
 800a88a:	3318      	adds	r3, #24
 800a88c:	687a      	ldr	r2, [r7, #4]
 800a88e:	4413      	add	r3, r2
 800a890:	1d19      	adds	r1, r3, #4
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a89a:	1ad3      	subs	r3, r2, r3
 800a89c:	461a      	mov	r2, r3
 800a89e:	f006 faa3 	bl	8010de8 <memcpy>
        pPage->iVLCSize -= pPage->iVLCOff;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8aa:	1ad2      	subs	r2, r2, r3
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	651a      	str	r2, [r3, #80]	; 0x50
        pPage->iVLCOff = 0;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	64da      	str	r2, [r3, #76]	; 0x4c
        pPage->bb.pBuf = pPage->ucFileBuf; // reset VLC source pointer too
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	f503 53ae 	add.w	r3, r3, #5568	; 0x15c0
 800a8bc:	331c      	adds	r3, #28
 800a8be:	687a      	ldr	r2, [r7, #4]
 800a8c0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    }
    if (pPage->JPEGFile.iPos < pPage->JPEGFile.iSize && pPage->iVLCSize < JPEG_FILE_BUF_SIZE-64)
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a8d0:	429a      	cmp	r2, r3
 800a8d2:	da35      	bge.n	800a940 <_ZL15JPEGGetMoreDataP14jpeg_image_tag+0xf0>
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8d8:	f5b3 6ff8 	cmp.w	r3, #1984	; 0x7c0
 800a8dc:	da30      	bge.n	800a940 <_ZL15JPEGGetMoreDataP14jpeg_image_tag+0xf0>
    {
        int i;
        // Try to read enough to fill the buffer
        i = (*pPage->pfnRead)(&pPage->JPEGFile, &pPage->ucFileBuf[pPage->iVLCSize], JPEG_FILE_BUF_SIZE - pPage->iVLCSize); // max length we can read
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	f103 008c 	add.w	r0, r3, #140	; 0x8c
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8ec:	f503 53ae 	add.w	r3, r3, #5568	; 0x15c0
 800a8f0:	3318      	adds	r3, #24
 800a8f2:	687a      	ldr	r2, [r7, #4]
 800a8f4:	4413      	add	r3, r2
 800a8f6:	1d19      	adds	r1, r3, #4
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8fc:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 800a900:	461a      	mov	r2, r3
 800a902:	47a0      	blx	r4
 800a904:	60b8      	str	r0, [r7, #8]
        // Filter out the markers
        pPage->iVLCSize += JPEGFilter(&pPage->ucFileBuf[pPage->iVLCSize], &pPage->ucFileBuf[pPage->iVLCSize], i, &pPage->ucFF);
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a90a:	f503 53ae 	add.w	r3, r3, #5568	; 0x15c0
 800a90e:	3318      	adds	r3, #24
 800a910:	687a      	ldr	r2, [r7, #4]
 800a912:	4413      	add	r3, r2
 800a914:	1d18      	adds	r0, r3, #4
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a91a:	f503 53ae 	add.w	r3, r3, #5568	; 0x15c0
 800a91e:	3318      	adds	r3, #24
 800a920:	687a      	ldr	r2, [r7, #4]
 800a922:	4413      	add	r3, r2
 800a924:	1d19      	adds	r1, r3, #4
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	3338      	adds	r3, #56	; 0x38
 800a92a:	68ba      	ldr	r2, [r7, #8]
 800a92c:	f7ff ff35 	bl	800a79a <_ZL10JPEGFilterPhS_iS_>
 800a930:	4602      	mov	r2, r0
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a936:	441a      	add	r2, r3
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	651a      	str	r2, [r3, #80]	; 0x50
 800a93c:	e000      	b.n	800a940 <_ZL15JPEGGetMoreDataP14jpeg_image_tag+0xf0>
        return; // buffer is already full; no need to read more data
 800a93e:	bf00      	nop
    }
} /* JPEGGetMoreData() */
 800a940:	3714      	adds	r7, #20
 800a942:	46bd      	mov	sp, r7
 800a944:	bd90      	pop	{r4, r7, pc}
	...

0800a948 <_ZL13JPEGParseInfoP14jpeg_image_tagi>:
//
// Parse the JPEG header, gather necessary info to decode the image
// Returns 1 for success, 0 for failure
//
static int JPEGParseInfo(JPEGIMAGE *pPage, int bExtractThumb)
{
 800a948:	b590      	push	{r4, r7, lr}
 800a94a:	b08f      	sub	sp, #60	; 0x3c
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
 800a950:	6039      	str	r1, [r7, #0]
    int iBytesRead;
    int i, iOffset, iTableOffset;
    uint8_t ucTable, *s = pPage->ucFileBuf;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	f503 53ae 	add.w	r3, r3, #5568	; 0x15c0
 800a958:	331c      	adds	r3, #28
 800a95a:	627b      	str	r3, [r7, #36]	; 0x24
    uint16_t usMarker, usLen = 0;
 800a95c:	2300      	movs	r3, #0
 800a95e:	85bb      	strh	r3, [r7, #44]	; 0x2c
    int iFilePos = 0;
 800a960:	2300      	movs	r3, #0
 800a962:	62bb      	str	r3, [r7, #40]	; 0x28
    
    pPage->pFramebuffer = NULL; // this must be set AFTER calling this function
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a96a:	461a      	mov	r2, r3
 800a96c:	2300      	movs	r3, #0
 800a96e:	f8c2 33d8 	str.w	r3, [r2, #984]	; 0x3d8
    // make sure usPixels is 16-byte aligned for S3 SIMD (and possibly others)
    i = (int)(int64_t)pPage->usUnalignedPixels;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	33b4      	adds	r3, #180	; 0xb4
 800a976:	633b      	str	r3, [r7, #48]	; 0x30
    i &= 15;
 800a978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a97a:	f003 030f 	and.w	r3, r3, #15
 800a97e:	633b      	str	r3, [r7, #48]	; 0x30
    if (i == 0) i = 16; // already 16-byte aligned
 800a980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a982:	2b00      	cmp	r3, #0
 800a984:	d101      	bne.n	800a98a <_ZL13JPEGParseInfoP14jpeg_image_tagi+0x42>
 800a986:	2310      	movs	r3, #16
 800a988:	633b      	str	r3, [r7, #48]	; 0x30
    pPage->usPixels = &pPage->usUnalignedPixels[(16-i)>>1];
 800a98a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a98c:	f1c3 0310 	rsb	r3, r3, #16
 800a990:	105b      	asrs	r3, r3, #1
 800a992:	3358      	adds	r3, #88	; 0x58
 800a994:	005b      	lsls	r3, r3, #1
 800a996:	687a      	ldr	r2, [r7, #4]
 800a998:	4413      	add	r3, r2
 800a99a:	1d1a      	adds	r2, r3, #4
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    // do the same for the MCU buffers
    i = (int)(int64_t)pPage->sUnalignedMCUs;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	f503 5386 	add.w	r3, r3, #4288	; 0x10c0
 800a9a8:	3308      	adds	r3, #8
 800a9aa:	633b      	str	r3, [r7, #48]	; 0x30
    i &= 15;
 800a9ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9ae:	f003 030f 	and.w	r3, r3, #15
 800a9b2:	633b      	str	r3, [r7, #48]	; 0x30
    if (i == 0) i = 16;
 800a9b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d101      	bne.n	800a9be <_ZL13JPEGParseInfoP14jpeg_image_tagi+0x76>
 800a9ba:	2310      	movs	r3, #16
 800a9bc:	633b      	str	r3, [r7, #48]	; 0x30
    pPage->sMCUs = &pPage->sUnalignedMCUs[(16-i)>>1];
 800a9be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9c0:	f1c3 0310 	rsb	r3, r3, #16
 800a9c4:	105b      	asrs	r3, r3, #1
 800a9c6:	f603 0364 	addw	r3, r3, #2148	; 0x864
 800a9ca:	005b      	lsls	r3, r3, #1
 800a9cc:	687a      	ldr	r2, [r7, #4]
 800a9ce:	4413      	add	r3, r2
 800a9d0:	687a      	ldr	r2, [r7, #4]
 800a9d2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a9d6:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4

    if (bExtractThumb) // seek to the start of the thumbnail image
 800a9da:	683b      	ldr	r3, [r7, #0]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d009      	beq.n	800a9f4 <_ZL13JPEGParseInfoP14jpeg_image_tagi+0xac>
    {
        iFilePos = pPage->iThumbData;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	691b      	ldr	r3, [r3, #16]
 800a9e4:	62bb      	str	r3, [r7, #40]	; 0x28
        (*pPage->pfnSeek)(&pPage->JPEGFile, iFilePos);
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a9ea:	687a      	ldr	r2, [r7, #4]
 800a9ec:	328c      	adds	r2, #140	; 0x8c
 800a9ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a9f0:	4610      	mov	r0, r2
 800a9f2:	4798      	blx	r3
    }
    iBytesRead = (*pPage->pfnRead)(&pPage->JPEGFile, s, JPEG_FILE_BUF_SIZE);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a9f8:	687a      	ldr	r2, [r7, #4]
 800a9fa:	f102 008c 	add.w	r0, r2, #140	; 0x8c
 800a9fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800aa02:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800aa04:	4798      	blx	r3
 800aa06:	6378      	str	r0, [r7, #52]	; 0x34
    if (iBytesRead < 256) // a JPEG file this tiny? probably bad
 800aa08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa0a:	2bff      	cmp	r3, #255	; 0xff
 800aa0c:	dc04      	bgt.n	800aa18 <_ZL13JPEGParseInfoP14jpeg_image_tagi+0xd0>
    {
        pPage->iError = JPEG_INVALID_FILE;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	2204      	movs	r2, #4
 800aa12:	645a      	str	r2, [r3, #68]	; 0x44
        return 0;
 800aa14:	2300      	movs	r3, #0
 800aa16:	e328      	b.n	800b06a <_ZL13JPEGParseInfoP14jpeg_image_tagi+0x722>
    }
    iFilePos += iBytesRead;
 800aa18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa1c:	4413      	add	r3, r2
 800aa1e:	62bb      	str	r3, [r7, #40]	; 0x28
    if (MOTOSHORT(pPage->ucFileBuf) != 0xffd8)
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa26:	f893 35dc 	ldrb.w	r3, [r3, #1500]	; 0x5dc
 800aa2a:	021b      	lsls	r3, r3, #8
 800aa2c:	687a      	ldr	r2, [r7, #4]
 800aa2e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800aa32:	f892 25dd 	ldrb.w	r2, [r2, #1501]	; 0x5dd
 800aa36:	4413      	add	r3, r2
 800aa38:	f64f 72d8 	movw	r2, #65496	; 0xffd8
 800aa3c:	4293      	cmp	r3, r2
 800aa3e:	d004      	beq.n	800aa4a <_ZL13JPEGParseInfoP14jpeg_image_tagi+0x102>
    {
        pPage->iError = JPEG_INVALID_FILE;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	2204      	movs	r2, #4
 800aa44:	645a      	str	r2, [r3, #68]	; 0x44
        return 0; // not a JPEG file
 800aa46:	2300      	movs	r3, #0
 800aa48:	e30f      	b.n	800b06a <_ZL13JPEGParseInfoP14jpeg_image_tagi+0x722>
    }
    iOffset = 2; /* Start at offset of first marker */
 800aa4a:	2302      	movs	r3, #2
 800aa4c:	60bb      	str	r3, [r7, #8]
    usMarker = 0; /* Search for SOFx (start of frame) marker */
 800aa4e:	2300      	movs	r3, #0
 800aa50:	85fb      	strh	r3, [r7, #46]	; 0x2e
    while (usMarker != 0xffda && iOffset < pPage->JPEGFile.iSize)
 800aa52:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800aa54:	f64f 72da 	movw	r2, #65498	; 0xffda
 800aa58:	4293      	cmp	r3, r2
 800aa5a:	f000 82c4 	beq.w	800afe6 <_ZL13JPEGParseInfoP14jpeg_image_tagi+0x69e>
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800aa64:	68bb      	ldr	r3, [r7, #8]
 800aa66:	429a      	cmp	r2, r3
 800aa68:	f340 82bd 	ble.w	800afe6 <_ZL13JPEGParseInfoP14jpeg_image_tagi+0x69e>
    {
        if (iOffset >= JPEG_FILE_BUF_SIZE/2) // too close to the end, read more data
 800aa6c:	68bb      	ldr	r3, [r7, #8]
 800aa6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aa72:	db48      	blt.n	800ab06 <_ZL13JPEGParseInfoP14jpeg_image_tagi+0x1be>
        {
            // Do we need to seek first?
            if (iOffset >= JPEG_FILE_BUF_SIZE)
 800aa74:	68bb      	ldr	r3, [r7, #8]
 800aa76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aa7a:	db10      	blt.n	800aa9e <_ZL13JPEGParseInfoP14jpeg_image_tagi+0x156>
            {
                iFilePos += (iOffset - iBytesRead);
 800aa7c:	68ba      	ldr	r2, [r7, #8]
 800aa7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa80:	1ad3      	subs	r3, r2, r3
 800aa82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa84:	4413      	add	r3, r2
 800aa86:	62bb      	str	r3, [r7, #40]	; 0x28
                iOffset = 0;
 800aa88:	2300      	movs	r3, #0
 800aa8a:	60bb      	str	r3, [r7, #8]
                (*pPage->pfnSeek)(&pPage->JPEGFile, iFilePos);
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aa90:	687a      	ldr	r2, [r7, #4]
 800aa92:	328c      	adds	r2, #140	; 0x8c
 800aa94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aa96:	4610      	mov	r0, r2
 800aa98:	4798      	blx	r3
                iBytesRead = 0; // throw away any old data
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	637b      	str	r3, [r7, #52]	; 0x34
            }
            // move existing bytes down
            if (iOffset)
 800aa9e:	68bb      	ldr	r3, [r7, #8]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d016      	beq.n	800aad2 <_ZL13JPEGParseInfoP14jpeg_image_tagi+0x18a>
            {
                memcpy(pPage->ucFileBuf, &pPage->ucFileBuf[iOffset], iBytesRead - iOffset);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	f503 50ae 	add.w	r0, r3, #5568	; 0x15c0
 800aaaa:	301c      	adds	r0, #28
 800aaac:	68bb      	ldr	r3, [r7, #8]
 800aaae:	f503 53ae 	add.w	r3, r3, #5568	; 0x15c0
 800aab2:	3318      	adds	r3, #24
 800aab4:	687a      	ldr	r2, [r7, #4]
 800aab6:	4413      	add	r3, r2
 800aab8:	1d19      	adds	r1, r3, #4
 800aaba:	68bb      	ldr	r3, [r7, #8]
 800aabc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aabe:	1ad3      	subs	r3, r2, r3
 800aac0:	461a      	mov	r2, r3
 800aac2:	f006 f991 	bl	8010de8 <memcpy>
                iBytesRead -= iOffset;
 800aac6:	68bb      	ldr	r3, [r7, #8]
 800aac8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aaca:	1ad3      	subs	r3, r2, r3
 800aacc:	637b      	str	r3, [r7, #52]	; 0x34
                iOffset = 0;
 800aace:	2300      	movs	r3, #0
 800aad0:	60bb      	str	r3, [r7, #8]
            }
            i = (*pPage->pfnRead)(&pPage->JPEGFile, &pPage->ucFileBuf[iBytesRead], JPEG_FILE_BUF_SIZE-iBytesRead);
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	f103 008c 	add.w	r0, r3, #140	; 0x8c
 800aadc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aade:	f503 53ae 	add.w	r3, r3, #5568	; 0x15c0
 800aae2:	3318      	adds	r3, #24
 800aae4:	687a      	ldr	r2, [r7, #4]
 800aae6:	4413      	add	r3, r2
 800aae8:	1d19      	adds	r1, r3, #4
 800aaea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aaec:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 800aaf0:	461a      	mov	r2, r3
 800aaf2:	47a0      	blx	r4
 800aaf4:	6338      	str	r0, [r7, #48]	; 0x30
            iFilePos += i;
 800aaf6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aaf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aafa:	4413      	add	r3, r2
 800aafc:	62bb      	str	r3, [r7, #40]	; 0x28
            iBytesRead += i;
 800aafe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ab00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab02:	4413      	add	r3, r2
 800ab04:	637b      	str	r3, [r7, #52]	; 0x34
        }
        usMarker = MOTOSHORT(&s[iOffset]);
 800ab06:	68bb      	ldr	r3, [r7, #8]
 800ab08:	461a      	mov	r2, r3
 800ab0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab0c:	4413      	add	r3, r2
 800ab0e:	781b      	ldrb	r3, [r3, #0]
 800ab10:	b29b      	uxth	r3, r3
 800ab12:	021b      	lsls	r3, r3, #8
 800ab14:	b29a      	uxth	r2, r3
 800ab16:	68bb      	ldr	r3, [r7, #8]
 800ab18:	3301      	adds	r3, #1
 800ab1a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ab1c:	440b      	add	r3, r1
 800ab1e:	781b      	ldrb	r3, [r3, #0]
 800ab20:	b29b      	uxth	r3, r3
 800ab22:	4413      	add	r3, r2
 800ab24:	85fb      	strh	r3, [r7, #46]	; 0x2e
        iOffset += 2;
 800ab26:	68bb      	ldr	r3, [r7, #8]
 800ab28:	3302      	adds	r3, #2
 800ab2a:	60bb      	str	r3, [r7, #8]
        usLen = MOTOSHORT(&s[iOffset]); // marker length
 800ab2c:	68bb      	ldr	r3, [r7, #8]
 800ab2e:	461a      	mov	r2, r3
 800ab30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab32:	4413      	add	r3, r2
 800ab34:	781b      	ldrb	r3, [r3, #0]
 800ab36:	b29b      	uxth	r3, r3
 800ab38:	021b      	lsls	r3, r3, #8
 800ab3a:	b29a      	uxth	r2, r3
 800ab3c:	68bb      	ldr	r3, [r7, #8]
 800ab3e:	3301      	adds	r3, #1
 800ab40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ab42:	440b      	add	r3, r1
 800ab44:	781b      	ldrb	r3, [r3, #0]
 800ab46:	b29b      	uxth	r3, r3
 800ab48:	4413      	add	r3, r2
 800ab4a:	85bb      	strh	r3, [r7, #44]	; 0x2c

        if (usMarker < 0xffc0 || usMarker == 0xffff) // invalid marker, could be generated by "Arles Image Web Page Creator" or Accusoft
 800ab4c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ab4e:	f64f 72bf 	movw	r2, #65471	; 0xffbf
 800ab52:	4293      	cmp	r3, r2
 800ab54:	d904      	bls.n	800ab60 <_ZL13JPEGParseInfoP14jpeg_image_tagi+0x218>
 800ab56:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ab58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ab5c:	4293      	cmp	r3, r2
 800ab5e:	d103      	bne.n	800ab68 <_ZL13JPEGParseInfoP14jpeg_image_tagi+0x220>
        {
            iOffset++;
 800ab60:	68bb      	ldr	r3, [r7, #8]
 800ab62:	3301      	adds	r3, #1
 800ab64:	60bb      	str	r3, [r7, #8]
            continue; // skip 1 byte and try to resync
 800ab66:	e23d      	b.n	800afe4 <_ZL13JPEGParseInfoP14jpeg_image_tagi+0x69c>
        }
        switch (usMarker)
 800ab68:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ab6a:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 800ab6e:	3bc0      	subs	r3, #192	; 0xc0
 800ab70:	2b21      	cmp	r3, #33	; 0x21
 800ab72:	f200 8233 	bhi.w	800afdc <_ZL13JPEGParseInfoP14jpeg_image_tagi+0x694>
 800ab76:	a201      	add	r2, pc, #4	; (adr r2, 800ab7c <_ZL13JPEGParseInfoP14jpeg_image_tagi+0x234>)
 800ab78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab7c:	0800ad1b 	.word	0x0800ad1b
 800ab80:	0800ac05 	.word	0x0800ac05
 800ab84:	0800ad1b 	.word	0x0800ad1b
 800ab88:	0800ac05 	.word	0x0800ac05
 800ab8c:	0800aeb5 	.word	0x0800aeb5
 800ab90:	0800afdd 	.word	0x0800afdd
 800ab94:	0800afdd 	.word	0x0800afdd
 800ab98:	0800afdd 	.word	0x0800afdd
 800ab9c:	0800afdd 	.word	0x0800afdd
 800aba0:	0800afdd 	.word	0x0800afdd
 800aba4:	0800afdd 	.word	0x0800afdd
 800aba8:	0800afdd 	.word	0x0800afdd
 800abac:	0800afdd 	.word	0x0800afdd
 800abb0:	0800afdd 	.word	0x0800afdd
 800abb4:	0800afdd 	.word	0x0800afdd
 800abb8:	0800afdd 	.word	0x0800afdd
 800abbc:	0800afdd 	.word	0x0800afdd
 800abc0:	0800afdd 	.word	0x0800afdd
 800abc4:	0800afdd 	.word	0x0800afdd
 800abc8:	0800afdd 	.word	0x0800afdd
 800abcc:	0800afdd 	.word	0x0800afdd
 800abd0:	0800afdd 	.word	0x0800afdd
 800abd4:	0800afdd 	.word	0x0800afdd
 800abd8:	0800afdd 	.word	0x0800afdd
 800abdc:	0800afdd 	.word	0x0800afdd
 800abe0:	0800afdd 	.word	0x0800afdd
 800abe4:	0800afdd 	.word	0x0800afdd
 800abe8:	0800aeed 	.word	0x0800aeed
 800abec:	0800afdd 	.word	0x0800afdd
 800abf0:	0800ae8f 	.word	0x0800ae8f
 800abf4:	0800afdd 	.word	0x0800afdd
 800abf8:	0800afdd 	.word	0x0800afdd
 800abfc:	0800afdd 	.word	0x0800afdd
 800ac00:	0800ac0f 	.word	0x0800ac0f
        {
            case 0xffc1: // extended mode
            case 0xffc3: // lossless mode
                pPage->iError = JPEG_UNSUPPORTED_FEATURE;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	2203      	movs	r2, #3
 800ac08:	645a      	str	r2, [r3, #68]	; 0x44
                return 0; // currently unsupported modes
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	e22d      	b.n	800b06a <_ZL13JPEGParseInfoP14jpeg_image_tagi+0x722>
                
            case 0xffe1: // App1 (EXIF?)
                if (s[iOffset+2] == 'E' && s[iOffset+3] == 'x' && (s[iOffset+8] == 'M' || s[iOffset+8] == 'I')) // the EXIF data we want
 800ac0e:	68bb      	ldr	r3, [r7, #8]
 800ac10:	3302      	adds	r3, #2
 800ac12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac14:	4413      	add	r3, r2
 800ac16:	781b      	ldrb	r3, [r3, #0]
 800ac18:	2b45      	cmp	r3, #69	; 0x45
 800ac1a:	f040 81d6 	bne.w	800afca <_ZL13JPEGParseInfoP14jpeg_image_tagi+0x682>
 800ac1e:	68bb      	ldr	r3, [r7, #8]
 800ac20:	3303      	adds	r3, #3
 800ac22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac24:	4413      	add	r3, r2
 800ac26:	781b      	ldrb	r3, [r3, #0]
 800ac28:	2b78      	cmp	r3, #120	; 0x78
 800ac2a:	f040 81ce 	bne.w	800afca <_ZL13JPEGParseInfoP14jpeg_image_tagi+0x682>
 800ac2e:	68bb      	ldr	r3, [r7, #8]
 800ac30:	3308      	adds	r3, #8
 800ac32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac34:	4413      	add	r3, r2
 800ac36:	781b      	ldrb	r3, [r3, #0]
 800ac38:	2b4d      	cmp	r3, #77	; 0x4d
 800ac3a:	d007      	beq.n	800ac4c <_ZL13JPEGParseInfoP14jpeg_image_tagi+0x304>
 800ac3c:	68bb      	ldr	r3, [r7, #8]
 800ac3e:	3308      	adds	r3, #8
 800ac40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac42:	4413      	add	r3, r2
 800ac44:	781b      	ldrb	r3, [r3, #0]
 800ac46:	2b49      	cmp	r3, #73	; 0x49
 800ac48:	f040 81bf 	bne.w	800afca <_ZL13JPEGParseInfoP14jpeg_image_tagi+0x682>
                {
                    int bMotorola, IFD, iTagCount;
                    pPage->iEXIF = iFilePos - iBytesRead + iOffset + 8; // start of TIFF file
 800ac4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac50:	1ad2      	subs	r2, r2, r3
 800ac52:	68bb      	ldr	r3, [r7, #8]
 800ac54:	4413      	add	r3, r2
 800ac56:	f103 0208 	add.w	r2, r3, #8
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	641a      	str	r2, [r3, #64]	; 0x40
                    // Get the orientation value (if present)
                    bMotorola = (s[iOffset+8] == 'M');
 800ac5e:	68bb      	ldr	r3, [r7, #8]
 800ac60:	3308      	adds	r3, #8
 800ac62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac64:	4413      	add	r3, r2
 800ac66:	781b      	ldrb	r3, [r3, #0]
 800ac68:	2b4d      	cmp	r3, #77	; 0x4d
 800ac6a:	bf0c      	ite	eq
 800ac6c:	2301      	moveq	r3, #1
 800ac6e:	2300      	movne	r3, #0
 800ac70:	b2db      	uxtb	r3, r3
 800ac72:	623b      	str	r3, [r7, #32]
                    IFD = TIFFLONG(&s[iOffset+12], bMotorola);
 800ac74:	68bb      	ldr	r3, [r7, #8]
 800ac76:	330c      	adds	r3, #12
 800ac78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac7a:	4413      	add	r3, r2
 800ac7c:	6a39      	ldr	r1, [r7, #32]
 800ac7e:	4618      	mov	r0, r3
 800ac80:	f7ff fb98 	bl	800a3b4 <_ZL8TIFFLONGPhi>
 800ac84:	4603      	mov	r3, r0
 800ac86:	61fb      	str	r3, [r7, #28]
                    iTagCount = TIFFSHORT(&s[iOffset+16], bMotorola);
 800ac88:	68bb      	ldr	r3, [r7, #8]
 800ac8a:	3310      	adds	r3, #16
 800ac8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac8e:	4413      	add	r3, r2
 800ac90:	6a39      	ldr	r1, [r7, #32]
 800ac92:	4618      	mov	r0, r3
 800ac94:	f7ff fb68 	bl	800a368 <_ZL9TIFFSHORTPhi>
 800ac98:	4603      	mov	r3, r0
 800ac9a:	61bb      	str	r3, [r7, #24]
                    GetTIFFInfo(pPage, bMotorola, IFD+iOffset+8);
 800ac9c:	68ba      	ldr	r2, [r7, #8]
 800ac9e:	69fb      	ldr	r3, [r7, #28]
 800aca0:	4413      	add	r3, r2
 800aca2:	3308      	adds	r3, #8
 800aca4:	461a      	mov	r2, r3
 800aca6:	6a39      	ldr	r1, [r7, #32]
 800aca8:	6878      	ldr	r0, [r7, #4]
 800acaa:	f7ff fc19 	bl	800a4e0 <_ZL11GetTIFFInfoP14jpeg_image_tagii>
                    // The second IFD defines the thumbnail (if present)
                    if (iTagCount >= 1 && iTagCount < 32) // valid number of tags for EXIF data 'page'
 800acae:	69bb      	ldr	r3, [r7, #24]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	f340 818a 	ble.w	800afca <_ZL13JPEGParseInfoP14jpeg_image_tagi+0x682>
 800acb6:	69bb      	ldr	r3, [r7, #24]
 800acb8:	2b1f      	cmp	r3, #31
 800acba:	f300 8186 	bgt.w	800afca <_ZL13JPEGParseInfoP14jpeg_image_tagi+0x682>
                    {
                       // point to next IFD
                        IFD += (12 * iTagCount) + 2;
 800acbe:	69ba      	ldr	r2, [r7, #24]
 800acc0:	4613      	mov	r3, r2
 800acc2:	005b      	lsls	r3, r3, #1
 800acc4:	4413      	add	r3, r2
 800acc6:	009b      	lsls	r3, r3, #2
 800acc8:	3302      	adds	r3, #2
 800acca:	69fa      	ldr	r2, [r7, #28]
 800accc:	4413      	add	r3, r2
 800acce:	61fb      	str	r3, [r7, #28]
                        IFD = TIFFLONG(&s[IFD + iOffset + 8], bMotorola);
 800acd0:	68ba      	ldr	r2, [r7, #8]
 800acd2:	69fb      	ldr	r3, [r7, #28]
 800acd4:	4413      	add	r3, r2
 800acd6:	3308      	adds	r3, #8
 800acd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800acda:	4413      	add	r3, r2
 800acdc:	6a39      	ldr	r1, [r7, #32]
 800acde:	4618      	mov	r0, r3
 800ace0:	f7ff fb68 	bl	800a3b4 <_ZL8TIFFLONGPhi>
 800ace4:	4603      	mov	r3, r0
 800ace6:	61fb      	str	r3, [r7, #28]
                        if (IFD != 0) // Thumbnail present?
 800ace8:	69fb      	ldr	r3, [r7, #28]
 800acea:	2b00      	cmp	r3, #0
 800acec:	f000 816d 	beq.w	800afca <_ZL13JPEGParseInfoP14jpeg_image_tagi+0x682>
                        {
                            pPage->ucHasThumb = 1;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	2201      	movs	r2, #1
 800acf4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
                            GetTIFFInfo(pPage, bMotorola, IFD+iOffset+8); // info for second 'page' of TIFF
 800acf8:	68ba      	ldr	r2, [r7, #8]
 800acfa:	69fb      	ldr	r3, [r7, #28]
 800acfc:	4413      	add	r3, r2
 800acfe:	3308      	adds	r3, #8
 800ad00:	461a      	mov	r2, r3
 800ad02:	6a39      	ldr	r1, [r7, #32]
 800ad04:	6878      	ldr	r0, [r7, #4]
 800ad06:	f7ff fbeb 	bl	800a4e0 <_ZL11GetTIFFInfoP14jpeg_image_tagii>
                            pPage->iThumbData += iOffset + 8; // absolute offset in the file
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	691a      	ldr	r2, [r3, #16]
 800ad0e:	68bb      	ldr	r3, [r7, #8]
 800ad10:	3308      	adds	r3, #8
 800ad12:	441a      	add	r2, r3
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	611a      	str	r2, [r3, #16]
                        }
                    }
                }
                break;
 800ad18:	e157      	b.n	800afca <_ZL13JPEGParseInfoP14jpeg_image_tagi+0x682>
            case 0xffc0: // SOFx - start of frame (baseline)
            case 0xffc2: // (progressive)
                pPage->ucMode = (uint8_t)usMarker;
 800ad1a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ad1c:	b2da      	uxtb	r2, r3
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
                pPage->ucBpp = s[iOffset+2]; // bits per sample
 800ad24:	68bb      	ldr	r3, [r7, #8]
 800ad26:	3302      	adds	r3, #2
 800ad28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad2a:	4413      	add	r3, r2
 800ad2c:	781a      	ldrb	r2, [r3, #0]
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
                pPage->iCropX = pPage->iCropY = 0; // initialize crop rectangle to full image size
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	2200      	movs	r2, #0
 800ad38:	621a      	str	r2, [r3, #32]
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	6a1a      	ldr	r2, [r3, #32]
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	61da      	str	r2, [r3, #28]
                pPage->iCropCY = pPage->iHeight = MOTOSHORT(&s[iOffset+3]);
 800ad42:	68bb      	ldr	r3, [r7, #8]
 800ad44:	3303      	adds	r3, #3
 800ad46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad48:	4413      	add	r3, r2
 800ad4a:	781b      	ldrb	r3, [r3, #0]
 800ad4c:	021b      	lsls	r3, r3, #8
 800ad4e:	68ba      	ldr	r2, [r7, #8]
 800ad50:	3204      	adds	r2, #4
 800ad52:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ad54:	440a      	add	r2, r1
 800ad56:	7812      	ldrb	r2, [r2, #0]
 800ad58:	441a      	add	r2, r3
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	605a      	str	r2, [r3, #4]
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	685a      	ldr	r2, [r3, #4]
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	629a      	str	r2, [r3, #40]	; 0x28
                pPage->iCropCX = pPage->iWidth = MOTOSHORT(&s[iOffset+5]);
 800ad66:	68bb      	ldr	r3, [r7, #8]
 800ad68:	3305      	adds	r3, #5
 800ad6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad6c:	4413      	add	r3, r2
 800ad6e:	781b      	ldrb	r3, [r3, #0]
 800ad70:	021b      	lsls	r3, r3, #8
 800ad72:	68ba      	ldr	r2, [r7, #8]
 800ad74:	3206      	adds	r2, #6
 800ad76:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ad78:	440a      	add	r2, r1
 800ad7a:	7812      	ldrb	r2, [r2, #0]
 800ad7c:	441a      	add	r2, r3
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	601a      	str	r2, [r3, #0]
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681a      	ldr	r2, [r3, #0]
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	625a      	str	r2, [r3, #36]	; 0x24
                pPage->ucNumComponents = s[iOffset+7];
 800ad8a:	68bb      	ldr	r3, [r7, #8]
 800ad8c:	3307      	adds	r3, #7
 800ad8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad90:	4413      	add	r3, r2
 800ad92:	781a      	ldrb	r2, [r3, #0]
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                pPage->ucBpp = pPage->ucBpp * pPage->ucNumComponents; /* Bpp = number of components * bits per sample */
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ada6:	fb12 f303 	smulbb	r3, r2, r3
 800adaa:	b2da      	uxtb	r2, r3
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
                {
                    usLen -= 8;
 800adb2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800adb4:	3b08      	subs	r3, #8
 800adb6:	85bb      	strh	r3, [r7, #44]	; 0x2c
                    iOffset += 8;
 800adb8:	68bb      	ldr	r3, [r7, #8]
 800adba:	3308      	adds	r3, #8
 800adbc:	60bb      	str	r3, [r7, #8]
//                    pPage->ucSubSample = s[iOffset+9]; // subsampling option for the second color component
                    for (i=0; i<pPage->ucNumComponents; i++)
 800adbe:	2300      	movs	r3, #0
 800adc0:	633b      	str	r3, [r7, #48]	; 0x30
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800adc8:	461a      	mov	r2, r3
 800adca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adcc:	4293      	cmp	r3, r2
 800adce:	da53      	bge.n	800ae78 <_ZL13JPEGParseInfoP14jpeg_image_tagi+0x530>
                    {
                        uint8_t ucSamp;
                        pPage->JPCI[i].component_id = s[iOffset++];
 800add0:	68bb      	ldr	r3, [r7, #8]
 800add2:	1c5a      	adds	r2, r3, #1
 800add4:	60ba      	str	r2, [r7, #8]
 800add6:	461a      	mov	r2, r3
 800add8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adda:	4413      	add	r3, r2
 800addc:	7818      	ldrb	r0, [r3, #0]
 800adde:	6879      	ldr	r1, [r7, #4]
 800ade0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ade2:	4613      	mov	r3, r2
 800ade4:	005b      	lsls	r3, r3, #1
 800ade6:	4413      	add	r3, r2
 800ade8:	005b      	lsls	r3, r3, #1
 800adea:	440b      	add	r3, r1
 800adec:	3375      	adds	r3, #117	; 0x75
 800adee:	4602      	mov	r2, r0
 800adf0:	701a      	strb	r2, [r3, #0]
                        pPage->JPCI[i].component_index = (unsigned char)i;
 800adf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adf4:	b2d8      	uxtb	r0, r3
 800adf6:	6879      	ldr	r1, [r7, #4]
 800adf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800adfa:	4613      	mov	r3, r2
 800adfc:	005b      	lsls	r3, r3, #1
 800adfe:	4413      	add	r3, r2
 800ae00:	005b      	lsls	r3, r3, #1
 800ae02:	440b      	add	r3, r1
 800ae04:	3376      	adds	r3, #118	; 0x76
 800ae06:	4602      	mov	r2, r0
 800ae08:	701a      	strb	r2, [r3, #0]
                        ucSamp = s[iOffset++]; // get the h+v sampling factor
 800ae0a:	68bb      	ldr	r3, [r7, #8]
 800ae0c:	1c5a      	adds	r2, r3, #1
 800ae0e:	60ba      	str	r2, [r7, #8]
 800ae10:	461a      	mov	r2, r3
 800ae12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae14:	4413      	add	r3, r2
 800ae16:	781b      	ldrb	r3, [r3, #0]
 800ae18:	73fb      	strb	r3, [r7, #15]
                        if (i == 0) // Y component?
 800ae1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d103      	bne.n	800ae28 <_ZL13JPEGParseInfoP14jpeg_image_tagi+0x4e0>
                            pPage->ucSubSample = ucSamp;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	7bfa      	ldrb	r2, [r7, #15]
 800ae24:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
//                        pPage->JPCI[i].h_samp_factor = ucSamp >> 4;
//                        pPage->JPCI[i].v_samp_factor = ucSamp & 0xf;
                        pPage->JPCI[i].quant_tbl_no = s[iOffset++]; // quantization table number
 800ae28:	68bb      	ldr	r3, [r7, #8]
 800ae2a:	1c5a      	adds	r2, r3, #1
 800ae2c:	60ba      	str	r2, [r7, #8]
 800ae2e:	461a      	mov	r2, r3
 800ae30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae32:	4413      	add	r3, r2
 800ae34:	7818      	ldrb	r0, [r3, #0]
 800ae36:	6879      	ldr	r1, [r7, #4]
 800ae38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae3a:	4613      	mov	r3, r2
 800ae3c:	005b      	lsls	r3, r3, #1
 800ae3e:	4413      	add	r3, r2
 800ae40:	005b      	lsls	r3, r3, #1
 800ae42:	440b      	add	r3, r1
 800ae44:	3377      	adds	r3, #119	; 0x77
 800ae46:	4602      	mov	r2, r0
 800ae48:	701a      	strb	r2, [r3, #0]
                        if (pPage->JPCI[i].quant_tbl_no > 3)
 800ae4a:	6879      	ldr	r1, [r7, #4]
 800ae4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae4e:	4613      	mov	r3, r2
 800ae50:	005b      	lsls	r3, r3, #1
 800ae52:	4413      	add	r3, r2
 800ae54:	005b      	lsls	r3, r3, #1
 800ae56:	440b      	add	r3, r1
 800ae58:	3377      	adds	r3, #119	; 0x77
 800ae5a:	781b      	ldrb	r3, [r3, #0]
 800ae5c:	2b03      	cmp	r3, #3
 800ae5e:	d904      	bls.n	800ae6a <_ZL13JPEGParseInfoP14jpeg_image_tagi+0x522>
                        {
                            pPage->iError = JPEG_DECODE_ERROR;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	2202      	movs	r2, #2
 800ae64:	645a      	str	r2, [r3, #68]	; 0x44
                            return 0; // error
 800ae66:	2300      	movs	r3, #0
 800ae68:	e0ff      	b.n	800b06a <_ZL13JPEGParseInfoP14jpeg_image_tagi+0x722>
                        }
                        usLen -= 3;
 800ae6a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ae6c:	3b03      	subs	r3, #3
 800ae6e:	85bb      	strh	r3, [r7, #44]	; 0x2c
                    for (i=0; i<pPage->ucNumComponents; i++)
 800ae70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae72:	3301      	adds	r3, #1
 800ae74:	633b      	str	r3, [r7, #48]	; 0x30
 800ae76:	e7a4      	b.n	800adc2 <_ZL13JPEGParseInfoP14jpeg_image_tagi+0x47a>
                    }
                }
                if (pPage->ucNumComponents == 1) {
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ae7e:	2b01      	cmp	r3, #1
 800ae80:	f040 80a5 	bne.w	800afce <_ZL13JPEGParseInfoP14jpeg_image_tagi+0x686>
                    pPage->ucSubSample = 0; // use this to differentiate from color 1:1
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	2200      	movs	r2, #0
 800ae88:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
                }
                break;
 800ae8c:	e09f      	b.n	800afce <_ZL13JPEGParseInfoP14jpeg_image_tagi+0x686>
            case 0xffdd: // Restart Interval
                if (usLen == 4)
 800ae8e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ae90:	2b04      	cmp	r3, #4
 800ae92:	f040 809e 	bne.w	800afd2 <_ZL13JPEGParseInfoP14jpeg_image_tagi+0x68a>
                    pPage->iResInterval = MOTOSHORT(&s[iOffset+2]);
 800ae96:	68bb      	ldr	r3, [r7, #8]
 800ae98:	3302      	adds	r3, #2
 800ae9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae9c:	4413      	add	r3, r2
 800ae9e:	781b      	ldrb	r3, [r3, #0]
 800aea0:	021b      	lsls	r3, r3, #8
 800aea2:	68ba      	ldr	r2, [r7, #8]
 800aea4:	3203      	adds	r2, #3
 800aea6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800aea8:	440a      	add	r2, r1
 800aeaa:	7812      	ldrb	r2, [r2, #0]
 800aeac:	441a      	add	r2, r3
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	655a      	str	r2, [r3, #84]	; 0x54
                break;
 800aeb2:	e08e      	b.n	800afd2 <_ZL13JPEGParseInfoP14jpeg_image_tagi+0x68a>
            case 0xffc4: /* M_DHT */ // get Huffman tables
                iOffset += 2; // skip length
 800aeb4:	68bb      	ldr	r3, [r7, #8]
 800aeb6:	3302      	adds	r3, #2
 800aeb8:	60bb      	str	r3, [r7, #8]
                usLen -= 2; // subtract length length
 800aeba:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800aebc:	3b02      	subs	r3, #2
 800aebe:	85bb      	strh	r3, [r7, #44]	; 0x2c
                if (JPEGGetHuffTables(&s[iOffset], usLen, pPage) != 0) // bad tables?
 800aec0:	68bb      	ldr	r3, [r7, #8]
 800aec2:	461a      	mov	r2, r3
 800aec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aec6:	4413      	add	r3, r2
 800aec8:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 800aeca:	687a      	ldr	r2, [r7, #4]
 800aecc:	4618      	mov	r0, r3
 800aece:	f7fe ffa4 	bl	8009e1a <_ZL17JPEGGetHuffTablesPhiP14jpeg_image_tag>
 800aed2:	4603      	mov	r3, r0
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	bf14      	ite	ne
 800aed8:	2301      	movne	r3, #1
 800aeda:	2300      	moveq	r3, #0
 800aedc:	b2db      	uxtb	r3, r3
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d079      	beq.n	800afd6 <_ZL13JPEGParseInfoP14jpeg_image_tagi+0x68e>
                {
                    pPage->iError = JPEG_DECODE_ERROR;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	2202      	movs	r2, #2
 800aee6:	645a      	str	r2, [r3, #68]	; 0x44
                    return 0; // error
 800aee8:	2300      	movs	r3, #0
 800aeea:	e0be      	b.n	800b06a <_ZL13JPEGParseInfoP14jpeg_image_tagi+0x722>
                }
                break;
            case 0xffdb: /* M_DQT */
                /* Get the quantization tables */
                /* first byte has PPPPNNNN where P = precision and N = table number 0-3 */
                iOffset += 2; // skip length
 800aeec:	68bb      	ldr	r3, [r7, #8]
 800aeee:	3302      	adds	r3, #2
 800aef0:	60bb      	str	r3, [r7, #8]
                usLen -= 2; // subtract length length
 800aef2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800aef4:	3b02      	subs	r3, #2
 800aef6:	85bb      	strh	r3, [r7, #44]	; 0x2c
                while (usLen > 0)
 800aef8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d06d      	beq.n	800afda <_ZL13JPEGParseInfoP14jpeg_image_tagi+0x692>
                {
                    ucTable = s[iOffset++]; // table number
 800aefe:	68bb      	ldr	r3, [r7, #8]
 800af00:	1c5a      	adds	r2, r3, #1
 800af02:	60ba      	str	r2, [r7, #8]
 800af04:	461a      	mov	r2, r3
 800af06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af08:	4413      	add	r3, r2
 800af0a:	781b      	ldrb	r3, [r3, #0]
 800af0c:	75fb      	strb	r3, [r7, #23]
                    if ((ucTable & 0xf) > 3) // invalid table number
 800af0e:	7dfb      	ldrb	r3, [r7, #23]
 800af10:	f003 030c 	and.w	r3, r3, #12
 800af14:	2b00      	cmp	r3, #0
 800af16:	d004      	beq.n	800af22 <_ZL13JPEGParseInfoP14jpeg_image_tagi+0x5da>
                    {
                        pPage->iError = JPEG_DECODE_ERROR;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	2202      	movs	r2, #2
 800af1c:	645a      	str	r2, [r3, #68]	; 0x44
                        return 0;
 800af1e:	2300      	movs	r3, #0
 800af20:	e0a3      	b.n	800b06a <_ZL13JPEGParseInfoP14jpeg_image_tagi+0x722>
                    }
                    iTableOffset = (ucTable & 0xf) * DCTSIZE;
 800af22:	7dfb      	ldrb	r3, [r7, #23]
 800af24:	f003 030f 	and.w	r3, r3, #15
 800af28:	019b      	lsls	r3, r3, #6
 800af2a:	613b      	str	r3, [r7, #16]
                    if (ucTable & 0xf0) // if word precision
 800af2c:	7dfb      	ldrb	r3, [r7, #23]
 800af2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800af32:	2b00      	cmp	r3, #0
 800af34:	d02a      	beq.n	800af8c <_ZL13JPEGParseInfoP14jpeg_image_tagi+0x644>
                    {
                        for (i=0; i<DCTSIZE; i++)
 800af36:	2300      	movs	r3, #0
 800af38:	633b      	str	r3, [r7, #48]	; 0x30
 800af3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af3c:	2b3f      	cmp	r3, #63	; 0x3f
 800af3e:	dc21      	bgt.n	800af84 <_ZL13JPEGParseInfoP14jpeg_image_tagi+0x63c>
                        {
                            pPage->sQuantTable[i+iTableOffset] = MOTOSHORT(&s[iOffset]);
 800af40:	68bb      	ldr	r3, [r7, #8]
 800af42:	461a      	mov	r2, r3
 800af44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af46:	4413      	add	r3, r2
 800af48:	781b      	ldrb	r3, [r3, #0]
 800af4a:	b29b      	uxth	r3, r3
 800af4c:	021b      	lsls	r3, r3, #8
 800af4e:	b29a      	uxth	r2, r3
 800af50:	68bb      	ldr	r3, [r7, #8]
 800af52:	3301      	adds	r3, #1
 800af54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800af56:	440b      	add	r3, r1
 800af58:	781b      	ldrb	r3, [r3, #0]
 800af5a:	b29b      	uxth	r3, r3
 800af5c:	4413      	add	r3, r2
 800af5e:	b299      	uxth	r1, r3
 800af60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af62:	693b      	ldr	r3, [r7, #16]
 800af64:	4413      	add	r3, r2
 800af66:	b209      	sxth	r1, r1
 800af68:	687a      	ldr	r2, [r7, #4]
 800af6a:	f603 13ec 	addw	r3, r3, #2540	; 0x9ec
 800af6e:	005b      	lsls	r3, r3, #1
 800af70:	4413      	add	r3, r2
 800af72:	460a      	mov	r2, r1
 800af74:	809a      	strh	r2, [r3, #4]
                            iOffset += 2;
 800af76:	68bb      	ldr	r3, [r7, #8]
 800af78:	3302      	adds	r3, #2
 800af7a:	60bb      	str	r3, [r7, #8]
                        for (i=0; i<DCTSIZE; i++)
 800af7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af7e:	3301      	adds	r3, #1
 800af80:	633b      	str	r3, [r7, #48]	; 0x30
 800af82:	e7da      	b.n	800af3a <_ZL13JPEGParseInfoP14jpeg_image_tagi+0x5f2>
                        }
                        usLen -= (DCTSIZE*2 + 1);
 800af84:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800af86:	3b81      	subs	r3, #129	; 0x81
 800af88:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800af8a:	e7b5      	b.n	800aef8 <_ZL13JPEGParseInfoP14jpeg_image_tagi+0x5b0>
                    }
                    else // byte precision
                    {
                        for (i=0; i<DCTSIZE; i++)
 800af8c:	2300      	movs	r3, #0
 800af8e:	633b      	str	r3, [r7, #48]	; 0x30
 800af90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af92:	2b3f      	cmp	r3, #63	; 0x3f
 800af94:	dc15      	bgt.n	800afc2 <_ZL13JPEGParseInfoP14jpeg_image_tagi+0x67a>
                        {
                            pPage->sQuantTable[i+iTableOffset] = (unsigned short)s[iOffset++];
 800af96:	68bb      	ldr	r3, [r7, #8]
 800af98:	1c5a      	adds	r2, r3, #1
 800af9a:	60ba      	str	r2, [r7, #8]
 800af9c:	461a      	mov	r2, r3
 800af9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afa0:	4413      	add	r3, r2
 800afa2:	7819      	ldrb	r1, [r3, #0]
 800afa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800afa6:	693b      	ldr	r3, [r7, #16]
 800afa8:	4413      	add	r3, r2
 800afaa:	b209      	sxth	r1, r1
 800afac:	687a      	ldr	r2, [r7, #4]
 800afae:	f603 13ec 	addw	r3, r3, #2540	; 0x9ec
 800afb2:	005b      	lsls	r3, r3, #1
 800afb4:	4413      	add	r3, r2
 800afb6:	460a      	mov	r2, r1
 800afb8:	809a      	strh	r2, [r3, #4]
                        for (i=0; i<DCTSIZE; i++)
 800afba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afbc:	3301      	adds	r3, #1
 800afbe:	633b      	str	r3, [r7, #48]	; 0x30
 800afc0:	e7e6      	b.n	800af90 <_ZL13JPEGParseInfoP14jpeg_image_tagi+0x648>
                        }
                        usLen -= (DCTSIZE + 1);
 800afc2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800afc4:	3b41      	subs	r3, #65	; 0x41
 800afc6:	85bb      	strh	r3, [r7, #44]	; 0x2c
                while (usLen > 0)
 800afc8:	e796      	b.n	800aef8 <_ZL13JPEGParseInfoP14jpeg_image_tagi+0x5b0>
                break;
 800afca:	bf00      	nop
 800afcc:	e006      	b.n	800afdc <_ZL13JPEGParseInfoP14jpeg_image_tagi+0x694>
                break;
 800afce:	bf00      	nop
 800afd0:	e004      	b.n	800afdc <_ZL13JPEGParseInfoP14jpeg_image_tagi+0x694>
                break;
 800afd2:	bf00      	nop
 800afd4:	e002      	b.n	800afdc <_ZL13JPEGParseInfoP14jpeg_image_tagi+0x694>
                break;
 800afd6:	bf00      	nop
 800afd8:	e000      	b.n	800afdc <_ZL13JPEGParseInfoP14jpeg_image_tagi+0x694>
                    }
                }
                break;
 800afda:	bf00      	nop
        } // switch on JPEG marker
        iOffset += usLen;
 800afdc:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800afde:	68bb      	ldr	r3, [r7, #8]
 800afe0:	4413      	add	r3, r2
 800afe2:	60bb      	str	r3, [r7, #8]
    while (usMarker != 0xffda && iOffset < pPage->JPEGFile.iSize)
 800afe4:	e535      	b.n	800aa52 <_ZL13JPEGParseInfoP14jpeg_image_tagi+0x10a>
    } // while
    if (usMarker == 0xffda) // start of image
 800afe6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800afe8:	f64f 72da 	movw	r2, #65498	; 0xffda
 800afec:	4293      	cmp	r3, r2
 800afee:	d138      	bne.n	800b062 <_ZL13JPEGParseInfoP14jpeg_image_tagi+0x71a>
    {
//        if (pPage->ucBpp != 8) // need to match up table IDs
//        {
            iOffset -= usLen;
 800aff0:	68ba      	ldr	r2, [r7, #8]
 800aff2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800aff4:	1ad3      	subs	r3, r2, r3
 800aff6:	60bb      	str	r3, [r7, #8]
            JPEGGetSOS(pPage, &iOffset); // get Start-Of-Scan info for decoding
 800aff8:	f107 0308 	add.w	r3, r7, #8
 800affc:	4619      	mov	r1, r3
 800affe:	6878      	ldr	r0, [r7, #4]
 800b000:	f7ff fadc 	bl	800a5bc <_ZL10JPEGGetSOSP14jpeg_image_tagPi>
//        }
        if (!JPEGMakeHuffTables(pPage, 0)) //int bThumbnail) DEBUG
 800b004:	2100      	movs	r1, #0
 800b006:	6878      	ldr	r0, [r7, #4]
 800b008:	f7fe ff99 	bl	8009f3e <_ZL18JPEGMakeHuffTablesP14jpeg_image_tagi>
 800b00c:	4603      	mov	r3, r0
 800b00e:	2b00      	cmp	r3, #0
 800b010:	bf0c      	ite	eq
 800b012:	2301      	moveq	r3, #1
 800b014:	2300      	movne	r3, #0
 800b016:	b2db      	uxtb	r3, r3
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d004      	beq.n	800b026 <_ZL13JPEGParseInfoP14jpeg_image_tagi+0x6de>
        {
            pPage->iError = JPEG_UNSUPPORTED_FEATURE;
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	2203      	movs	r2, #3
 800b020:	645a      	str	r2, [r3, #68]	; 0x44
            return 0;
 800b022:	2300      	movs	r3, #0
 800b024:	e021      	b.n	800b06a <_ZL13JPEGParseInfoP14jpeg_image_tagi+0x722>
        }
        // Now the offset points to the start of compressed data
        i = JPEGFilter(&pPage->ucFileBuf[iOffset], pPage->ucFileBuf, iBytesRead-iOffset, &pPage->ucFF);
 800b026:	68bb      	ldr	r3, [r7, #8]
 800b028:	f503 53ae 	add.w	r3, r3, #5568	; 0x15c0
 800b02c:	3318      	adds	r3, #24
 800b02e:	687a      	ldr	r2, [r7, #4]
 800b030:	4413      	add	r3, r2
 800b032:	1d18      	adds	r0, r3, #4
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	f503 51ae 	add.w	r1, r3, #5568	; 0x15c0
 800b03a:	311c      	adds	r1, #28
 800b03c:	68bb      	ldr	r3, [r7, #8]
 800b03e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b040:	1ad2      	subs	r2, r2, r3
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	3338      	adds	r3, #56	; 0x38
 800b046:	f7ff fba8 	bl	800a79a <_ZL10JPEGFilterPhS_iS_>
 800b04a:	6338      	str	r0, [r7, #48]	; 0x30
        pPage->iVLCOff = 0;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	2200      	movs	r2, #0
 800b050:	64da      	str	r2, [r3, #76]	; 0x4c
        pPage->iVLCSize = i;
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b056:	651a      	str	r2, [r3, #80]	; 0x50
        JPEGGetMoreData(pPage); // read more VLC data
 800b058:	6878      	ldr	r0, [r7, #4]
 800b05a:	f7ff fbf9 	bl	800a850 <_ZL15JPEGGetMoreDataP14jpeg_image_tag>
        return 1;
 800b05e:	2301      	movs	r3, #1
 800b060:	e003      	b.n	800b06a <_ZL13JPEGParseInfoP14jpeg_image_tagi+0x722>
    }
    pPage->iError = JPEG_DECODE_ERROR;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	2202      	movs	r2, #2
 800b066:	645a      	str	r2, [r3, #68]	; 0x44
    return 0;
 800b068:	2300      	movs	r3, #0
} /* JPEGParseInfo() */
 800b06a:	4618      	mov	r0, r3
 800b06c:	373c      	adds	r7, #60	; 0x3c
 800b06e:	46bd      	mov	sp, r7
 800b070:	bd90      	pop	{r4, r7, pc}
 800b072:	bf00      	nop

0800b074 <_ZL13JPEGFixQuantDP14jpeg_image_tag>:
//
// Fix and reorder the quantization table for faster decoding.*
//
static void JPEGFixQuantD(JPEGIMAGE *pJPEG)
{
 800b074:	b580      	push	{r7, lr}
 800b076:	b0a6      	sub	sp, #152	; 0x98
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]
    int iTable, iTableOffset;
    signed short sTemp[DCTSIZE];
    int i;
    uint16_t *p;
    
    for (iTable=0; iTable<pJPEG->ucNumComponents; iTable++)
 800b07c:	2300      	movs	r3, #0
 800b07e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b088:	461a      	mov	r2, r3
 800b08a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b08e:	4293      	cmp	r3, r2
 800b090:	da70      	bge.n	800b174 <_ZL13JPEGFixQuantDP14jpeg_image_tag+0x100>
    {
        iTableOffset = iTable * DCTSIZE;
 800b092:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b096:	019b      	lsls	r3, r3, #6
 800b098:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        p = (uint16_t *)&pJPEG->sQuantTable[iTableOffset];
 800b09c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b0a0:	f603 13ec 	addw	r3, r3, #2540	; 0x9ec
 800b0a4:	005b      	lsls	r3, r3, #1
 800b0a6:	687a      	ldr	r2, [r7, #4]
 800b0a8:	4413      	add	r3, r2
 800b0aa:	3304      	adds	r3, #4
 800b0ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (i=0; i<DCTSIZE; i++)
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b0b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b0ba:	2b3f      	cmp	r3, #63	; 0x3f
 800b0bc:	dc17      	bgt.n	800b0ee <_ZL13JPEGFixQuantDP14jpeg_image_tag+0x7a>
            sTemp[i] = p[cZigZag[i]];
 800b0be:	4a2f      	ldr	r2, [pc, #188]	; (800b17c <_ZL13JPEGFixQuantDP14jpeg_image_tag+0x108>)
 800b0c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b0c4:	4413      	add	r3, r2
 800b0c6:	781b      	ldrb	r3, [r3, #0]
 800b0c8:	005b      	lsls	r3, r3, #1
 800b0ca:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b0ce:	4413      	add	r3, r2
 800b0d0:	881b      	ldrh	r3, [r3, #0]
 800b0d2:	b21a      	sxth	r2, r3
 800b0d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b0d8:	005b      	lsls	r3, r3, #1
 800b0da:	3398      	adds	r3, #152	; 0x98
 800b0dc:	443b      	add	r3, r7
 800b0de:	f823 2c90 	strh.w	r2, [r3, #-144]
        for (i=0; i<DCTSIZE; i++)
 800b0e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b0e6:	3301      	adds	r3, #1
 800b0e8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b0ec:	e7e3      	b.n	800b0b6 <_ZL13JPEGFixQuantDP14jpeg_image_tag+0x42>
        memcpy(&pJPEG->sQuantTable[iTableOffset], sTemp, DCTSIZE*sizeof(short)); // copy back to original spot
 800b0ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b0f2:	f603 13ec 	addw	r3, r3, #2540	; 0x9ec
 800b0f6:	005b      	lsls	r3, r3, #1
 800b0f8:	687a      	ldr	r2, [r7, #4]
 800b0fa:	4413      	add	r3, r2
 800b0fc:	3304      	adds	r3, #4
 800b0fe:	f107 0108 	add.w	r1, r7, #8
 800b102:	2280      	movs	r2, #128	; 0x80
 800b104:	4618      	mov	r0, r3
 800b106:	f005 fe6f 	bl	8010de8 <memcpy>
        
        // Prescale for DCT multiplication
        p = (uint16_t *)&pJPEG->sQuantTable[iTableOffset];
 800b10a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b10e:	f603 13ec 	addw	r3, r3, #2540	; 0x9ec
 800b112:	005b      	lsls	r3, r3, #1
 800b114:	687a      	ldr	r2, [r7, #4]
 800b116:	4413      	add	r3, r2
 800b118:	3304      	adds	r3, #4
 800b11a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (i=0; i<DCTSIZE; i++)
 800b11e:	2300      	movs	r3, #0
 800b120:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b124:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b128:	2b3f      	cmp	r3, #63	; 0x3f
 800b12a:	dc1d      	bgt.n	800b168 <_ZL13JPEGFixQuantDP14jpeg_image_tag+0xf4>
        {
            p[i] = (uint16_t)((p[i] * iScaleBits[i]) >> 12);
 800b12c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b130:	005b      	lsls	r3, r3, #1
 800b132:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b136:	4413      	add	r3, r2
 800b138:	881b      	ldrh	r3, [r3, #0]
 800b13a:	4619      	mov	r1, r3
 800b13c:	4a10      	ldr	r2, [pc, #64]	; (800b180 <_ZL13JPEGFixQuantDP14jpeg_image_tag+0x10c>)
 800b13e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b142:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b146:	fb01 f303 	mul.w	r3, r1, r3
 800b14a:	1319      	asrs	r1, r3, #12
 800b14c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b150:	005b      	lsls	r3, r3, #1
 800b152:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b156:	4413      	add	r3, r2
 800b158:	b28a      	uxth	r2, r1
 800b15a:	801a      	strh	r2, [r3, #0]
        for (i=0; i<DCTSIZE; i++)
 800b15c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b160:	3301      	adds	r3, #1
 800b162:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b166:	e7dd      	b.n	800b124 <_ZL13JPEGFixQuantDP14jpeg_image_tag+0xb0>
    for (iTable=0; iTable<pJPEG->ucNumComponents; iTable++)
 800b168:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b16c:	3301      	adds	r3, #1
 800b16e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b172:	e786      	b.n	800b082 <_ZL13JPEGFixQuantDP14jpeg_image_tag+0xe>
        }
    }
} /* JPEGFixQuantD() */
 800b174:	bf00      	nop
 800b176:	3798      	adds	r7, #152	; 0x98
 800b178:	46bd      	mov	sp, r7
 800b17a:	bd80      	pop	{r7, pc}
 800b17c:	08011028 	.word	0x08011028
 800b180:	080110a8 	.word	0x080110a8

0800b184 <_ZL15JPEGDecodeMCU_PP14jpeg_image_tagiPi>:
 *                                                                          *
 *  PURPOSE    : Decompress a macro block of Progressive JPEG data.         *
 *                                                                          *
 ****************************************************************************/
static int JPEGDecodeMCU_P(JPEGIMAGE *pJPEG, int iMCU, int *iDCPredictor)
{
 800b184:	b480      	push	{r7}
 800b186:	b095      	sub	sp, #84	; 0x54
 800b188:	af00      	add	r7, sp, #0
 800b18a:	60f8      	str	r0, [r7, #12]
 800b18c:	60b9      	str	r1, [r7, #8]
 800b18e:	607a      	str	r2, [r7, #4]
    int iIndex;
    unsigned char ucHuff, *pFastDC;
    unsigned short *pFast;
    uint32_t usHuff; // this prevents an unnecessary & 65535 for shorts
    signed int iPositive, iNegative, iCoeff;
    signed short *pMCU = &pJPEG->sMCUs[iMCU & 0xffffff];
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b196:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800b19a:	68bb      	ldr	r3, [r7, #8]
 800b19c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b1a0:	005b      	lsls	r3, r3, #1
 800b1a2:	4413      	add	r3, r2
 800b1a4:	633b      	str	r3, [r7, #48]	; 0x30
    uint32_t ulBitOff;
    my_ulong ulCode, ulBits, ulTemp; // local copies to allow compiler to use register vars
    uint8_t *pBuf;

    ulBitOff = pJPEG->bb.ulBitOff;
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b1ac:	643b      	str	r3, [r7, #64]	; 0x40
    ulBits = pJPEG->bb.ulBits;
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b1b4:	64bb      	str	r3, [r7, #72]	; 0x48
    pBuf = pJPEG->bb.pBuf;
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b1bc:	64fb      	str	r3, [r7, #76]	; 0x4c
        
    if (ulBitOff > (REGISTER_WIDTH-17)) { // need to get more data
 800b1be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1c0:	2b0f      	cmp	r3, #15
 800b1c2:	d91a      	bls.n	800b1fa <_ZL15JPEGDecodeMCU_PP14jpeg_image_tagiPi+0x76>
        pBuf += (ulBitOff >> 3);
 800b1c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1c6:	08db      	lsrs	r3, r3, #3
 800b1c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b1ca:	4413      	add	r3, r2
 800b1cc:	64fb      	str	r3, [r7, #76]	; 0x4c
        ulBitOff &= 7;
 800b1ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1d0:	f003 0307 	and.w	r3, r3, #7
 800b1d4:	643b      	str	r3, [r7, #64]	; 0x40
        ulBits = MOTOLONG(pBuf);
 800b1d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1d8:	781b      	ldrb	r3, [r3, #0]
 800b1da:	061a      	lsls	r2, r3, #24
 800b1dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1de:	3301      	adds	r3, #1
 800b1e0:	781b      	ldrb	r3, [r3, #0]
 800b1e2:	041b      	lsls	r3, r3, #16
 800b1e4:	441a      	add	r2, r3
 800b1e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1e8:	3302      	adds	r3, #2
 800b1ea:	781b      	ldrb	r3, [r3, #0]
 800b1ec:	021b      	lsls	r3, r3, #8
 800b1ee:	4413      	add	r3, r2
 800b1f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b1f2:	3203      	adds	r2, #3
 800b1f4:	7812      	ldrb	r2, [r2, #0]
 800b1f6:	4413      	add	r3, r2
 800b1f8:	64bb      	str	r3, [r7, #72]	; 0x48
    }

    iPositive = (1 << pJPEG->cApproxBitsLow); // positive bit position being coded
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b200:	461a      	mov	r2, r3
 800b202:	2301      	movs	r3, #1
 800b204:	4093      	lsls	r3, r2
 800b206:	62fb      	str	r3, [r7, #44]	; 0x2c
    iNegative = ((-1) << pJPEG->cApproxBitsLow); // negative bit position being coded
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b20e:	461a      	mov	r2, r3
 800b210:	f04f 33ff 	mov.w	r3, #4294967295
 800b214:	4093      	lsls	r3, r2
 800b216:	62bb      	str	r3, [r7, #40]	; 0x28
        
    if (pJPEG->iScanStart == 0)
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800b21e:	2b00      	cmp	r3, #0
 800b220:	f040 80af 	bne.w	800b382 <_ZL15JPEGDecodeMCU_PP14jpeg_image_tagiPi+0x1fe>
    {
        if (pJPEG->cApproxBitsHigh) // successive approximation - simply encodes the specified bit
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d019      	beq.n	800b262 <_ZL15JPEGDecodeMCU_PP14jpeg_image_tagiPi+0xde>
        {
            ulCode = (ulBits >> (31-ulBitOff)) & 1; // just get 1 bit
 800b22e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b230:	f1c3 031f 	rsb	r3, r3, #31
 800b234:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b236:	fa22 f303 	lsr.w	r3, r2, r3
 800b23a:	f003 0301 	and.w	r3, r3, #1
 800b23e:	647b      	str	r3, [r7, #68]	; 0x44
            ulBitOff += 1;
 800b240:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b242:	3301      	adds	r3, #1
 800b244:	643b      	str	r3, [r7, #64]	; 0x40
            if (ulCode)
 800b246:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b248:	2b00      	cmp	r3, #0
 800b24a:	f000 82ad 	beq.w	800b7a8 <_ZL15JPEGDecodeMCU_PP14jpeg_image_tagiPi+0x624>
            {
                //            (*iDCPredictor) |= iPositive;  // in case the scan is run more than once
                //            pMCU[0] = *iDCPredictor; // store in MCU[0]
                pMCU[0] |= iPositive;
 800b24e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b250:	f9b3 2000 	ldrsh.w	r2, [r3]
 800b254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b256:	b21b      	sxth	r3, r3
 800b258:	4313      	orrs	r3, r2
 800b25a:	b21a      	sxth	r2, r3
 800b25c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b25e:	801a      	strh	r2, [r3, #0]
            }
            goto mcu_done; // that's it
 800b260:	e2a2      	b.n	800b7a8 <_ZL15JPEGDecodeMCU_PP14jpeg_image_tagiPi+0x624>
        }
        // get the DC component
        ulCode = (ulBits >> (REGISTER_WIDTH - 12 - ulBitOff)) & 0xfff; // get as lower 12 bits
 800b262:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b264:	f1c3 0314 	rsb	r3, r3, #20
 800b268:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b26a:	fa22 f303 	lsr.w	r3, r2, r3
 800b26e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b272:	647b      	str	r3, [r7, #68]	; 0x44
        if (ulCode >= 0xf80) // long code
 800b274:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b276:	f5b3 6f78 	cmp.w	r3, #3968	; 0xf80
 800b27a:	d303      	bcc.n	800b284 <_ZL15JPEGDecodeMCU_PP14jpeg_image_tagiPi+0x100>
            ulCode = (ulCode & 0xff); // point to long table
 800b27c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b27e:	b2db      	uxtb	r3, r3
 800b280:	647b      	str	r3, [r7, #68]	; 0x44
 800b282:	e002      	b.n	800b28a <_ZL15JPEGDecodeMCU_PP14jpeg_image_tagiPi+0x106>
        else
            ulCode >>= 6; // use first 6 bits of short code
 800b284:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b286:	099b      	lsrs	r3, r3, #6
 800b288:	647b      	str	r3, [r7, #68]	; 0x44
        pFastDC = &pJPEG->ucHuffDC[pJPEG->ucDCTable * DC_TABLE_SIZE];
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800b290:	029b      	lsls	r3, r3, #10
 800b292:	f503 53ee 	add.w	r3, r3, #7616	; 0x1dc0
 800b296:	3318      	adds	r3, #24
 800b298:	68fa      	ldr	r2, [r7, #12]
 800b29a:	4413      	add	r3, r2
 800b29c:	3304      	adds	r3, #4
 800b29e:	627b      	str	r3, [r7, #36]	; 0x24
        ucHuff = pFastDC[ulCode]; // get the length+code
 800b2a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b2a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b2a4:	4413      	add	r3, r2
 800b2a6:	781b      	ldrb	r3, [r3, #0]
 800b2a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        if (ucHuff == 0) // invalid code
 800b2ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d102      	bne.n	800b2ba <_ZL15JPEGDecodeMCU_PP14jpeg_image_tagiPi+0x136>
            return -1;
 800b2b4:	f04f 33ff 	mov.w	r3, #4294967295
 800b2b8:	e28e      	b.n	800b7d8 <_ZL15JPEGDecodeMCU_PP14jpeg_image_tagiPi+0x654>
        ulBitOff += (ucHuff >> 4); // add the Huffman length
 800b2ba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b2be:	091b      	lsrs	r3, r3, #4
 800b2c0:	b2db      	uxtb	r3, r3
 800b2c2:	461a      	mov	r2, r3
 800b2c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2c6:	4413      	add	r3, r2
 800b2c8:	643b      	str	r3, [r7, #64]	; 0x40
        ucHuff &= 0xf; // get the actual code (SSSS)
 800b2ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b2ce:	f003 030f 	and.w	r3, r3, #15
 800b2d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        if (ucHuff) // if there is a change to the DC value
 800b2d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d04c      	beq.n	800b378 <_ZL15JPEGDecodeMCU_PP14jpeg_image_tagiPi+0x1f4>
        { // get the 'extra' bits
            if (ulBitOff > (REGISTER_WIDTH - 17)) // need to get more data
 800b2de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2e0:	2b0f      	cmp	r3, #15
 800b2e2:	d91a      	bls.n	800b31a <_ZL15JPEGDecodeMCU_PP14jpeg_image_tagiPi+0x196>
            {
                pBuf += (ulBitOff >> 3);
 800b2e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2e6:	08db      	lsrs	r3, r3, #3
 800b2e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b2ea:	4413      	add	r3, r2
 800b2ec:	64fb      	str	r3, [r7, #76]	; 0x4c
                ulBitOff &= 7;
 800b2ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2f0:	f003 0307 	and.w	r3, r3, #7
 800b2f4:	643b      	str	r3, [r7, #64]	; 0x40
                ulBits = MOTOLONG(pBuf);
 800b2f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b2f8:	781b      	ldrb	r3, [r3, #0]
 800b2fa:	061a      	lsls	r2, r3, #24
 800b2fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b2fe:	3301      	adds	r3, #1
 800b300:	781b      	ldrb	r3, [r3, #0]
 800b302:	041b      	lsls	r3, r3, #16
 800b304:	441a      	add	r2, r3
 800b306:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b308:	3302      	adds	r3, #2
 800b30a:	781b      	ldrb	r3, [r3, #0]
 800b30c:	021b      	lsls	r3, r3, #8
 800b30e:	4413      	add	r3, r2
 800b310:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b312:	3203      	adds	r2, #3
 800b314:	7812      	ldrb	r2, [r2, #0]
 800b316:	4413      	add	r3, r2
 800b318:	64bb      	str	r3, [r7, #72]	; 0x48
            }
            ulCode = ulBits << ulBitOff;
 800b31a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b31c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b31e:	fa02 f303 	lsl.w	r3, r2, r3
 800b322:	647b      	str	r3, [r7, #68]	; 0x44
            ulTemp = ~(my_ulong)(((my_long)ulCode)>>(REGISTER_WIDTH-1)); // slide sign bit across other 63/31 bits
 800b324:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b326:	17db      	asrs	r3, r3, #31
 800b328:	43db      	mvns	r3, r3
 800b32a:	61fb      	str	r3, [r7, #28]
            ulCode >>= (REGISTER_WIDTH - ucHuff);
 800b32c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b330:	f1c3 0320 	rsb	r3, r3, #32
 800b334:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b336:	fa22 f303 	lsr.w	r3, r2, r3
 800b33a:	647b      	str	r3, [r7, #68]	; 0x44
            ulCode -= ulTemp>>(REGISTER_WIDTH-ucHuff);
 800b33c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b340:	f1c3 0320 	rsb	r3, r3, #32
 800b344:	69fa      	ldr	r2, [r7, #28]
 800b346:	fa22 f303 	lsr.w	r3, r2, r3
 800b34a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b34c:	1ad3      	subs	r3, r2, r3
 800b34e:	647b      	str	r3, [r7, #68]	; 0x44
            ulBitOff += ucHuff; // add bit length
 800b350:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b354:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b356:	4413      	add	r3, r2
 800b358:	643b      	str	r3, [r7, #64]	; 0x40
            ulCode <<= pJPEG->cApproxBitsLow; // successive approximation shift value
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b360:	461a      	mov	r2, r3
 800b362:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b364:	4093      	lsls	r3, r2
 800b366:	647b      	str	r3, [r7, #68]	; 0x44
            (*iDCPredictor) += ulCode;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	461a      	mov	r2, r3
 800b36e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b370:	4413      	add	r3, r2
 800b372:	461a      	mov	r2, r3
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	601a      	str	r2, [r3, #0]
        }
        pMCU[0] = (short)*iDCPredictor; // store in MCU[0]
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	b21a      	sxth	r2, r3
 800b37e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b380:	801a      	strh	r2, [r3, #0]
    }
    // Now get the other 63 AC coefficients
    pFast = &pJPEG->usHuffAC[pJPEG->ucACTable * HUFF11SIZE];
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800b388:	02db      	lsls	r3, r3, #11
 800b38a:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 800b38e:	330c      	adds	r3, #12
 800b390:	005b      	lsls	r3, r3, #1
 800b392:	68fa      	ldr	r2, [r7, #12]
 800b394:	4413      	add	r3, r2
 800b396:	3304      	adds	r3, #4
 800b398:	61bb      	str	r3, [r7, #24]
    if (pJPEG->iScanStart)
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d004      	beq.n	800b3ae <_ZL15JPEGDecodeMCU_PP14jpeg_image_tagiPi+0x22a>
        iIndex = pJPEG->iScanStart; // starting index of this scan (progressive JPEG)
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800b3aa:	63bb      	str	r3, [r7, #56]	; 0x38
 800b3ac:	e001      	b.n	800b3b2 <_ZL15JPEGDecodeMCU_PP14jpeg_image_tagiPi+0x22e>
    else
        iIndex = 1; // special case when the DC component is included
 800b3ae:	2301      	movs	r3, #1
 800b3b0:	63bb      	str	r3, [r7, #56]	; 0x38
    if (pJPEG->cApproxBitsHigh) // successive approximation - different method
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	f000 812a 	beq.w	800b612 <_ZL15JPEGDecodeMCU_PP14jpeg_image_tagiPi+0x48e>
    {
        if (1)
//        if (*iSkip == 0) // only decode this block if not being skipped in EOB run
        {
            for (; iIndex <= pJPEG->iScanEnd; iIndex++)
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800b3c4:	461a      	mov	r2, r3
 800b3c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3c8:	4293      	cmp	r3, r2
 800b3ca:	f300 81f0 	bgt.w	800b7ae <_ZL15JPEGDecodeMCU_PP14jpeg_image_tagiPi+0x62a>
            {
                if (ulBitOff > (REGISTER_WIDTH-17)) { // need to get more data
 800b3ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b3d0:	2b0f      	cmp	r3, #15
 800b3d2:	d91a      	bls.n	800b40a <_ZL15JPEGDecodeMCU_PP14jpeg_image_tagiPi+0x286>
                    pBuf += (ulBitOff >> 3);
 800b3d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b3d6:	08db      	lsrs	r3, r3, #3
 800b3d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b3da:	4413      	add	r3, r2
 800b3dc:	64fb      	str	r3, [r7, #76]	; 0x4c
                    ulBitOff &= 7;
 800b3de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b3e0:	f003 0307 	and.w	r3, r3, #7
 800b3e4:	643b      	str	r3, [r7, #64]	; 0x40
                    ulBits = MOTOLONG(pBuf);
 800b3e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b3e8:	781b      	ldrb	r3, [r3, #0]
 800b3ea:	061a      	lsls	r2, r3, #24
 800b3ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b3ee:	3301      	adds	r3, #1
 800b3f0:	781b      	ldrb	r3, [r3, #0]
 800b3f2:	041b      	lsls	r3, r3, #16
 800b3f4:	441a      	add	r2, r3
 800b3f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b3f8:	3302      	adds	r3, #2
 800b3fa:	781b      	ldrb	r3, [r3, #0]
 800b3fc:	021b      	lsls	r3, r3, #8
 800b3fe:	4413      	add	r3, r2
 800b400:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b402:	3203      	adds	r2, #3
 800b404:	7812      	ldrb	r2, [r2, #0]
 800b406:	4413      	add	r3, r2
 800b408:	64bb      	str	r3, [r7, #72]	; 0x48
                }
                ulCode = (ulBits >> (REGISTER_WIDTH - 16 - ulBitOff)) & 0xffff; // get as lower 16 bits
 800b40a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b40c:	f1c3 0310 	rsb	r3, r3, #16
 800b410:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b412:	fa22 f303 	lsr.w	r3, r2, r3
 800b416:	b29b      	uxth	r3, r3
 800b418:	647b      	str	r3, [r7, #68]	; 0x44
                if (ulCode >= 0xf000) // first 4 bits = 1, use long table
 800b41a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b41c:	f5b3 4f70 	cmp.w	r3, #61440	; 0xf000
 800b420:	d304      	bcc.n	800b42c <_ZL15JPEGDecodeMCU_PP14jpeg_image_tagiPi+0x2a8>
                    ulCode = (ulCode & 0x1fff);
 800b422:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b424:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b428:	647b      	str	r3, [r7, #68]	; 0x44
 800b42a:	e002      	b.n	800b432 <_ZL15JPEGDecodeMCU_PP14jpeg_image_tagiPi+0x2ae>
                else
                    ulCode >>= 4; // use lower 12 bits (short table)
 800b42c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b42e:	091b      	lsrs	r3, r3, #4
 800b430:	647b      	str	r3, [r7, #68]	; 0x44
                usHuff = pFast[ulCode];
 800b432:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b434:	005b      	lsls	r3, r3, #1
 800b436:	69ba      	ldr	r2, [r7, #24]
 800b438:	4413      	add	r3, r2
 800b43a:	881b      	ldrh	r3, [r3, #0]
 800b43c:	617b      	str	r3, [r7, #20]
                if (usHuff == 0) // invalid code
 800b43e:	697b      	ldr	r3, [r7, #20]
 800b440:	2b00      	cmp	r3, #0
 800b442:	d102      	bne.n	800b44a <_ZL15JPEGDecodeMCU_PP14jpeg_image_tagiPi+0x2c6>
                    return -1;
 800b444:	f04f 33ff 	mov.w	r3, #4294967295
 800b448:	e1c6      	b.n	800b7d8 <_ZL15JPEGDecodeMCU_PP14jpeg_image_tagiPi+0x654>
                ulBitOff += (usHuff >> 8); // add length
 800b44a:	697b      	ldr	r3, [r7, #20]
 800b44c:	0a1b      	lsrs	r3, r3, #8
 800b44e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b450:	4413      	add	r3, r2
 800b452:	643b      	str	r3, [r7, #64]	; 0x40
                usHuff &= 0xff; // get code (RRRR/SSSS)
 800b454:	697b      	ldr	r3, [r7, #20]
 800b456:	b2db      	uxtb	r3, r3
 800b458:	617b      	str	r3, [r7, #20]
                iCoeff = 0;
 800b45a:	2300      	movs	r3, #0
 800b45c:	637b      	str	r3, [r7, #52]	; 0x34
                if (usHuff & 0xf)
 800b45e:	697b      	ldr	r3, [r7, #20]
 800b460:	f003 030f 	and.w	r3, r3, #15
 800b464:	2b00      	cmp	r3, #0
 800b466:	d01c      	beq.n	800b4a2 <_ZL15JPEGDecodeMCU_PP14jpeg_image_tagiPi+0x31e>
                {
                    if ((usHuff & 0xf) != 1)   // size of new coefficient should always be one
 800b468:	697b      	ldr	r3, [r7, #20]
 800b46a:	f003 030f 	and.w	r3, r3, #15
 800b46e:	2b01      	cmp	r3, #1
 800b470:	d002      	beq.n	800b478 <_ZL15JPEGDecodeMCU_PP14jpeg_image_tagiPi+0x2f4>
                        return -1;
 800b472:	f04f 33ff 	mov.w	r3, #4294967295
 800b476:	e1af      	b.n	800b7d8 <_ZL15JPEGDecodeMCU_PP14jpeg_image_tagiPi+0x654>
                    ulCode = (ulBits >> (REGISTER_WIDTH-1-ulBitOff)) & 1; // just get 1 bit
 800b478:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b47a:	f1c3 031f 	rsb	r3, r3, #31
 800b47e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b480:	fa22 f303 	lsr.w	r3, r2, r3
 800b484:	f003 0301 	and.w	r3, r3, #1
 800b488:	647b      	str	r3, [r7, #68]	; 0x44
                    ulBitOff += 1;
 800b48a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b48c:	3301      	adds	r3, #1
 800b48e:	643b      	str	r3, [r7, #64]	; 0x40
                    if (ulCode) // 1 means use positive value; 0 = use negative
 800b490:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b492:	2b00      	cmp	r3, #0
 800b494:	d002      	beq.n	800b49c <_ZL15JPEGDecodeMCU_PP14jpeg_image_tagiPi+0x318>
                        iCoeff = iPositive;
 800b496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b498:	637b      	str	r3, [r7, #52]	; 0x34
 800b49a:	e026      	b.n	800b4ea <_ZL15JPEGDecodeMCU_PP14jpeg_image_tagiPi+0x366>
                    else
                        iCoeff = iNegative;
 800b49c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b49e:	637b      	str	r3, [r7, #52]	; 0x34
 800b4a0:	e023      	b.n	800b4ea <_ZL15JPEGDecodeMCU_PP14jpeg_image_tagiPi+0x366>
                }
                else // since SSSS = 0, must be a ZRL or EOBn code
                {
                    if (usHuff != 0xf0) // ZRL
 800b4a2:	697b      	ldr	r3, [r7, #20]
 800b4a4:	2bf0      	cmp	r3, #240	; 0xf0
 800b4a6:	d020      	beq.n	800b4ea <_ZL15JPEGDecodeMCU_PP14jpeg_image_tagiPi+0x366>
                    { // EOBn code
                        usHuff = (usHuff >> 4); // get the number of extra bits needed to code the count
 800b4a8:	697b      	ldr	r3, [r7, #20]
 800b4aa:	091b      	lsrs	r3, r3, #4
 800b4ac:	617b      	str	r3, [r7, #20]
                        ulCode = ulBits >> (REGISTER_WIDTH - usHuff - ulBitOff); // shift down by (SSSS) - extra length
 800b4ae:	697a      	ldr	r2, [r7, #20]
 800b4b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b4b2:	4413      	add	r3, r2
 800b4b4:	f1c3 0320 	rsb	r3, r3, #32
 800b4b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b4ba:	fa22 f303 	lsr.w	r3, r2, r3
 800b4be:	647b      	str	r3, [r7, #68]	; 0x44
                        ulCode &= iBitMasks[usHuff];
 800b4c0:	4a9a      	ldr	r2, [pc, #616]	; (800b72c <_ZL15JPEGDecodeMCU_PP14jpeg_image_tagiPi+0x5a8>)
 800b4c2:	697b      	ldr	r3, [r7, #20]
 800b4c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b4c8:	461a      	mov	r2, r3
 800b4ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b4cc:	4013      	ands	r3, r2
 800b4ce:	647b      	str	r3, [r7, #68]	; 0x44
                        ulCode += (1 << usHuff); // plus base amount
 800b4d0:	2201      	movs	r2, #1
 800b4d2:	697b      	ldr	r3, [r7, #20]
 800b4d4:	fa02 f303 	lsl.w	r3, r2, r3
 800b4d8:	461a      	mov	r2, r3
 800b4da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b4dc:	4413      	add	r3, r2
 800b4de:	647b      	str	r3, [r7, #68]	; 0x44
                        ulBitOff += usHuff; // add extra length
 800b4e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b4e2:	697b      	ldr	r3, [r7, #20]
 800b4e4:	4413      	add	r3, r2
 800b4e6:	643b      	str	r3, [r7, #64]	; 0x40
                        //*iSkip = ulCode; // return this skip amount
                        break;
 800b4e8:	e161      	b.n	800b7ae <_ZL15JPEGDecodeMCU_PP14jpeg_image_tagiPi+0x62a>
                    }
                }
                // Advance over already-nonzero coefficients and RRRR still-zero coefficients
                // appending correction bits to the nonzeroes.  A correction bit is 1 if the abs
                // value of the coefficient must be increased.
                iCount = (usHuff >> 4); // get RRRR in lower 4 bits
 800b4ea:	697b      	ldr	r3, [r7, #20]
 800b4ec:	091b      	lsrs	r3, r3, #4
 800b4ee:	63fb      	str	r3, [r7, #60]	; 0x3c
                do {
                    if (pMCU[iIndex])
 800b4f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4f2:	005b      	lsls	r3, r3, #1
 800b4f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b4f6:	4413      	add	r3, r2
 800b4f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d063      	beq.n	800b5c8 <_ZL15JPEGDecodeMCU_PP14jpeg_image_tagiPi+0x444>
                    {
                        if (ulBitOff > (REGISTER_WIDTH-17)) { // need to get more data
 800b500:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b502:	2b0f      	cmp	r3, #15
 800b504:	d91a      	bls.n	800b53c <_ZL15JPEGDecodeMCU_PP14jpeg_image_tagiPi+0x3b8>
                            pBuf += (ulBitOff >> 3);
 800b506:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b508:	08db      	lsrs	r3, r3, #3
 800b50a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b50c:	4413      	add	r3, r2
 800b50e:	64fb      	str	r3, [r7, #76]	; 0x4c
                            ulBitOff &= 7;
 800b510:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b512:	f003 0307 	and.w	r3, r3, #7
 800b516:	643b      	str	r3, [r7, #64]	; 0x40
                            ulBits = MOTOLONG(pBuf);
 800b518:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b51a:	781b      	ldrb	r3, [r3, #0]
 800b51c:	061a      	lsls	r2, r3, #24
 800b51e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b520:	3301      	adds	r3, #1
 800b522:	781b      	ldrb	r3, [r3, #0]
 800b524:	041b      	lsls	r3, r3, #16
 800b526:	441a      	add	r2, r3
 800b528:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b52a:	3302      	adds	r3, #2
 800b52c:	781b      	ldrb	r3, [r3, #0]
 800b52e:	021b      	lsls	r3, r3, #8
 800b530:	4413      	add	r3, r2
 800b532:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b534:	3203      	adds	r2, #3
 800b536:	7812      	ldrb	r2, [r2, #0]
 800b538:	4413      	add	r3, r2
 800b53a:	64bb      	str	r3, [r7, #72]	; 0x48
                        }
                        ulCode = (ulBits >> (REGISTER_WIDTH-1-ulBitOff)) & 1; // just get 1 bit
 800b53c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b53e:	f1c3 031f 	rsb	r3, r3, #31
 800b542:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b544:	fa22 f303 	lsr.w	r3, r2, r3
 800b548:	f003 0301 	and.w	r3, r3, #1
 800b54c:	647b      	str	r3, [r7, #68]	; 0x44
                        ulBitOff++;
 800b54e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b550:	3301      	adds	r3, #1
 800b552:	643b      	str	r3, [r7, #64]	; 0x40
                        if (ulCode)
 800b554:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b556:	2b00      	cmp	r3, #0
 800b558:	d03e      	beq.n	800b5d8 <_ZL15JPEGDecodeMCU_PP14jpeg_image_tagiPi+0x454>
                        {
                            if ((pMCU[iIndex] & iPositive) == 0) // only combine if not already done
 800b55a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b55c:	005b      	lsls	r3, r3, #1
 800b55e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b560:	4413      	add	r3, r2
 800b562:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b566:	461a      	mov	r2, r3
 800b568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b56a:	4013      	ands	r3, r2
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d133      	bne.n	800b5d8 <_ZL15JPEGDecodeMCU_PP14jpeg_image_tagiPi+0x454>
                            {
                                if (pMCU[iIndex] >= 0)
 800b570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b572:	005b      	lsls	r3, r3, #1
 800b574:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b576:	4413      	add	r3, r2
 800b578:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	db11      	blt.n	800b5a4 <_ZL15JPEGDecodeMCU_PP14jpeg_image_tagiPi+0x420>
                                    pMCU[iIndex] += (short)iPositive;
 800b580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b582:	005b      	lsls	r3, r3, #1
 800b584:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b586:	4413      	add	r3, r2
 800b588:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b58c:	b29a      	uxth	r2, r3
 800b58e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b590:	b29b      	uxth	r3, r3
 800b592:	4413      	add	r3, r2
 800b594:	b299      	uxth	r1, r3
 800b596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b598:	005b      	lsls	r3, r3, #1
 800b59a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b59c:	4413      	add	r3, r2
 800b59e:	b20a      	sxth	r2, r1
 800b5a0:	801a      	strh	r2, [r3, #0]
 800b5a2:	e019      	b.n	800b5d8 <_ZL15JPEGDecodeMCU_PP14jpeg_image_tagiPi+0x454>
                                else
                                    pMCU[iIndex] += (short)iNegative;
 800b5a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5a6:	005b      	lsls	r3, r3, #1
 800b5a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b5aa:	4413      	add	r3, r2
 800b5ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b5b0:	b29a      	uxth	r2, r3
 800b5b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5b4:	b29b      	uxth	r3, r3
 800b5b6:	4413      	add	r3, r2
 800b5b8:	b299      	uxth	r1, r3
 800b5ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5bc:	005b      	lsls	r3, r3, #1
 800b5be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b5c0:	4413      	add	r3, r2
 800b5c2:	b20a      	sxth	r2, r1
 800b5c4:	801a      	strh	r2, [r3, #0]
 800b5c6:	e007      	b.n	800b5d8 <_ZL15JPEGDecodeMCU_PP14jpeg_image_tagiPi+0x454>
                            }
                        }
                    }
                    else // count the zero coeffs to skip
                    {
                        if (--iCount < 0)
 800b5c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5ca:	3b01      	subs	r3, #1
 800b5cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b5ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5d0:	0fdb      	lsrs	r3, r3, #31
 800b5d2:	b2db      	uxtb	r3, r3
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d10a      	bne.n	800b5ee <_ZL15JPEGDecodeMCU_PP14jpeg_image_tagiPi+0x46a>
                            break;      // done skipping zeros
                    }
                    iIndex++;
 800b5d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5da:	3301      	adds	r3, #1
 800b5dc:	63bb      	str	r3, [r7, #56]	; 0x38
                } while (iIndex <= pJPEG->iScanEnd);
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800b5e4:	461a      	mov	r2, r3
 800b5e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5e8:	4293      	cmp	r3, r2
 800b5ea:	dc01      	bgt.n	800b5f0 <_ZL15JPEGDecodeMCU_PP14jpeg_image_tagiPi+0x46c>
                do {
 800b5ec:	e780      	b.n	800b4f0 <_ZL15JPEGDecodeMCU_PP14jpeg_image_tagiPi+0x36c>
                            break;      // done skipping zeros
 800b5ee:	bf00      	nop
                if (iCoeff && iIndex < 0x40) // store the non-zero coefficient
 800b5f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d009      	beq.n	800b60a <_ZL15JPEGDecodeMCU_PP14jpeg_image_tagiPi+0x486>
 800b5f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5f8:	2b3f      	cmp	r3, #63	; 0x3f
 800b5fa:	dc06      	bgt.n	800b60a <_ZL15JPEGDecodeMCU_PP14jpeg_image_tagiPi+0x486>
                    pMCU[iIndex] = (short) iCoeff;
 800b5fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5fe:	005b      	lsls	r3, r3, #1
 800b600:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b602:	4413      	add	r3, r2
 800b604:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b606:	b212      	sxth	r2, r2
 800b608:	801a      	strh	r2, [r3, #0]
            for (; iIndex <= pJPEG->iScanEnd; iIndex++)
 800b60a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b60c:	3301      	adds	r3, #1
 800b60e:	63bb      	str	r3, [r7, #56]	; 0x38
 800b610:	e6d5      	b.n	800b3be <_ZL15JPEGDecodeMCU_PP14jpeg_image_tagiPi+0x23a>
    } // if successive approx
    else // normal AC decoding
    {
       // if (*iSkip == 0) // if this block is not being skipped in a EOB run
        {
            while (iIndex <= pJPEG->iScanEnd)
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800b618:	461a      	mov	r2, r3
 800b61a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b61c:	4293      	cmp	r3, r2
 800b61e:	f300 80c5 	bgt.w	800b7ac <_ZL15JPEGDecodeMCU_PP14jpeg_image_tagiPi+0x628>
            {
                if (ulBitOff > 15) // need to grab more bytes to nibble on
 800b622:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b624:	2b0f      	cmp	r3, #15
 800b626:	d914      	bls.n	800b652 <_ZL15JPEGDecodeMCU_PP14jpeg_image_tagiPi+0x4ce>
                {
                    pBuf += 2; // grab 2 more bytes since that's what we really need
 800b628:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b62a:	3302      	adds	r3, #2
 800b62c:	64fb      	str	r3, [r7, #76]	; 0x4c
                    ulBitOff -= 16;
 800b62e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b630:	3b10      	subs	r3, #16
 800b632:	643b      	str	r3, [r7, #64]	; 0x40
                    ulBits <<= 16;
 800b634:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b636:	041b      	lsls	r3, r3, #16
 800b638:	64bb      	str	r3, [r7, #72]	; 0x48
                    ulBits |= MOTOSHORT(&pBuf[2]);
 800b63a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b63c:	3302      	adds	r3, #2
 800b63e:	781b      	ldrb	r3, [r3, #0]
 800b640:	021b      	lsls	r3, r3, #8
 800b642:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b644:	3203      	adds	r2, #3
 800b646:	7812      	ldrb	r2, [r2, #0]
 800b648:	4413      	add	r3, r2
 800b64a:	461a      	mov	r2, r3
 800b64c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b64e:	4313      	orrs	r3, r2
 800b650:	64bb      	str	r3, [r7, #72]	; 0x48
                }
                ulCode = (ulBits >> (REGISTER_WIDTH - 16 - ulBitOff)) & 0xffff; // get as lower 16 bits
 800b652:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b654:	f1c3 0310 	rsb	r3, r3, #16
 800b658:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b65a:	fa22 f303 	lsr.w	r3, r2, r3
 800b65e:	b29b      	uxth	r3, r3
 800b660:	647b      	str	r3, [r7, #68]	; 0x44
                if (ulCode >= 0xf000) // first 4 bits = 1, use long table
 800b662:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b664:	f5b3 4f70 	cmp.w	r3, #61440	; 0xf000
 800b668:	d304      	bcc.n	800b674 <_ZL15JPEGDecodeMCU_PP14jpeg_image_tagiPi+0x4f0>
                    ulCode = (ulCode & 0x1fff);
 800b66a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b66c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b670:	647b      	str	r3, [r7, #68]	; 0x44
 800b672:	e002      	b.n	800b67a <_ZL15JPEGDecodeMCU_PP14jpeg_image_tagiPi+0x4f6>
                else
                    ulCode >>= 4; // use lower 12 bits (short table)
 800b674:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b676:	091b      	lsrs	r3, r3, #4
 800b678:	647b      	str	r3, [r7, #68]	; 0x44
                usHuff = pFast[ulCode];
 800b67a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b67c:	005b      	lsls	r3, r3, #1
 800b67e:	69ba      	ldr	r2, [r7, #24]
 800b680:	4413      	add	r3, r2
 800b682:	881b      	ldrh	r3, [r3, #0]
 800b684:	617b      	str	r3, [r7, #20]
                if (usHuff == 0) // invalid code
 800b686:	697b      	ldr	r3, [r7, #20]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d102      	bne.n	800b692 <_ZL15JPEGDecodeMCU_PP14jpeg_image_tagiPi+0x50e>
                    return -1;
 800b68c:	f04f 33ff 	mov.w	r3, #4294967295
 800b690:	e0a2      	b.n	800b7d8 <_ZL15JPEGDecodeMCU_PP14jpeg_image_tagiPi+0x654>
                ulBitOff += (usHuff >> 8); // add length
 800b692:	697b      	ldr	r3, [r7, #20]
 800b694:	0a1b      	lsrs	r3, r3, #8
 800b696:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b698:	4413      	add	r3, r2
 800b69a:	643b      	str	r3, [r7, #64]	; 0x40
                usHuff &= 0xff; // get code (RRRR/SSSS)
 800b69c:	697b      	ldr	r3, [r7, #20]
 800b69e:	b2db      	uxtb	r3, r3
 800b6a0:	617b      	str	r3, [r7, #20]
                //            if (usHuff == 0) // no more AC components
                //               {
                //               goto mcu_done;
                //               }
                if (usHuff == 0xf0) // is it ZRL?
 800b6a2:	697b      	ldr	r3, [r7, #20]
 800b6a4:	2bf0      	cmp	r3, #240	; 0xf0
 800b6a6:	d103      	bne.n	800b6b0 <_ZL15JPEGDecodeMCU_PP14jpeg_image_tagiPi+0x52c>
                {
                    iIndex += 16; // skip 16 AC coefficients
 800b6a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6aa:	3310      	adds	r3, #16
 800b6ac:	63bb      	str	r3, [r7, #56]	; 0x38
 800b6ae:	e7b0      	b.n	800b612 <_ZL15JPEGDecodeMCU_PP14jpeg_image_tagiPi+0x48e>
                }
                else
                {
                    if (ulBitOff > 15)
 800b6b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b6b2:	2b0f      	cmp	r3, #15
 800b6b4:	d914      	bls.n	800b6e0 <_ZL15JPEGDecodeMCU_PP14jpeg_image_tagiPi+0x55c>
                    {
                        pBuf += 2; // grab 2 more bytes since that's what we really need
 800b6b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6b8:	3302      	adds	r3, #2
 800b6ba:	64fb      	str	r3, [r7, #76]	; 0x4c
                        ulBitOff -= 16;
 800b6bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b6be:	3b10      	subs	r3, #16
 800b6c0:	643b      	str	r3, [r7, #64]	; 0x40
                        ulBits <<= 16;
 800b6c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b6c4:	041b      	lsls	r3, r3, #16
 800b6c6:	64bb      	str	r3, [r7, #72]	; 0x48
                        ulBits |= MOTOSHORT(&pBuf[2]);
 800b6c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6ca:	3302      	adds	r3, #2
 800b6cc:	781b      	ldrb	r3, [r3, #0]
 800b6ce:	021b      	lsls	r3, r3, #8
 800b6d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b6d2:	3203      	adds	r2, #3
 800b6d4:	7812      	ldrb	r2, [r2, #0]
 800b6d6:	4413      	add	r3, r2
 800b6d8:	461a      	mov	r2, r3
 800b6da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b6dc:	4313      	orrs	r3, r2
 800b6de:	64bb      	str	r3, [r7, #72]	; 0x48
                    }
                    if ((usHuff & 0xf) == 0) // special case for encoding EOB (end-of-band) codes (SSSS=0)
 800b6e0:	697b      	ldr	r3, [r7, #20]
 800b6e2:	f003 030f 	and.w	r3, r3, #15
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d122      	bne.n	800b730 <_ZL15JPEGDecodeMCU_PP14jpeg_image_tagiPi+0x5ac>
                    {
                        usHuff = (usHuff >> 4); // get the number of extra bits needed to code the count
 800b6ea:	697b      	ldr	r3, [r7, #20]
 800b6ec:	091b      	lsrs	r3, r3, #4
 800b6ee:	617b      	str	r3, [r7, #20]
                        ulCode = ulBits >> (REGISTER_WIDTH - usHuff - ulBitOff); // shift down by (SSSS) - extra length
 800b6f0:	697a      	ldr	r2, [r7, #20]
 800b6f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b6f4:	4413      	add	r3, r2
 800b6f6:	f1c3 0320 	rsb	r3, r3, #32
 800b6fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b6fc:	fa22 f303 	lsr.w	r3, r2, r3
 800b700:	647b      	str	r3, [r7, #68]	; 0x44
                        ulCode &= iBitMasks[usHuff];
 800b702:	4a0a      	ldr	r2, [pc, #40]	; (800b72c <_ZL15JPEGDecodeMCU_PP14jpeg_image_tagiPi+0x5a8>)
 800b704:	697b      	ldr	r3, [r7, #20]
 800b706:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b70a:	461a      	mov	r2, r3
 800b70c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b70e:	4013      	ands	r3, r2
 800b710:	647b      	str	r3, [r7, #68]	; 0x44
                        ulCode += (1 << usHuff); // plus base amount
 800b712:	2201      	movs	r2, #1
 800b714:	697b      	ldr	r3, [r7, #20]
 800b716:	fa02 f303 	lsl.w	r3, r2, r3
 800b71a:	461a      	mov	r2, r3
 800b71c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b71e:	4413      	add	r3, r2
 800b720:	647b      	str	r3, [r7, #68]	; 0x44
                        ulBitOff += usHuff; // add extra length
 800b722:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b724:	697b      	ldr	r3, [r7, #20]
 800b726:	4413      	add	r3, r2
 800b728:	643b      	str	r3, [r7, #64]	; 0x40
                       // *iSkip = ulCode; // return this skip amount
                        break;
 800b72a:	e040      	b.n	800b7ae <_ZL15JPEGDecodeMCU_PP14jpeg_image_tagiPi+0x62a>
 800b72c:	08010fa4 	.word	0x08010fa4
                    }
                    else
                    {
                        iIndex += (usHuff >> 4); // skip amount
 800b730:	697b      	ldr	r3, [r7, #20]
 800b732:	091a      	lsrs	r2, r3, #4
 800b734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b736:	4413      	add	r3, r2
 800b738:	63bb      	str	r3, [r7, #56]	; 0x38
                        usHuff &= 0xf; // get (SSSS) - extra length
 800b73a:	697b      	ldr	r3, [r7, #20]
 800b73c:	f003 030f 	and.w	r3, r3, #15
 800b740:	617b      	str	r3, [r7, #20]
                        ulCode = ulBits << ulBitOff;
 800b742:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b744:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b746:	fa02 f303 	lsl.w	r3, r2, r3
 800b74a:	647b      	str	r3, [r7, #68]	; 0x44
                        ulCode >>= (32 - usHuff);
 800b74c:	697b      	ldr	r3, [r7, #20]
 800b74e:	f1c3 0320 	rsb	r3, r3, #32
 800b752:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b754:	fa22 f303 	lsr.w	r3, r2, r3
 800b758:	647b      	str	r3, [r7, #68]	; 0x44
                        if (!(ulCode & 0x80000000>>(REGISTER_WIDTH - 16 - -usHuff))) // test for negative
 800b75a:	697b      	ldr	r3, [r7, #20]
 800b75c:	3310      	adds	r3, #16
 800b75e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b762:	40da      	lsrs	r2, r3
 800b764:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b766:	4013      	ands	r3, r2
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d108      	bne.n	800b77e <_ZL15JPEGDecodeMCU_PP14jpeg_image_tagiPi+0x5fa>
                            ulCode -= 0xffffffff>>(REGISTER_WIDTH - 16 - -usHuff);
 800b76c:	697b      	ldr	r3, [r7, #20]
 800b76e:	3310      	adds	r3, #16
 800b770:	f04f 32ff 	mov.w	r2, #4294967295
 800b774:	fa22 f303 	lsr.w	r3, r2, r3
 800b778:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b77a:	1ad3      	subs	r3, r2, r3
 800b77c:	647b      	str	r3, [r7, #68]	; 0x44
                        ulBitOff += usHuff; // add (SSSS) extra length
 800b77e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b780:	697b      	ldr	r3, [r7, #20]
 800b782:	4413      	add	r3, r2
 800b784:	643b      	str	r3, [r7, #64]	; 0x40
                        ulCode <<= pJPEG->cApproxBitsLow; // successive approximation shift value
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b78c:	461a      	mov	r2, r3
 800b78e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b790:	4093      	lsls	r3, r2
 800b792:	647b      	str	r3, [r7, #68]	; 0x44
                        pMCU[iIndex++] = (signed short)ulCode; // store AC coefficient
 800b794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b796:	1c5a      	adds	r2, r3, #1
 800b798:	63ba      	str	r2, [r7, #56]	; 0x38
 800b79a:	005b      	lsls	r3, r3, #1
 800b79c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b79e:	4413      	add	r3, r2
 800b7a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b7a2:	b212      	sxth	r2, r2
 800b7a4:	801a      	strh	r2, [r3, #0]
            while (iIndex <= pJPEG->iScanEnd)
 800b7a6:	e734      	b.n	800b612 <_ZL15JPEGDecodeMCU_PP14jpeg_image_tagiPi+0x48e>
            goto mcu_done; // that's it
 800b7a8:	bf00      	nop
 800b7aa:	e000      	b.n	800b7ae <_ZL15JPEGDecodeMCU_PP14jpeg_image_tagiPi+0x62a>
            } // while
        } // if this block not skipped
    //    if (*iSkip)
    //        (*iSkip)--; // count this block as being completed (or skipped)
    } // end of non-successive approx code
mcu_done:
 800b7ac:	bf00      	nop
    pJPEG->bb.pBuf = pBuf;
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b7b2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    pJPEG->iVLCOff = (int)(pBuf - pJPEG->ucFileBuf);
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	f503 53ae 	add.w	r3, r3, #5568	; 0x15c0
 800b7bc:	331c      	adds	r3, #28
 800b7be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b7c0:	1ad2      	subs	r2, r2, r3
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	64da      	str	r2, [r3, #76]	; 0x4c
    pJPEG->bb.ulBitOff = ulBitOff;
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b7ca:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    pJPEG->bb.ulBits = ulBits;
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b7d2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    return 0;
 800b7d6:	2300      	movs	r3, #0
    
} /* JPEGDecodeMCU_P() */
 800b7d8:	4618      	mov	r0, r3
 800b7da:	3754      	adds	r7, #84	; 0x54
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e2:	4770      	bx	lr

0800b7e4 <_ZL13JPEGDecodeMCUP14jpeg_image_tagiPi>:
// Decode the DC and 2-63 AC coefficients of the current DCT block
// For 1/4 and 1/8 scaled images, we don't store most of the AC values since we
// won't use them. For skipped MCUs (outside crop area), we don't decode any AC values
//
static int JPEGDecodeMCU(JPEGIMAGE *pJPEG, int iMCU, int *iDCPredictor)
{
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	b092      	sub	sp, #72	; 0x48
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	60f8      	str	r0, [r7, #12]
 800b7ec:	60b9      	str	r1, [r7, #8]
 800b7ee:	607a      	str	r2, [r7, #4]
    unsigned char ucHuff, *pucFast;
    uint32_t usHuff; // this prevents an unnecessary & 65535 for shorts
    uint32_t ulBitOff;
    my_ulong ulBits; // local copies to allow compiler to use register vars
    uint8_t *pBuf, *pEnd, *pEnd2;
    signed short *pMCU = &pJPEG->sMCUs[iMCU];
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b7f6:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800b7fa:	68bb      	ldr	r3, [r7, #8]
 800b7fc:	005b      	lsls	r3, r3, #1
 800b7fe:	4413      	add	r3, r2
 800b800:	62bb      	str	r3, [r7, #40]	; 0x28
    uint16_t u16MCUFlags;
    
    #define MIN_DCT_THRESHOLD 8
        
    ulBitOff = pJPEG->bb.ulBitOff;
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b808:	63fb      	str	r3, [r7, #60]	; 0x3c
    ulBits = pJPEG->bb.ulBits;
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b810:	63bb      	str	r3, [r7, #56]	; 0x38
    pBuf = pJPEG->bb.pBuf;
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b818:	637b      	str	r3, [r7, #52]	; 0x34
        
    if (ulBitOff > (REGISTER_WIDTH-17)) { // need to get more data
 800b81a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b81c:	2b0f      	cmp	r3, #15
 800b81e:	d91a      	bls.n	800b856 <_ZL13JPEGDecodeMCUP14jpeg_image_tagiPi+0x72>
        pBuf += (ulBitOff >> 3);
 800b820:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b822:	08db      	lsrs	r3, r3, #3
 800b824:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b826:	4413      	add	r3, r2
 800b828:	637b      	str	r3, [r7, #52]	; 0x34
        ulBitOff &= 7;
 800b82a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b82c:	f003 0307 	and.w	r3, r3, #7
 800b830:	63fb      	str	r3, [r7, #60]	; 0x3c
        ulBits = MOTOLONG(pBuf);
 800b832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b834:	781b      	ldrb	r3, [r3, #0]
 800b836:	061a      	lsls	r2, r3, #24
 800b838:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b83a:	3301      	adds	r3, #1
 800b83c:	781b      	ldrb	r3, [r3, #0]
 800b83e:	041b      	lsls	r3, r3, #16
 800b840:	441a      	add	r2, r3
 800b842:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b844:	3302      	adds	r3, #2
 800b846:	781b      	ldrb	r3, [r3, #0]
 800b848:	021b      	lsls	r3, r3, #8
 800b84a:	4413      	add	r3, r2
 800b84c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b84e:	3203      	adds	r2, #3
 800b850:	7812      	ldrb	r2, [r2, #0]
 800b852:	4413      	add	r3, r2
 800b854:	63bb      	str	r3, [r7, #56]	; 0x38
    }
    if (iMCU < 0) { // skip this block (cropped, or grayscale output from color)
 800b856:	68bb      	ldr	r3, [r7, #8]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	da02      	bge.n	800b862 <_ZL13JPEGDecodeMCUP14jpeg_image_tagiPi+0x7e>
        pEnd2 = (uint8_t *)&cZigZag2[1]; // we only capture the DC value
 800b85c:	4b8f      	ldr	r3, [pc, #572]	; (800ba9c <_ZL13JPEGDecodeMCUP14jpeg_image_tagiPi+0x2b8>)
 800b85e:	633b      	str	r3, [r7, #48]	; 0x30
 800b860:	e01e      	b.n	800b8a0 <_ZL13JPEGDecodeMCUP14jpeg_image_tagiPi+0xbc>
    } else if (pJPEG->iOptions & (JPEG_SCALE_QUARTER | JPEG_SCALE_EIGHTH)) { // reduced size DCT
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b866:	f003 030c 	and.w	r3, r3, #12
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d011      	beq.n	800b892 <_ZL13JPEGDecodeMCUP14jpeg_image_tagiPi+0xae>
        pMCU[1] = pMCU[8] = pMCU[9] = 0;
 800b86e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b870:	f103 0212 	add.w	r2, r3, #18
 800b874:	2300      	movs	r3, #0
 800b876:	8013      	strh	r3, [r2, #0]
 800b878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b87a:	3310      	adds	r3, #16
 800b87c:	f9b2 2000 	ldrsh.w	r2, [r2]
 800b880:	801a      	strh	r2, [r3, #0]
 800b882:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b884:	3202      	adds	r2, #2
 800b886:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b88a:	8013      	strh	r3, [r2, #0]
        pEnd2 = (uint8_t *)&cZigZag2[5]; // we only need to store the 4 elements we care about
 800b88c:	4b84      	ldr	r3, [pc, #528]	; (800baa0 <_ZL13JPEGDecodeMCUP14jpeg_image_tagiPi+0x2bc>)
 800b88e:	633b      	str	r3, [r7, #48]	; 0x30
 800b890:	e006      	b.n	800b8a0 <_ZL13JPEGDecodeMCUP14jpeg_image_tagiPi+0xbc>
    } else { // decode all the AC coefficients
        memset(pMCU, 0, 64*sizeof(short)); // pre-fill with zero since we may skip coefficients
 800b892:	2280      	movs	r2, #128	; 0x80
 800b894:	2100      	movs	r1, #0
 800b896:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b898:	f005 fab4 	bl	8010e04 <memset>
        pEnd2 = (uint8_t *)&cZigZag2[64];
 800b89c:	4b81      	ldr	r3, [pc, #516]	; (800baa4 <_ZL13JPEGDecodeMCUP14jpeg_image_tagiPi+0x2c0>)
 800b89e:	633b      	str	r3, [r7, #48]	; 0x30
    }
    u16MCUFlags = 0;
 800b8a0:	2300      	movs	r3, #0
 800b8a2:	85fb      	strh	r3, [r7, #46]	; 0x2e
    pZig = (unsigned char *)&cZigZag2[1];
 800b8a4:	4b7d      	ldr	r3, [pc, #500]	; (800ba9c <_ZL13JPEGDecodeMCUP14jpeg_image_tagiPi+0x2b8>)
 800b8a6:	643b      	str	r3, [r7, #64]	; 0x40
    pEnd = (unsigned char *)&cZigZag2[64];
 800b8a8:	4b7e      	ldr	r3, [pc, #504]	; (800baa4 <_ZL13JPEGDecodeMCUP14jpeg_image_tagiPi+0x2c0>)
 800b8aa:	627b      	str	r3, [r7, #36]	; 0x24

    // get the DC component
    pucFast = &pJPEG->ucHuffDC[pJPEG->ucDCTable * DC_TABLE_SIZE];
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800b8b2:	029b      	lsls	r3, r3, #10
 800b8b4:	f503 53ee 	add.w	r3, r3, #7616	; 0x1dc0
 800b8b8:	3318      	adds	r3, #24
 800b8ba:	68fa      	ldr	r2, [r7, #12]
 800b8bc:	4413      	add	r3, r2
 800b8be:	3304      	adds	r3, #4
 800b8c0:	623b      	str	r3, [r7, #32]
    ulCode = (ulBits >> (REGISTER_WIDTH - 12 - ulBitOff)) & 0xfff; // get as lower 12 bits
 800b8c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8c4:	f1c3 0314 	rsb	r3, r3, #20
 800b8c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b8ca:	fa22 f303 	lsr.w	r3, r2, r3
 800b8ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b8d2:	647b      	str	r3, [r7, #68]	; 0x44
    if (ulCode >= 0xf80) // it's a long code
 800b8d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b8d6:	f5b3 6f78 	cmp.w	r3, #3968	; 0xf80
 800b8da:	d303      	bcc.n	800b8e4 <_ZL13JPEGDecodeMCUP14jpeg_image_tagiPi+0x100>
        ulCode = (ulCode & 0xff); // point to long table and trim to 7-bits + 0x80 offset into long table
 800b8dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b8de:	b2db      	uxtb	r3, r3
 800b8e0:	647b      	str	r3, [r7, #68]	; 0x44
 800b8e2:	e002      	b.n	800b8ea <_ZL13JPEGDecodeMCUP14jpeg_image_tagiPi+0x106>
    else
        ulCode >>= 6; // it's a short code, use first 6 bits only
 800b8e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b8e6:	099b      	lsrs	r3, r3, #6
 800b8e8:	647b      	str	r3, [r7, #68]	; 0x44
    ucHuff = pucFast[ulCode];
 800b8ea:	6a3a      	ldr	r2, [r7, #32]
 800b8ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b8ee:	4413      	add	r3, r2
 800b8f0:	781b      	ldrb	r3, [r3, #0]
 800b8f2:	77fb      	strb	r3, [r7, #31]
    cCoeff = (signed char)pucFast[ulCode+512]; // get pre-calculated extra bits for "small" values
 800b8f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b8f6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800b8fa:	6a3a      	ldr	r2, [r7, #32]
 800b8fc:	4413      	add	r3, r2
 800b8fe:	781b      	ldrb	r3, [r3, #0]
 800b900:	77bb      	strb	r3, [r7, #30]
    if (ucHuff == 0) // invalid code
 800b902:	7ffb      	ldrb	r3, [r7, #31]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d102      	bne.n	800b90e <_ZL13JPEGDecodeMCUP14jpeg_image_tagiPi+0x12a>
        return -1;
 800b908:	f04f 33ff 	mov.w	r3, #4294967295
 800b90c:	e21f      	b.n	800bd4e <_ZL13JPEGDecodeMCUP14jpeg_image_tagiPi+0x56a>
    ulBitOff += (ucHuff >> 4); // add the Huffman length
 800b90e:	7ffb      	ldrb	r3, [r7, #31]
 800b910:	091b      	lsrs	r3, r3, #4
 800b912:	b2db      	uxtb	r3, r3
 800b914:	461a      	mov	r2, r3
 800b916:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b918:	4413      	add	r3, r2
 800b91a:	63fb      	str	r3, [r7, #60]	; 0x3c
    ucHuff &= 0xf; // get the actual code (SSSS)
 800b91c:	7ffb      	ldrb	r3, [r7, #31]
 800b91e:	f003 030f 	and.w	r3, r3, #15
 800b922:	77fb      	strb	r3, [r7, #31]
    if (ucHuff) // if there is a change to the DC value
 800b924:	7ffb      	ldrb	r3, [r7, #31]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d04c      	beq.n	800b9c4 <_ZL13JPEGDecodeMCUP14jpeg_image_tagiPi+0x1e0>
    { // get the 'extra' bits
        if (cCoeff)
 800b92a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d007      	beq.n	800b942 <_ZL13JPEGDecodeMCUP14jpeg_image_tagiPi+0x15e>
        {
            (*iDCPredictor) += cCoeff;
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	681a      	ldr	r2, [r3, #0]
 800b936:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800b93a:	441a      	add	r2, r3
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	601a      	str	r2, [r3, #0]
 800b940:	e040      	b.n	800b9c4 <_ZL13JPEGDecodeMCUP14jpeg_image_tagiPi+0x1e0>
        }
        else
        {
            if (ulBitOff > (REGISTER_WIDTH - 17)) // need to get more data
 800b942:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b944:	2b0f      	cmp	r3, #15
 800b946:	d91a      	bls.n	800b97e <_ZL13JPEGDecodeMCUP14jpeg_image_tagiPi+0x19a>
            {
                pBuf += (ulBitOff >> 3);
 800b948:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b94a:	08db      	lsrs	r3, r3, #3
 800b94c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b94e:	4413      	add	r3, r2
 800b950:	637b      	str	r3, [r7, #52]	; 0x34
                ulBitOff &= 7;
 800b952:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b954:	f003 0307 	and.w	r3, r3, #7
 800b958:	63fb      	str	r3, [r7, #60]	; 0x3c
                ulBits = MOTOLONG(pBuf);
 800b95a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b95c:	781b      	ldrb	r3, [r3, #0]
 800b95e:	061a      	lsls	r2, r3, #24
 800b960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b962:	3301      	adds	r3, #1
 800b964:	781b      	ldrb	r3, [r3, #0]
 800b966:	041b      	lsls	r3, r3, #16
 800b968:	441a      	add	r2, r3
 800b96a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b96c:	3302      	adds	r3, #2
 800b96e:	781b      	ldrb	r3, [r3, #0]
 800b970:	021b      	lsls	r3, r3, #8
 800b972:	4413      	add	r3, r2
 800b974:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b976:	3203      	adds	r2, #3
 800b978:	7812      	ldrb	r2, [r2, #0]
 800b97a:	4413      	add	r3, r2
 800b97c:	63bb      	str	r3, [r7, #56]	; 0x38
            }
            ulCode = ulBits << ulBitOff;
 800b97e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b980:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b982:	fa02 f303 	lsl.w	r3, r2, r3
 800b986:	647b      	str	r3, [r7, #68]	; 0x44
            ulTemp = ~(my_ulong)(((my_long)ulCode)>>(REGISTER_WIDTH-1)); // slide sign bit across other 63/31 bits
 800b988:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b98a:	17db      	asrs	r3, r3, #31
 800b98c:	43db      	mvns	r3, r3
 800b98e:	61bb      	str	r3, [r7, #24]
            ulCode >>= (REGISTER_WIDTH - ucHuff);
 800b990:	7ffb      	ldrb	r3, [r7, #31]
 800b992:	f1c3 0320 	rsb	r3, r3, #32
 800b996:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b998:	fa22 f303 	lsr.w	r3, r2, r3
 800b99c:	647b      	str	r3, [r7, #68]	; 0x44
            ulCode -= ulTemp>>(REGISTER_WIDTH-ucHuff);
 800b99e:	7ffb      	ldrb	r3, [r7, #31]
 800b9a0:	f1c3 0320 	rsb	r3, r3, #32
 800b9a4:	69ba      	ldr	r2, [r7, #24]
 800b9a6:	fa22 f303 	lsr.w	r3, r2, r3
 800b9aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b9ac:	1ad3      	subs	r3, r2, r3
 800b9ae:	647b      	str	r3, [r7, #68]	; 0x44
            ulBitOff += ucHuff; // add bit length
 800b9b0:	7ffb      	ldrb	r3, [r7, #31]
 800b9b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b9b4:	4413      	add	r3, r2
 800b9b6:	63fb      	str	r3, [r7, #60]	; 0x3c
            (*iDCPredictor) += (int)ulCode;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681a      	ldr	r2, [r3, #0]
 800b9bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b9be:	441a      	add	r2, r3
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	601a      	str	r2, [r3, #0]
        }
    }
    if (iMCU >= 0) { // non-skipped block
 800b9c4:	68bb      	ldr	r3, [r7, #8]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	db04      	blt.n	800b9d4 <_ZL13JPEGDecodeMCUP14jpeg_image_tagiPi+0x1f0>
        pMCU[0] = (short)*iDCPredictor; // store in MCU[0]
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	b21a      	sxth	r2, r3
 800b9d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9d2:	801a      	strh	r2, [r3, #0]
    }
    if (pJPEG->ucACTable > 1) // unsupported
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800b9da:	2b01      	cmp	r3, #1
 800b9dc:	d902      	bls.n	800b9e4 <_ZL13JPEGDecodeMCUP14jpeg_image_tagiPi+0x200>
        return -1;
 800b9de:	f04f 33ff 	mov.w	r3, #4294967295
 800b9e2:	e1b4      	b.n	800bd4e <_ZL13JPEGDecodeMCUP14jpeg_image_tagiPi+0x56a>
    if (pJPEG->iScanEnd == 0) { // first scan of progressive has only DC values
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d101      	bne.n	800b9f2 <_ZL13JPEGDecodeMCUP14jpeg_image_tagiPi+0x20e>
        return 0; // we're done
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	e1ad      	b.n	800bd4e <_ZL13JPEGDecodeMCUP14jpeg_image_tagiPi+0x56a>
    }
    // Now get the other 63 AC coefficients
    pFast = &pJPEG->usHuffAC[pJPEG->ucACTable * HUFF11SIZE];
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800b9f8:	02db      	lsls	r3, r3, #11
 800b9fa:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 800b9fe:	330c      	adds	r3, #12
 800ba00:	005b      	lsls	r3, r3, #1
 800ba02:	68fa      	ldr	r2, [r7, #12]
 800ba04:	4413      	add	r3, r2
 800ba06:	3304      	adds	r3, #4
 800ba08:	617b      	str	r3, [r7, #20]
    if (pJPEG->b11Bit) // 11-bit "slow" tables used
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	f000 80c3 	beq.w	800bb9c <_ZL13JPEGDecodeMCUP14jpeg_image_tagiPi+0x3b8>
    {
//            if (pJPEG->pHuffACFast == pJPEG->huffacFast[1]) // second table
//                pFast = &pJPEG->ucAltHuff[0];
        while (pZig < pEnd)
 800ba16:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ba18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba1a:	429a      	cmp	r2, r3
 800ba1c:	f080 817f 	bcs.w	800bd1e <_ZL13JPEGDecodeMCUP14jpeg_image_tagiPi+0x53a>
        {
            if (ulBitOff >(REGISTER_WIDTH - 17)) // need to get more data
 800ba20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba22:	2b0f      	cmp	r3, #15
 800ba24:	d91a      	bls.n	800ba5c <_ZL13JPEGDecodeMCUP14jpeg_image_tagiPi+0x278>
            {
                pBuf += (ulBitOff >> 3);
 800ba26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba28:	08db      	lsrs	r3, r3, #3
 800ba2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ba2c:	4413      	add	r3, r2
 800ba2e:	637b      	str	r3, [r7, #52]	; 0x34
                ulBitOff &= 7;
 800ba30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba32:	f003 0307 	and.w	r3, r3, #7
 800ba36:	63fb      	str	r3, [r7, #60]	; 0x3c
                ulBits = MOTOLONG(pBuf);
 800ba38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba3a:	781b      	ldrb	r3, [r3, #0]
 800ba3c:	061a      	lsls	r2, r3, #24
 800ba3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba40:	3301      	adds	r3, #1
 800ba42:	781b      	ldrb	r3, [r3, #0]
 800ba44:	041b      	lsls	r3, r3, #16
 800ba46:	441a      	add	r2, r3
 800ba48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba4a:	3302      	adds	r3, #2
 800ba4c:	781b      	ldrb	r3, [r3, #0]
 800ba4e:	021b      	lsls	r3, r3, #8
 800ba50:	4413      	add	r3, r2
 800ba52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ba54:	3203      	adds	r2, #3
 800ba56:	7812      	ldrb	r2, [r2, #0]
 800ba58:	4413      	add	r3, r2
 800ba5a:	63bb      	str	r3, [r7, #56]	; 0x38
            }
            ulCode = (ulBits >> (REGISTER_WIDTH - 16 - ulBitOff)) & 0xffff; // get as lower 16 bits
 800ba5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba5e:	f1c3 0310 	rsb	r3, r3, #16
 800ba62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ba64:	fa22 f303 	lsr.w	r3, r2, r3
 800ba68:	b29b      	uxth	r3, r3
 800ba6a:	647b      	str	r3, [r7, #68]	; 0x44
            if (ulCode >= 0xf000) // first 4 bits = 1, use long table
 800ba6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba6e:	f5b3 4f70 	cmp.w	r3, #61440	; 0xf000
 800ba72:	d304      	bcc.n	800ba7e <_ZL13JPEGDecodeMCUP14jpeg_image_tagiPi+0x29a>
                ulCode = (ulCode & 0x1fff);
 800ba74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba76:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ba7a:	647b      	str	r3, [r7, #68]	; 0x44
 800ba7c:	e002      	b.n	800ba84 <_ZL13JPEGDecodeMCUP14jpeg_image_tagiPi+0x2a0>
            else
                ulCode >>= 4; // use lower 12 bits (short table)
 800ba7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba80:	091b      	lsrs	r3, r3, #4
 800ba82:	647b      	str	r3, [r7, #68]	; 0x44
            usHuff = pFast[ulCode];
 800ba84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba86:	005b      	lsls	r3, r3, #1
 800ba88:	697a      	ldr	r2, [r7, #20]
 800ba8a:	4413      	add	r3, r2
 800ba8c:	881b      	ldrh	r3, [r3, #0]
 800ba8e:	613b      	str	r3, [r7, #16]
            if (usHuff == 0) // invalid code
 800ba90:	693b      	ldr	r3, [r7, #16]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d108      	bne.n	800baa8 <_ZL13JPEGDecodeMCUP14jpeg_image_tagiPi+0x2c4>
                return -1;
 800ba96:	f04f 33ff 	mov.w	r3, #4294967295
 800ba9a:	e158      	b.n	800bd4e <_ZL13JPEGDecodeMCUP14jpeg_image_tagiPi+0x56a>
 800ba9c:	08011069 	.word	0x08011069
 800baa0:	0801106d 	.word	0x0801106d
 800baa4:	080110a8 	.word	0x080110a8
            ulBitOff += (usHuff >> 8); // add length
 800baa8:	693b      	ldr	r3, [r7, #16]
 800baaa:	0a1b      	lsrs	r3, r3, #8
 800baac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800baae:	4413      	add	r3, r2
 800bab0:	63fb      	str	r3, [r7, #60]	; 0x3c
            usHuff &= 0xff; // get code (RRRR/SSSS)
 800bab2:	693b      	ldr	r3, [r7, #16]
 800bab4:	b2db      	uxtb	r3, r3
 800bab6:	613b      	str	r3, [r7, #16]
            if (usHuff == 0) // no more AC components
 800bab8:	693b      	ldr	r3, [r7, #16]
 800baba:	2b00      	cmp	r3, #0
 800babc:	f000 812a 	beq.w	800bd14 <_ZL13JPEGDecodeMCUP14jpeg_image_tagiPi+0x530>
            {
                goto mcu_done;
            }
            pZig += (usHuff >> 4);  // get the skip amount (RRRR)
 800bac0:	693b      	ldr	r3, [r7, #16]
 800bac2:	091b      	lsrs	r3, r3, #4
 800bac4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bac6:	4413      	add	r3, r2
 800bac8:	643b      	str	r3, [r7, #64]	; 0x40
            usHuff &= 0xf; // get (SSSS) - extra length
 800baca:	693b      	ldr	r3, [r7, #16]
 800bacc:	f003 030f 	and.w	r3, r3, #15
 800bad0:	613b      	str	r3, [r7, #16]
            if (pZig < pEnd2 && usHuff)
 800bad2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bad6:	429a      	cmp	r2, r3
 800bad8:	d239      	bcs.n	800bb4e <_ZL13JPEGDecodeMCUP14jpeg_image_tagiPi+0x36a>
 800bada:	693b      	ldr	r3, [r7, #16]
 800badc:	2b00      	cmp	r3, #0
 800bade:	d036      	beq.n	800bb4e <_ZL13JPEGDecodeMCUP14jpeg_image_tagiPi+0x36a>
            {
                ulCode = ulBits << ulBitOff;
 800bae0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bae2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bae4:	fa02 f303 	lsl.w	r3, r2, r3
 800bae8:	647b      	str	r3, [r7, #68]	; 0x44
                ulTemp = ~(my_ulong) (((my_long) ulCode) >> (REGISTER_WIDTH-1)); // slide sign bit across other 63 bits
 800baea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800baec:	17db      	asrs	r3, r3, #31
 800baee:	43db      	mvns	r3, r3
 800baf0:	61bb      	str	r3, [r7, #24]
                ulCode >>= (REGISTER_WIDTH - usHuff);
 800baf2:	693b      	ldr	r3, [r7, #16]
 800baf4:	f1c3 0320 	rsb	r3, r3, #32
 800baf8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bafa:	fa22 f303 	lsr.w	r3, r2, r3
 800bafe:	647b      	str	r3, [r7, #68]	; 0x44
                ulCode -= ulTemp >> (REGISTER_WIDTH - usHuff);
 800bb00:	693b      	ldr	r3, [r7, #16]
 800bb02:	f1c3 0320 	rsb	r3, r3, #32
 800bb06:	69ba      	ldr	r2, [r7, #24]
 800bb08:	fa22 f303 	lsr.w	r3, r2, r3
 800bb0c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bb0e:	1ad3      	subs	r3, r2, r3
 800bb10:	647b      	str	r3, [r7, #68]	; 0x44
                u16MCUFlags |= 1<<(*pZig & 7); // keep track of occupied columns
 800bb12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bb14:	781b      	ldrb	r3, [r3, #0]
 800bb16:	f003 0307 	and.w	r3, r3, #7
 800bb1a:	2201      	movs	r2, #1
 800bb1c:	fa02 f303 	lsl.w	r3, r2, r3
 800bb20:	b21a      	sxth	r2, r3
 800bb22:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800bb26:	4313      	orrs	r3, r2
 800bb28:	b21b      	sxth	r3, r3
 800bb2a:	85fb      	strh	r3, [r7, #46]	; 0x2e
                u16MCUFlags |= *pZig << 8; // for testing occupied rows
 800bb2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bb2e:	781b      	ldrb	r3, [r3, #0]
 800bb30:	021b      	lsls	r3, r3, #8
 800bb32:	b21a      	sxth	r2, r3
 800bb34:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800bb38:	4313      	orrs	r3, r2
 800bb3a:	b21b      	sxth	r3, r3
 800bb3c:	85fb      	strh	r3, [r7, #46]	; 0x2e
                pMCU[*pZig] = (signed short)ulCode; // store AC coefficient (already reordered)
 800bb3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bb40:	781b      	ldrb	r3, [r3, #0]
 800bb42:	005b      	lsls	r3, r3, #1
 800bb44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bb46:	4413      	add	r3, r2
 800bb48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bb4a:	b212      	sxth	r2, r2
 800bb4c:	801a      	strh	r2, [r3, #0]
            }
            ulBitOff += usHuff; // add (SSSS) extra length
 800bb4e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bb50:	693b      	ldr	r3, [r7, #16]
 800bb52:	4413      	add	r3, r2
 800bb54:	63fb      	str	r3, [r7, #60]	; 0x3c
            pZig++;
 800bb56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bb58:	3301      	adds	r3, #1
 800bb5a:	643b      	str	r3, [r7, #64]	; 0x40
            if (ulBitOff > (REGISTER_WIDTH - 17)) // need to get more data
 800bb5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb5e:	2b0f      	cmp	r3, #15
 800bb60:	f67f af59 	bls.w	800ba16 <_ZL13JPEGDecodeMCUP14jpeg_image_tagiPi+0x232>
            {
                pBuf += (ulBitOff >> 3);
 800bb64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb66:	08db      	lsrs	r3, r3, #3
 800bb68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bb6a:	4413      	add	r3, r2
 800bb6c:	637b      	str	r3, [r7, #52]	; 0x34
                ulBitOff &= 7;
 800bb6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb70:	f003 0307 	and.w	r3, r3, #7
 800bb74:	63fb      	str	r3, [r7, #60]	; 0x3c
                ulBits = MOTOLONG(pBuf);
 800bb76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb78:	781b      	ldrb	r3, [r3, #0]
 800bb7a:	061a      	lsls	r2, r3, #24
 800bb7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb7e:	3301      	adds	r3, #1
 800bb80:	781b      	ldrb	r3, [r3, #0]
 800bb82:	041b      	lsls	r3, r3, #16
 800bb84:	441a      	add	r2, r3
 800bb86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb88:	3302      	adds	r3, #2
 800bb8a:	781b      	ldrb	r3, [r3, #0]
 800bb8c:	021b      	lsls	r3, r3, #8
 800bb8e:	4413      	add	r3, r2
 800bb90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bb92:	3203      	adds	r2, #3
 800bb94:	7812      	ldrb	r2, [r2, #0]
 800bb96:	4413      	add	r3, r2
 800bb98:	63bb      	str	r3, [r7, #56]	; 0x38
        while (pZig < pEnd)
 800bb9a:	e73c      	b.n	800ba16 <_ZL13JPEGDecodeMCUP14jpeg_image_tagiPi+0x232>
            }
        } // while
    }
    else // 10-bit "fast" tables used
    {
        while (pZig < pEnd)
 800bb9c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bb9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bba0:	429a      	cmp	r2, r3
 800bba2:	f080 80b9 	bcs.w	800bd18 <_ZL13JPEGDecodeMCUP14jpeg_image_tagiPi+0x534>
        {
            if (ulBitOff >(REGISTER_WIDTH - 17)) // need to get more data
 800bba6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bba8:	2b0f      	cmp	r3, #15
 800bbaa:	d91a      	bls.n	800bbe2 <_ZL13JPEGDecodeMCUP14jpeg_image_tagiPi+0x3fe>
            {
                pBuf += (ulBitOff >> 3);
 800bbac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbae:	08db      	lsrs	r3, r3, #3
 800bbb0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bbb2:	4413      	add	r3, r2
 800bbb4:	637b      	str	r3, [r7, #52]	; 0x34
                ulBitOff &= 7;
 800bbb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbb8:	f003 0307 	and.w	r3, r3, #7
 800bbbc:	63fb      	str	r3, [r7, #60]	; 0x3c
                ulBits = MOTOLONG(pBuf);
 800bbbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbc0:	781b      	ldrb	r3, [r3, #0]
 800bbc2:	061a      	lsls	r2, r3, #24
 800bbc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbc6:	3301      	adds	r3, #1
 800bbc8:	781b      	ldrb	r3, [r3, #0]
 800bbca:	041b      	lsls	r3, r3, #16
 800bbcc:	441a      	add	r2, r3
 800bbce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbd0:	3302      	adds	r3, #2
 800bbd2:	781b      	ldrb	r3, [r3, #0]
 800bbd4:	021b      	lsls	r3, r3, #8
 800bbd6:	4413      	add	r3, r2
 800bbd8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bbda:	3203      	adds	r2, #3
 800bbdc:	7812      	ldrb	r2, [r2, #0]
 800bbde:	4413      	add	r3, r2
 800bbe0:	63bb      	str	r3, [r7, #56]	; 0x38
            }
            ulCode = (ulBits >> (REGISTER_WIDTH - 16 - ulBitOff)) & 0xffff; // get as lower 16 bits
 800bbe2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbe4:	f1c3 0310 	rsb	r3, r3, #16
 800bbe8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bbea:	fa22 f303 	lsr.w	r3, r2, r3
 800bbee:	b29b      	uxth	r3, r3
 800bbf0:	647b      	str	r3, [r7, #68]	; 0x44
            if (ulCode >= 0xfc00) // first 6 bits = 1, use long table
 800bbf2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bbf4:	f5b3 4f7c 	cmp.w	r3, #64512	; 0xfc00
 800bbf8:	d304      	bcc.n	800bc04 <_ZL13JPEGDecodeMCUP14jpeg_image_tagiPi+0x420>
                ulCode = (ulCode & 0x7ff); // (ulCode & 0x3ff) + 0x400;
 800bbfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bbfc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bc00:	647b      	str	r3, [r7, #68]	; 0x44
 800bc02:	e002      	b.n	800bc0a <_ZL13JPEGDecodeMCUP14jpeg_image_tagiPi+0x426>
            else
                ulCode >>= 6; // use lower 10 bits (short table)
 800bc04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bc06:	099b      	lsrs	r3, r3, #6
 800bc08:	647b      	str	r3, [r7, #68]	; 0x44
            usHuff = pFast[ulCode];
 800bc0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bc0c:	005b      	lsls	r3, r3, #1
 800bc0e:	697a      	ldr	r2, [r7, #20]
 800bc10:	4413      	add	r3, r2
 800bc12:	881b      	ldrh	r3, [r3, #0]
 800bc14:	613b      	str	r3, [r7, #16]
            if (usHuff == 0) // invalid code
 800bc16:	693b      	ldr	r3, [r7, #16]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d102      	bne.n	800bc22 <_ZL13JPEGDecodeMCUP14jpeg_image_tagiPi+0x43e>
                return -1;
 800bc1c:	f04f 33ff 	mov.w	r3, #4294967295
 800bc20:	e095      	b.n	800bd4e <_ZL13JPEGDecodeMCUP14jpeg_image_tagiPi+0x56a>
            ulBitOff += (usHuff >> 8); // add length
 800bc22:	693b      	ldr	r3, [r7, #16]
 800bc24:	0a1b      	lsrs	r3, r3, #8
 800bc26:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bc28:	4413      	add	r3, r2
 800bc2a:	63fb      	str	r3, [r7, #60]	; 0x3c
            usHuff &= 0xff; // get code (RRRR/SSSS)
 800bc2c:	693b      	ldr	r3, [r7, #16]
 800bc2e:	b2db      	uxtb	r3, r3
 800bc30:	613b      	str	r3, [r7, #16]
            if (usHuff == 0) // no more AC components
 800bc32:	693b      	ldr	r3, [r7, #16]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d071      	beq.n	800bd1c <_ZL13JPEGDecodeMCUP14jpeg_image_tagiPi+0x538>
            {
                goto mcu_done;
            }
            pZig += (usHuff >> 4);  // get the skip amount (RRRR)
 800bc38:	693b      	ldr	r3, [r7, #16]
 800bc3a:	091b      	lsrs	r3, r3, #4
 800bc3c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bc3e:	4413      	add	r3, r2
 800bc40:	643b      	str	r3, [r7, #64]	; 0x40
            usHuff &= 0xf; // get (SSSS) - extra length
 800bc42:	693b      	ldr	r3, [r7, #16]
 800bc44:	f003 030f 	and.w	r3, r3, #15
 800bc48:	613b      	str	r3, [r7, #16]
            if (pZig < pEnd2 && usHuff)
 800bc4a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bc4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc4e:	429a      	cmp	r2, r3
 800bc50:	d239      	bcs.n	800bcc6 <_ZL13JPEGDecodeMCUP14jpeg_image_tagiPi+0x4e2>
 800bc52:	693b      	ldr	r3, [r7, #16]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d036      	beq.n	800bcc6 <_ZL13JPEGDecodeMCUP14jpeg_image_tagiPi+0x4e2>
            {
                ulCode = ulBits << ulBitOff;
 800bc58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bc5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc5c:	fa02 f303 	lsl.w	r3, r2, r3
 800bc60:	647b      	str	r3, [r7, #68]	; 0x44
                ulTemp = ~(my_ulong) (((my_long) ulCode) >> (REGISTER_WIDTH-1)); // slide sign bit across other 63 bits
 800bc62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bc64:	17db      	asrs	r3, r3, #31
 800bc66:	43db      	mvns	r3, r3
 800bc68:	61bb      	str	r3, [r7, #24]
                ulCode >>= (REGISTER_WIDTH - usHuff);
 800bc6a:	693b      	ldr	r3, [r7, #16]
 800bc6c:	f1c3 0320 	rsb	r3, r3, #32
 800bc70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bc72:	fa22 f303 	lsr.w	r3, r2, r3
 800bc76:	647b      	str	r3, [r7, #68]	; 0x44
                ulCode -= ulTemp >> (REGISTER_WIDTH - usHuff);
 800bc78:	693b      	ldr	r3, [r7, #16]
 800bc7a:	f1c3 0320 	rsb	r3, r3, #32
 800bc7e:	69ba      	ldr	r2, [r7, #24]
 800bc80:	fa22 f303 	lsr.w	r3, r2, r3
 800bc84:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bc86:	1ad3      	subs	r3, r2, r3
 800bc88:	647b      	str	r3, [r7, #68]	; 0x44
                u16MCUFlags |= 1<<(*pZig & 7); // keep track of occupied columns
 800bc8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc8c:	781b      	ldrb	r3, [r3, #0]
 800bc8e:	f003 0307 	and.w	r3, r3, #7
 800bc92:	2201      	movs	r2, #1
 800bc94:	fa02 f303 	lsl.w	r3, r2, r3
 800bc98:	b21a      	sxth	r2, r3
 800bc9a:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800bc9e:	4313      	orrs	r3, r2
 800bca0:	b21b      	sxth	r3, r3
 800bca2:	85fb      	strh	r3, [r7, #46]	; 0x2e
                u16MCUFlags |= *pZig << 8; // for testing occupied rows
 800bca4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bca6:	781b      	ldrb	r3, [r3, #0]
 800bca8:	021b      	lsls	r3, r3, #8
 800bcaa:	b21a      	sxth	r2, r3
 800bcac:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800bcb0:	4313      	orrs	r3, r2
 800bcb2:	b21b      	sxth	r3, r3
 800bcb4:	85fb      	strh	r3, [r7, #46]	; 0x2e
                pMCU[*pZig] = (signed short)ulCode; // store AC coefficient (already reordered)
 800bcb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bcb8:	781b      	ldrb	r3, [r3, #0]
 800bcba:	005b      	lsls	r3, r3, #1
 800bcbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bcbe:	4413      	add	r3, r2
 800bcc0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bcc2:	b212      	sxth	r2, r2
 800bcc4:	801a      	strh	r2, [r3, #0]
            }
            ulBitOff += usHuff; // add (SSSS) extra length
 800bcc6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bcc8:	693b      	ldr	r3, [r7, #16]
 800bcca:	4413      	add	r3, r2
 800bccc:	63fb      	str	r3, [r7, #60]	; 0x3c
            pZig++;
 800bcce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bcd0:	3301      	adds	r3, #1
 800bcd2:	643b      	str	r3, [r7, #64]	; 0x40
            if (ulBitOff >(REGISTER_WIDTH - 17)) // need to get more data
 800bcd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcd6:	2b0f      	cmp	r3, #15
 800bcd8:	f67f af60 	bls.w	800bb9c <_ZL13JPEGDecodeMCUP14jpeg_image_tagiPi+0x3b8>
            {
                pBuf += (ulBitOff >> 3);
 800bcdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcde:	08db      	lsrs	r3, r3, #3
 800bce0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bce2:	4413      	add	r3, r2
 800bce4:	637b      	str	r3, [r7, #52]	; 0x34
                ulBitOff &= 7;
 800bce6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bce8:	f003 0307 	and.w	r3, r3, #7
 800bcec:	63fb      	str	r3, [r7, #60]	; 0x3c
                ulBits = MOTOLONG(pBuf);
 800bcee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcf0:	781b      	ldrb	r3, [r3, #0]
 800bcf2:	061a      	lsls	r2, r3, #24
 800bcf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcf6:	3301      	adds	r3, #1
 800bcf8:	781b      	ldrb	r3, [r3, #0]
 800bcfa:	041b      	lsls	r3, r3, #16
 800bcfc:	441a      	add	r2, r3
 800bcfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd00:	3302      	adds	r3, #2
 800bd02:	781b      	ldrb	r3, [r3, #0]
 800bd04:	021b      	lsls	r3, r3, #8
 800bd06:	4413      	add	r3, r2
 800bd08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bd0a:	3203      	adds	r2, #3
 800bd0c:	7812      	ldrb	r2, [r2, #0]
 800bd0e:	4413      	add	r3, r2
 800bd10:	63bb      	str	r3, [r7, #56]	; 0x38
        while (pZig < pEnd)
 800bd12:	e743      	b.n	800bb9c <_ZL13JPEGDecodeMCUP14jpeg_image_tagiPi+0x3b8>
                goto mcu_done;
 800bd14:	bf00      	nop
 800bd16:	e002      	b.n	800bd1e <_ZL13JPEGDecodeMCUP14jpeg_image_tagiPi+0x53a>
            }
      } // while
    } // 10-bit tables
mcu_done:
 800bd18:	bf00      	nop
 800bd1a:	e000      	b.n	800bd1e <_ZL13JPEGDecodeMCUP14jpeg_image_tagiPi+0x53a>
                goto mcu_done;
 800bd1c:	bf00      	nop
    pJPEG->bb.pBuf = pBuf;
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bd22:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    pJPEG->iVLCOff = (int)(pBuf - pJPEG->ucFileBuf);
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	f503 53ae 	add.w	r3, r3, #5568	; 0x15c0
 800bd2c:	331c      	adds	r3, #28
 800bd2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bd30:	1ad2      	subs	r2, r2, r3
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	64da      	str	r2, [r3, #76]	; 0x4c
    pJPEG->bb.ulBitOff = ulBitOff;
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bd3a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    pJPEG->bb.ulBits = ulBits;
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bd42:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    pJPEG->u16MCUFlags = u16MCUFlags;
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800bd4a:	87da      	strh	r2, [r3, #62]	; 0x3e
    return 0;
 800bd4c:	2300      	movs	r3, #0
} /* JPEGDecodeMCU() */
 800bd4e:	4618      	mov	r0, r3
 800bd50:	3748      	adds	r7, #72	; 0x48
 800bd52:	46bd      	mov	sp, r7
 800bd54:	bd80      	pop	{r7, pc}
 800bd56:	bf00      	nop

0800bd58 <_ZL8JPEGIDCTP14jpeg_image_tagii>:
//
// Inverse DCT
//
static void JPEGIDCT(JPEGIMAGE *pJPEG, int iMCUOffset, int iQuantTable)
{
 800bd58:	b480      	push	{r7}
 800bd5a:	b09d      	sub	sp, #116	; 0x74
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	60f8      	str	r0, [r7, #12]
 800bd60:	60b9      	str	r1, [r7, #8]
 800bd62:	607a      	str	r2, [r7, #4]
    signed int z5,z10,z11,z12,z13;
    signed int tmp0,tmp1,tmp2,tmp3,tmp4,tmp5;
    signed short *pQuant;
    unsigned char *pOutput;
    uint16_t u16MCUFlags;
    int16_t *pMCUSrc = &pJPEG->sMCUs[iMCUOffset];
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd6a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800bd6e:	68bb      	ldr	r3, [r7, #8]
 800bd70:	005b      	lsls	r3, r3, #1
 800bd72:	4413      	add	r3, r2
 800bd74:	61fb      	str	r3, [r7, #28]
int16x8_t mmxRow0, mmxRow1, mmxRow2, mmxRow3, mmxRow4, mmxRow5, mmxRow6, mmxRow7;
int16x8_t mmxTemp, mmxTemp0, mmxTemp1, mmxTemp2, mmxTemp3, mmxTemp4, mmxTemp5, mmxTemp6, mmxTemp7, mmxTemp10, mmxTemp11, mmxTemp12, mmxTemp13;
int16x8_t mmxZ5, mmxZ10, mmxZ11, mmxZ12, mmxZ13;
#endif // HAS_NEON
 
    u16MCUFlags = pJPEG->u16MCUFlags;
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bd7a:	847b      	strh	r3, [r7, #34]	; 0x22
        
    // my shortcut method appears to violate patent 20020080052
    // but the patent is invalidated by prior art:
    // http://netilium.org/~mad/dtj/DTJ/DTJK04/
    pQuant = &pJPEG->sQuantTable[iQuantTable * DCTSIZE];
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	019b      	lsls	r3, r3, #6
 800bd80:	f603 13ec 	addw	r3, r3, #2540	; 0x9ec
 800bd84:	005b      	lsls	r3, r3, #1
 800bd86:	68fa      	ldr	r2, [r7, #12]
 800bd88:	4413      	add	r3, r2
 800bd8a:	3304      	adds	r3, #4
 800bd8c:	61bb      	str	r3, [r7, #24]
    if (pJPEG->iOptions & JPEG_SCALE_QUARTER) // special case
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bd92:	f003 0304 	and.w	r3, r3, #4
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d06c      	beq.n	800be74 <_ZL8JPEGIDCTP14jpeg_image_tagii+0x11c>
    {
        /* Column 0 */
        tmp4 = pMCUSrc[0] * pQuant[0];
 800bd9a:	69fb      	ldr	r3, [r7, #28]
 800bd9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bda0:	461a      	mov	r2, r3
 800bda2:	69bb      	ldr	r3, [r7, #24]
 800bda4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bda8:	fb02 f303 	mul.w	r3, r2, r3
 800bdac:	62fb      	str	r3, [r7, #44]	; 0x2c
        tmp5 = pMCUSrc[8] * pQuant[8];
 800bdae:	69fb      	ldr	r3, [r7, #28]
 800bdb0:	3310      	adds	r3, #16
 800bdb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bdb6:	461a      	mov	r2, r3
 800bdb8:	69bb      	ldr	r3, [r7, #24]
 800bdba:	3310      	adds	r3, #16
 800bdbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bdc0:	fb02 f303 	mul.w	r3, r2, r3
 800bdc4:	62bb      	str	r3, [r7, #40]	; 0x28
        tmp0 = tmp4 + tmp5;
 800bdc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bdc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdca:	4413      	add	r3, r2
 800bdcc:	63fb      	str	r3, [r7, #60]	; 0x3c
        tmp2 = tmp4 - tmp5;
 800bdce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bdd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdd2:	1ad3      	subs	r3, r2, r3
 800bdd4:	637b      	str	r3, [r7, #52]	; 0x34
        /* Column 1 */
        tmp4 = pMCUSrc[1] * pQuant[1];
 800bdd6:	69fb      	ldr	r3, [r7, #28]
 800bdd8:	3302      	adds	r3, #2
 800bdda:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bdde:	461a      	mov	r2, r3
 800bde0:	69bb      	ldr	r3, [r7, #24]
 800bde2:	3302      	adds	r3, #2
 800bde4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bde8:	fb02 f303 	mul.w	r3, r2, r3
 800bdec:	62fb      	str	r3, [r7, #44]	; 0x2c
        tmp5 = pMCUSrc[9] * pQuant[9];
 800bdee:	69fb      	ldr	r3, [r7, #28]
 800bdf0:	3312      	adds	r3, #18
 800bdf2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bdf6:	461a      	mov	r2, r3
 800bdf8:	69bb      	ldr	r3, [r7, #24]
 800bdfa:	3312      	adds	r3, #18
 800bdfc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800be00:	fb02 f303 	mul.w	r3, r2, r3
 800be04:	62bb      	str	r3, [r7, #40]	; 0x28
        tmp1 = tmp4 + tmp5;
 800be06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800be08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be0a:	4413      	add	r3, r2
 800be0c:	63bb      	str	r3, [r7, #56]	; 0x38
        tmp3 = tmp4 - tmp5;
 800be0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800be10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be12:	1ad3      	subs	r3, r2, r3
 800be14:	633b      	str	r3, [r7, #48]	; 0x30
        /* Pass 2: process 2 rows, store into output array. */
        /* Row 0 */
        pOutput = (unsigned char *)pMCUSrc; // store output pixels back into MCU
 800be16:	69fb      	ldr	r3, [r7, #28]
 800be18:	627b      	str	r3, [r7, #36]	; 0x24
        pOutput[0] = ucRangeTable[(((tmp0 + tmp1)>>5) & 0x3ff)];
 800be1a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800be1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be1e:	4413      	add	r3, r2
 800be20:	115b      	asrs	r3, r3, #5
 800be22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800be26:	4a73      	ldr	r2, [pc, #460]	; (800bff4 <_ZL8JPEGIDCTP14jpeg_image_tagii+0x29c>)
 800be28:	5cd2      	ldrb	r2, [r2, r3]
 800be2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be2c:	701a      	strb	r2, [r3, #0]
        pOutput[1] = ucRangeTable[(((tmp0 - tmp1)>>5) & 0x3ff)];
 800be2e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800be30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be32:	1ad3      	subs	r3, r2, r3
 800be34:	115b      	asrs	r3, r3, #5
 800be36:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800be3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be3c:	3301      	adds	r3, #1
 800be3e:	496d      	ldr	r1, [pc, #436]	; (800bff4 <_ZL8JPEGIDCTP14jpeg_image_tagii+0x29c>)
 800be40:	5c8a      	ldrb	r2, [r1, r2]
 800be42:	701a      	strb	r2, [r3, #0]
        /* Row 1 */
        pOutput[2] = ucRangeTable[(((tmp2 + tmp3)>>5) & 0x3ff)];
 800be44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800be46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be48:	4413      	add	r3, r2
 800be4a:	115b      	asrs	r3, r3, #5
 800be4c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800be50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be52:	3302      	adds	r3, #2
 800be54:	4967      	ldr	r1, [pc, #412]	; (800bff4 <_ZL8JPEGIDCTP14jpeg_image_tagii+0x29c>)
 800be56:	5c8a      	ldrb	r2, [r1, r2]
 800be58:	701a      	strb	r2, [r3, #0]
        pOutput[3] = ucRangeTable[(((tmp2 - tmp3)>>5) & 0x3ff)];
 800be5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800be5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be5e:	1ad3      	subs	r3, r2, r3
 800be60:	115b      	asrs	r3, r3, #5
 800be62:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800be66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be68:	3303      	adds	r3, #3
 800be6a:	4962      	ldr	r1, [pc, #392]	; (800bff4 <_ZL8JPEGIDCTP14jpeg_image_tagii+0x29c>)
 800be6c:	5c8a      	ldrb	r2, [r1, r2]
 800be6e:	701a      	strb	r2, [r3, #0]
        return;
 800be70:	f000 bcb5 	b.w	800c7de <_ZL8JPEGIDCTP14jpeg_image_tagii+0xa86>
        mmxRow7 = vsubq_s16(mmxTemp0, mmxTemp7); // row 7
        vst1q_s16(&pMCUSrc[56], mmxRow7);
#endif // HAS_NEON
#if !defined (HAS_SSE) && !defined(HAS_NEON)
    // do columns first
    u16MCUFlags |= 1; // column 0 must always be calculated
 800be74:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800be76:	f043 0301 	orr.w	r3, r3, #1
 800be7a:	847b      	strh	r3, [r7, #34]	; 0x22
    for (iCol = 0; iCol < 8 && u16MCUFlags; iCol++)
 800be7c:	2300      	movs	r3, #0
 800be7e:	66bb      	str	r3, [r7, #104]	; 0x68
 800be80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800be82:	2b07      	cmp	r3, #7
 800be84:	f300 82cd 	bgt.w	800c422 <_ZL8JPEGIDCTP14jpeg_image_tagii+0x6ca>
 800be88:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	f000 82c9 	beq.w	800c422 <_ZL8JPEGIDCTP14jpeg_image_tagii+0x6ca>
    {
        if (u16MCUFlags & (1<<iCol)) // column has data in it
 800be90:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800be92:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800be94:	fa42 f303 	asr.w	r3, r2, r3
 800be98:	f003 0301 	and.w	r3, r3, #1
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	f000 82bc 	beq.w	800c41a <_ZL8JPEGIDCTP14jpeg_image_tagii+0x6c2>
        {
            u16MCUFlags &= ~(1<<iCol); // unmark the col after done
 800bea2:	2201      	movs	r2, #1
 800bea4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bea6:	fa02 f303 	lsl.w	r3, r2, r3
 800beaa:	b21b      	sxth	r3, r3
 800beac:	43db      	mvns	r3, r3
 800beae:	b21a      	sxth	r2, r3
 800beb0:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800beb4:	4013      	ands	r3, r2
 800beb6:	b21b      	sxth	r3, r3
 800beb8:	847b      	strh	r3, [r7, #34]	; 0x22
            if ((u16MCUFlags & 0x2000) == 0) // simpler calculations if only half populated
 800beba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bebc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	f040 811a 	bne.w	800c0fa <_ZL8JPEGIDCTP14jpeg_image_tagii+0x3a2>
            {
                // even part
                tmp10 = pMCUSrc[iCol] * pQuant[iCol];
 800bec6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bec8:	005b      	lsls	r3, r3, #1
 800beca:	69fa      	ldr	r2, [r7, #28]
 800becc:	4413      	add	r3, r2
 800bece:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bed2:	4619      	mov	r1, r3
 800bed4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bed6:	005b      	lsls	r3, r3, #1
 800bed8:	69ba      	ldr	r2, [r7, #24]
 800beda:	4413      	add	r3, r2
 800bedc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bee0:	fb01 f303 	mul.w	r3, r1, r3
 800bee4:	65fb      	str	r3, [r7, #92]	; 0x5c
                tmp1 = pMCUSrc[iCol+16] * pQuant[iCol+16]; // get 2nd row
 800bee6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bee8:	3310      	adds	r3, #16
 800beea:	005b      	lsls	r3, r3, #1
 800beec:	69fa      	ldr	r2, [r7, #28]
 800beee:	4413      	add	r3, r2
 800bef0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bef4:	4619      	mov	r1, r3
 800bef6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bef8:	3310      	adds	r3, #16
 800befa:	005b      	lsls	r3, r3, #1
 800befc:	69ba      	ldr	r2, [r7, #24]
 800befe:	4413      	add	r3, r2
 800bf00:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bf04:	fb01 f303 	mul.w	r3, r1, r3
 800bf08:	63bb      	str	r3, [r7, #56]	; 0x38
                tmp12 = ((tmp1*106)>>8); // used to be 362 - 1 (256)
 800bf0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf0c:	226a      	movs	r2, #106	; 0x6a
 800bf0e:	fb02 f303 	mul.w	r3, r2, r3
 800bf12:	121b      	asrs	r3, r3, #8
 800bf14:	657b      	str	r3, [r7, #84]	; 0x54
                tmp0 = tmp10 + tmp1;
 800bf16:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bf18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf1a:	4413      	add	r3, r2
 800bf1c:	63fb      	str	r3, [r7, #60]	; 0x3c
                tmp3 = tmp10 - tmp1;
 800bf1e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bf20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf22:	1ad3      	subs	r3, r2, r3
 800bf24:	633b      	str	r3, [r7, #48]	; 0x30
                tmp1 = tmp10 + tmp12;
 800bf26:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bf28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bf2a:	4413      	add	r3, r2
 800bf2c:	63bb      	str	r3, [r7, #56]	; 0x38
                tmp2 = tmp10 - tmp12;
 800bf2e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bf30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bf32:	1ad3      	subs	r3, r2, r3
 800bf34:	637b      	str	r3, [r7, #52]	; 0x34
                // odd part
                tmp4 = pMCUSrc[iCol+8] * pQuant[iCol+8]; // get 1st row
 800bf36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bf38:	3308      	adds	r3, #8
 800bf3a:	005b      	lsls	r3, r3, #1
 800bf3c:	69fa      	ldr	r2, [r7, #28]
 800bf3e:	4413      	add	r3, r2
 800bf40:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bf44:	4619      	mov	r1, r3
 800bf46:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bf48:	3308      	adds	r3, #8
 800bf4a:	005b      	lsls	r3, r3, #1
 800bf4c:	69ba      	ldr	r2, [r7, #24]
 800bf4e:	4413      	add	r3, r2
 800bf50:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bf54:	fb01 f303 	mul.w	r3, r1, r3
 800bf58:	62fb      	str	r3, [r7, #44]	; 0x2c
                tmp5 = pMCUSrc[iCol+24];
 800bf5a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bf5c:	3318      	adds	r3, #24
 800bf5e:	005b      	lsls	r3, r3, #1
 800bf60:	69fa      	ldr	r2, [r7, #28]
 800bf62:	4413      	add	r3, r2
 800bf64:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bf68:	62bb      	str	r3, [r7, #40]	; 0x28
                if (tmp5) // this value is usually 0
 800bf6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d043      	beq.n	800bff8 <_ZL8JPEGIDCTP14jpeg_image_tagii+0x2a0>
                {
                    tmp5 *= pQuant[iCol+24]; // get 3rd row
 800bf70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bf72:	3318      	adds	r3, #24
 800bf74:	005b      	lsls	r3, r3, #1
 800bf76:	69ba      	ldr	r2, [r7, #24]
 800bf78:	4413      	add	r3, r2
 800bf7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bf7e:	461a      	mov	r2, r3
 800bf80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf82:	fb02 f303 	mul.w	r3, r2, r3
 800bf86:	62bb      	str	r3, [r7, #40]	; 0x28
                    tmp7 = tmp4 + tmp5;
 800bf88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bf8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf8c:	4413      	add	r3, r2
 800bf8e:	663b      	str	r3, [r7, #96]	; 0x60
                    tmp11 = (((tmp4 - tmp5) * 362) >> 8);  // 362>>8 = 1.414213562
 800bf90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bf92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf94:	1ad3      	subs	r3, r2, r3
 800bf96:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800bf9a:	fb02 f303 	mul.w	r3, r2, r3
 800bf9e:	121b      	asrs	r3, r3, #8
 800bfa0:	65bb      	str	r3, [r7, #88]	; 0x58
                    z5 = (((tmp4-tmp5) * 473) >> 8);  // 473>>8 = 1.8477
 800bfa2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bfa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfa6:	1ad3      	subs	r3, r2, r3
 800bfa8:	f240 12d9 	movw	r2, #473	; 0x1d9
 800bfac:	fb02 f303 	mul.w	r3, r2, r3
 800bfb0:	121b      	asrs	r3, r3, #8
 800bfb2:	617b      	str	r3, [r7, #20]
                    tmp12 = ((-tmp5 * -669)>>8) + z5; // -669>>8 = -2.6131259
 800bfb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfb6:	f240 229d 	movw	r2, #669	; 0x29d
 800bfba:	fb02 f303 	mul.w	r3, r2, r3
 800bfbe:	121b      	asrs	r3, r3, #8
 800bfc0:	697a      	ldr	r2, [r7, #20]
 800bfc2:	4413      	add	r3, r2
 800bfc4:	657b      	str	r3, [r7, #84]	; 0x54
                    tmp6 = tmp12 - tmp7;
 800bfc6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bfc8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bfca:	1ad3      	subs	r3, r2, r3
 800bfcc:	667b      	str	r3, [r7, #100]	; 0x64
                    tmp5 = tmp11 - tmp6;
 800bfce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bfd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bfd2:	1ad3      	subs	r3, r2, r3
 800bfd4:	62bb      	str	r3, [r7, #40]	; 0x28
                    tmp10 = ((tmp4 * 277)>>8) - z5; // 277>>8 = 1.08239
 800bfd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfd8:	f240 1215 	movw	r2, #277	; 0x115
 800bfdc:	fb02 f303 	mul.w	r3, r2, r3
 800bfe0:	121a      	asrs	r2, r3, #8
 800bfe2:	697b      	ldr	r3, [r7, #20]
 800bfe4:	1ad3      	subs	r3, r2, r3
 800bfe6:	65fb      	str	r3, [r7, #92]	; 0x5c
                    tmp4 = tmp10 + tmp5;
 800bfe8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bfea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfec:	4413      	add	r3, r2
 800bfee:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bff0:	e01b      	b.n	800c02a <_ZL8JPEGIDCTP14jpeg_image_tagii+0x2d2>
 800bff2:	bf00      	nop
 800bff4:	080111a8 	.word	0x080111a8
                }
                else // simpler case when we only have 1 odd row to calculate
                {
                    tmp7 = tmp4;
 800bff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bffa:	663b      	str	r3, [r7, #96]	; 0x60
                    tmp5 = (145*tmp4) >> 8;
 800bffc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bffe:	4613      	mov	r3, r2
 800c000:	00db      	lsls	r3, r3, #3
 800c002:	4413      	add	r3, r2
 800c004:	011b      	lsls	r3, r3, #4
 800c006:	4413      	add	r3, r2
 800c008:	121b      	asrs	r3, r3, #8
 800c00a:	62bb      	str	r3, [r7, #40]	; 0x28
                    tmp6 = (217*tmp4) >> 8;
 800c00c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c00e:	4613      	mov	r3, r2
 800c010:	00db      	lsls	r3, r3, #3
 800c012:	1a9b      	subs	r3, r3, r2
 800c014:	015a      	lsls	r2, r3, #5
 800c016:	1ad3      	subs	r3, r2, r3
 800c018:	121b      	asrs	r3, r3, #8
 800c01a:	667b      	str	r3, [r7, #100]	; 0x64
                    tmp4 = (-51*tmp4) >> 8;
 800c01c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c01e:	f06f 0232 	mvn.w	r2, #50	; 0x32
 800c022:	fb02 f303 	mul.w	r3, r2, r3
 800c026:	121b      	asrs	r3, r3, #8
 800c028:	62fb      	str	r3, [r7, #44]	; 0x2c
                }
                pMCUSrc[iCol] = (short)(tmp0 + tmp7);    // row0
 800c02a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c02c:	b29a      	uxth	r2, r3
 800c02e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c030:	b29b      	uxth	r3, r3
 800c032:	4413      	add	r3, r2
 800c034:	b299      	uxth	r1, r3
 800c036:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c038:	005b      	lsls	r3, r3, #1
 800c03a:	69fa      	ldr	r2, [r7, #28]
 800c03c:	4413      	add	r3, r2
 800c03e:	b20a      	sxth	r2, r1
 800c040:	801a      	strh	r2, [r3, #0]
                pMCUSrc[iCol+8] = (short)(tmp1 + tmp6);  // row 1
 800c042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c044:	b29a      	uxth	r2, r3
 800c046:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c048:	b29b      	uxth	r3, r3
 800c04a:	4413      	add	r3, r2
 800c04c:	b299      	uxth	r1, r3
 800c04e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c050:	3308      	adds	r3, #8
 800c052:	005b      	lsls	r3, r3, #1
 800c054:	69fa      	ldr	r2, [r7, #28]
 800c056:	4413      	add	r3, r2
 800c058:	b20a      	sxth	r2, r1
 800c05a:	801a      	strh	r2, [r3, #0]
                pMCUSrc[iCol+16] = (short)(tmp2 + tmp5); // row 2
 800c05c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c05e:	b29a      	uxth	r2, r3
 800c060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c062:	b29b      	uxth	r3, r3
 800c064:	4413      	add	r3, r2
 800c066:	b299      	uxth	r1, r3
 800c068:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c06a:	3310      	adds	r3, #16
 800c06c:	005b      	lsls	r3, r3, #1
 800c06e:	69fa      	ldr	r2, [r7, #28]
 800c070:	4413      	add	r3, r2
 800c072:	b20a      	sxth	r2, r1
 800c074:	801a      	strh	r2, [r3, #0]
                pMCUSrc[iCol+24] = (short)(tmp3 - tmp4); // row 3
 800c076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c078:	b29a      	uxth	r2, r3
 800c07a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c07c:	b29b      	uxth	r3, r3
 800c07e:	1ad3      	subs	r3, r2, r3
 800c080:	b299      	uxth	r1, r3
 800c082:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c084:	3318      	adds	r3, #24
 800c086:	005b      	lsls	r3, r3, #1
 800c088:	69fa      	ldr	r2, [r7, #28]
 800c08a:	4413      	add	r3, r2
 800c08c:	b20a      	sxth	r2, r1
 800c08e:	801a      	strh	r2, [r3, #0]
                pMCUSrc[iCol+32] = (short)(tmp3 + tmp4); // row 4
 800c090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c092:	b29a      	uxth	r2, r3
 800c094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c096:	b29b      	uxth	r3, r3
 800c098:	4413      	add	r3, r2
 800c09a:	b299      	uxth	r1, r3
 800c09c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c09e:	3320      	adds	r3, #32
 800c0a0:	005b      	lsls	r3, r3, #1
 800c0a2:	69fa      	ldr	r2, [r7, #28]
 800c0a4:	4413      	add	r3, r2
 800c0a6:	b20a      	sxth	r2, r1
 800c0a8:	801a      	strh	r2, [r3, #0]
                pMCUSrc[iCol+40] = (short)(tmp2 - tmp5); // row 5
 800c0aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0ac:	b29a      	uxth	r2, r3
 800c0ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0b0:	b29b      	uxth	r3, r3
 800c0b2:	1ad3      	subs	r3, r2, r3
 800c0b4:	b299      	uxth	r1, r3
 800c0b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c0b8:	3328      	adds	r3, #40	; 0x28
 800c0ba:	005b      	lsls	r3, r3, #1
 800c0bc:	69fa      	ldr	r2, [r7, #28]
 800c0be:	4413      	add	r3, r2
 800c0c0:	b20a      	sxth	r2, r1
 800c0c2:	801a      	strh	r2, [r3, #0]
                pMCUSrc[iCol+48] = (short)(tmp1 - tmp6); // row 6
 800c0c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0c6:	b29a      	uxth	r2, r3
 800c0c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c0ca:	b29b      	uxth	r3, r3
 800c0cc:	1ad3      	subs	r3, r2, r3
 800c0ce:	b299      	uxth	r1, r3
 800c0d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c0d2:	3330      	adds	r3, #48	; 0x30
 800c0d4:	005b      	lsls	r3, r3, #1
 800c0d6:	69fa      	ldr	r2, [r7, #28]
 800c0d8:	4413      	add	r3, r2
 800c0da:	b20a      	sxth	r2, r1
 800c0dc:	801a      	strh	r2, [r3, #0]
                pMCUSrc[iCol+56] = (short)(tmp0 - tmp7); // row 7
 800c0de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0e0:	b29a      	uxth	r2, r3
 800c0e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c0e4:	b29b      	uxth	r3, r3
 800c0e6:	1ad3      	subs	r3, r2, r3
 800c0e8:	b299      	uxth	r1, r3
 800c0ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c0ec:	3338      	adds	r3, #56	; 0x38
 800c0ee:	005b      	lsls	r3, r3, #1
 800c0f0:	69fa      	ldr	r2, [r7, #28]
 800c0f2:	4413      	add	r3, r2
 800c0f4:	b20a      	sxth	r2, r1
 800c0f6:	801a      	strh	r2, [r3, #0]
 800c0f8:	e18f      	b.n	800c41a <_ZL8JPEGIDCTP14jpeg_image_tagii+0x6c2>
            }
            else // need to do full column calculation
            {
                // even part
                tmp0 = pMCUSrc[iCol] * pQuant[iCol];
 800c0fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c0fc:	005b      	lsls	r3, r3, #1
 800c0fe:	69fa      	ldr	r2, [r7, #28]
 800c100:	4413      	add	r3, r2
 800c102:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c106:	4619      	mov	r1, r3
 800c108:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c10a:	005b      	lsls	r3, r3, #1
 800c10c:	69ba      	ldr	r2, [r7, #24]
 800c10e:	4413      	add	r3, r2
 800c110:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c114:	fb01 f303 	mul.w	r3, r1, r3
 800c118:	63fb      	str	r3, [r7, #60]	; 0x3c
                tmp2 = pMCUSrc[iCol+32]; // get 4th row
 800c11a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c11c:	3320      	adds	r3, #32
 800c11e:	005b      	lsls	r3, r3, #1
 800c120:	69fa      	ldr	r2, [r7, #28]
 800c122:	4413      	add	r3, r2
 800c124:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c128:	637b      	str	r3, [r7, #52]	; 0x34
                if (tmp2) // 4th row is most likely 0
 800c12a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d014      	beq.n	800c15a <_ZL8JPEGIDCTP14jpeg_image_tagii+0x402>
                {
                    tmp2 = tmp2 * pQuant[iCol+32];
 800c130:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c132:	3320      	adds	r3, #32
 800c134:	005b      	lsls	r3, r3, #1
 800c136:	69ba      	ldr	r2, [r7, #24]
 800c138:	4413      	add	r3, r2
 800c13a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c13e:	461a      	mov	r2, r3
 800c140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c142:	fb02 f303 	mul.w	r3, r2, r3
 800c146:	637b      	str	r3, [r7, #52]	; 0x34
                    tmp10 = tmp0 + tmp2;
 800c148:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c14a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c14c:	4413      	add	r3, r2
 800c14e:	65fb      	str	r3, [r7, #92]	; 0x5c
                    tmp11 = tmp0 - tmp2;
 800c150:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c152:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c154:	1ad3      	subs	r3, r2, r3
 800c156:	65bb      	str	r3, [r7, #88]	; 0x58
 800c158:	e003      	b.n	800c162 <_ZL8JPEGIDCTP14jpeg_image_tagii+0x40a>
                }
                else
                {
                    tmp10 = tmp11 = tmp0;
 800c15a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c15c:	65bb      	str	r3, [r7, #88]	; 0x58
 800c15e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c160:	65fb      	str	r3, [r7, #92]	; 0x5c
                }
                tmp1 = pMCUSrc[iCol+16] * pQuant[iCol+16]; // get 2nd row
 800c162:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c164:	3310      	adds	r3, #16
 800c166:	005b      	lsls	r3, r3, #1
 800c168:	69fa      	ldr	r2, [r7, #28]
 800c16a:	4413      	add	r3, r2
 800c16c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c170:	4619      	mov	r1, r3
 800c172:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c174:	3310      	adds	r3, #16
 800c176:	005b      	lsls	r3, r3, #1
 800c178:	69ba      	ldr	r2, [r7, #24]
 800c17a:	4413      	add	r3, r2
 800c17c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c180:	fb01 f303 	mul.w	r3, r1, r3
 800c184:	63bb      	str	r3, [r7, #56]	; 0x38
                tmp3 = pMCUSrc[iCol+48]; // get 6th row
 800c186:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c188:	3330      	adds	r3, #48	; 0x30
 800c18a:	005b      	lsls	r3, r3, #1
 800c18c:	69fa      	ldr	r2, [r7, #28]
 800c18e:	4413      	add	r3, r2
 800c190:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c194:	633b      	str	r3, [r7, #48]	; 0x30
                if (tmp3) // 6th row is most likely 0
 800c196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d01b      	beq.n	800c1d4 <_ZL8JPEGIDCTP14jpeg_image_tagii+0x47c>
                {
                    tmp3 = tmp3 * pQuant[iCol+48];
 800c19c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c19e:	3330      	adds	r3, #48	; 0x30
 800c1a0:	005b      	lsls	r3, r3, #1
 800c1a2:	69ba      	ldr	r2, [r7, #24]
 800c1a4:	4413      	add	r3, r2
 800c1a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c1aa:	461a      	mov	r2, r3
 800c1ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1ae:	fb02 f303 	mul.w	r3, r2, r3
 800c1b2:	633b      	str	r3, [r7, #48]	; 0x30
                    tmp13 = tmp1 + tmp3;
 800c1b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c1b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1b8:	4413      	add	r3, r2
 800c1ba:	653b      	str	r3, [r7, #80]	; 0x50
                    tmp12 = (((tmp1 - tmp3) * 362) >> 8) - tmp13;  // 362>>8 = 1.414213562
 800c1bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c1be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1c0:	1ad3      	subs	r3, r2, r3
 800c1c2:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800c1c6:	fb02 f303 	mul.w	r3, r2, r3
 800c1ca:	121a      	asrs	r2, r3, #8
 800c1cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c1ce:	1ad3      	subs	r3, r2, r3
 800c1d0:	657b      	str	r3, [r7, #84]	; 0x54
 800c1d2:	e00a      	b.n	800c1ea <_ZL8JPEGIDCTP14jpeg_image_tagii+0x492>
                }
                else
                {
                    tmp13 = tmp1;
 800c1d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1d6:	653b      	str	r3, [r7, #80]	; 0x50
                    tmp12 = ((tmp1*362)>>8) - tmp1;
 800c1d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1da:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800c1de:	fb02 f303 	mul.w	r3, r2, r3
 800c1e2:	121a      	asrs	r2, r3, #8
 800c1e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1e6:	1ad3      	subs	r3, r2, r3
 800c1e8:	657b      	str	r3, [r7, #84]	; 0x54
                }
                tmp0 = tmp10 + tmp13;
 800c1ea:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c1ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c1ee:	4413      	add	r3, r2
 800c1f0:	63fb      	str	r3, [r7, #60]	; 0x3c
                tmp3 = tmp10 - tmp13;
 800c1f2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c1f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c1f6:	1ad3      	subs	r3, r2, r3
 800c1f8:	633b      	str	r3, [r7, #48]	; 0x30
                tmp1 = tmp11 + tmp12;
 800c1fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c1fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c1fe:	4413      	add	r3, r2
 800c200:	63bb      	str	r3, [r7, #56]	; 0x38
                tmp2 = tmp11 - tmp12;
 800c202:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c204:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c206:	1ad3      	subs	r3, r2, r3
 800c208:	637b      	str	r3, [r7, #52]	; 0x34
                // odd part
                tmp5 = pMCUSrc[iCol+24] * pQuant[iCol+24]; // get 3rd row
 800c20a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c20c:	3318      	adds	r3, #24
 800c20e:	005b      	lsls	r3, r3, #1
 800c210:	69fa      	ldr	r2, [r7, #28]
 800c212:	4413      	add	r3, r2
 800c214:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c218:	4619      	mov	r1, r3
 800c21a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c21c:	3318      	adds	r3, #24
 800c21e:	005b      	lsls	r3, r3, #1
 800c220:	69ba      	ldr	r2, [r7, #24]
 800c222:	4413      	add	r3, r2
 800c224:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c228:	fb01 f303 	mul.w	r3, r1, r3
 800c22c:	62bb      	str	r3, [r7, #40]	; 0x28
                tmp6 = pMCUSrc[iCol+40]; // get 5th row
 800c22e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c230:	3328      	adds	r3, #40	; 0x28
 800c232:	005b      	lsls	r3, r3, #1
 800c234:	69fa      	ldr	r2, [r7, #28]
 800c236:	4413      	add	r3, r2
 800c238:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c23c:	667b      	str	r3, [r7, #100]	; 0x64
                if (tmp6) // very likely that row 5 = 0
 800c23e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c240:	2b00      	cmp	r3, #0
 800c242:	d014      	beq.n	800c26e <_ZL8JPEGIDCTP14jpeg_image_tagii+0x516>
                {
                    tmp6 = tmp6 * pQuant[iCol+40];
 800c244:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c246:	3328      	adds	r3, #40	; 0x28
 800c248:	005b      	lsls	r3, r3, #1
 800c24a:	69ba      	ldr	r2, [r7, #24]
 800c24c:	4413      	add	r3, r2
 800c24e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c252:	461a      	mov	r2, r3
 800c254:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c256:	fb02 f303 	mul.w	r3, r2, r3
 800c25a:	667b      	str	r3, [r7, #100]	; 0x64
                    z13 = tmp6 + tmp5;
 800c25c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c25e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c260:	4413      	add	r3, r2
 800c262:	643b      	str	r3, [r7, #64]	; 0x40
                    z10 = tmp6 - tmp5;
 800c264:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c268:	1ad3      	subs	r3, r2, r3
 800c26a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c26c:	e004      	b.n	800c278 <_ZL8JPEGIDCTP14jpeg_image_tagii+0x520>
                }
                else
                {
                    z13 = tmp5;
 800c26e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c270:	643b      	str	r3, [r7, #64]	; 0x40
                    z10 = -tmp5;
 800c272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c274:	425b      	negs	r3, r3
 800c276:	64fb      	str	r3, [r7, #76]	; 0x4c
                }
                tmp4 = pMCUSrc[iCol+8] * pQuant[iCol+8]; // get 1st row
 800c278:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c27a:	3308      	adds	r3, #8
 800c27c:	005b      	lsls	r3, r3, #1
 800c27e:	69fa      	ldr	r2, [r7, #28]
 800c280:	4413      	add	r3, r2
 800c282:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c286:	4619      	mov	r1, r3
 800c288:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c28a:	3308      	adds	r3, #8
 800c28c:	005b      	lsls	r3, r3, #1
 800c28e:	69ba      	ldr	r2, [r7, #24]
 800c290:	4413      	add	r3, r2
 800c292:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c296:	fb01 f303 	mul.w	r3, r1, r3
 800c29a:	62fb      	str	r3, [r7, #44]	; 0x2c
                tmp7 = pMCUSrc[iCol+56]; // get 7th row
 800c29c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c29e:	3338      	adds	r3, #56	; 0x38
 800c2a0:	005b      	lsls	r3, r3, #1
 800c2a2:	69fa      	ldr	r2, [r7, #28]
 800c2a4:	4413      	add	r3, r2
 800c2a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c2aa:	663b      	str	r3, [r7, #96]	; 0x60
                if (tmp7) // very likely that row 7 = 0
 800c2ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d014      	beq.n	800c2dc <_ZL8JPEGIDCTP14jpeg_image_tagii+0x584>
                {
                    tmp7 = tmp7 * pQuant[iCol+56];
 800c2b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c2b4:	3338      	adds	r3, #56	; 0x38
 800c2b6:	005b      	lsls	r3, r3, #1
 800c2b8:	69ba      	ldr	r2, [r7, #24]
 800c2ba:	4413      	add	r3, r2
 800c2bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c2c0:	461a      	mov	r2, r3
 800c2c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c2c4:	fb02 f303 	mul.w	r3, r2, r3
 800c2c8:	663b      	str	r3, [r7, #96]	; 0x60
                    z11 = tmp4 + tmp7;
 800c2ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c2cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c2ce:	4413      	add	r3, r2
 800c2d0:	64bb      	str	r3, [r7, #72]	; 0x48
                    z12 = tmp4 - tmp7;
 800c2d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c2d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c2d6:	1ad3      	subs	r3, r2, r3
 800c2d8:	647b      	str	r3, [r7, #68]	; 0x44
 800c2da:	e003      	b.n	800c2e4 <_ZL8JPEGIDCTP14jpeg_image_tagii+0x58c>
                }
                else
                {
                    z11 = z12 = tmp4;
 800c2dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2de:	647b      	str	r3, [r7, #68]	; 0x44
 800c2e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c2e2:	64bb      	str	r3, [r7, #72]	; 0x48
                }
                tmp7 = z11 + z13;
 800c2e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c2e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c2e8:	4413      	add	r3, r2
 800c2ea:	663b      	str	r3, [r7, #96]	; 0x60
                tmp11 = (((z11 - z13) * 362) >> 8);  // 362>>8 = 1.414213562
 800c2ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c2ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c2f0:	1ad3      	subs	r3, r2, r3
 800c2f2:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800c2f6:	fb02 f303 	mul.w	r3, r2, r3
 800c2fa:	121b      	asrs	r3, r3, #8
 800c2fc:	65bb      	str	r3, [r7, #88]	; 0x58
                z5 = (((z10 + z12) * 473) >> 8);  // 473>>8 = 1.8477
 800c2fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c300:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c302:	4413      	add	r3, r2
 800c304:	f240 12d9 	movw	r2, #473	; 0x1d9
 800c308:	fb02 f303 	mul.w	r3, r2, r3
 800c30c:	121b      	asrs	r3, r3, #8
 800c30e:	617b      	str	r3, [r7, #20]
                tmp12 = ((z10 * -669)>>8) + z5; // -669>>8 = -2.6131259
 800c310:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c312:	f46f 7227 	mvn.w	r2, #668	; 0x29c
 800c316:	fb02 f303 	mul.w	r3, r2, r3
 800c31a:	121b      	asrs	r3, r3, #8
 800c31c:	697a      	ldr	r2, [r7, #20]
 800c31e:	4413      	add	r3, r2
 800c320:	657b      	str	r3, [r7, #84]	; 0x54
                tmp6 = tmp12 - tmp7;
 800c322:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c324:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c326:	1ad3      	subs	r3, r2, r3
 800c328:	667b      	str	r3, [r7, #100]	; 0x64
                tmp5 = tmp11 - tmp6;
 800c32a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c32c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c32e:	1ad3      	subs	r3, r2, r3
 800c330:	62bb      	str	r3, [r7, #40]	; 0x28
                tmp10 = ((z12 * 277)>>8) - z5; // 277>>8 = 1.08239
 800c332:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c334:	f240 1215 	movw	r2, #277	; 0x115
 800c338:	fb02 f303 	mul.w	r3, r2, r3
 800c33c:	121a      	asrs	r2, r3, #8
 800c33e:	697b      	ldr	r3, [r7, #20]
 800c340:	1ad3      	subs	r3, r2, r3
 800c342:	65fb      	str	r3, [r7, #92]	; 0x5c
                tmp4 = tmp10 + tmp5;
 800c344:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c348:	4413      	add	r3, r2
 800c34a:	62fb      	str	r3, [r7, #44]	; 0x2c
                pMCUSrc[iCol] = (short)(tmp0 + tmp7);    // row0
 800c34c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c34e:	b29a      	uxth	r2, r3
 800c350:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c352:	b29b      	uxth	r3, r3
 800c354:	4413      	add	r3, r2
 800c356:	b299      	uxth	r1, r3
 800c358:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c35a:	005b      	lsls	r3, r3, #1
 800c35c:	69fa      	ldr	r2, [r7, #28]
 800c35e:	4413      	add	r3, r2
 800c360:	b20a      	sxth	r2, r1
 800c362:	801a      	strh	r2, [r3, #0]
                pMCUSrc[iCol+8] = (short)(tmp1 + tmp6);  // row 1
 800c364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c366:	b29a      	uxth	r2, r3
 800c368:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c36a:	b29b      	uxth	r3, r3
 800c36c:	4413      	add	r3, r2
 800c36e:	b299      	uxth	r1, r3
 800c370:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c372:	3308      	adds	r3, #8
 800c374:	005b      	lsls	r3, r3, #1
 800c376:	69fa      	ldr	r2, [r7, #28]
 800c378:	4413      	add	r3, r2
 800c37a:	b20a      	sxth	r2, r1
 800c37c:	801a      	strh	r2, [r3, #0]
                pMCUSrc[iCol+16] = (short)(tmp2 + tmp5); // row 2
 800c37e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c380:	b29a      	uxth	r2, r3
 800c382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c384:	b29b      	uxth	r3, r3
 800c386:	4413      	add	r3, r2
 800c388:	b299      	uxth	r1, r3
 800c38a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c38c:	3310      	adds	r3, #16
 800c38e:	005b      	lsls	r3, r3, #1
 800c390:	69fa      	ldr	r2, [r7, #28]
 800c392:	4413      	add	r3, r2
 800c394:	b20a      	sxth	r2, r1
 800c396:	801a      	strh	r2, [r3, #0]
                pMCUSrc[iCol+24] = (short)(tmp3 - tmp4); // row 3
 800c398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c39a:	b29a      	uxth	r2, r3
 800c39c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c39e:	b29b      	uxth	r3, r3
 800c3a0:	1ad3      	subs	r3, r2, r3
 800c3a2:	b299      	uxth	r1, r3
 800c3a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c3a6:	3318      	adds	r3, #24
 800c3a8:	005b      	lsls	r3, r3, #1
 800c3aa:	69fa      	ldr	r2, [r7, #28]
 800c3ac:	4413      	add	r3, r2
 800c3ae:	b20a      	sxth	r2, r1
 800c3b0:	801a      	strh	r2, [r3, #0]
                pMCUSrc[iCol+32] = (short)(tmp3 + tmp4); // row 4
 800c3b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3b4:	b29a      	uxth	r2, r3
 800c3b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3b8:	b29b      	uxth	r3, r3
 800c3ba:	4413      	add	r3, r2
 800c3bc:	b299      	uxth	r1, r3
 800c3be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c3c0:	3320      	adds	r3, #32
 800c3c2:	005b      	lsls	r3, r3, #1
 800c3c4:	69fa      	ldr	r2, [r7, #28]
 800c3c6:	4413      	add	r3, r2
 800c3c8:	b20a      	sxth	r2, r1
 800c3ca:	801a      	strh	r2, [r3, #0]
                pMCUSrc[iCol+40] = (short)(tmp2 - tmp5); // row 5
 800c3cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3ce:	b29a      	uxth	r2, r3
 800c3d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3d2:	b29b      	uxth	r3, r3
 800c3d4:	1ad3      	subs	r3, r2, r3
 800c3d6:	b299      	uxth	r1, r3
 800c3d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c3da:	3328      	adds	r3, #40	; 0x28
 800c3dc:	005b      	lsls	r3, r3, #1
 800c3de:	69fa      	ldr	r2, [r7, #28]
 800c3e0:	4413      	add	r3, r2
 800c3e2:	b20a      	sxth	r2, r1
 800c3e4:	801a      	strh	r2, [r3, #0]
                pMCUSrc[iCol+48] = (short)(tmp1 - tmp6); // row 6
 800c3e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3e8:	b29a      	uxth	r2, r3
 800c3ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c3ec:	b29b      	uxth	r3, r3
 800c3ee:	1ad3      	subs	r3, r2, r3
 800c3f0:	b299      	uxth	r1, r3
 800c3f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c3f4:	3330      	adds	r3, #48	; 0x30
 800c3f6:	005b      	lsls	r3, r3, #1
 800c3f8:	69fa      	ldr	r2, [r7, #28]
 800c3fa:	4413      	add	r3, r2
 800c3fc:	b20a      	sxth	r2, r1
 800c3fe:	801a      	strh	r2, [r3, #0]
                pMCUSrc[iCol+56] = (short)(tmp0 - tmp7); // row 7
 800c400:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c402:	b29a      	uxth	r2, r3
 800c404:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c406:	b29b      	uxth	r3, r3
 800c408:	1ad3      	subs	r3, r2, r3
 800c40a:	b299      	uxth	r1, r3
 800c40c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c40e:	3338      	adds	r3, #56	; 0x38
 800c410:	005b      	lsls	r3, r3, #1
 800c412:	69fa      	ldr	r2, [r7, #28]
 800c414:	4413      	add	r3, r2
 800c416:	b20a      	sxth	r2, r1
 800c418:	801a      	strh	r2, [r3, #0]
    for (iCol = 0; iCol < 8 && u16MCUFlags; iCol++)
 800c41a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c41c:	3301      	adds	r3, #1
 800c41e:	66bb      	str	r3, [r7, #104]	; 0x68
 800c420:	e52e      	b.n	800be80 <_ZL8JPEGIDCTP14jpeg_image_tagii+0x128>
            } // full calculation needed
        } // if column has data in it
    } // for each column
#endif // NO SIMD
    // now do rows
    u16MCUFlags = pJPEG->u16MCUFlags;
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c426:	847b      	strh	r3, [r7, #34]	; 0x22
    pOutput = (unsigned char *)pMCUSrc; // store output pixels back into MCU
 800c428:	69fb      	ldr	r3, [r7, #28]
 800c42a:	627b      	str	r3, [r7, #36]	; 0x24
    for (iRow=0; iRow<64; iRow+=8) // all rows must be calculated
 800c42c:	2300      	movs	r3, #0
 800c42e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c430:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c432:	2b3f      	cmp	r3, #63	; 0x3f
 800c434:	f300 81d3 	bgt.w	800c7de <_ZL8JPEGIDCTP14jpeg_image_tagii+0xa86>
    {
        // even part
        if ((u16MCUFlags & 0xf0) == 0) // quick and dirty calculation (right 4 columns are all 0's)
 800c438:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c43a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c43e:	2b00      	cmp	r3, #0
 800c440:	f040 809e 	bne.w	800c580 <_ZL8JPEGIDCTP14jpeg_image_tagii+0x828>
        {
            if ((u16MCUFlags & 0xfc) == 0) // very likely case (1 or 2 columns occupied)
 800c444:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c446:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d12e      	bne.n	800c4ac <_ZL8JPEGIDCTP14jpeg_image_tagii+0x754>
            {
                // even part
                tmp0 = tmp1 = tmp2 = tmp3 = pMCUSrc[iRow+0];
 800c44e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c450:	005b      	lsls	r3, r3, #1
 800c452:	69fa      	ldr	r2, [r7, #28]
 800c454:	4413      	add	r3, r2
 800c456:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c45a:	633b      	str	r3, [r7, #48]	; 0x30
 800c45c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c45e:	637b      	str	r3, [r7, #52]	; 0x34
 800c460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c462:	63bb      	str	r3, [r7, #56]	; 0x38
 800c464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c466:	63fb      	str	r3, [r7, #60]	; 0x3c
                // odd part
                tmp7 = pMCUSrc[iRow+1];
 800c468:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c46a:	3301      	adds	r3, #1
 800c46c:	005b      	lsls	r3, r3, #1
 800c46e:	69fa      	ldr	r2, [r7, #28]
 800c470:	4413      	add	r3, r2
 800c472:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c476:	663b      	str	r3, [r7, #96]	; 0x60
                tmp6 = (tmp7 * 217)>>8; // * 0.8477
 800c478:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c47a:	4613      	mov	r3, r2
 800c47c:	00db      	lsls	r3, r3, #3
 800c47e:	1a9b      	subs	r3, r3, r2
 800c480:	015a      	lsls	r2, r3, #5
 800c482:	1ad3      	subs	r3, r2, r3
 800c484:	121b      	asrs	r3, r3, #8
 800c486:	667b      	str	r3, [r7, #100]	; 0x64
                tmp5 = (tmp7 * 145)>>8; // * 0.5663
 800c488:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c48a:	4613      	mov	r3, r2
 800c48c:	00db      	lsls	r3, r3, #3
 800c48e:	4413      	add	r3, r2
 800c490:	011b      	lsls	r3, r3, #4
 800c492:	4413      	add	r3, r2
 800c494:	121b      	asrs	r3, r3, #8
 800c496:	62bb      	str	r3, [r7, #40]	; 0x28
                tmp4 = -((tmp7 * 51)>>8);  // * -0.199
 800c498:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c49a:	4613      	mov	r3, r2
 800c49c:	005b      	lsls	r3, r3, #1
 800c49e:	4413      	add	r3, r2
 800c4a0:	011a      	lsls	r2, r3, #4
 800c4a2:	4413      	add	r3, r2
 800c4a4:	121b      	asrs	r3, r3, #8
 800c4a6:	425b      	negs	r3, r3
 800c4a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c4aa:	e13a      	b.n	800c722 <_ZL8JPEGIDCTP14jpeg_image_tagii+0x9ca>
            }
            else
            {
                tmp10 = pMCUSrc[iRow+0];
 800c4ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c4ae:	005b      	lsls	r3, r3, #1
 800c4b0:	69fa      	ldr	r2, [r7, #28]
 800c4b2:	4413      	add	r3, r2
 800c4b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c4b8:	65fb      	str	r3, [r7, #92]	; 0x5c
                tmp13 = pMCUSrc[iRow+2];
 800c4ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c4bc:	3302      	adds	r3, #2
 800c4be:	005b      	lsls	r3, r3, #1
 800c4c0:	69fa      	ldr	r2, [r7, #28]
 800c4c2:	4413      	add	r3, r2
 800c4c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c4c8:	653b      	str	r3, [r7, #80]	; 0x50
                tmp12 = ((tmp13 * 106)>>8); // 2-6 * 1.414
 800c4ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c4cc:	226a      	movs	r2, #106	; 0x6a
 800c4ce:	fb02 f303 	mul.w	r3, r2, r3
 800c4d2:	121b      	asrs	r3, r3, #8
 800c4d4:	657b      	str	r3, [r7, #84]	; 0x54
                tmp0 = tmp10 + tmp13;
 800c4d6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c4d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c4da:	4413      	add	r3, r2
 800c4dc:	63fb      	str	r3, [r7, #60]	; 0x3c
                tmp3 = tmp10 - tmp13;
 800c4de:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c4e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c4e2:	1ad3      	subs	r3, r2, r3
 800c4e4:	633b      	str	r3, [r7, #48]	; 0x30
                tmp1 = tmp10 + tmp12;
 800c4e6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c4e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c4ea:	4413      	add	r3, r2
 800c4ec:	63bb      	str	r3, [r7, #56]	; 0x38
                tmp2 = tmp10 - tmp12;
 800c4ee:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c4f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c4f2:	1ad3      	subs	r3, r2, r3
 800c4f4:	637b      	str	r3, [r7, #52]	; 0x34
                // odd part
                z13 = pMCUSrc[iRow+3];
 800c4f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c4f8:	3303      	adds	r3, #3
 800c4fa:	005b      	lsls	r3, r3, #1
 800c4fc:	69fa      	ldr	r2, [r7, #28]
 800c4fe:	4413      	add	r3, r2
 800c500:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c504:	643b      	str	r3, [r7, #64]	; 0x40
                z11 = pMCUSrc[iRow+1];
 800c506:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c508:	3301      	adds	r3, #1
 800c50a:	005b      	lsls	r3, r3, #1
 800c50c:	69fa      	ldr	r2, [r7, #28]
 800c50e:	4413      	add	r3, r2
 800c510:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c514:	64bb      	str	r3, [r7, #72]	; 0x48
                tmp7 = z11 + z13;
 800c516:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c518:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c51a:	4413      	add	r3, r2
 800c51c:	663b      	str	r3, [r7, #96]	; 0x60
                tmp11 = ((z11 - z13)*362)>>8; // * 1.414
 800c51e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c520:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c522:	1ad3      	subs	r3, r2, r3
 800c524:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800c528:	fb02 f303 	mul.w	r3, r2, r3
 800c52c:	121b      	asrs	r3, r3, #8
 800c52e:	65bb      	str	r3, [r7, #88]	; 0x58
                z5 = ((z11 - z13)*473)>>8; // * 1.8477
 800c530:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c532:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c534:	1ad3      	subs	r3, r2, r3
 800c536:	f240 12d9 	movw	r2, #473	; 0x1d9
 800c53a:	fb02 f303 	mul.w	r3, r2, r3
 800c53e:	121b      	asrs	r3, r3, #8
 800c540:	617b      	str	r3, [r7, #20]
                tmp10 = ((z11*277)>>8) - z5; // * 1.08239
 800c542:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c544:	f240 1215 	movw	r2, #277	; 0x115
 800c548:	fb02 f303 	mul.w	r3, r2, r3
 800c54c:	121a      	asrs	r2, r3, #8
 800c54e:	697b      	ldr	r3, [r7, #20]
 800c550:	1ad3      	subs	r3, r2, r3
 800c552:	65fb      	str	r3, [r7, #92]	; 0x5c
                tmp12 = ((z13*669)>>8) + z5; // * 2.61312
 800c554:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c556:	f240 229d 	movw	r2, #669	; 0x29d
 800c55a:	fb02 f303 	mul.w	r3, r2, r3
 800c55e:	121b      	asrs	r3, r3, #8
 800c560:	697a      	ldr	r2, [r7, #20]
 800c562:	4413      	add	r3, r2
 800c564:	657b      	str	r3, [r7, #84]	; 0x54
                tmp6 = tmp12 - tmp7;
 800c566:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c568:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c56a:	1ad3      	subs	r3, r2, r3
 800c56c:	667b      	str	r3, [r7, #100]	; 0x64
                tmp5 = tmp11 - tmp6;
 800c56e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c570:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c572:	1ad3      	subs	r3, r2, r3
 800c574:	62bb      	str	r3, [r7, #40]	; 0x28
                tmp4 = tmp10 + tmp5;
 800c576:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c57a:	4413      	add	r3, r2
 800c57c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c57e:	e0d0      	b.n	800c722 <_ZL8JPEGIDCTP14jpeg_image_tagii+0x9ca>
            }
        }
        else // need to do the full calculation
        {
            tmp10 = pMCUSrc[iRow+0] + pMCUSrc[iRow+4];
 800c580:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c582:	005b      	lsls	r3, r3, #1
 800c584:	69fa      	ldr	r2, [r7, #28]
 800c586:	4413      	add	r3, r2
 800c588:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c58c:	4619      	mov	r1, r3
 800c58e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c590:	3304      	adds	r3, #4
 800c592:	005b      	lsls	r3, r3, #1
 800c594:	69fa      	ldr	r2, [r7, #28]
 800c596:	4413      	add	r3, r2
 800c598:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c59c:	440b      	add	r3, r1
 800c59e:	65fb      	str	r3, [r7, #92]	; 0x5c
            tmp11 = pMCUSrc[iRow+0] - pMCUSrc[iRow+4];
 800c5a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c5a2:	005b      	lsls	r3, r3, #1
 800c5a4:	69fa      	ldr	r2, [r7, #28]
 800c5a6:	4413      	add	r3, r2
 800c5a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c5ac:	4619      	mov	r1, r3
 800c5ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c5b0:	3304      	adds	r3, #4
 800c5b2:	005b      	lsls	r3, r3, #1
 800c5b4:	69fa      	ldr	r2, [r7, #28]
 800c5b6:	4413      	add	r3, r2
 800c5b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c5bc:	1acb      	subs	r3, r1, r3
 800c5be:	65bb      	str	r3, [r7, #88]	; 0x58
            tmp13 = pMCUSrc[iRow+2] + pMCUSrc[iRow+6];
 800c5c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c5c2:	3302      	adds	r3, #2
 800c5c4:	005b      	lsls	r3, r3, #1
 800c5c6:	69fa      	ldr	r2, [r7, #28]
 800c5c8:	4413      	add	r3, r2
 800c5ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c5ce:	4619      	mov	r1, r3
 800c5d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c5d2:	3306      	adds	r3, #6
 800c5d4:	005b      	lsls	r3, r3, #1
 800c5d6:	69fa      	ldr	r2, [r7, #28]
 800c5d8:	4413      	add	r3, r2
 800c5da:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c5de:	440b      	add	r3, r1
 800c5e0:	653b      	str	r3, [r7, #80]	; 0x50
            tmp12 = (((pMCUSrc[iRow+2] - pMCUSrc[iRow+6]) * 362)>>8) - tmp13; // 2-6 * 1.414
 800c5e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c5e4:	3302      	adds	r3, #2
 800c5e6:	005b      	lsls	r3, r3, #1
 800c5e8:	69fa      	ldr	r2, [r7, #28]
 800c5ea:	4413      	add	r3, r2
 800c5ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c5f0:	4619      	mov	r1, r3
 800c5f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c5f4:	3306      	adds	r3, #6
 800c5f6:	005b      	lsls	r3, r3, #1
 800c5f8:	69fa      	ldr	r2, [r7, #28]
 800c5fa:	4413      	add	r3, r2
 800c5fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c600:	1acb      	subs	r3, r1, r3
 800c602:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800c606:	fb02 f303 	mul.w	r3, r2, r3
 800c60a:	121a      	asrs	r2, r3, #8
 800c60c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c60e:	1ad3      	subs	r3, r2, r3
 800c610:	657b      	str	r3, [r7, #84]	; 0x54
            tmp0 = tmp10 + tmp13;
 800c612:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c614:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c616:	4413      	add	r3, r2
 800c618:	63fb      	str	r3, [r7, #60]	; 0x3c
            tmp3 = tmp10 - tmp13;
 800c61a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c61c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c61e:	1ad3      	subs	r3, r2, r3
 800c620:	633b      	str	r3, [r7, #48]	; 0x30
            tmp1 = tmp11 + tmp12;
 800c622:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c624:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c626:	4413      	add	r3, r2
 800c628:	63bb      	str	r3, [r7, #56]	; 0x38
            tmp2 = tmp11 - tmp12;
 800c62a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c62c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c62e:	1ad3      	subs	r3, r2, r3
 800c630:	637b      	str	r3, [r7, #52]	; 0x34
            // odd part
            z13 = pMCUSrc[iRow+5] + pMCUSrc[iRow+3];
 800c632:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c634:	3305      	adds	r3, #5
 800c636:	005b      	lsls	r3, r3, #1
 800c638:	69fa      	ldr	r2, [r7, #28]
 800c63a:	4413      	add	r3, r2
 800c63c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c640:	4619      	mov	r1, r3
 800c642:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c644:	3303      	adds	r3, #3
 800c646:	005b      	lsls	r3, r3, #1
 800c648:	69fa      	ldr	r2, [r7, #28]
 800c64a:	4413      	add	r3, r2
 800c64c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c650:	440b      	add	r3, r1
 800c652:	643b      	str	r3, [r7, #64]	; 0x40
            z10 = pMCUSrc[iRow+5] - pMCUSrc[iRow+3];
 800c654:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c656:	3305      	adds	r3, #5
 800c658:	005b      	lsls	r3, r3, #1
 800c65a:	69fa      	ldr	r2, [r7, #28]
 800c65c:	4413      	add	r3, r2
 800c65e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c662:	4619      	mov	r1, r3
 800c664:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c666:	3303      	adds	r3, #3
 800c668:	005b      	lsls	r3, r3, #1
 800c66a:	69fa      	ldr	r2, [r7, #28]
 800c66c:	4413      	add	r3, r2
 800c66e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c672:	1acb      	subs	r3, r1, r3
 800c674:	64fb      	str	r3, [r7, #76]	; 0x4c
            z11 = pMCUSrc[iRow+1] + pMCUSrc[iRow+7];
 800c676:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c678:	3301      	adds	r3, #1
 800c67a:	005b      	lsls	r3, r3, #1
 800c67c:	69fa      	ldr	r2, [r7, #28]
 800c67e:	4413      	add	r3, r2
 800c680:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c684:	4619      	mov	r1, r3
 800c686:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c688:	3307      	adds	r3, #7
 800c68a:	005b      	lsls	r3, r3, #1
 800c68c:	69fa      	ldr	r2, [r7, #28]
 800c68e:	4413      	add	r3, r2
 800c690:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c694:	440b      	add	r3, r1
 800c696:	64bb      	str	r3, [r7, #72]	; 0x48
            z12 = pMCUSrc[iRow+1] - pMCUSrc[iRow+7];
 800c698:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c69a:	3301      	adds	r3, #1
 800c69c:	005b      	lsls	r3, r3, #1
 800c69e:	69fa      	ldr	r2, [r7, #28]
 800c6a0:	4413      	add	r3, r2
 800c6a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c6a6:	4619      	mov	r1, r3
 800c6a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c6aa:	3307      	adds	r3, #7
 800c6ac:	005b      	lsls	r3, r3, #1
 800c6ae:	69fa      	ldr	r2, [r7, #28]
 800c6b0:	4413      	add	r3, r2
 800c6b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c6b6:	1acb      	subs	r3, r1, r3
 800c6b8:	647b      	str	r3, [r7, #68]	; 0x44
            tmp7 = z11 + z13;
 800c6ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c6bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c6be:	4413      	add	r3, r2
 800c6c0:	663b      	str	r3, [r7, #96]	; 0x60
            tmp11 = ((z11 - z13)*362)>>8; // * 1.414
 800c6c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c6c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c6c6:	1ad3      	subs	r3, r2, r3
 800c6c8:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800c6cc:	fb02 f303 	mul.w	r3, r2, r3
 800c6d0:	121b      	asrs	r3, r3, #8
 800c6d2:	65bb      	str	r3, [r7, #88]	; 0x58
            z5 = ((z10 + z12)*473)>>8; // * 1.8477
 800c6d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c6d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c6d8:	4413      	add	r3, r2
 800c6da:	f240 12d9 	movw	r2, #473	; 0x1d9
 800c6de:	fb02 f303 	mul.w	r3, r2, r3
 800c6e2:	121b      	asrs	r3, r3, #8
 800c6e4:	617b      	str	r3, [r7, #20]
            tmp10 = ((z12*277)>>8) - z5; // * 1.08239
 800c6e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c6e8:	f240 1215 	movw	r2, #277	; 0x115
 800c6ec:	fb02 f303 	mul.w	r3, r2, r3
 800c6f0:	121a      	asrs	r2, r3, #8
 800c6f2:	697b      	ldr	r3, [r7, #20]
 800c6f4:	1ad3      	subs	r3, r2, r3
 800c6f6:	65fb      	str	r3, [r7, #92]	; 0x5c
            tmp12 = ((z10*-669)>>8) + z5; // * 2.61312
 800c6f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c6fa:	f46f 7227 	mvn.w	r2, #668	; 0x29c
 800c6fe:	fb02 f303 	mul.w	r3, r2, r3
 800c702:	121b      	asrs	r3, r3, #8
 800c704:	697a      	ldr	r2, [r7, #20]
 800c706:	4413      	add	r3, r2
 800c708:	657b      	str	r3, [r7, #84]	; 0x54
            tmp6 = tmp12 - tmp7;
 800c70a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c70c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c70e:	1ad3      	subs	r3, r2, r3
 800c710:	667b      	str	r3, [r7, #100]	; 0x64
            tmp5 = tmp11 - tmp6;
 800c712:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c714:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c716:	1ad3      	subs	r3, r2, r3
 800c718:	62bb      	str	r3, [r7, #40]	; 0x28
            tmp4 = tmp10 + tmp5;
 800c71a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c71c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c71e:	4413      	add	r3, r2
 800c720:	62fb      	str	r3, [r7, #44]	; 0x2c
            LR_out = vaddq_s16(LR_out, vdupq_n_s16(0x80 << 5)); // adjust output +0x80
            LR_out_8x8 = vqshrun_n_s16(LR_out, 5); // shift, narrow and clip to 0-255
            vst1_u8(pOutput, LR_out_8x8);
        }
#else
        pOutput[0] = ucRangeTable[(((tmp0 + tmp7)>>5) & 0x3ff)];
 800c722:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c724:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c726:	4413      	add	r3, r2
 800c728:	115b      	asrs	r3, r3, #5
 800c72a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c72e:	4a2e      	ldr	r2, [pc, #184]	; (800c7e8 <_ZL8JPEGIDCTP14jpeg_image_tagii+0xa90>)
 800c730:	5cd2      	ldrb	r2, [r2, r3]
 800c732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c734:	701a      	strb	r2, [r3, #0]
        pOutput[1] = ucRangeTable[(((tmp1 + tmp6)>>5) & 0x3ff)];
 800c736:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c738:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c73a:	4413      	add	r3, r2
 800c73c:	115b      	asrs	r3, r3, #5
 800c73e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800c742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c744:	3301      	adds	r3, #1
 800c746:	4928      	ldr	r1, [pc, #160]	; (800c7e8 <_ZL8JPEGIDCTP14jpeg_image_tagii+0xa90>)
 800c748:	5c8a      	ldrb	r2, [r1, r2]
 800c74a:	701a      	strb	r2, [r3, #0]
        pOutput[2] = ucRangeTable[(((tmp2 + tmp5)>>5) & 0x3ff)];
 800c74c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c74e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c750:	4413      	add	r3, r2
 800c752:	115b      	asrs	r3, r3, #5
 800c754:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800c758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c75a:	3302      	adds	r3, #2
 800c75c:	4922      	ldr	r1, [pc, #136]	; (800c7e8 <_ZL8JPEGIDCTP14jpeg_image_tagii+0xa90>)
 800c75e:	5c8a      	ldrb	r2, [r1, r2]
 800c760:	701a      	strb	r2, [r3, #0]
        pOutput[3] = ucRangeTable[(((tmp3 - tmp4)>>5) & 0x3ff)];
 800c762:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c766:	1ad3      	subs	r3, r2, r3
 800c768:	115b      	asrs	r3, r3, #5
 800c76a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800c76e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c770:	3303      	adds	r3, #3
 800c772:	491d      	ldr	r1, [pc, #116]	; (800c7e8 <_ZL8JPEGIDCTP14jpeg_image_tagii+0xa90>)
 800c774:	5c8a      	ldrb	r2, [r1, r2]
 800c776:	701a      	strb	r2, [r3, #0]
        pOutput[4] = ucRangeTable[(((tmp3 + tmp4)>>5) & 0x3ff)];
 800c778:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c77a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c77c:	4413      	add	r3, r2
 800c77e:	115b      	asrs	r3, r3, #5
 800c780:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800c784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c786:	3304      	adds	r3, #4
 800c788:	4917      	ldr	r1, [pc, #92]	; (800c7e8 <_ZL8JPEGIDCTP14jpeg_image_tagii+0xa90>)
 800c78a:	5c8a      	ldrb	r2, [r1, r2]
 800c78c:	701a      	strb	r2, [r3, #0]
        pOutput[5] = ucRangeTable[(((tmp2 - tmp5)>>5) & 0x3ff)];
 800c78e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c792:	1ad3      	subs	r3, r2, r3
 800c794:	115b      	asrs	r3, r3, #5
 800c796:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800c79a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c79c:	3305      	adds	r3, #5
 800c79e:	4912      	ldr	r1, [pc, #72]	; (800c7e8 <_ZL8JPEGIDCTP14jpeg_image_tagii+0xa90>)
 800c7a0:	5c8a      	ldrb	r2, [r1, r2]
 800c7a2:	701a      	strb	r2, [r3, #0]
        pOutput[6] = ucRangeTable[(((tmp1 - tmp6)>>5) & 0x3ff)];
 800c7a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c7a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c7a8:	1ad3      	subs	r3, r2, r3
 800c7aa:	115b      	asrs	r3, r3, #5
 800c7ac:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800c7b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7b2:	3306      	adds	r3, #6
 800c7b4:	490c      	ldr	r1, [pc, #48]	; (800c7e8 <_ZL8JPEGIDCTP14jpeg_image_tagii+0xa90>)
 800c7b6:	5c8a      	ldrb	r2, [r1, r2]
 800c7b8:	701a      	strb	r2, [r3, #0]
        pOutput[7] = ucRangeTable[(((tmp0 - tmp7)>>5) & 0x3ff)];
 800c7ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c7bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c7be:	1ad3      	subs	r3, r2, r3
 800c7c0:	115b      	asrs	r3, r3, #5
 800c7c2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800c7c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7c8:	3307      	adds	r3, #7
 800c7ca:	4907      	ldr	r1, [pc, #28]	; (800c7e8 <_ZL8JPEGIDCTP14jpeg_image_tagii+0xa90>)
 800c7cc:	5c8a      	ldrb	r2, [r1, r2]
 800c7ce:	701a      	strb	r2, [r3, #0]
#endif // !HAS_NEON
#endif
        pOutput += 8;
 800c7d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7d2:	3308      	adds	r3, #8
 800c7d4:	627b      	str	r3, [r7, #36]	; 0x24
    for (iRow=0; iRow<64; iRow+=8) // all rows must be calculated
 800c7d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c7d8:	3308      	adds	r3, #8
 800c7da:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c7dc:	e628      	b.n	800c430 <_ZL8JPEGIDCTP14jpeg_image_tagii+0x6d8>
    } // for each row
} /* JPEGIDCT() */
 800c7de:	3774      	adds	r7, #116	; 0x74
 800c7e0:	46bd      	mov	sp, r7
 800c7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e6:	4770      	bx	lr
 800c7e8:	080111a8 	.word	0x080111a8

0800c7ec <_ZL18JPEGPutMCU8BitGrayP14jpeg_image_tagii>:
static void JPEGPutMCU8BitGray(JPEGIMAGE *pJPEG, int x, int iPitch)
{
 800c7ec:	b480      	push	{r7}
 800c7ee:	b08f      	sub	sp, #60	; 0x3c
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	60f8      	str	r0, [r7, #12]
 800c7f4:	60b9      	str	r1, [r7, #8]
 800c7f6:	607a      	str	r2, [r7, #4]
    int i, j, xcount, ycount;
    uint8_t *pDest, *pSrc = (uint8_t *)&pJPEG->sMCUs[0];
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c7fe:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800c802:	623b      	str	r3, [r7, #32]
    
    if (pJPEG->pDitherBuffer) {
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d006      	beq.n	800c81c <_ZL18JPEGPutMCU8BitGrayP14jpeg_image_tagii+0x30>
        pDest = &pJPEG->pDitherBuffer[x];
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800c814:	68bb      	ldr	r3, [r7, #8]
 800c816:	4413      	add	r3, r2
 800c818:	627b      	str	r3, [r7, #36]	; 0x24
 800c81a:	e007      	b.n	800c82c <_ZL18JPEGPutMCU8BitGrayP14jpeg_image_tagii+0x40>
    } else {
        pDest = (uint8_t *)&pJPEG->usPixels[0];
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c822:	627b      	str	r3, [r7, #36]	; 0x24
        pDest += x;
 800c824:	68bb      	ldr	r3, [r7, #8]
 800c826:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c828:	4413      	add	r3, r2
 800c82a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    if (pJPEG->ucSubSample <= 0x11) // single Y
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c832:	2b11      	cmp	r3, #17
 800c834:	d879      	bhi.n	800c92a <_ZL18JPEGPutMCU8BitGrayP14jpeg_image_tagii+0x13e>
    {
        if (pJPEG->iOptions & JPEG_SCALE_HALF) // special handling of 1/2 size (pixel averaging)
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c83a:	f003 0302 	and.w	r3, r3, #2
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d034      	beq.n	800c8ac <_ZL18JPEGPutMCU8BitGrayP14jpeg_image_tagii+0xc0>
        {
            int pix;
            for (i=0; i<4; i++)
 800c842:	2300      	movs	r3, #0
 800c844:	637b      	str	r3, [r7, #52]	; 0x34
 800c846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c848:	2b03      	cmp	r3, #3
 800c84a:	f300 841a 	bgt.w	800d082 <_ZL18JPEGPutMCU8BitGrayP14jpeg_image_tagii+0x896>
            {
                for (j=0; j<4; j++)
 800c84e:	2300      	movs	r3, #0
 800c850:	633b      	str	r3, [r7, #48]	; 0x30
 800c852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c854:	2b03      	cmp	r3, #3
 800c856:	dc1e      	bgt.n	800c896 <_ZL18JPEGPutMCU8BitGrayP14jpeg_image_tagii+0xaa>
                {
                    pix = (pSrc[0] + pSrc[1] + pSrc[8] + pSrc[9] + 2) >> 2; // average 2x2 block
 800c858:	6a3b      	ldr	r3, [r7, #32]
 800c85a:	781b      	ldrb	r3, [r3, #0]
 800c85c:	461a      	mov	r2, r3
 800c85e:	6a3b      	ldr	r3, [r7, #32]
 800c860:	3301      	adds	r3, #1
 800c862:	781b      	ldrb	r3, [r3, #0]
 800c864:	4413      	add	r3, r2
 800c866:	6a3a      	ldr	r2, [r7, #32]
 800c868:	3208      	adds	r2, #8
 800c86a:	7812      	ldrb	r2, [r2, #0]
 800c86c:	4413      	add	r3, r2
 800c86e:	6a3a      	ldr	r2, [r7, #32]
 800c870:	3209      	adds	r2, #9
 800c872:	7812      	ldrb	r2, [r2, #0]
 800c874:	4413      	add	r3, r2
 800c876:	3302      	adds	r3, #2
 800c878:	109b      	asrs	r3, r3, #2
 800c87a:	613b      	str	r3, [r7, #16]
                    pDest[j] = (uint8_t)pix;
 800c87c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c87e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c880:	4413      	add	r3, r2
 800c882:	693a      	ldr	r2, [r7, #16]
 800c884:	b2d2      	uxtb	r2, r2
 800c886:	701a      	strb	r2, [r3, #0]
                    pSrc += 2;
 800c888:	6a3b      	ldr	r3, [r7, #32]
 800c88a:	3302      	adds	r3, #2
 800c88c:	623b      	str	r3, [r7, #32]
                for (j=0; j<4; j++)
 800c88e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c890:	3301      	adds	r3, #1
 800c892:	633b      	str	r3, [r7, #48]	; 0x30
 800c894:	e7dd      	b.n	800c852 <_ZL18JPEGPutMCU8BitGrayP14jpeg_image_tagii+0x66>
                }
                pSrc += 8; // skip extra line
 800c896:	6a3b      	ldr	r3, [r7, #32]
 800c898:	3308      	adds	r3, #8
 800c89a:	623b      	str	r3, [r7, #32]
                pDest += iPitch;
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c8a0:	4413      	add	r3, r2
 800c8a2:	627b      	str	r3, [r7, #36]	; 0x24
            for (i=0; i<4; i++)
 800c8a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8a6:	3301      	adds	r3, #1
 800c8a8:	637b      	str	r3, [r7, #52]	; 0x34
 800c8aa:	e7cc      	b.n	800c846 <_ZL18JPEGPutMCU8BitGrayP14jpeg_image_tagii+0x5a>
            }
            return;
        }
        xcount = ycount = 8; // debug
 800c8ac:	2308      	movs	r3, #8
 800c8ae:	62bb      	str	r3, [r7, #40]	; 0x28
 800c8b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (pJPEG->iOptions & JPEG_SCALE_QUARTER)
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c8b8:	f003 0304 	and.w	r3, r3, #4
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d004      	beq.n	800c8ca <_ZL18JPEGPutMCU8BitGrayP14jpeg_image_tagii+0xde>
            xcount = ycount = 2;
 800c8c0:	2302      	movs	r3, #2
 800c8c2:	62bb      	str	r3, [r7, #40]	; 0x28
 800c8c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c8c8:	e009      	b.n	800c8de <_ZL18JPEGPutMCU8BitGrayP14jpeg_image_tagii+0xf2>
        else if (pJPEG->iOptions & JPEG_SCALE_EIGHTH)
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c8ce:	f003 0308 	and.w	r3, r3, #8
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d003      	beq.n	800c8de <_ZL18JPEGPutMCU8BitGrayP14jpeg_image_tagii+0xf2>
            xcount = ycount = 1;
 800c8d6:	2301      	movs	r3, #1
 800c8d8:	62bb      	str	r3, [r7, #40]	; 0x28
 800c8da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (i=0; i<ycount; i++) // do up to 8 rows
 800c8de:	2300      	movs	r3, #0
 800c8e0:	637b      	str	r3, [r7, #52]	; 0x34
 800c8e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c8e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8e6:	429a      	cmp	r2, r3
 800c8e8:	f280 83cd 	bge.w	800d086 <_ZL18JPEGPutMCU8BitGrayP14jpeg_image_tagii+0x89a>
        {
            for (j=0; j<xcount; j++)
 800c8ec:	2300      	movs	r3, #0
 800c8ee:	633b      	str	r3, [r7, #48]	; 0x30
 800c8f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c8f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8f4:	429a      	cmp	r2, r3
 800c8f6:	da0b      	bge.n	800c910 <_ZL18JPEGPutMCU8BitGrayP14jpeg_image_tagii+0x124>
                *pDest++ = *pSrc++;
 800c8f8:	6a3a      	ldr	r2, [r7, #32]
 800c8fa:	1c53      	adds	r3, r2, #1
 800c8fc:	623b      	str	r3, [r7, #32]
 800c8fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c900:	1c59      	adds	r1, r3, #1
 800c902:	6279      	str	r1, [r7, #36]	; 0x24
 800c904:	7812      	ldrb	r2, [r2, #0]
 800c906:	701a      	strb	r2, [r3, #0]
            for (j=0; j<xcount; j++)
 800c908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c90a:	3301      	adds	r3, #1
 800c90c:	633b      	str	r3, [r7, #48]	; 0x30
 800c90e:	e7ef      	b.n	800c8f0 <_ZL18JPEGPutMCU8BitGrayP14jpeg_image_tagii+0x104>
            pDest -= xcount;
 800c910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c912:	425b      	negs	r3, r3
 800c914:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c916:	4413      	add	r3, r2
 800c918:	627b      	str	r3, [r7, #36]	; 0x24
            pDest += iPitch; // next line
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c91e:	4413      	add	r3, r2
 800c920:	627b      	str	r3, [r7, #36]	; 0x24
        for (i=0; i<ycount; i++) // do up to 8 rows
 800c922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c924:	3301      	adds	r3, #1
 800c926:	637b      	str	r3, [r7, #52]	; 0x34
 800c928:	e7db      	b.n	800c8e2 <_ZL18JPEGPutMCU8BitGrayP14jpeg_image_tagii+0xf6>
        }
        return;
    } // single Y source
    if (pJPEG->ucSubSample == 0x21) // stacked horizontally
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c930:	2b21      	cmp	r3, #33	; 0x21
 800c932:	f040 80e1 	bne.w	800caf8 <_ZL18JPEGPutMCU8BitGrayP14jpeg_image_tagii+0x30c>
    {
        if (pJPEG->iOptions & JPEG_SCALE_EIGHTH)
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c93a:	f003 0308 	and.w	r3, r3, #8
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d00a      	beq.n	800c958 <_ZL18JPEGPutMCU8BitGrayP14jpeg_image_tagii+0x16c>
        {
            // only 2 pixels emitted
            pDest[0] = pSrc[0];
 800c942:	6a3b      	ldr	r3, [r7, #32]
 800c944:	781a      	ldrb	r2, [r3, #0]
 800c946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c948:	701a      	strb	r2, [r3, #0]
            pDest[1] = pSrc[128];
 800c94a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c94c:	3301      	adds	r3, #1
 800c94e:	6a3a      	ldr	r2, [r7, #32]
 800c950:	f892 2080 	ldrb.w	r2, [r2, #128]	; 0x80
 800c954:	701a      	strb	r2, [r3, #0]
            return;
 800c956:	e39d      	b.n	800d094 <_ZL18JPEGPutMCU8BitGrayP14jpeg_image_tagii+0x8a8>
        } /* 1/8 */
        if (pJPEG->iOptions & JPEG_SCALE_HALF)
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c95c:	f003 0302 	and.w	r3, r3, #2
 800c960:	2b00      	cmp	r3, #0
 800c962:	d064      	beq.n	800ca2e <_ZL18JPEGPutMCU8BitGrayP14jpeg_image_tagii+0x242>
        {
            for (i=0; i<4; i++)
 800c964:	2300      	movs	r3, #0
 800c966:	637b      	str	r3, [r7, #52]	; 0x34
 800c968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c96a:	2b03      	cmp	r3, #3
 800c96c:	f300 838d 	bgt.w	800d08a <_ZL18JPEGPutMCU8BitGrayP14jpeg_image_tagii+0x89e>
            {
                for (j=0; j<4; j++)
 800c970:	2300      	movs	r3, #0
 800c972:	633b      	str	r3, [r7, #48]	; 0x30
 800c974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c976:	2b03      	cmp	r3, #3
 800c978:	dc4e      	bgt.n	800ca18 <_ZL18JPEGPutMCU8BitGrayP14jpeg_image_tagii+0x22c>
                {
                    int pix;
                    pix = (pSrc[j*2] + pSrc[j*2+1] + pSrc[j*2 + 8] + pSrc[j*2 + 9] + 2) >> 2;
 800c97a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c97c:	005b      	lsls	r3, r3, #1
 800c97e:	461a      	mov	r2, r3
 800c980:	6a3b      	ldr	r3, [r7, #32]
 800c982:	4413      	add	r3, r2
 800c984:	781b      	ldrb	r3, [r3, #0]
 800c986:	4619      	mov	r1, r3
 800c988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c98a:	005b      	lsls	r3, r3, #1
 800c98c:	3301      	adds	r3, #1
 800c98e:	6a3a      	ldr	r2, [r7, #32]
 800c990:	4413      	add	r3, r2
 800c992:	781b      	ldrb	r3, [r3, #0]
 800c994:	440b      	add	r3, r1
 800c996:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c998:	0052      	lsls	r2, r2, #1
 800c99a:	3208      	adds	r2, #8
 800c99c:	6a39      	ldr	r1, [r7, #32]
 800c99e:	440a      	add	r2, r1
 800c9a0:	7812      	ldrb	r2, [r2, #0]
 800c9a2:	4413      	add	r3, r2
 800c9a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c9a6:	0052      	lsls	r2, r2, #1
 800c9a8:	3209      	adds	r2, #9
 800c9aa:	6a39      	ldr	r1, [r7, #32]
 800c9ac:	440a      	add	r2, r1
 800c9ae:	7812      	ldrb	r2, [r2, #0]
 800c9b0:	4413      	add	r3, r2
 800c9b2:	3302      	adds	r3, #2
 800c9b4:	109b      	asrs	r3, r3, #2
 800c9b6:	61fb      	str	r3, [r7, #28]
                    pDest[j] = (uint8_t)pix;
 800c9b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c9bc:	4413      	add	r3, r2
 800c9be:	69fa      	ldr	r2, [r7, #28]
 800c9c0:	b2d2      	uxtb	r2, r2
 800c9c2:	701a      	strb	r2, [r3, #0]
                    pix = (pSrc[j*2 + 128] + pSrc[j*2+129] + pSrc[j*2 + 136] + pSrc[j*2 + 137] + 2) >> 2;
 800c9c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9c6:	005b      	lsls	r3, r3, #1
 800c9c8:	3380      	adds	r3, #128	; 0x80
 800c9ca:	6a3a      	ldr	r2, [r7, #32]
 800c9cc:	4413      	add	r3, r2
 800c9ce:	781b      	ldrb	r3, [r3, #0]
 800c9d0:	4619      	mov	r1, r3
 800c9d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9d4:	005b      	lsls	r3, r3, #1
 800c9d6:	3381      	adds	r3, #129	; 0x81
 800c9d8:	6a3a      	ldr	r2, [r7, #32]
 800c9da:	4413      	add	r3, r2
 800c9dc:	781b      	ldrb	r3, [r3, #0]
 800c9de:	440b      	add	r3, r1
 800c9e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c9e2:	0052      	lsls	r2, r2, #1
 800c9e4:	3288      	adds	r2, #136	; 0x88
 800c9e6:	6a39      	ldr	r1, [r7, #32]
 800c9e8:	440a      	add	r2, r1
 800c9ea:	7812      	ldrb	r2, [r2, #0]
 800c9ec:	4413      	add	r3, r2
 800c9ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c9f0:	0052      	lsls	r2, r2, #1
 800c9f2:	3289      	adds	r2, #137	; 0x89
 800c9f4:	6a39      	ldr	r1, [r7, #32]
 800c9f6:	440a      	add	r2, r1
 800c9f8:	7812      	ldrb	r2, [r2, #0]
 800c9fa:	4413      	add	r3, r2
 800c9fc:	3302      	adds	r3, #2
 800c9fe:	109b      	asrs	r3, r3, #2
 800ca00:	61fb      	str	r3, [r7, #28]
                    pDest[j+4] = (uint8_t)pix;
 800ca02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca04:	3304      	adds	r3, #4
 800ca06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca08:	4413      	add	r3, r2
 800ca0a:	69fa      	ldr	r2, [r7, #28]
 800ca0c:	b2d2      	uxtb	r2, r2
 800ca0e:	701a      	strb	r2, [r3, #0]
                for (j=0; j<4; j++)
 800ca10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca12:	3301      	adds	r3, #1
 800ca14:	633b      	str	r3, [r7, #48]	; 0x30
 800ca16:	e7ad      	b.n	800c974 <_ZL18JPEGPutMCU8BitGrayP14jpeg_image_tagii+0x188>
                }
                pSrc += 16;
 800ca18:	6a3b      	ldr	r3, [r7, #32]
 800ca1a:	3310      	adds	r3, #16
 800ca1c:	623b      	str	r3, [r7, #32]
                pDest += iPitch;
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca22:	4413      	add	r3, r2
 800ca24:	627b      	str	r3, [r7, #36]	; 0x24
            for (i=0; i<4; i++)
 800ca26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca28:	3301      	adds	r3, #1
 800ca2a:	637b      	str	r3, [r7, #52]	; 0x34
 800ca2c:	e79c      	b.n	800c968 <_ZL18JPEGPutMCU8BitGrayP14jpeg_image_tagii+0x17c>
            }
            return;
        }
        if (pJPEG->iOptions & JPEG_SCALE_QUARTER)
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ca32:	f003 0304 	and.w	r3, r3, #4
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d032      	beq.n	800caa0 <_ZL18JPEGPutMCU8BitGrayP14jpeg_image_tagii+0x2b4>
        {
            // each MCU contributes a 2x2 block
            pDest[0] = pSrc[0]; // Y0
 800ca3a:	6a3b      	ldr	r3, [r7, #32]
 800ca3c:	781a      	ldrb	r2, [r3, #0]
 800ca3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca40:	701a      	strb	r2, [r3, #0]
            pDest[1] = pSrc[1];
 800ca42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca44:	3301      	adds	r3, #1
 800ca46:	6a3a      	ldr	r2, [r7, #32]
 800ca48:	7852      	ldrb	r2, [r2, #1]
 800ca4a:	701a      	strb	r2, [r3, #0]
            pDest[iPitch] = pSrc[2];
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca50:	4413      	add	r3, r2
 800ca52:	6a3a      	ldr	r2, [r7, #32]
 800ca54:	7892      	ldrb	r2, [r2, #2]
 800ca56:	701a      	strb	r2, [r3, #0]
            pDest[iPitch+1] = pSrc[3];
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	3301      	adds	r3, #1
 800ca5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca5e:	4413      	add	r3, r2
 800ca60:	6a3a      	ldr	r2, [r7, #32]
 800ca62:	78d2      	ldrb	r2, [r2, #3]
 800ca64:	701a      	strb	r2, [r3, #0]

            pDest[2] = pSrc[128]; // Y`
 800ca66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca68:	3302      	adds	r3, #2
 800ca6a:	6a3a      	ldr	r2, [r7, #32]
 800ca6c:	f892 2080 	ldrb.w	r2, [r2, #128]	; 0x80
 800ca70:	701a      	strb	r2, [r3, #0]
            pDest[3] = pSrc[129];
 800ca72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca74:	3303      	adds	r3, #3
 800ca76:	6a3a      	ldr	r2, [r7, #32]
 800ca78:	f892 2081 	ldrb.w	r2, [r2, #129]	; 0x81
 800ca7c:	701a      	strb	r2, [r3, #0]
            pDest[iPitch+2] = pSrc[130];
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	3302      	adds	r3, #2
 800ca82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca84:	4413      	add	r3, r2
 800ca86:	6a3a      	ldr	r2, [r7, #32]
 800ca88:	f892 2082 	ldrb.w	r2, [r2, #130]	; 0x82
 800ca8c:	701a      	strb	r2, [r3, #0]
            pDest[iPitch+3] = pSrc[131];
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	3303      	adds	r3, #3
 800ca92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca94:	4413      	add	r3, r2
 800ca96:	6a3a      	ldr	r2, [r7, #32]
 800ca98:	f892 2083 	ldrb.w	r2, [r2, #131]	; 0x83
 800ca9c:	701a      	strb	r2, [r3, #0]
            return;
 800ca9e:	e2f9      	b.n	800d094 <_ZL18JPEGPutMCU8BitGrayP14jpeg_image_tagii+0x8a8>
        }
        for (i=0; i<8; i++)
 800caa0:	2300      	movs	r3, #0
 800caa2:	637b      	str	r3, [r7, #52]	; 0x34
 800caa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800caa6:	2b07      	cmp	r3, #7
 800caa8:	dc26      	bgt.n	800caf8 <_ZL18JPEGPutMCU8BitGrayP14jpeg_image_tagii+0x30c>
        {
            for (j=0; j<8; j++)
 800caaa:	2300      	movs	r3, #0
 800caac:	633b      	str	r3, [r7, #48]	; 0x30
 800caae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cab0:	2b07      	cmp	r3, #7
 800cab2:	dc16      	bgt.n	800cae2 <_ZL18JPEGPutMCU8BitGrayP14jpeg_image_tagii+0x2f6>
            {
                pDest[j] = pSrc[j];
 800cab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cab6:	6a3a      	ldr	r2, [r7, #32]
 800cab8:	441a      	add	r2, r3
 800caba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cabc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cabe:	440b      	add	r3, r1
 800cac0:	7812      	ldrb	r2, [r2, #0]
 800cac2:	701a      	strb	r2, [r3, #0]
                pDest[j+8] = pSrc[128 + j];
 800cac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cac6:	3380      	adds	r3, #128	; 0x80
 800cac8:	461a      	mov	r2, r3
 800caca:	6a3b      	ldr	r3, [r7, #32]
 800cacc:	441a      	add	r2, r3
 800cace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cad0:	3308      	adds	r3, #8
 800cad2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cad4:	440b      	add	r3, r1
 800cad6:	7812      	ldrb	r2, [r2, #0]
 800cad8:	701a      	strb	r2, [r3, #0]
            for (j=0; j<8; j++)
 800cada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cadc:	3301      	adds	r3, #1
 800cade:	633b      	str	r3, [r7, #48]	; 0x30
 800cae0:	e7e5      	b.n	800caae <_ZL18JPEGPutMCU8BitGrayP14jpeg_image_tagii+0x2c2>
            }
            pSrc += 8;
 800cae2:	6a3b      	ldr	r3, [r7, #32]
 800cae4:	3308      	adds	r3, #8
 800cae6:	623b      	str	r3, [r7, #32]
            pDest += iPitch;
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800caec:	4413      	add	r3, r2
 800caee:	627b      	str	r3, [r7, #36]	; 0x24
        for (i=0; i<8; i++)
 800caf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800caf2:	3301      	adds	r3, #1
 800caf4:	637b      	str	r3, [r7, #52]	; 0x34
 800caf6:	e7d5      	b.n	800caa4 <_ZL18JPEGPutMCU8BitGrayP14jpeg_image_tagii+0x2b8>
        }
    } // 0x21
    if (pJPEG->ucSubSample == 0x12) // stacked vertically
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cafe:	2b12      	cmp	r3, #18
 800cb00:	f040 80f4 	bne.w	800ccec <_ZL18JPEGPutMCU8BitGrayP14jpeg_image_tagii+0x500>
    {
        if (pJPEG->iOptions & JPEG_SCALE_EIGHTH)
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cb08:	f003 0308 	and.w	r3, r3, #8
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d00b      	beq.n	800cb28 <_ZL18JPEGPutMCU8BitGrayP14jpeg_image_tagii+0x33c>
        {
            // only 2 pixels emitted
            pDest[0] = pSrc[0];
 800cb10:	6a3b      	ldr	r3, [r7, #32]
 800cb12:	781a      	ldrb	r2, [r3, #0]
 800cb14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb16:	701a      	strb	r2, [r3, #0]
            pDest[iPitch] = pSrc[128];
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb1c:	4413      	add	r3, r2
 800cb1e:	6a3a      	ldr	r2, [r7, #32]
 800cb20:	f892 2080 	ldrb.w	r2, [r2, #128]	; 0x80
 800cb24:	701a      	strb	r2, [r3, #0]
            return;
 800cb26:	e2b5      	b.n	800d094 <_ZL18JPEGPutMCU8BitGrayP14jpeg_image_tagii+0x8a8>
        } /* 1/8 */
        if (pJPEG->iOptions & JPEG_SCALE_HALF)
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cb2c:	f003 0302 	and.w	r3, r3, #2
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d067      	beq.n	800cc04 <_ZL18JPEGPutMCU8BitGrayP14jpeg_image_tagii+0x418>
        {
            for (i=0; i<4; i++)
 800cb34:	2300      	movs	r3, #0
 800cb36:	637b      	str	r3, [r7, #52]	; 0x34
 800cb38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb3a:	2b03      	cmp	r3, #3
 800cb3c:	f300 82a7 	bgt.w	800d08e <_ZL18JPEGPutMCU8BitGrayP14jpeg_image_tagii+0x8a2>
            {
                for (j=0; j<4; j++)
 800cb40:	2300      	movs	r3, #0
 800cb42:	633b      	str	r3, [r7, #48]	; 0x30
 800cb44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb46:	2b03      	cmp	r3, #3
 800cb48:	dc51      	bgt.n	800cbee <_ZL18JPEGPutMCU8BitGrayP14jpeg_image_tagii+0x402>
                {
                    int pix;
                    pix = (pSrc[j*2] + pSrc[j*2+1] + pSrc[j*2 + 8] + pSrc[j*2 + 9] + 2) >> 2;
 800cb4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb4c:	005b      	lsls	r3, r3, #1
 800cb4e:	461a      	mov	r2, r3
 800cb50:	6a3b      	ldr	r3, [r7, #32]
 800cb52:	4413      	add	r3, r2
 800cb54:	781b      	ldrb	r3, [r3, #0]
 800cb56:	4619      	mov	r1, r3
 800cb58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb5a:	005b      	lsls	r3, r3, #1
 800cb5c:	3301      	adds	r3, #1
 800cb5e:	6a3a      	ldr	r2, [r7, #32]
 800cb60:	4413      	add	r3, r2
 800cb62:	781b      	ldrb	r3, [r3, #0]
 800cb64:	440b      	add	r3, r1
 800cb66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb68:	0052      	lsls	r2, r2, #1
 800cb6a:	3208      	adds	r2, #8
 800cb6c:	6a39      	ldr	r1, [r7, #32]
 800cb6e:	440a      	add	r2, r1
 800cb70:	7812      	ldrb	r2, [r2, #0]
 800cb72:	4413      	add	r3, r2
 800cb74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb76:	0052      	lsls	r2, r2, #1
 800cb78:	3209      	adds	r2, #9
 800cb7a:	6a39      	ldr	r1, [r7, #32]
 800cb7c:	440a      	add	r2, r1
 800cb7e:	7812      	ldrb	r2, [r2, #0]
 800cb80:	4413      	add	r3, r2
 800cb82:	3302      	adds	r3, #2
 800cb84:	109b      	asrs	r3, r3, #2
 800cb86:	61bb      	str	r3, [r7, #24]
                    pDest[j] = (uint8_t)pix;
 800cb88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb8c:	4413      	add	r3, r2
 800cb8e:	69ba      	ldr	r2, [r7, #24]
 800cb90:	b2d2      	uxtb	r2, r2
 800cb92:	701a      	strb	r2, [r3, #0]
                    pix = (pSrc[j*2 + 128] + pSrc[j*2+129] + pSrc[j*2 + 136] + pSrc[j*2 + 137] + 2) >> 2;
 800cb94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb96:	005b      	lsls	r3, r3, #1
 800cb98:	3380      	adds	r3, #128	; 0x80
 800cb9a:	6a3a      	ldr	r2, [r7, #32]
 800cb9c:	4413      	add	r3, r2
 800cb9e:	781b      	ldrb	r3, [r3, #0]
 800cba0:	4619      	mov	r1, r3
 800cba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cba4:	005b      	lsls	r3, r3, #1
 800cba6:	3381      	adds	r3, #129	; 0x81
 800cba8:	6a3a      	ldr	r2, [r7, #32]
 800cbaa:	4413      	add	r3, r2
 800cbac:	781b      	ldrb	r3, [r3, #0]
 800cbae:	440b      	add	r3, r1
 800cbb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cbb2:	0052      	lsls	r2, r2, #1
 800cbb4:	3288      	adds	r2, #136	; 0x88
 800cbb6:	6a39      	ldr	r1, [r7, #32]
 800cbb8:	440a      	add	r2, r1
 800cbba:	7812      	ldrb	r2, [r2, #0]
 800cbbc:	4413      	add	r3, r2
 800cbbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cbc0:	0052      	lsls	r2, r2, #1
 800cbc2:	3289      	adds	r2, #137	; 0x89
 800cbc4:	6a39      	ldr	r1, [r7, #32]
 800cbc6:	440a      	add	r2, r1
 800cbc8:	7812      	ldrb	r2, [r2, #0]
 800cbca:	4413      	add	r3, r2
 800cbcc:	3302      	adds	r3, #2
 800cbce:	109b      	asrs	r3, r3, #2
 800cbd0:	61bb      	str	r3, [r7, #24]
                    pDest[4*iPitch+j] = (uint8_t)pix;
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	009a      	lsls	r2, r3, #2
 800cbd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbd8:	4413      	add	r3, r2
 800cbda:	461a      	mov	r2, r3
 800cbdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbde:	4413      	add	r3, r2
 800cbe0:	69ba      	ldr	r2, [r7, #24]
 800cbe2:	b2d2      	uxtb	r2, r2
 800cbe4:	701a      	strb	r2, [r3, #0]
                for (j=0; j<4; j++)
 800cbe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbe8:	3301      	adds	r3, #1
 800cbea:	633b      	str	r3, [r7, #48]	; 0x30
 800cbec:	e7aa      	b.n	800cb44 <_ZL18JPEGPutMCU8BitGrayP14jpeg_image_tagii+0x358>
                }
                pSrc += 16;
 800cbee:	6a3b      	ldr	r3, [r7, #32]
 800cbf0:	3310      	adds	r3, #16
 800cbf2:	623b      	str	r3, [r7, #32]
                pDest += iPitch;
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cbf8:	4413      	add	r3, r2
 800cbfa:	627b      	str	r3, [r7, #36]	; 0x24
            for (i=0; i<4; i++)
 800cbfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbfe:	3301      	adds	r3, #1
 800cc00:	637b      	str	r3, [r7, #52]	; 0x34
 800cc02:	e799      	b.n	800cb38 <_ZL18JPEGPutMCU8BitGrayP14jpeg_image_tagii+0x34c>
            }
            return;
        }
        if (pJPEG->iOptions & JPEG_SCALE_QUARTER)
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cc08:	f003 0304 	and.w	r3, r3, #4
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d03e      	beq.n	800cc8e <_ZL18JPEGPutMCU8BitGrayP14jpeg_image_tagii+0x4a2>
        {
            // each MCU contributes a 2x2 block
            pDest[0] = pSrc[0]; // Y0
 800cc10:	6a3b      	ldr	r3, [r7, #32]
 800cc12:	781a      	ldrb	r2, [r3, #0]
 800cc14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc16:	701a      	strb	r2, [r3, #0]
            pDest[1] = pSrc[1];
 800cc18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc1a:	3301      	adds	r3, #1
 800cc1c:	6a3a      	ldr	r2, [r7, #32]
 800cc1e:	7852      	ldrb	r2, [r2, #1]
 800cc20:	701a      	strb	r2, [r3, #0]
            pDest[iPitch] = pSrc[2];
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc26:	4413      	add	r3, r2
 800cc28:	6a3a      	ldr	r2, [r7, #32]
 800cc2a:	7892      	ldrb	r2, [r2, #2]
 800cc2c:	701a      	strb	r2, [r3, #0]
            pDest[iPitch+1] = pSrc[3];
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	3301      	adds	r3, #1
 800cc32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc34:	4413      	add	r3, r2
 800cc36:	6a3a      	ldr	r2, [r7, #32]
 800cc38:	78d2      	ldrb	r2, [r2, #3]
 800cc3a:	701a      	strb	r2, [r3, #0]

            pDest[iPitch*2] = pSrc[128]; // Y`
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	005b      	lsls	r3, r3, #1
 800cc40:	461a      	mov	r2, r3
 800cc42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc44:	4413      	add	r3, r2
 800cc46:	6a3a      	ldr	r2, [r7, #32]
 800cc48:	f892 2080 	ldrb.w	r2, [r2, #128]	; 0x80
 800cc4c:	701a      	strb	r2, [r3, #0]
            pDest[iPitch*2+1] = pSrc[129];
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	005b      	lsls	r3, r3, #1
 800cc52:	3301      	adds	r3, #1
 800cc54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc56:	4413      	add	r3, r2
 800cc58:	6a3a      	ldr	r2, [r7, #32]
 800cc5a:	f892 2081 	ldrb.w	r2, [r2, #129]	; 0x81
 800cc5e:	701a      	strb	r2, [r3, #0]
            pDest[iPitch*3] = pSrc[130];
 800cc60:	687a      	ldr	r2, [r7, #4]
 800cc62:	4613      	mov	r3, r2
 800cc64:	005b      	lsls	r3, r3, #1
 800cc66:	4413      	add	r3, r2
 800cc68:	461a      	mov	r2, r3
 800cc6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc6c:	4413      	add	r3, r2
 800cc6e:	6a3a      	ldr	r2, [r7, #32]
 800cc70:	f892 2082 	ldrb.w	r2, [r2, #130]	; 0x82
 800cc74:	701a      	strb	r2, [r3, #0]
            pDest[iPitch*3+1] = pSrc[131];
 800cc76:	687a      	ldr	r2, [r7, #4]
 800cc78:	4613      	mov	r3, r2
 800cc7a:	005b      	lsls	r3, r3, #1
 800cc7c:	4413      	add	r3, r2
 800cc7e:	3301      	adds	r3, #1
 800cc80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc82:	4413      	add	r3, r2
 800cc84:	6a3a      	ldr	r2, [r7, #32]
 800cc86:	f892 2083 	ldrb.w	r2, [r2, #131]	; 0x83
 800cc8a:	701a      	strb	r2, [r3, #0]
            return;
 800cc8c:	e202      	b.n	800d094 <_ZL18JPEGPutMCU8BitGrayP14jpeg_image_tagii+0x8a8>
        }
        for (i=0; i<8; i++)
 800cc8e:	2300      	movs	r3, #0
 800cc90:	637b      	str	r3, [r7, #52]	; 0x34
 800cc92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc94:	2b07      	cmp	r3, #7
 800cc96:	dc29      	bgt.n	800ccec <_ZL18JPEGPutMCU8BitGrayP14jpeg_image_tagii+0x500>
        {
            for (j=0; j<8; j++)
 800cc98:	2300      	movs	r3, #0
 800cc9a:	633b      	str	r3, [r7, #48]	; 0x30
 800cc9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc9e:	2b07      	cmp	r3, #7
 800cca0:	dc19      	bgt.n	800ccd6 <_ZL18JPEGPutMCU8BitGrayP14jpeg_image_tagii+0x4ea>
            {
                pDest[j] = pSrc[j];
 800cca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cca4:	6a3a      	ldr	r2, [r7, #32]
 800cca6:	441a      	add	r2, r3
 800cca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccaa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ccac:	440b      	add	r3, r1
 800ccae:	7812      	ldrb	r2, [r2, #0]
 800ccb0:	701a      	strb	r2, [r3, #0]
                pDest[8*iPitch + j] = pSrc[128 + j];
 800ccb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccb4:	3380      	adds	r3, #128	; 0x80
 800ccb6:	461a      	mov	r2, r3
 800ccb8:	6a3b      	ldr	r3, [r7, #32]
 800ccba:	441a      	add	r2, r3
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	00d9      	lsls	r1, r3, #3
 800ccc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccc2:	440b      	add	r3, r1
 800ccc4:	4619      	mov	r1, r3
 800ccc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccc8:	440b      	add	r3, r1
 800ccca:	7812      	ldrb	r2, [r2, #0]
 800cccc:	701a      	strb	r2, [r3, #0]
            for (j=0; j<8; j++)
 800ccce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccd0:	3301      	adds	r3, #1
 800ccd2:	633b      	str	r3, [r7, #48]	; 0x30
 800ccd4:	e7e2      	b.n	800cc9c <_ZL18JPEGPutMCU8BitGrayP14jpeg_image_tagii+0x4b0>
            }
            pSrc += 8;
 800ccd6:	6a3b      	ldr	r3, [r7, #32]
 800ccd8:	3308      	adds	r3, #8
 800ccda:	623b      	str	r3, [r7, #32]
            pDest += iPitch;
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cce0:	4413      	add	r3, r2
 800cce2:	627b      	str	r3, [r7, #36]	; 0x24
        for (i=0; i<8; i++)
 800cce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cce6:	3301      	adds	r3, #1
 800cce8:	637b      	str	r3, [r7, #52]	; 0x34
 800ccea:	e7d2      	b.n	800cc92 <_ZL18JPEGPutMCU8BitGrayP14jpeg_image_tagii+0x4a6>
        }
    } // 0x12
    if (pJPEG->ucSubSample == 0x22)
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ccf2:	2b22      	cmp	r3, #34	; 0x22
 800ccf4:	f040 81ce 	bne.w	800d094 <_ZL18JPEGPutMCU8BitGrayP14jpeg_image_tagii+0x8a8>
    {
        if (pJPEG->iOptions & JPEG_SCALE_EIGHTH)
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ccfc:	f003 0308 	and.w	r3, r3, #8
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d019      	beq.n	800cd38 <_ZL18JPEGPutMCU8BitGrayP14jpeg_image_tagii+0x54c>
        {
            // each MCU contributes 1 pixel
            pDest[0] = pSrc[0]; // Y0
 800cd04:	6a3b      	ldr	r3, [r7, #32]
 800cd06:	781a      	ldrb	r2, [r3, #0]
 800cd08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd0a:	701a      	strb	r2, [r3, #0]
            pDest[1] = pSrc[128]; // Y1
 800cd0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd0e:	3301      	adds	r3, #1
 800cd10:	6a3a      	ldr	r2, [r7, #32]
 800cd12:	f892 2080 	ldrb.w	r2, [r2, #128]	; 0x80
 800cd16:	701a      	strb	r2, [r3, #0]
            pDest[iPitch] = pSrc[256]; // Y2
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cd1c:	4413      	add	r3, r2
 800cd1e:	6a3a      	ldr	r2, [r7, #32]
 800cd20:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
 800cd24:	701a      	strb	r2, [r3, #0]
            pDest[iPitch + 1] = pSrc[384]; // Y3
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	3301      	adds	r3, #1
 800cd2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cd2c:	4413      	add	r3, r2
 800cd2e:	6a3a      	ldr	r2, [r7, #32]
 800cd30:	f892 2180 	ldrb.w	r2, [r2, #384]	; 0x180
 800cd34:	701a      	strb	r2, [r3, #0]
            return;
 800cd36:	e1ad      	b.n	800d094 <_ZL18JPEGPutMCU8BitGrayP14jpeg_image_tagii+0x8a8>
        }
        if (pJPEG->iOptions & JPEG_SCALE_QUARTER)
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cd3c:	f003 0304 	and.w	r3, r3, #4
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	f000 8083 	beq.w	800ce4c <_ZL18JPEGPutMCU8BitGrayP14jpeg_image_tagii+0x660>
        {
            // each MCU contributes 2x2 pixels
            pDest[0] = pSrc[0]; // Y0
 800cd46:	6a3b      	ldr	r3, [r7, #32]
 800cd48:	781a      	ldrb	r2, [r3, #0]
 800cd4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd4c:	701a      	strb	r2, [r3, #0]
            pDest[1] = pSrc[1];
 800cd4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd50:	3301      	adds	r3, #1
 800cd52:	6a3a      	ldr	r2, [r7, #32]
 800cd54:	7852      	ldrb	r2, [r2, #1]
 800cd56:	701a      	strb	r2, [r3, #0]
            pDest[iPitch] = pSrc[2];
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cd5c:	4413      	add	r3, r2
 800cd5e:	6a3a      	ldr	r2, [r7, #32]
 800cd60:	7892      	ldrb	r2, [r2, #2]
 800cd62:	701a      	strb	r2, [r3, #0]
            pDest[iPitch+1] = pSrc[3];
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	3301      	adds	r3, #1
 800cd68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cd6a:	4413      	add	r3, r2
 800cd6c:	6a3a      	ldr	r2, [r7, #32]
 800cd6e:	78d2      	ldrb	r2, [r2, #3]
 800cd70:	701a      	strb	r2, [r3, #0]
            
            pDest[2] = pSrc[128]; // Y1
 800cd72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd74:	3302      	adds	r3, #2
 800cd76:	6a3a      	ldr	r2, [r7, #32]
 800cd78:	f892 2080 	ldrb.w	r2, [r2, #128]	; 0x80
 800cd7c:	701a      	strb	r2, [r3, #0]
            pDest[3] = pSrc[129];
 800cd7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd80:	3303      	adds	r3, #3
 800cd82:	6a3a      	ldr	r2, [r7, #32]
 800cd84:	f892 2081 	ldrb.w	r2, [r2, #129]	; 0x81
 800cd88:	701a      	strb	r2, [r3, #0]
            pDest[iPitch+2] = pSrc[130];
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	3302      	adds	r3, #2
 800cd8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cd90:	4413      	add	r3, r2
 800cd92:	6a3a      	ldr	r2, [r7, #32]
 800cd94:	f892 2082 	ldrb.w	r2, [r2, #130]	; 0x82
 800cd98:	701a      	strb	r2, [r3, #0]
            pDest[iPitch+3] = pSrc[131];
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	3303      	adds	r3, #3
 800cd9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cda0:	4413      	add	r3, r2
 800cda2:	6a3a      	ldr	r2, [r7, #32]
 800cda4:	f892 2083 	ldrb.w	r2, [r2, #131]	; 0x83
 800cda8:	701a      	strb	r2, [r3, #0]
            
            pDest[iPitch*2] = pSrc[256]; // Y2
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	005b      	lsls	r3, r3, #1
 800cdae:	461a      	mov	r2, r3
 800cdb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdb2:	4413      	add	r3, r2
 800cdb4:	6a3a      	ldr	r2, [r7, #32]
 800cdb6:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
 800cdba:	701a      	strb	r2, [r3, #0]
            pDest[iPitch*2+1] = pSrc[257];
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	005b      	lsls	r3, r3, #1
 800cdc0:	3301      	adds	r3, #1
 800cdc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cdc4:	4413      	add	r3, r2
 800cdc6:	6a3a      	ldr	r2, [r7, #32]
 800cdc8:	f892 2101 	ldrb.w	r2, [r2, #257]	; 0x101
 800cdcc:	701a      	strb	r2, [r3, #0]
            pDest[iPitch*3] = pSrc[258];
 800cdce:	687a      	ldr	r2, [r7, #4]
 800cdd0:	4613      	mov	r3, r2
 800cdd2:	005b      	lsls	r3, r3, #1
 800cdd4:	4413      	add	r3, r2
 800cdd6:	461a      	mov	r2, r3
 800cdd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdda:	4413      	add	r3, r2
 800cddc:	6a3a      	ldr	r2, [r7, #32]
 800cdde:	f892 2102 	ldrb.w	r2, [r2, #258]	; 0x102
 800cde2:	701a      	strb	r2, [r3, #0]
            pDest[iPitch*3+1] = pSrc[259];
 800cde4:	687a      	ldr	r2, [r7, #4]
 800cde6:	4613      	mov	r3, r2
 800cde8:	005b      	lsls	r3, r3, #1
 800cdea:	4413      	add	r3, r2
 800cdec:	3301      	adds	r3, #1
 800cdee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cdf0:	4413      	add	r3, r2
 800cdf2:	6a3a      	ldr	r2, [r7, #32]
 800cdf4:	f892 2103 	ldrb.w	r2, [r2, #259]	; 0x103
 800cdf8:	701a      	strb	r2, [r3, #0]
            
            pDest[iPitch*2+2] = pSrc[384]; // Y3
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	005b      	lsls	r3, r3, #1
 800cdfe:	3302      	adds	r3, #2
 800ce00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ce02:	4413      	add	r3, r2
 800ce04:	6a3a      	ldr	r2, [r7, #32]
 800ce06:	f892 2180 	ldrb.w	r2, [r2, #384]	; 0x180
 800ce0a:	701a      	strb	r2, [r3, #0]
            pDest[iPitch*2+3] = pSrc[385];
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	005b      	lsls	r3, r3, #1
 800ce10:	3303      	adds	r3, #3
 800ce12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ce14:	4413      	add	r3, r2
 800ce16:	6a3a      	ldr	r2, [r7, #32]
 800ce18:	f892 2181 	ldrb.w	r2, [r2, #385]	; 0x181
 800ce1c:	701a      	strb	r2, [r3, #0]
            pDest[iPitch*3+2] = pSrc[386];
 800ce1e:	687a      	ldr	r2, [r7, #4]
 800ce20:	4613      	mov	r3, r2
 800ce22:	005b      	lsls	r3, r3, #1
 800ce24:	4413      	add	r3, r2
 800ce26:	3302      	adds	r3, #2
 800ce28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ce2a:	4413      	add	r3, r2
 800ce2c:	6a3a      	ldr	r2, [r7, #32]
 800ce2e:	f892 2182 	ldrb.w	r2, [r2, #386]	; 0x182
 800ce32:	701a      	strb	r2, [r3, #0]
            pDest[iPitch*3+3] = pSrc[387];
 800ce34:	687a      	ldr	r2, [r7, #4]
 800ce36:	4613      	mov	r3, r2
 800ce38:	005b      	lsls	r3, r3, #1
 800ce3a:	4413      	add	r3, r2
 800ce3c:	3303      	adds	r3, #3
 800ce3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ce40:	4413      	add	r3, r2
 800ce42:	6a3a      	ldr	r2, [r7, #32]
 800ce44:	f892 2183 	ldrb.w	r2, [r2, #387]	; 0x183
 800ce48:	701a      	strb	r2, [r3, #0]
            return;
 800ce4a:	e123      	b.n	800d094 <_ZL18JPEGPutMCU8BitGrayP14jpeg_image_tagii+0x8a8>
        }
        if (pJPEG->iOptions & JPEG_SCALE_HALF)
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ce50:	f003 0302 	and.w	r3, r3, #2
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	f000 80c0 	beq.w	800cfda <_ZL18JPEGPutMCU8BitGrayP14jpeg_image_tagii+0x7ee>
        {
            for (i=0; i<4; i++)
 800ce5a:	2300      	movs	r3, #0
 800ce5c:	637b      	str	r3, [r7, #52]	; 0x34
 800ce5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce60:	2b03      	cmp	r3, #3
 800ce62:	f300 8116 	bgt.w	800d092 <_ZL18JPEGPutMCU8BitGrayP14jpeg_image_tagii+0x8a6>
            {
                for (j=0; j<4; j++)
 800ce66:	2300      	movs	r3, #0
 800ce68:	633b      	str	r3, [r7, #48]	; 0x30
 800ce6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce6c:	2b03      	cmp	r3, #3
 800ce6e:	f300 80a9 	bgt.w	800cfc4 <_ZL18JPEGPutMCU8BitGrayP14jpeg_image_tagii+0x7d8>
                {
                    int pix;
                    pix = (pSrc[j*2] + pSrc[j*2+1] + pSrc[j*2 + 8] + pSrc[j*2 + 9] + 2) >> 2;
 800ce72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce74:	005b      	lsls	r3, r3, #1
 800ce76:	461a      	mov	r2, r3
 800ce78:	6a3b      	ldr	r3, [r7, #32]
 800ce7a:	4413      	add	r3, r2
 800ce7c:	781b      	ldrb	r3, [r3, #0]
 800ce7e:	4619      	mov	r1, r3
 800ce80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce82:	005b      	lsls	r3, r3, #1
 800ce84:	3301      	adds	r3, #1
 800ce86:	6a3a      	ldr	r2, [r7, #32]
 800ce88:	4413      	add	r3, r2
 800ce8a:	781b      	ldrb	r3, [r3, #0]
 800ce8c:	440b      	add	r3, r1
 800ce8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce90:	0052      	lsls	r2, r2, #1
 800ce92:	3208      	adds	r2, #8
 800ce94:	6a39      	ldr	r1, [r7, #32]
 800ce96:	440a      	add	r2, r1
 800ce98:	7812      	ldrb	r2, [r2, #0]
 800ce9a:	4413      	add	r3, r2
 800ce9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce9e:	0052      	lsls	r2, r2, #1
 800cea0:	3209      	adds	r2, #9
 800cea2:	6a39      	ldr	r1, [r7, #32]
 800cea4:	440a      	add	r2, r1
 800cea6:	7812      	ldrb	r2, [r2, #0]
 800cea8:	4413      	add	r3, r2
 800ceaa:	3302      	adds	r3, #2
 800ceac:	109b      	asrs	r3, r3, #2
 800ceae:	617b      	str	r3, [r7, #20]
                    pDest[j] = (uint8_t)pix; // Y0
 800ceb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ceb4:	4413      	add	r3, r2
 800ceb6:	697a      	ldr	r2, [r7, #20]
 800ceb8:	b2d2      	uxtb	r2, r2
 800ceba:	701a      	strb	r2, [r3, #0]
                    pix = (pSrc[j*2+128] + pSrc[j*2+129] + pSrc[j*2 + 136] + pSrc[j*2 + 137] + 2) >> 2;
 800cebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cebe:	005b      	lsls	r3, r3, #1
 800cec0:	3380      	adds	r3, #128	; 0x80
 800cec2:	6a3a      	ldr	r2, [r7, #32]
 800cec4:	4413      	add	r3, r2
 800cec6:	781b      	ldrb	r3, [r3, #0]
 800cec8:	4619      	mov	r1, r3
 800ceca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cecc:	005b      	lsls	r3, r3, #1
 800cece:	3381      	adds	r3, #129	; 0x81
 800ced0:	6a3a      	ldr	r2, [r7, #32]
 800ced2:	4413      	add	r3, r2
 800ced4:	781b      	ldrb	r3, [r3, #0]
 800ced6:	440b      	add	r3, r1
 800ced8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ceda:	0052      	lsls	r2, r2, #1
 800cedc:	3288      	adds	r2, #136	; 0x88
 800cede:	6a39      	ldr	r1, [r7, #32]
 800cee0:	440a      	add	r2, r1
 800cee2:	7812      	ldrb	r2, [r2, #0]
 800cee4:	4413      	add	r3, r2
 800cee6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cee8:	0052      	lsls	r2, r2, #1
 800ceea:	3289      	adds	r2, #137	; 0x89
 800ceec:	6a39      	ldr	r1, [r7, #32]
 800ceee:	440a      	add	r2, r1
 800cef0:	7812      	ldrb	r2, [r2, #0]
 800cef2:	4413      	add	r3, r2
 800cef4:	3302      	adds	r3, #2
 800cef6:	109b      	asrs	r3, r3, #2
 800cef8:	617b      	str	r3, [r7, #20]
                    pDest[j+4] = (uint8_t)pix; // Y1
 800cefa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cefc:	3304      	adds	r3, #4
 800cefe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cf00:	4413      	add	r3, r2
 800cf02:	697a      	ldr	r2, [r7, #20]
 800cf04:	b2d2      	uxtb	r2, r2
 800cf06:	701a      	strb	r2, [r3, #0]
                    pix = (pSrc[j*2+256] + pSrc[j*2+257] + pSrc[j*2 + 264] + pSrc[j*2 + 265] + 2) >> 2;
 800cf08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf0a:	005b      	lsls	r3, r3, #1
 800cf0c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800cf10:	6a3a      	ldr	r2, [r7, #32]
 800cf12:	4413      	add	r3, r2
 800cf14:	781b      	ldrb	r3, [r3, #0]
 800cf16:	4619      	mov	r1, r3
 800cf18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf1a:	005b      	lsls	r3, r3, #1
 800cf1c:	f203 1301 	addw	r3, r3, #257	; 0x101
 800cf20:	6a3a      	ldr	r2, [r7, #32]
 800cf22:	4413      	add	r3, r2
 800cf24:	781b      	ldrb	r3, [r3, #0]
 800cf26:	440b      	add	r3, r1
 800cf28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cf2a:	0052      	lsls	r2, r2, #1
 800cf2c:	f502 7284 	add.w	r2, r2, #264	; 0x108
 800cf30:	6a39      	ldr	r1, [r7, #32]
 800cf32:	440a      	add	r2, r1
 800cf34:	7812      	ldrb	r2, [r2, #0]
 800cf36:	4413      	add	r3, r2
 800cf38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cf3a:	0052      	lsls	r2, r2, #1
 800cf3c:	f202 1209 	addw	r2, r2, #265	; 0x109
 800cf40:	6a39      	ldr	r1, [r7, #32]
 800cf42:	440a      	add	r2, r1
 800cf44:	7812      	ldrb	r2, [r2, #0]
 800cf46:	4413      	add	r3, r2
 800cf48:	3302      	adds	r3, #2
 800cf4a:	109b      	asrs	r3, r3, #2
 800cf4c:	617b      	str	r3, [r7, #20]
                    pDest[iPitch*4 + j] = (uint8_t)pix; // Y2
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	009a      	lsls	r2, r3, #2
 800cf52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf54:	4413      	add	r3, r2
 800cf56:	461a      	mov	r2, r3
 800cf58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf5a:	4413      	add	r3, r2
 800cf5c:	697a      	ldr	r2, [r7, #20]
 800cf5e:	b2d2      	uxtb	r2, r2
 800cf60:	701a      	strb	r2, [r3, #0]
                    pix = (pSrc[j*2+384] + pSrc[j*2+385] + pSrc[j*2 + 392] + pSrc[j*2 + 393] + 2) >> 2;
 800cf62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf64:	005b      	lsls	r3, r3, #1
 800cf66:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800cf6a:	6a3a      	ldr	r2, [r7, #32]
 800cf6c:	4413      	add	r3, r2
 800cf6e:	781b      	ldrb	r3, [r3, #0]
 800cf70:	4619      	mov	r1, r3
 800cf72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf74:	005b      	lsls	r3, r3, #1
 800cf76:	f203 1381 	addw	r3, r3, #385	; 0x181
 800cf7a:	6a3a      	ldr	r2, [r7, #32]
 800cf7c:	4413      	add	r3, r2
 800cf7e:	781b      	ldrb	r3, [r3, #0]
 800cf80:	440b      	add	r3, r1
 800cf82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cf84:	0052      	lsls	r2, r2, #1
 800cf86:	f502 72c4 	add.w	r2, r2, #392	; 0x188
 800cf8a:	6a39      	ldr	r1, [r7, #32]
 800cf8c:	440a      	add	r2, r1
 800cf8e:	7812      	ldrb	r2, [r2, #0]
 800cf90:	4413      	add	r3, r2
 800cf92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cf94:	0052      	lsls	r2, r2, #1
 800cf96:	f202 1289 	addw	r2, r2, #393	; 0x189
 800cf9a:	6a39      	ldr	r1, [r7, #32]
 800cf9c:	440a      	add	r2, r1
 800cf9e:	7812      	ldrb	r2, [r2, #0]
 800cfa0:	4413      	add	r3, r2
 800cfa2:	3302      	adds	r3, #2
 800cfa4:	109b      	asrs	r3, r3, #2
 800cfa6:	617b      	str	r3, [r7, #20]
                    pDest[iPitch*4 + j + 4] = (uint8_t)pix; // Y3
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	009a      	lsls	r2, r3, #2
 800cfac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfae:	4413      	add	r3, r2
 800cfb0:	3304      	adds	r3, #4
 800cfb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cfb4:	4413      	add	r3, r2
 800cfb6:	697a      	ldr	r2, [r7, #20]
 800cfb8:	b2d2      	uxtb	r2, r2
 800cfba:	701a      	strb	r2, [r3, #0]
                for (j=0; j<4; j++)
 800cfbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfbe:	3301      	adds	r3, #1
 800cfc0:	633b      	str	r3, [r7, #48]	; 0x30
 800cfc2:	e752      	b.n	800ce6a <_ZL18JPEGPutMCU8BitGrayP14jpeg_image_tagii+0x67e>
                }
                pSrc += 16;
 800cfc4:	6a3b      	ldr	r3, [r7, #32]
 800cfc6:	3310      	adds	r3, #16
 800cfc8:	623b      	str	r3, [r7, #32]
                pDest += iPitch;
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cfce:	4413      	add	r3, r2
 800cfd0:	627b      	str	r3, [r7, #36]	; 0x24
            for (i=0; i<4; i++)
 800cfd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfd4:	3301      	adds	r3, #1
 800cfd6:	637b      	str	r3, [r7, #52]	; 0x34
 800cfd8:	e741      	b.n	800ce5e <_ZL18JPEGPutMCU8BitGrayP14jpeg_image_tagii+0x672>
                pDest += iPitch;
            }
            return;
        }
#endif
        xcount = iPitch - x;
 800cfda:	687a      	ldr	r2, [r7, #4]
 800cfdc:	68bb      	ldr	r3, [r7, #8]
 800cfde:	1ad3      	subs	r3, r2, r3
 800cfe0:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (i=0; i<8; i++)
 800cfe2:	2300      	movs	r3, #0
 800cfe4:	637b      	str	r3, [r7, #52]	; 0x34
 800cfe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfe8:	2b07      	cmp	r3, #7
 800cfea:	dc53      	bgt.n	800d094 <_ZL18JPEGPutMCU8BitGrayP14jpeg_image_tagii+0x8a8>
        {
            for (j=0; j<8; j++)
 800cfec:	2300      	movs	r3, #0
 800cfee:	633b      	str	r3, [r7, #48]	; 0x30
 800cff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cff2:	2b07      	cmp	r3, #7
 800cff4:	dc3a      	bgt.n	800d06c <_ZL18JPEGPutMCU8BitGrayP14jpeg_image_tagii+0x880>
            {
                if (j < xcount) {
 800cff6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cffa:	429a      	cmp	r2, r3
 800cffc:	da15      	bge.n	800d02a <_ZL18JPEGPutMCU8BitGrayP14jpeg_image_tagii+0x83e>
                    pDest[j] = pSrc[j]; // Y0
 800cffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d000:	6a3a      	ldr	r2, [r7, #32]
 800d002:	441a      	add	r2, r3
 800d004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d006:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d008:	440b      	add	r3, r1
 800d00a:	7812      	ldrb	r2, [r2, #0]
 800d00c:	701a      	strb	r2, [r3, #0]
                    pDest[iPitch*8 + j] = pSrc[j+256]; // Y2
 800d00e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d010:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800d014:	6a3a      	ldr	r2, [r7, #32]
 800d016:	441a      	add	r2, r3
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	00d9      	lsls	r1, r3, #3
 800d01c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d01e:	440b      	add	r3, r1
 800d020:	4619      	mov	r1, r3
 800d022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d024:	440b      	add	r3, r1
 800d026:	7812      	ldrb	r2, [r2, #0]
 800d028:	701a      	strb	r2, [r3, #0]
                }
                if (j+8 < xcount) {
 800d02a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d02c:	3308      	adds	r3, #8
 800d02e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d030:	429a      	cmp	r2, r3
 800d032:	dd17      	ble.n	800d064 <_ZL18JPEGPutMCU8BitGrayP14jpeg_image_tagii+0x878>
                    pDest[j+8] = pSrc[j+128]; // Y1
 800d034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d036:	3380      	adds	r3, #128	; 0x80
 800d038:	6a3a      	ldr	r2, [r7, #32]
 800d03a:	441a      	add	r2, r3
 800d03c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d03e:	3308      	adds	r3, #8
 800d040:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d042:	440b      	add	r3, r1
 800d044:	7812      	ldrb	r2, [r2, #0]
 800d046:	701a      	strb	r2, [r3, #0]
                    pDest[iPitch*8 + j + 8] = pSrc[j + 384]; // Y3
 800d048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d04a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800d04e:	6a3a      	ldr	r2, [r7, #32]
 800d050:	441a      	add	r2, r3
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	00d9      	lsls	r1, r3, #3
 800d056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d058:	440b      	add	r3, r1
 800d05a:	3308      	adds	r3, #8
 800d05c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d05e:	440b      	add	r3, r1
 800d060:	7812      	ldrb	r2, [r2, #0]
 800d062:	701a      	strb	r2, [r3, #0]
            for (j=0; j<8; j++)
 800d064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d066:	3301      	adds	r3, #1
 800d068:	633b      	str	r3, [r7, #48]	; 0x30
 800d06a:	e7c1      	b.n	800cff0 <_ZL18JPEGPutMCU8BitGrayP14jpeg_image_tagii+0x804>
                }
            }
            pSrc += 8;
 800d06c:	6a3b      	ldr	r3, [r7, #32]
 800d06e:	3308      	adds	r3, #8
 800d070:	623b      	str	r3, [r7, #32]
            pDest += iPitch;
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d076:	4413      	add	r3, r2
 800d078:	627b      	str	r3, [r7, #36]	; 0x24
        for (i=0; i<8; i++)
 800d07a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d07c:	3301      	adds	r3, #1
 800d07e:	637b      	str	r3, [r7, #52]	; 0x34
 800d080:	e7b1      	b.n	800cfe6 <_ZL18JPEGPutMCU8BitGrayP14jpeg_image_tagii+0x7fa>
            return;
 800d082:	bf00      	nop
 800d084:	e006      	b.n	800d094 <_ZL18JPEGPutMCU8BitGrayP14jpeg_image_tagii+0x8a8>
        return;
 800d086:	bf00      	nop
 800d088:	e004      	b.n	800d094 <_ZL18JPEGPutMCU8BitGrayP14jpeg_image_tagii+0x8a8>
            return;
 800d08a:	bf00      	nop
 800d08c:	e002      	b.n	800d094 <_ZL18JPEGPutMCU8BitGrayP14jpeg_image_tagii+0x8a8>
            return;
 800d08e:	bf00      	nop
 800d090:	e000      	b.n	800d094 <_ZL18JPEGPutMCU8BitGrayP14jpeg_image_tagii+0x8a8>
            return;
 800d092:	bf00      	nop
        }
    } // 0x22
} /* JPEGMPutMCU8BitGray() */
 800d094:	373c      	adds	r7, #60	; 0x3c
 800d096:	46bd      	mov	sp, r7
 800d098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d09c:	4770      	bx	lr
	...

0800d0a0 <_ZL14JPEGPutMCUGrayP14jpeg_image_tagii>:

static void JPEGPutMCUGray(JPEGIMAGE *pJPEG, int x, int iPitch)
{
 800d0a0:	b480      	push	{r7}
 800d0a2:	b08d      	sub	sp, #52	; 0x34
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	60f8      	str	r0, [r7, #12]
 800d0a8:	60b9      	str	r1, [r7, #8]
 800d0aa:	607a      	str	r2, [r7, #4]
    uint16_t *usDest = (uint16_t *)&pJPEG->usPixels[x];
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800d0b2:	68bb      	ldr	r3, [r7, #8]
 800d0b4:	005b      	lsls	r3, r3, #1
 800d0b6:	4413      	add	r3, r2
 800d0b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    int i, j, xcount, ycount, delta;
    uint8_t *pSrc = (uint8_t *)&pJPEG->sMCUs[0];
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d0c0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800d0c4:	617b      	str	r3, [r7, #20]
    
    if (pJPEG->iOptions & JPEG_SCALE_HALF) // special handling of 1/2 size (pixel averaging)
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d0ca:	f003 0302 	and.w	r3, r3, #2
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d066      	beq.n	800d1a0 <_ZL14JPEGPutMCUGrayP14jpeg_image_tagii+0x100>
    {
        int pix;
        for (i=0; i<4; i++)
 800d0d2:	2300      	movs	r3, #0
 800d0d4:	62bb      	str	r3, [r7, #40]	; 0x28
 800d0d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0d8:	2b03      	cmp	r3, #3
 800d0da:	f300 80d6 	bgt.w	800d28a <_ZL14JPEGPutMCUGrayP14jpeg_image_tagii+0x1ea>
        {
            if (pJPEG->ucPixelType == RGB565_LITTLE_ENDIAN)
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d126      	bne.n	800d136 <_ZL14JPEGPutMCUGrayP14jpeg_image_tagii+0x96>
            {
                for (j=0; j<4; j++)
 800d0e8:	2300      	movs	r3, #0
 800d0ea:	627b      	str	r3, [r7, #36]	; 0x24
 800d0ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0ee:	2b03      	cmp	r3, #3
 800d0f0:	dc4a      	bgt.n	800d188 <_ZL14JPEGPutMCUGrayP14jpeg_image_tagii+0xe8>
                {
                    pix = (pSrc[0] + pSrc[1] + pSrc[8] + pSrc[9] + 2) >> 2; // average 2x2 block
 800d0f2:	697b      	ldr	r3, [r7, #20]
 800d0f4:	781b      	ldrb	r3, [r3, #0]
 800d0f6:	461a      	mov	r2, r3
 800d0f8:	697b      	ldr	r3, [r7, #20]
 800d0fa:	3301      	adds	r3, #1
 800d0fc:	781b      	ldrb	r3, [r3, #0]
 800d0fe:	4413      	add	r3, r2
 800d100:	697a      	ldr	r2, [r7, #20]
 800d102:	3208      	adds	r2, #8
 800d104:	7812      	ldrb	r2, [r2, #0]
 800d106:	4413      	add	r3, r2
 800d108:	697a      	ldr	r2, [r7, #20]
 800d10a:	3209      	adds	r2, #9
 800d10c:	7812      	ldrb	r2, [r2, #0]
 800d10e:	4413      	add	r3, r2
 800d110:	3302      	adds	r3, #2
 800d112:	109b      	asrs	r3, r3, #2
 800d114:	613b      	str	r3, [r7, #16]
                    usDest[j] = usGrayTo565[pix];
 800d116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d118:	005b      	lsls	r3, r3, #1
 800d11a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d11c:	4413      	add	r3, r2
 800d11e:	495e      	ldr	r1, [pc, #376]	; (800d298 <_ZL14JPEGPutMCUGrayP14jpeg_image_tagii+0x1f8>)
 800d120:	693a      	ldr	r2, [r7, #16]
 800d122:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800d126:	801a      	strh	r2, [r3, #0]
                    pSrc += 2;
 800d128:	697b      	ldr	r3, [r7, #20]
 800d12a:	3302      	adds	r3, #2
 800d12c:	617b      	str	r3, [r7, #20]
                for (j=0; j<4; j++)
 800d12e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d130:	3301      	adds	r3, #1
 800d132:	627b      	str	r3, [r7, #36]	; 0x24
 800d134:	e7da      	b.n	800d0ec <_ZL14JPEGPutMCUGrayP14jpeg_image_tagii+0x4c>
                }
            }
            else
            {
                for (j=0; j<4; j++)
 800d136:	2300      	movs	r3, #0
 800d138:	627b      	str	r3, [r7, #36]	; 0x24
 800d13a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d13c:	2b03      	cmp	r3, #3
 800d13e:	dc23      	bgt.n	800d188 <_ZL14JPEGPutMCUGrayP14jpeg_image_tagii+0xe8>
                {
                    pix = (pSrc[0] + pSrc[1] + pSrc[8] + pSrc[9] + 2) >> 2; // average 2x2 block
 800d140:	697b      	ldr	r3, [r7, #20]
 800d142:	781b      	ldrb	r3, [r3, #0]
 800d144:	461a      	mov	r2, r3
 800d146:	697b      	ldr	r3, [r7, #20]
 800d148:	3301      	adds	r3, #1
 800d14a:	781b      	ldrb	r3, [r3, #0]
 800d14c:	4413      	add	r3, r2
 800d14e:	697a      	ldr	r2, [r7, #20]
 800d150:	3208      	adds	r2, #8
 800d152:	7812      	ldrb	r2, [r2, #0]
 800d154:	4413      	add	r3, r2
 800d156:	697a      	ldr	r2, [r7, #20]
 800d158:	3209      	adds	r2, #9
 800d15a:	7812      	ldrb	r2, [r2, #0]
 800d15c:	4413      	add	r3, r2
 800d15e:	3302      	adds	r3, #2
 800d160:	109b      	asrs	r3, r3, #2
 800d162:	613b      	str	r3, [r7, #16]
                    usDest[j] = __builtin_bswap16(usGrayTo565[pix]);
 800d164:	4a4c      	ldr	r2, [pc, #304]	; (800d298 <_ZL14JPEGPutMCUGrayP14jpeg_image_tagii+0x1f8>)
 800d166:	693b      	ldr	r3, [r7, #16]
 800d168:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800d16c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d16e:	005b      	lsls	r3, r3, #1
 800d170:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d172:	440b      	add	r3, r1
 800d174:	ba52      	rev16	r2, r2
 800d176:	b292      	uxth	r2, r2
 800d178:	801a      	strh	r2, [r3, #0]
                    pSrc += 2;
 800d17a:	697b      	ldr	r3, [r7, #20]
 800d17c:	3302      	adds	r3, #2
 800d17e:	617b      	str	r3, [r7, #20]
                for (j=0; j<4; j++)
 800d180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d182:	3301      	adds	r3, #1
 800d184:	627b      	str	r3, [r7, #36]	; 0x24
 800d186:	e7d8      	b.n	800d13a <_ZL14JPEGPutMCUGrayP14jpeg_image_tagii+0x9a>
                }
            }
            pSrc += 8; // skip extra line
 800d188:	697b      	ldr	r3, [r7, #20]
 800d18a:	3308      	adds	r3, #8
 800d18c:	617b      	str	r3, [r7, #20]
            usDest += iPitch;
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	005b      	lsls	r3, r3, #1
 800d192:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d194:	4413      	add	r3, r2
 800d196:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (i=0; i<4; i++)
 800d198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d19a:	3301      	adds	r3, #1
 800d19c:	62bb      	str	r3, [r7, #40]	; 0x28
 800d19e:	e79a      	b.n	800d0d6 <_ZL14JPEGPutMCUGrayP14jpeg_image_tagii+0x36>
        }
        return;
    }
    xcount = ycount = 8; // debug
 800d1a0:	2308      	movs	r3, #8
 800d1a2:	61fb      	str	r3, [r7, #28]
 800d1a4:	69fb      	ldr	r3, [r7, #28]
 800d1a6:	623b      	str	r3, [r7, #32]
    delta = 0;
 800d1a8:	2300      	movs	r3, #0
 800d1aa:	61bb      	str	r3, [r7, #24]
    if (pJPEG->iOptions & JPEG_SCALE_QUARTER) {
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d1b0:	f003 0304 	and.w	r3, r3, #4
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d004      	beq.n	800d1c2 <_ZL14JPEGPutMCUGrayP14jpeg_image_tagii+0x122>
        xcount = ycount = 2;
 800d1b8:	2302      	movs	r3, #2
 800d1ba:	61fb      	str	r3, [r7, #28]
 800d1bc:	69fb      	ldr	r3, [r7, #28]
 800d1be:	623b      	str	r3, [r7, #32]
 800d1c0:	e017      	b.n	800d1f2 <_ZL14JPEGPutMCUGrayP14jpeg_image_tagii+0x152>
    } else if (pJPEG->iOptions & JPEG_SCALE_EIGHTH) {
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d1c6:	f003 0308 	and.w	r3, r3, #8
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d004      	beq.n	800d1d8 <_ZL14JPEGPutMCUGrayP14jpeg_image_tagii+0x138>
        xcount = ycount = 1;
 800d1ce:	2301      	movs	r3, #1
 800d1d0:	61fb      	str	r3, [r7, #28]
 800d1d2:	69fb      	ldr	r3, [r7, #28]
 800d1d4:	623b      	str	r3, [r7, #32]
 800d1d6:	e00c      	b.n	800d1f2 <_ZL14JPEGPutMCUGrayP14jpeg_image_tagii+0x152>
    } else {
        if (x + 8 > iPitch) {
 800d1d8:	68bb      	ldr	r3, [r7, #8]
 800d1da:	3307      	adds	r3, #7
 800d1dc:	687a      	ldr	r2, [r7, #4]
 800d1de:	429a      	cmp	r2, r3
 800d1e0:	dc07      	bgt.n	800d1f2 <_ZL14JPEGPutMCUGrayP14jpeg_image_tagii+0x152>
            xcount = iPitch - x; // final block is partial width
 800d1e2:	687a      	ldr	r2, [r7, #4]
 800d1e4:	68bb      	ldr	r3, [r7, #8]
 800d1e6:	1ad3      	subs	r3, r2, r3
 800d1e8:	623b      	str	r3, [r7, #32]
            delta = 8 - xcount;
 800d1ea:	6a3b      	ldr	r3, [r7, #32]
 800d1ec:	f1c3 0308 	rsb	r3, r3, #8
 800d1f0:	61bb      	str	r3, [r7, #24]
        }
    }
    for (i=0; i<ycount; i++) // do up to 8 rows
 800d1f2:	2300      	movs	r3, #0
 800d1f4:	62bb      	str	r3, [r7, #40]	; 0x28
 800d1f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d1f8:	69fb      	ldr	r3, [r7, #28]
 800d1fa:	429a      	cmp	r2, r3
 800d1fc:	da46      	bge.n	800d28c <_ZL14JPEGPutMCUGrayP14jpeg_image_tagii+0x1ec>
    {
        if (pJPEG->ucPixelType == RGB565_LITTLE_ENDIAN)
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d204:	2b00      	cmp	r3, #0
 800d206:	d115      	bne.n	800d234 <_ZL14JPEGPutMCUGrayP14jpeg_image_tagii+0x194>
        {
            for (j=0; j<xcount; j++)
 800d208:	2300      	movs	r3, #0
 800d20a:	627b      	str	r3, [r7, #36]	; 0x24
 800d20c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d20e:	6a3b      	ldr	r3, [r7, #32]
 800d210:	429a      	cmp	r2, r3
 800d212:	da27      	bge.n	800d264 <_ZL14JPEGPutMCUGrayP14jpeg_image_tagii+0x1c4>
                *usDest++ = usGrayTo565[*pSrc++];
 800d214:	697b      	ldr	r3, [r7, #20]
 800d216:	1c5a      	adds	r2, r3, #1
 800d218:	617a      	str	r2, [r7, #20]
 800d21a:	781b      	ldrb	r3, [r3, #0]
 800d21c:	4619      	mov	r1, r3
 800d21e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d220:	1c9a      	adds	r2, r3, #2
 800d222:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d224:	4a1c      	ldr	r2, [pc, #112]	; (800d298 <_ZL14JPEGPutMCUGrayP14jpeg_image_tagii+0x1f8>)
 800d226:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800d22a:	801a      	strh	r2, [r3, #0]
            for (j=0; j<xcount; j++)
 800d22c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d22e:	3301      	adds	r3, #1
 800d230:	627b      	str	r3, [r7, #36]	; 0x24
 800d232:	e7eb      	b.n	800d20c <_ZL14JPEGPutMCUGrayP14jpeg_image_tagii+0x16c>
        }
        else
        {
            for (j=0; j<xcount; j++)
 800d234:	2300      	movs	r3, #0
 800d236:	627b      	str	r3, [r7, #36]	; 0x24
 800d238:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d23a:	6a3b      	ldr	r3, [r7, #32]
 800d23c:	429a      	cmp	r2, r3
 800d23e:	da11      	bge.n	800d264 <_ZL14JPEGPutMCUGrayP14jpeg_image_tagii+0x1c4>
                *usDest++ = __builtin_bswap16(usGrayTo565[*pSrc++]);
 800d240:	697b      	ldr	r3, [r7, #20]
 800d242:	1c5a      	adds	r2, r3, #1
 800d244:	617a      	str	r2, [r7, #20]
 800d246:	781b      	ldrb	r3, [r3, #0]
 800d248:	461a      	mov	r2, r3
 800d24a:	4b13      	ldr	r3, [pc, #76]	; (800d298 <_ZL14JPEGPutMCUGrayP14jpeg_image_tagii+0x1f8>)
 800d24c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800d250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d252:	1c99      	adds	r1, r3, #2
 800d254:	62f9      	str	r1, [r7, #44]	; 0x2c
 800d256:	ba52      	rev16	r2, r2
 800d258:	b292      	uxth	r2, r2
 800d25a:	801a      	strh	r2, [r3, #0]
            for (j=0; j<xcount; j++)
 800d25c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d25e:	3301      	adds	r3, #1
 800d260:	627b      	str	r3, [r7, #36]	; 0x24
 800d262:	e7e9      	b.n	800d238 <_ZL14JPEGPutMCUGrayP14jpeg_image_tagii+0x198>
        }
        usDest -= xcount;
 800d264:	6a3b      	ldr	r3, [r7, #32]
 800d266:	005b      	lsls	r3, r3, #1
 800d268:	425b      	negs	r3, r3
 800d26a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d26c:	4413      	add	r3, r2
 800d26e:	62fb      	str	r3, [r7, #44]	; 0x2c
        usDest += iPitch; // next line
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	005b      	lsls	r3, r3, #1
 800d274:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d276:	4413      	add	r3, r2
 800d278:	62fb      	str	r3, [r7, #44]	; 0x2c
        pSrc += delta;
 800d27a:	69bb      	ldr	r3, [r7, #24]
 800d27c:	697a      	ldr	r2, [r7, #20]
 800d27e:	4413      	add	r3, r2
 800d280:	617b      	str	r3, [r7, #20]
    for (i=0; i<ycount; i++) // do up to 8 rows
 800d282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d284:	3301      	adds	r3, #1
 800d286:	62bb      	str	r3, [r7, #40]	; 0x28
 800d288:	e7b5      	b.n	800d1f6 <_ZL14JPEGPutMCUGrayP14jpeg_image_tagii+0x156>
        return;
 800d28a:	bf00      	nop
    }
} /* JPEGPutMCUGray() */
 800d28c:	3734      	adds	r7, #52	; 0x34
 800d28e:	46bd      	mov	sp, r7
 800d290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d294:	4770      	bx	lr
 800d296:	bf00      	nop
 800d298:	080115a8 	.word	0x080115a8

0800d29c <_ZL11JPEGPixelLEPtiii>:

static void JPEGPixelLE(uint16_t *pDest, int iY, int iCb, int iCr)
{
 800d29c:	b480      	push	{r7}
 800d29e:	b08b      	sub	sp, #44	; 0x2c
 800d2a0:	af00      	add	r7, sp, #0
 800d2a2:	60f8      	str	r0, [r7, #12]
 800d2a4:	60b9      	str	r1, [r7, #8]
 800d2a6:	607a      	str	r2, [r7, #4]
 800d2a8:	603b      	str	r3, [r7, #0]
    pDest[0] = (uint16_t)ulPixel;
#else
    int iCBB, iCBG, iCRG, iCRR;
    unsigned short usPixel;

    iCBB = 7258  * (iCb-0x80);
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	3b80      	subs	r3, #128	; 0x80
 800d2ae:	f641 425a 	movw	r2, #7258	; 0x1c5a
 800d2b2:	fb02 f303 	mul.w	r3, r2, r3
 800d2b6:	627b      	str	r3, [r7, #36]	; 0x24
    iCBG = -1409 * (iCb-0x80);
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	3b80      	subs	r3, #128	; 0x80
 800d2bc:	f46f 62b0 	mvn.w	r2, #1408	; 0x580
 800d2c0:	fb02 f303 	mul.w	r3, r2, r3
 800d2c4:	623b      	str	r3, [r7, #32]
    iCRG = -2925 * (iCr-0x80);
 800d2c6:	683b      	ldr	r3, [r7, #0]
 800d2c8:	3b80      	subs	r3, #128	; 0x80
 800d2ca:	4a1c      	ldr	r2, [pc, #112]	; (800d33c <_ZL11JPEGPixelLEPtiii+0xa0>)
 800d2cc:	fb02 f303 	mul.w	r3, r2, r3
 800d2d0:	61fb      	str	r3, [r7, #28]
    iCRR = 5742  * (iCr-0x80);
 800d2d2:	683b      	ldr	r3, [r7, #0]
 800d2d4:	3b80      	subs	r3, #128	; 0x80
 800d2d6:	f241 626e 	movw	r2, #5742	; 0x166e
 800d2da:	fb02 f303 	mul.w	r3, r2, r3
 800d2de:	61bb      	str	r3, [r7, #24]
    usPixel = usRangeTableB[((iCBB + iY) >> 12) & 0x3ff]; // blue pixel
 800d2e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d2e2:	68bb      	ldr	r3, [r7, #8]
 800d2e4:	4413      	add	r3, r2
 800d2e6:	131b      	asrs	r3, r3, #12
 800d2e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d2ec:	4a14      	ldr	r2, [pc, #80]	; (800d340 <_ZL11JPEGPixelLEPtiii+0xa4>)
 800d2ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d2f2:	82fb      	strh	r3, [r7, #22]
    usPixel |= usRangeTableG[((iCBG + iCRG + iY) >> 12) & 0x3ff]; // green pixel
 800d2f4:	6a3a      	ldr	r2, [r7, #32]
 800d2f6:	69fb      	ldr	r3, [r7, #28]
 800d2f8:	441a      	add	r2, r3
 800d2fa:	68bb      	ldr	r3, [r7, #8]
 800d2fc:	4413      	add	r3, r2
 800d2fe:	131b      	asrs	r3, r3, #12
 800d300:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d304:	4a0f      	ldr	r2, [pc, #60]	; (800d344 <_ZL11JPEGPixelLEPtiii+0xa8>)
 800d306:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800d30a:	8afb      	ldrh	r3, [r7, #22]
 800d30c:	4313      	orrs	r3, r2
 800d30e:	82fb      	strh	r3, [r7, #22]
    usPixel |= usRangeTableR[((iCRR + iY) >> 12) & 0x3ff]; // red pixel
 800d310:	69ba      	ldr	r2, [r7, #24]
 800d312:	68bb      	ldr	r3, [r7, #8]
 800d314:	4413      	add	r3, r2
 800d316:	131b      	asrs	r3, r3, #12
 800d318:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d31c:	4a0a      	ldr	r2, [pc, #40]	; (800d348 <_ZL11JPEGPixelLEPtiii+0xac>)
 800d31e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800d322:	8afb      	ldrh	r3, [r7, #22]
 800d324:	4313      	orrs	r3, r2
 800d326:	82fb      	strh	r3, [r7, #22]
    pDest[0] = usPixel;
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	8afa      	ldrh	r2, [r7, #22]
 800d32c:	801a      	strh	r2, [r3, #0]
#endif
} /* JPEGPixelLE() */
 800d32e:	bf00      	nop
 800d330:	372c      	adds	r7, #44	; 0x2c
 800d332:	46bd      	mov	sp, r7
 800d334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d338:	4770      	bx	lr
 800d33a:	bf00      	nop
 800d33c:	fffff493 	.word	0xfffff493
 800d340:	080127a8 	.word	0x080127a8
 800d344:	08011fa8 	.word	0x08011fa8
 800d348:	080117a8 	.word	0x080117a8

0800d34c <_ZL11JPEGPixelBEPtiii>:

static void JPEGPixelBE(uint16_t *pDest, int iY, int iCb, int iCr)
{
 800d34c:	b480      	push	{r7}
 800d34e:	b08b      	sub	sp, #44	; 0x2c
 800d350:	af00      	add	r7, sp, #0
 800d352:	60f8      	str	r0, [r7, #12]
 800d354:	60b9      	str	r1, [r7, #8]
 800d356:	607a      	str	r2, [r7, #4]
 800d358:	603b      	str	r3, [r7, #0]
    int iCBB, iCBG, iCRG, iCRR;
    unsigned short usPixel;
    
    iCBB = 7258  * (iCb-0x80);
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	3b80      	subs	r3, #128	; 0x80
 800d35e:	f641 425a 	movw	r2, #7258	; 0x1c5a
 800d362:	fb02 f303 	mul.w	r3, r2, r3
 800d366:	627b      	str	r3, [r7, #36]	; 0x24
    iCBG = -1409 * (iCb-0x80);
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	3b80      	subs	r3, #128	; 0x80
 800d36c:	f46f 62b0 	mvn.w	r2, #1408	; 0x580
 800d370:	fb02 f303 	mul.w	r3, r2, r3
 800d374:	623b      	str	r3, [r7, #32]
    iCRG = -2925 * (iCr-0x80);
 800d376:	683b      	ldr	r3, [r7, #0]
 800d378:	3b80      	subs	r3, #128	; 0x80
 800d37a:	4a1d      	ldr	r2, [pc, #116]	; (800d3f0 <_ZL11JPEGPixelBEPtiii+0xa4>)
 800d37c:	fb02 f303 	mul.w	r3, r2, r3
 800d380:	61fb      	str	r3, [r7, #28]
    iCRR = 5742  * (iCr-0x80);
 800d382:	683b      	ldr	r3, [r7, #0]
 800d384:	3b80      	subs	r3, #128	; 0x80
 800d386:	f241 626e 	movw	r2, #5742	; 0x166e
 800d38a:	fb02 f303 	mul.w	r3, r2, r3
 800d38e:	61bb      	str	r3, [r7, #24]
    usPixel = usRangeTableB[((iCBB + iY) >> 12) & 0x3ff]; // blue pixel
 800d390:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d392:	68bb      	ldr	r3, [r7, #8]
 800d394:	4413      	add	r3, r2
 800d396:	131b      	asrs	r3, r3, #12
 800d398:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d39c:	4a15      	ldr	r2, [pc, #84]	; (800d3f4 <_ZL11JPEGPixelBEPtiii+0xa8>)
 800d39e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d3a2:	82fb      	strh	r3, [r7, #22]
    usPixel |= usRangeTableG[((iCBG + iCRG + iY) >> 12) & 0x3ff]; // green pixel
 800d3a4:	6a3a      	ldr	r2, [r7, #32]
 800d3a6:	69fb      	ldr	r3, [r7, #28]
 800d3a8:	441a      	add	r2, r3
 800d3aa:	68bb      	ldr	r3, [r7, #8]
 800d3ac:	4413      	add	r3, r2
 800d3ae:	131b      	asrs	r3, r3, #12
 800d3b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d3b4:	4a10      	ldr	r2, [pc, #64]	; (800d3f8 <_ZL11JPEGPixelBEPtiii+0xac>)
 800d3b6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800d3ba:	8afb      	ldrh	r3, [r7, #22]
 800d3bc:	4313      	orrs	r3, r2
 800d3be:	82fb      	strh	r3, [r7, #22]
    usPixel |= usRangeTableR[((iCRR + iY) >> 12) & 0x3ff]; // red pixel
 800d3c0:	69ba      	ldr	r2, [r7, #24]
 800d3c2:	68bb      	ldr	r3, [r7, #8]
 800d3c4:	4413      	add	r3, r2
 800d3c6:	131b      	asrs	r3, r3, #12
 800d3c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d3cc:	4a0b      	ldr	r2, [pc, #44]	; (800d3fc <_ZL11JPEGPixelBEPtiii+0xb0>)
 800d3ce:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800d3d2:	8afb      	ldrh	r3, [r7, #22]
 800d3d4:	4313      	orrs	r3, r2
 800d3d6:	82fb      	strh	r3, [r7, #22]
    pDest[0] = __builtin_bswap16(usPixel);
 800d3d8:	8afb      	ldrh	r3, [r7, #22]
 800d3da:	ba5b      	rev16	r3, r3
 800d3dc:	b29a      	uxth	r2, r3
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	801a      	strh	r2, [r3, #0]
} /* JPEGPixelBE() */
 800d3e2:	bf00      	nop
 800d3e4:	372c      	adds	r7, #44	; 0x2c
 800d3e6:	46bd      	mov	sp, r7
 800d3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ec:	4770      	bx	lr
 800d3ee:	bf00      	nop
 800d3f0:	fffff493 	.word	0xfffff493
 800d3f4:	080127a8 	.word	0x080127a8
 800d3f8:	08011fa8 	.word	0x08011fa8
 800d3fc:	080117a8 	.word	0x080117a8

0800d400 <_ZL12JPEGPixelRGBPmiii>:

static void JPEGPixelRGB(uint32_t *pDest, int iY, int iCb, int iCr)
{
 800d400:	b480      	push	{r7}
 800d402:	b08b      	sub	sp, #44	; 0x2c
 800d404:	af00      	add	r7, sp, #0
 800d406:	60f8      	str	r0, [r7, #12]
 800d408:	60b9      	str	r1, [r7, #8]
 800d40a:	607a      	str	r2, [r7, #4]
 800d40c:	603b      	str	r3, [r7, #0]
    int iCBB, iCBG, iCRG, iCRR;
    uint32_t u32Pixel;
    int32_t i32;

    iCBB = 7258  * (iCb-0x80);
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	3b80      	subs	r3, #128	; 0x80
 800d412:	f641 425a 	movw	r2, #7258	; 0x1c5a
 800d416:	fb02 f303 	mul.w	r3, r2, r3
 800d41a:	623b      	str	r3, [r7, #32]
    iCBG = -1409 * (iCb-0x80);
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	3b80      	subs	r3, #128	; 0x80
 800d420:	f46f 62b0 	mvn.w	r2, #1408	; 0x580
 800d424:	fb02 f303 	mul.w	r3, r2, r3
 800d428:	61fb      	str	r3, [r7, #28]
    iCRG = -2925 * (iCr-0x80);
 800d42a:	683b      	ldr	r3, [r7, #0]
 800d42c:	3b80      	subs	r3, #128	; 0x80
 800d42e:	4a2c      	ldr	r2, [pc, #176]	; (800d4e0 <_ZL12JPEGPixelRGBPmiii+0xe0>)
 800d430:	fb02 f303 	mul.w	r3, r2, r3
 800d434:	61bb      	str	r3, [r7, #24]
    iCRR = 5742  * (iCr-0x80);
 800d436:	683b      	ldr	r3, [r7, #0]
 800d438:	3b80      	subs	r3, #128	; 0x80
 800d43a:	f241 626e 	movw	r2, #5742	; 0x166e
 800d43e:	fb02 f303 	mul.w	r3, r2, r3
 800d442:	617b      	str	r3, [r7, #20]
    u32Pixel = 0xff000000; // Alpha = 0xff
 800d444:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 800d448:	613b      	str	r3, [r7, #16]
    i32 = ((iCBB + iY) >> 12);
 800d44a:	6a3a      	ldr	r2, [r7, #32]
 800d44c:	68bb      	ldr	r3, [r7, #8]
 800d44e:	4413      	add	r3, r2
 800d450:	131b      	asrs	r3, r3, #12
 800d452:	627b      	str	r3, [r7, #36]	; 0x24
    if (i32 < 0) i32 = 0;
 800d454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d456:	2b00      	cmp	r3, #0
 800d458:	da02      	bge.n	800d460 <_ZL12JPEGPixelRGBPmiii+0x60>
 800d45a:	2300      	movs	r3, #0
 800d45c:	627b      	str	r3, [r7, #36]	; 0x24
 800d45e:	e004      	b.n	800d46a <_ZL12JPEGPixelRGBPmiii+0x6a>
    else if (i32 > 255) i32 = 255;
 800d460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d462:	2bff      	cmp	r3, #255	; 0xff
 800d464:	dd01      	ble.n	800d46a <_ZL12JPEGPixelRGBPmiii+0x6a>
 800d466:	23ff      	movs	r3, #255	; 0xff
 800d468:	627b      	str	r3, [r7, #36]	; 0x24
    u32Pixel |= (uint32_t)(i32<<16); // blue
 800d46a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d46c:	041b      	lsls	r3, r3, #16
 800d46e:	461a      	mov	r2, r3
 800d470:	693b      	ldr	r3, [r7, #16]
 800d472:	4313      	orrs	r3, r2
 800d474:	613b      	str	r3, [r7, #16]
    i32 = ((iCBG + iCRG + iY) >> 12); // green pixel
 800d476:	69fa      	ldr	r2, [r7, #28]
 800d478:	69bb      	ldr	r3, [r7, #24]
 800d47a:	441a      	add	r2, r3
 800d47c:	68bb      	ldr	r3, [r7, #8]
 800d47e:	4413      	add	r3, r2
 800d480:	131b      	asrs	r3, r3, #12
 800d482:	627b      	str	r3, [r7, #36]	; 0x24
    if (i32 < 0) i32 = 0;
 800d484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d486:	2b00      	cmp	r3, #0
 800d488:	da02      	bge.n	800d490 <_ZL12JPEGPixelRGBPmiii+0x90>
 800d48a:	2300      	movs	r3, #0
 800d48c:	627b      	str	r3, [r7, #36]	; 0x24
 800d48e:	e004      	b.n	800d49a <_ZL12JPEGPixelRGBPmiii+0x9a>
    else if (i32 > 255) i32 = 255;
 800d490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d492:	2bff      	cmp	r3, #255	; 0xff
 800d494:	dd01      	ble.n	800d49a <_ZL12JPEGPixelRGBPmiii+0x9a>
 800d496:	23ff      	movs	r3, #255	; 0xff
 800d498:	627b      	str	r3, [r7, #36]	; 0x24
    u32Pixel |= (uint32_t)(i32 << 8);
 800d49a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d49c:	021b      	lsls	r3, r3, #8
 800d49e:	461a      	mov	r2, r3
 800d4a0:	693b      	ldr	r3, [r7, #16]
 800d4a2:	4313      	orrs	r3, r2
 800d4a4:	613b      	str	r3, [r7, #16]
    i32 = ((iCRR + iY) >> 12); // red pixel
 800d4a6:	697a      	ldr	r2, [r7, #20]
 800d4a8:	68bb      	ldr	r3, [r7, #8]
 800d4aa:	4413      	add	r3, r2
 800d4ac:	131b      	asrs	r3, r3, #12
 800d4ae:	627b      	str	r3, [r7, #36]	; 0x24
    if (i32 < 0) i32 = 0;
 800d4b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	da02      	bge.n	800d4bc <_ZL12JPEGPixelRGBPmiii+0xbc>
 800d4b6:	2300      	movs	r3, #0
 800d4b8:	627b      	str	r3, [r7, #36]	; 0x24
 800d4ba:	e004      	b.n	800d4c6 <_ZL12JPEGPixelRGBPmiii+0xc6>
    else if (i32 > 255) i32 = 255;
 800d4bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4be:	2bff      	cmp	r3, #255	; 0xff
 800d4c0:	dd01      	ble.n	800d4c6 <_ZL12JPEGPixelRGBPmiii+0xc6>
 800d4c2:	23ff      	movs	r3, #255	; 0xff
 800d4c4:	627b      	str	r3, [r7, #36]	; 0x24
    u32Pixel |= (uint32_t)(i32);
 800d4c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4c8:	693a      	ldr	r2, [r7, #16]
 800d4ca:	4313      	orrs	r3, r2
 800d4cc:	613b      	str	r3, [r7, #16]
    pDest[0] = u32Pixel;
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	693a      	ldr	r2, [r7, #16]
 800d4d2:	601a      	str	r2, [r3, #0]
} /* JPEGPixelRGB() */
 800d4d4:	bf00      	nop
 800d4d6:	372c      	adds	r7, #44	; 0x2c
 800d4d8:	46bd      	mov	sp, r7
 800d4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4de:	4770      	bx	lr
 800d4e0:	fffff493 	.word	0xfffff493

0800d4e4 <_ZL12JPEGPixel2LEPtiiii>:

static void JPEGPixel2LE(uint16_t *pDest, int iY1, int iY2, int iCb, int iCr)
{
 800d4e4:	b480      	push	{r7}
 800d4e6:	b08b      	sub	sp, #44	; 0x2c
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	60f8      	str	r0, [r7, #12]
 800d4ec:	60b9      	str	r1, [r7, #8]
 800d4ee:	607a      	str	r2, [r7, #4]
 800d4f0:	603b      	str	r3, [r7, #0]
    ulTmp = __USAT16(ulTmp | (ulTmp2 << 16), 5); // range limit both to 5 bits
    ulPixel1 |= (ulTmp << 11); // now we have R + G + B
    *(uint32_t *)&pDest[0] = ulPixel1;
#else
    int iCBB, iCBG, iCRG, iCRR;
    iCBB = 7258  * (iCb-0x80);
 800d4f2:	683b      	ldr	r3, [r7, #0]
 800d4f4:	3b80      	subs	r3, #128	; 0x80
 800d4f6:	f641 425a 	movw	r2, #7258	; 0x1c5a
 800d4fa:	fb02 f303 	mul.w	r3, r2, r3
 800d4fe:	627b      	str	r3, [r7, #36]	; 0x24
    iCBG = -1409 * (iCb-0x80);
 800d500:	683b      	ldr	r3, [r7, #0]
 800d502:	3b80      	subs	r3, #128	; 0x80
 800d504:	f46f 62b0 	mvn.w	r2, #1408	; 0x580
 800d508:	fb02 f303 	mul.w	r3, r2, r3
 800d50c:	623b      	str	r3, [r7, #32]
    iCRG = -2925 * (iCr-0x80);
 800d50e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d510:	3b80      	subs	r3, #128	; 0x80
 800d512:	4a31      	ldr	r2, [pc, #196]	; (800d5d8 <_ZL12JPEGPixel2LEPtiiii+0xf4>)
 800d514:	fb02 f303 	mul.w	r3, r2, r3
 800d518:	61fb      	str	r3, [r7, #28]
    iCRR = 5742  * (iCr-0x80);
 800d51a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d51c:	3b80      	subs	r3, #128	; 0x80
 800d51e:	f241 626e 	movw	r2, #5742	; 0x166e
 800d522:	fb02 f303 	mul.w	r3, r2, r3
 800d526:	61bb      	str	r3, [r7, #24]
    ulPixel1 = usRangeTableB[((iCBB + iY1) >> 12) & 0x3ff]; // blue pixel
 800d528:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d52a:	68bb      	ldr	r3, [r7, #8]
 800d52c:	4413      	add	r3, r2
 800d52e:	131b      	asrs	r3, r3, #12
 800d530:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d534:	4a29      	ldr	r2, [pc, #164]	; (800d5dc <_ZL12JPEGPixel2LEPtiiii+0xf8>)
 800d536:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d53a:	617b      	str	r3, [r7, #20]
    ulPixel1 |= usRangeTableG[((iCBG + iCRG + iY1) >> 12) & 0x3ff]; // green pixel
 800d53c:	6a3a      	ldr	r2, [r7, #32]
 800d53e:	69fb      	ldr	r3, [r7, #28]
 800d540:	441a      	add	r2, r3
 800d542:	68bb      	ldr	r3, [r7, #8]
 800d544:	4413      	add	r3, r2
 800d546:	131b      	asrs	r3, r3, #12
 800d548:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d54c:	4a24      	ldr	r2, [pc, #144]	; (800d5e0 <_ZL12JPEGPixel2LEPtiiii+0xfc>)
 800d54e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d552:	461a      	mov	r2, r3
 800d554:	697b      	ldr	r3, [r7, #20]
 800d556:	4313      	orrs	r3, r2
 800d558:	617b      	str	r3, [r7, #20]
    ulPixel1 |= usRangeTableR[((iCRR + iY1) >> 12) & 0x3ff]; // red pixel
 800d55a:	69ba      	ldr	r2, [r7, #24]
 800d55c:	68bb      	ldr	r3, [r7, #8]
 800d55e:	4413      	add	r3, r2
 800d560:	131b      	asrs	r3, r3, #12
 800d562:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d566:	4a1f      	ldr	r2, [pc, #124]	; (800d5e4 <_ZL12JPEGPixel2LEPtiiii+0x100>)
 800d568:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d56c:	461a      	mov	r2, r3
 800d56e:	697b      	ldr	r3, [r7, #20]
 800d570:	4313      	orrs	r3, r2
 800d572:	617b      	str	r3, [r7, #20]
    
    ulPixel2 = usRangeTableB[((iCBB + iY2) >> 12) & 0x3ff]; // blue pixel
 800d574:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	4413      	add	r3, r2
 800d57a:	131b      	asrs	r3, r3, #12
 800d57c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d580:	4a16      	ldr	r2, [pc, #88]	; (800d5dc <_ZL12JPEGPixel2LEPtiiii+0xf8>)
 800d582:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d586:	613b      	str	r3, [r7, #16]
    ulPixel2 |= usRangeTableG[((iCBG + iCRG + iY2) >> 12) & 0x3ff]; // green pixel
 800d588:	6a3a      	ldr	r2, [r7, #32]
 800d58a:	69fb      	ldr	r3, [r7, #28]
 800d58c:	441a      	add	r2, r3
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	4413      	add	r3, r2
 800d592:	131b      	asrs	r3, r3, #12
 800d594:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d598:	4a11      	ldr	r2, [pc, #68]	; (800d5e0 <_ZL12JPEGPixel2LEPtiiii+0xfc>)
 800d59a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d59e:	461a      	mov	r2, r3
 800d5a0:	693b      	ldr	r3, [r7, #16]
 800d5a2:	4313      	orrs	r3, r2
 800d5a4:	613b      	str	r3, [r7, #16]
    ulPixel2 |= usRangeTableR[((iCRR + iY2) >> 12) & 0x3ff]; // red pixel
 800d5a6:	69ba      	ldr	r2, [r7, #24]
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	4413      	add	r3, r2
 800d5ac:	131b      	asrs	r3, r3, #12
 800d5ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d5b2:	4a0c      	ldr	r2, [pc, #48]	; (800d5e4 <_ZL12JPEGPixel2LEPtiiii+0x100>)
 800d5b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d5b8:	461a      	mov	r2, r3
 800d5ba:	693b      	ldr	r3, [r7, #16]
 800d5bc:	4313      	orrs	r3, r2
 800d5be:	613b      	str	r3, [r7, #16]
    *(uint32_t *)&pDest[0] = (ulPixel1 | (ulPixel2<<16));
 800d5c0:	693b      	ldr	r3, [r7, #16]
 800d5c2:	041a      	lsls	r2, r3, #16
 800d5c4:	697b      	ldr	r3, [r7, #20]
 800d5c6:	431a      	orrs	r2, r3
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	601a      	str	r2, [r3, #0]
#endif
} /* JPEGPixel2LE() */
 800d5cc:	bf00      	nop
 800d5ce:	372c      	adds	r7, #44	; 0x2c
 800d5d0:	46bd      	mov	sp, r7
 800d5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d6:	4770      	bx	lr
 800d5d8:	fffff493 	.word	0xfffff493
 800d5dc:	080127a8 	.word	0x080127a8
 800d5e0:	08011fa8 	.word	0x08011fa8
 800d5e4:	080117a8 	.word	0x080117a8

0800d5e8 <_ZL12JPEGPixel2BEPtllll>:

static void JPEGPixel2BE(uint16_t *pDest, int32_t iY1, int32_t iY2, int32_t iCb, int32_t iCr)
{
 800d5e8:	b480      	push	{r7}
 800d5ea:	b08b      	sub	sp, #44	; 0x2c
 800d5ec:	af00      	add	r7, sp, #0
 800d5ee:	60f8      	str	r0, [r7, #12]
 800d5f0:	60b9      	str	r1, [r7, #8]
 800d5f2:	607a      	str	r2, [r7, #4]
 800d5f4:	603b      	str	r3, [r7, #0]
    int32_t iCBB, iCBG, iCRG, iCRR;
    uint32_t ulPixel1, ulPixel2;
    
    iCBB = 7258L  * (iCb-0x80);
 800d5f6:	683b      	ldr	r3, [r7, #0]
 800d5f8:	3b80      	subs	r3, #128	; 0x80
 800d5fa:	f641 425a 	movw	r2, #7258	; 0x1c5a
 800d5fe:	fb02 f303 	mul.w	r3, r2, r3
 800d602:	627b      	str	r3, [r7, #36]	; 0x24
    iCBG = -1409L * (iCb-0x80);
 800d604:	683b      	ldr	r3, [r7, #0]
 800d606:	3b80      	subs	r3, #128	; 0x80
 800d608:	f46f 62b0 	mvn.w	r2, #1408	; 0x580
 800d60c:	fb02 f303 	mul.w	r3, r2, r3
 800d610:	623b      	str	r3, [r7, #32]
    iCRG = -2925L * (iCr-0x80);
 800d612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d614:	3b80      	subs	r3, #128	; 0x80
 800d616:	4a35      	ldr	r2, [pc, #212]	; (800d6ec <_ZL12JPEGPixel2BEPtllll+0x104>)
 800d618:	fb02 f303 	mul.w	r3, r2, r3
 800d61c:	61fb      	str	r3, [r7, #28]
    iCRR = 5742L  * (iCr-0x80);
 800d61e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d620:	3b80      	subs	r3, #128	; 0x80
 800d622:	f241 626e 	movw	r2, #5742	; 0x166e
 800d626:	fb02 f303 	mul.w	r3, r2, r3
 800d62a:	61bb      	str	r3, [r7, #24]
    ulPixel1 = usRangeTableB[((iCBB + iY1) >> 12) & 0x3ff]; // blue pixel
 800d62c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d62e:	68bb      	ldr	r3, [r7, #8]
 800d630:	4413      	add	r3, r2
 800d632:	131b      	asrs	r3, r3, #12
 800d634:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d638:	4a2d      	ldr	r2, [pc, #180]	; (800d6f0 <_ZL12JPEGPixel2BEPtllll+0x108>)
 800d63a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d63e:	617b      	str	r3, [r7, #20]
    ulPixel1 |= usRangeTableG[((iCBG + iCRG + iY1) >> 12) & 0x3ff]; // green pixel
 800d640:	6a3a      	ldr	r2, [r7, #32]
 800d642:	69fb      	ldr	r3, [r7, #28]
 800d644:	441a      	add	r2, r3
 800d646:	68bb      	ldr	r3, [r7, #8]
 800d648:	4413      	add	r3, r2
 800d64a:	131b      	asrs	r3, r3, #12
 800d64c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d650:	4a28      	ldr	r2, [pc, #160]	; (800d6f4 <_ZL12JPEGPixel2BEPtllll+0x10c>)
 800d652:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d656:	461a      	mov	r2, r3
 800d658:	697b      	ldr	r3, [r7, #20]
 800d65a:	4313      	orrs	r3, r2
 800d65c:	617b      	str	r3, [r7, #20]
    ulPixel1 |= usRangeTableR[((iCRR + iY1) >> 12) & 0x3ff]; // red pixel
 800d65e:	69ba      	ldr	r2, [r7, #24]
 800d660:	68bb      	ldr	r3, [r7, #8]
 800d662:	4413      	add	r3, r2
 800d664:	131b      	asrs	r3, r3, #12
 800d666:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d66a:	4a23      	ldr	r2, [pc, #140]	; (800d6f8 <_ZL12JPEGPixel2BEPtllll+0x110>)
 800d66c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d670:	461a      	mov	r2, r3
 800d672:	697b      	ldr	r3, [r7, #20]
 800d674:	4313      	orrs	r3, r2
 800d676:	617b      	str	r3, [r7, #20]
    
    ulPixel2 = usRangeTableB[((iCBB + iY2) >> 12) & 0x3ff]; // blue pixel
 800d678:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	4413      	add	r3, r2
 800d67e:	131b      	asrs	r3, r3, #12
 800d680:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d684:	4a1a      	ldr	r2, [pc, #104]	; (800d6f0 <_ZL12JPEGPixel2BEPtllll+0x108>)
 800d686:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d68a:	613b      	str	r3, [r7, #16]
    ulPixel2 |= usRangeTableG[((iCBG + iCRG + iY2) >> 12) & 0x3ff]; // green pixel
 800d68c:	6a3a      	ldr	r2, [r7, #32]
 800d68e:	69fb      	ldr	r3, [r7, #28]
 800d690:	441a      	add	r2, r3
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	4413      	add	r3, r2
 800d696:	131b      	asrs	r3, r3, #12
 800d698:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d69c:	4a15      	ldr	r2, [pc, #84]	; (800d6f4 <_ZL12JPEGPixel2BEPtllll+0x10c>)
 800d69e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d6a2:	461a      	mov	r2, r3
 800d6a4:	693b      	ldr	r3, [r7, #16]
 800d6a6:	4313      	orrs	r3, r2
 800d6a8:	613b      	str	r3, [r7, #16]
    ulPixel2 |= usRangeTableR[((iCRR + iY2) >> 12) & 0x3ff]; // red pixel
 800d6aa:	69ba      	ldr	r2, [r7, #24]
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	4413      	add	r3, r2
 800d6b0:	131b      	asrs	r3, r3, #12
 800d6b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d6b6:	4a10      	ldr	r2, [pc, #64]	; (800d6f8 <_ZL12JPEGPixel2BEPtllll+0x110>)
 800d6b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d6bc:	461a      	mov	r2, r3
 800d6be:	693b      	ldr	r3, [r7, #16]
 800d6c0:	4313      	orrs	r3, r2
 800d6c2:	613b      	str	r3, [r7, #16]
    *(uint32_t *)&pDest[0] = __builtin_bswap16(ulPixel1) | ((uint32_t)__builtin_bswap16(ulPixel2)<<16);
 800d6c4:	697b      	ldr	r3, [r7, #20]
 800d6c6:	b29b      	uxth	r3, r3
 800d6c8:	ba5b      	rev16	r3, r3
 800d6ca:	b29b      	uxth	r3, r3
 800d6cc:	461a      	mov	r2, r3
 800d6ce:	693b      	ldr	r3, [r7, #16]
 800d6d0:	b29b      	uxth	r3, r3
 800d6d2:	ba5b      	rev16	r3, r3
 800d6d4:	b29b      	uxth	r3, r3
 800d6d6:	041b      	lsls	r3, r3, #16
 800d6d8:	431a      	orrs	r2, r3
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	601a      	str	r2, [r3, #0]
} /* JPEGPixel2BE() */
 800d6de:	bf00      	nop
 800d6e0:	372c      	adds	r7, #44	; 0x2c
 800d6e2:	46bd      	mov	sp, r7
 800d6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e8:	4770      	bx	lr
 800d6ea:	bf00      	nop
 800d6ec:	fffff493 	.word	0xfffff493
 800d6f0:	080127a8 	.word	0x080127a8
 800d6f4:	08011fa8 	.word	0x08011fa8
 800d6f8:	080117a8 	.word	0x080117a8

0800d6fc <_ZL13JPEGPixel2RGBPmllll>:

static void JPEGPixel2RGB(uint32_t *pDest, int32_t iY1, int32_t iY2, int32_t iCb, int32_t iCr)
{
 800d6fc:	b480      	push	{r7}
 800d6fe:	b08d      	sub	sp, #52	; 0x34
 800d700:	af00      	add	r7, sp, #0
 800d702:	60f8      	str	r0, [r7, #12]
 800d704:	60b9      	str	r1, [r7, #8]
 800d706:	607a      	str	r2, [r7, #4]
 800d708:	603b      	str	r3, [r7, #0]
    int32_t iCBB, iCBG, iCRG, iCRR;
    uint32_t u32Pixel1, u32Pixel2;
    int32_t i32;

    iCBB = 7258L  * (iCb-0x80);
 800d70a:	683b      	ldr	r3, [r7, #0]
 800d70c:	3b80      	subs	r3, #128	; 0x80
 800d70e:	f641 425a 	movw	r2, #7258	; 0x1c5a
 800d712:	fb02 f303 	mul.w	r3, r2, r3
 800d716:	62bb      	str	r3, [r7, #40]	; 0x28
    iCBG = -1409L * (iCb-0x80);
 800d718:	683b      	ldr	r3, [r7, #0]
 800d71a:	3b80      	subs	r3, #128	; 0x80
 800d71c:	f46f 62b0 	mvn.w	r2, #1408	; 0x580
 800d720:	fb02 f303 	mul.w	r3, r2, r3
 800d724:	627b      	str	r3, [r7, #36]	; 0x24
    iCRG = -2925L * (iCr-0x80);
 800d726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d728:	3b80      	subs	r3, #128	; 0x80
 800d72a:	4a50      	ldr	r2, [pc, #320]	; (800d86c <_ZL13JPEGPixel2RGBPmllll+0x170>)
 800d72c:	fb02 f303 	mul.w	r3, r2, r3
 800d730:	623b      	str	r3, [r7, #32]
    iCRR = 5742L  * (iCr-0x80);
 800d732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d734:	3b80      	subs	r3, #128	; 0x80
 800d736:	f241 626e 	movw	r2, #5742	; 0x166e
 800d73a:	fb02 f303 	mul.w	r3, r2, r3
 800d73e:	61fb      	str	r3, [r7, #28]
    i32 = ((iCBB + iY1) >> 12); // blue pixel
 800d740:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d742:	68bb      	ldr	r3, [r7, #8]
 800d744:	4413      	add	r3, r2
 800d746:	131b      	asrs	r3, r3, #12
 800d748:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (i32 < 0) i32 = 0;
 800d74a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	da02      	bge.n	800d756 <_ZL13JPEGPixel2RGBPmllll+0x5a>
 800d750:	2300      	movs	r3, #0
 800d752:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d754:	e004      	b.n	800d760 <_ZL13JPEGPixel2RGBPmllll+0x64>
    else if (i32 > 255) i32 = 255;
 800d756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d758:	2bff      	cmp	r3, #255	; 0xff
 800d75a:	dd01      	ble.n	800d760 <_ZL13JPEGPixel2RGBPmllll+0x64>
 800d75c:	23ff      	movs	r3, #255	; 0xff
 800d75e:	62fb      	str	r3, [r7, #44]	; 0x2c
    u32Pixel1 = u32Pixel2 = 0xff000000; // Alpha = 255
 800d760:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 800d764:	61bb      	str	r3, [r7, #24]
 800d766:	69bb      	ldr	r3, [r7, #24]
 800d768:	617b      	str	r3, [r7, #20]
    u32Pixel1 |= (uint32_t)(i32<<16); // blue
 800d76a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d76c:	041b      	lsls	r3, r3, #16
 800d76e:	461a      	mov	r2, r3
 800d770:	697b      	ldr	r3, [r7, #20]
 800d772:	4313      	orrs	r3, r2
 800d774:	617b      	str	r3, [r7, #20]
    i32 = ((iCBG + iCRG + iY1) >> 12); // green pixel
 800d776:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d778:	6a3b      	ldr	r3, [r7, #32]
 800d77a:	441a      	add	r2, r3
 800d77c:	68bb      	ldr	r3, [r7, #8]
 800d77e:	4413      	add	r3, r2
 800d780:	131b      	asrs	r3, r3, #12
 800d782:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (i32 < 0) i32 = 0;
 800d784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d786:	2b00      	cmp	r3, #0
 800d788:	da02      	bge.n	800d790 <_ZL13JPEGPixel2RGBPmllll+0x94>
 800d78a:	2300      	movs	r3, #0
 800d78c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d78e:	e004      	b.n	800d79a <_ZL13JPEGPixel2RGBPmllll+0x9e>
    else if (i32 > 255) i32 = 255;
 800d790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d792:	2bff      	cmp	r3, #255	; 0xff
 800d794:	dd01      	ble.n	800d79a <_ZL13JPEGPixel2RGBPmllll+0x9e>
 800d796:	23ff      	movs	r3, #255	; 0xff
 800d798:	62fb      	str	r3, [r7, #44]	; 0x2c
    u32Pixel1 |= (uint32_t)(i32 << 8); // green
 800d79a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d79c:	021b      	lsls	r3, r3, #8
 800d79e:	461a      	mov	r2, r3
 800d7a0:	697b      	ldr	r3, [r7, #20]
 800d7a2:	4313      	orrs	r3, r2
 800d7a4:	617b      	str	r3, [r7, #20]
    i32 = ((iCRR + iY1) >> 12); // red pixel
 800d7a6:	69fa      	ldr	r2, [r7, #28]
 800d7a8:	68bb      	ldr	r3, [r7, #8]
 800d7aa:	4413      	add	r3, r2
 800d7ac:	131b      	asrs	r3, r3, #12
 800d7ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (i32 < 0) i32 = 0;
 800d7b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	da02      	bge.n	800d7bc <_ZL13JPEGPixel2RGBPmllll+0xc0>
 800d7b6:	2300      	movs	r3, #0
 800d7b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d7ba:	e004      	b.n	800d7c6 <_ZL13JPEGPixel2RGBPmllll+0xca>
    else if (i32 > 255) i32 = 255;
 800d7bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7be:	2bff      	cmp	r3, #255	; 0xff
 800d7c0:	dd01      	ble.n	800d7c6 <_ZL13JPEGPixel2RGBPmllll+0xca>
 800d7c2:	23ff      	movs	r3, #255	; 0xff
 800d7c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    u32Pixel1 |= (uint32_t)i32; // red
 800d7c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7c8:	697a      	ldr	r2, [r7, #20]
 800d7ca:	4313      	orrs	r3, r2
 800d7cc:	617b      	str	r3, [r7, #20]

    i32 = ((iCBB + iY2) >> 12); // blue pixel
 800d7ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	4413      	add	r3, r2
 800d7d4:	131b      	asrs	r3, r3, #12
 800d7d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (i32 < 0) i32 = 0;
 800d7d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	da02      	bge.n	800d7e4 <_ZL13JPEGPixel2RGBPmllll+0xe8>
 800d7de:	2300      	movs	r3, #0
 800d7e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d7e2:	e004      	b.n	800d7ee <_ZL13JPEGPixel2RGBPmllll+0xf2>
    else if (i32 > 255) i32 = 255;
 800d7e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7e6:	2bff      	cmp	r3, #255	; 0xff
 800d7e8:	dd01      	ble.n	800d7ee <_ZL13JPEGPixel2RGBPmllll+0xf2>
 800d7ea:	23ff      	movs	r3, #255	; 0xff
 800d7ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    u32Pixel2 |= (uint32_t)(i32<<16);
 800d7ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7f0:	041b      	lsls	r3, r3, #16
 800d7f2:	461a      	mov	r2, r3
 800d7f4:	69bb      	ldr	r3, [r7, #24]
 800d7f6:	4313      	orrs	r3, r2
 800d7f8:	61bb      	str	r3, [r7, #24]
    i32 = ((iCBG + iCRG + iY2) >> 12); // green pixel
 800d7fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d7fc:	6a3b      	ldr	r3, [r7, #32]
 800d7fe:	441a      	add	r2, r3
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	4413      	add	r3, r2
 800d804:	131b      	asrs	r3, r3, #12
 800d806:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (i32 < 0) i32 = 0;
 800d808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	da02      	bge.n	800d814 <_ZL13JPEGPixel2RGBPmllll+0x118>
 800d80e:	2300      	movs	r3, #0
 800d810:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d812:	e004      	b.n	800d81e <_ZL13JPEGPixel2RGBPmllll+0x122>
    else if (i32 > 255) i32 = 255;
 800d814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d816:	2bff      	cmp	r3, #255	; 0xff
 800d818:	dd01      	ble.n	800d81e <_ZL13JPEGPixel2RGBPmllll+0x122>
 800d81a:	23ff      	movs	r3, #255	; 0xff
 800d81c:	62fb      	str	r3, [r7, #44]	; 0x2c
    u32Pixel2 |= (uint32_t)(i32 << 8);
 800d81e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d820:	021b      	lsls	r3, r3, #8
 800d822:	461a      	mov	r2, r3
 800d824:	69bb      	ldr	r3, [r7, #24]
 800d826:	4313      	orrs	r3, r2
 800d828:	61bb      	str	r3, [r7, #24]
    i32 = ((iCRR + iY2) >> 12); // red pixel
 800d82a:	69fa      	ldr	r2, [r7, #28]
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	4413      	add	r3, r2
 800d830:	131b      	asrs	r3, r3, #12
 800d832:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (i32 < 0) i32 = 0;
 800d834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d836:	2b00      	cmp	r3, #0
 800d838:	da02      	bge.n	800d840 <_ZL13JPEGPixel2RGBPmllll+0x144>
 800d83a:	2300      	movs	r3, #0
 800d83c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d83e:	e004      	b.n	800d84a <_ZL13JPEGPixel2RGBPmllll+0x14e>
    else if (i32 > 255) i32 = 255;
 800d840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d842:	2bff      	cmp	r3, #255	; 0xff
 800d844:	dd01      	ble.n	800d84a <_ZL13JPEGPixel2RGBPmllll+0x14e>
 800d846:	23ff      	movs	r3, #255	; 0xff
 800d848:	62fb      	str	r3, [r7, #44]	; 0x2c
    u32Pixel2 |= (uint32_t)i32;
 800d84a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d84c:	69ba      	ldr	r2, [r7, #24]
 800d84e:	4313      	orrs	r3, r2
 800d850:	61bb      	str	r3, [r7, #24]
    pDest[0] = u32Pixel1;
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	697a      	ldr	r2, [r7, #20]
 800d856:	601a      	str	r2, [r3, #0]
    pDest[1] = u32Pixel2;
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	3304      	adds	r3, #4
 800d85c:	69ba      	ldr	r2, [r7, #24]
 800d85e:	601a      	str	r2, [r3, #0]
} /* JPEGPixel2RGB() */
 800d860:	bf00      	nop
 800d862:	3734      	adds	r7, #52	; 0x34
 800d864:	46bd      	mov	sp, r7
 800d866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d86a:	4770      	bx	lr
 800d86c:	fffff493 	.word	0xfffff493

0800d870 <_ZL12JPEGPutMCU11P14jpeg_image_tagii>:

static void JPEGPutMCU11(JPEGIMAGE *pJPEG, int x, int iPitch)
{
 800d870:	b580      	push	{r7, lr}
 800d872:	b08e      	sub	sp, #56	; 0x38
 800d874:	af00      	add	r7, sp, #0
 800d876:	60f8      	str	r0, [r7, #12]
 800d878:	60b9      	str	r1, [r7, #8]
 800d87a:	607a      	str	r2, [r7, #4]
    int iCr, iCb;
    signed int Y;
    int iCol;
    int iRow;
    uint8_t *pY, *pCr, *pCb;
    uint16_t *pOutput = &pJPEG->usPixels[x];
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800d882:	68bb      	ldr	r3, [r7, #8]
 800d884:	005b      	lsls	r3, r3, #1
 800d886:	4413      	add	r3, r2
 800d888:	623b      	str	r3, [r7, #32]

    if (pJPEG->ucPixelType == RGB8888) {
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d890:	2b02      	cmp	r3, #2
 800d892:	d104      	bne.n	800d89e <_ZL12JPEGPutMCU11P14jpeg_image_tagii+0x2e>
        pOutput += x; // 4 bytes per pixel, not 2
 800d894:	68bb      	ldr	r3, [r7, #8]
 800d896:	005b      	lsls	r3, r3, #1
 800d898:	6a3a      	ldr	r2, [r7, #32]
 800d89a:	4413      	add	r3, r2
 800d89c:	623b      	str	r3, [r7, #32]
    }   

    pY  = (unsigned char *)&pJPEG->sMCUs[0*DCTSIZE];
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d8a4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800d8a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pCb = (unsigned char *)&pJPEG->sMCUs[1*DCTSIZE];
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d8b0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800d8b4:	3380      	adds	r3, #128	; 0x80
 800d8b6:	627b      	str	r3, [r7, #36]	; 0x24
    pCr = (unsigned char *)&pJPEG->sMCUs[2*DCTSIZE];
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d8be:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800d8c2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800d8c6:	62bb      	str	r3, [r7, #40]	; 0x28

    if (pJPEG->iOptions & JPEG_SCALE_HALF)
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d8cc:	f003 0302 	and.w	r3, r3, #2
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	f000 808e 	beq.w	800d9f2 <_ZL12JPEGPutMCU11P14jpeg_image_tagii+0x182>
    {
        for (iRow=0; iRow<4; iRow++) // up to 8 rows to do
 800d8d6:	2300      	movs	r3, #0
 800d8d8:	633b      	str	r3, [r7, #48]	; 0x30
 800d8da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8dc:	2b03      	cmp	r3, #3
 800d8de:	f300 8272 	bgt.w	800ddc6 <_ZL12JPEGPutMCU11P14jpeg_image_tagii+0x556>
        {
            for (iCol=0; iCol<4; iCol++) // up to 4x2 cols to do
 800d8e2:	2300      	movs	r3, #0
 800d8e4:	637b      	str	r3, [r7, #52]	; 0x34
 800d8e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8e8:	2b03      	cmp	r3, #3
 800d8ea:	dc68      	bgt.n	800d9be <_ZL12JPEGPutMCU11P14jpeg_image_tagii+0x14e>
            {
                iCr = (pCr[0] + pCr[1] + pCr[8] + pCr[9] + 2) >> 2;
 800d8ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8ee:	781b      	ldrb	r3, [r3, #0]
 800d8f0:	461a      	mov	r2, r3
 800d8f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8f4:	3301      	adds	r3, #1
 800d8f6:	781b      	ldrb	r3, [r3, #0]
 800d8f8:	4413      	add	r3, r2
 800d8fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d8fc:	3208      	adds	r2, #8
 800d8fe:	7812      	ldrb	r2, [r2, #0]
 800d900:	4413      	add	r3, r2
 800d902:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d904:	3209      	adds	r2, #9
 800d906:	7812      	ldrb	r2, [r2, #0]
 800d908:	4413      	add	r3, r2
 800d90a:	3302      	adds	r3, #2
 800d90c:	109b      	asrs	r3, r3, #2
 800d90e:	61fb      	str	r3, [r7, #28]
                iCb = (pCb[0] + pCb[1] + pCb[8] + pCb[9] + 2) >> 2;
 800d910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d912:	781b      	ldrb	r3, [r3, #0]
 800d914:	461a      	mov	r2, r3
 800d916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d918:	3301      	adds	r3, #1
 800d91a:	781b      	ldrb	r3, [r3, #0]
 800d91c:	4413      	add	r3, r2
 800d91e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d920:	3208      	adds	r2, #8
 800d922:	7812      	ldrb	r2, [r2, #0]
 800d924:	4413      	add	r3, r2
 800d926:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d928:	3209      	adds	r2, #9
 800d92a:	7812      	ldrb	r2, [r2, #0]
 800d92c:	4413      	add	r3, r2
 800d92e:	3302      	adds	r3, #2
 800d930:	109b      	asrs	r3, r3, #2
 800d932:	61bb      	str	r3, [r7, #24]
                Y = (pY[0] + pY[1] + pY[8] + pY[9]) << 10;
 800d934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d936:	781b      	ldrb	r3, [r3, #0]
 800d938:	461a      	mov	r2, r3
 800d93a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d93c:	3301      	adds	r3, #1
 800d93e:	781b      	ldrb	r3, [r3, #0]
 800d940:	4413      	add	r3, r2
 800d942:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d944:	3208      	adds	r2, #8
 800d946:	7812      	ldrb	r2, [r2, #0]
 800d948:	4413      	add	r3, r2
 800d94a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d94c:	3209      	adds	r2, #9
 800d94e:	7812      	ldrb	r2, [r2, #0]
 800d950:	4413      	add	r3, r2
 800d952:	029b      	lsls	r3, r3, #10
 800d954:	617b      	str	r3, [r7, #20]
                if (pJPEG->ucPixelType == RGB565_LITTLE_ENDIAN)
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d109      	bne.n	800d974 <_ZL12JPEGPutMCU11P14jpeg_image_tagii+0x104>
                    JPEGPixelLE(pOutput+iCol, Y, iCb, iCr);
 800d960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d962:	005b      	lsls	r3, r3, #1
 800d964:	6a3a      	ldr	r2, [r7, #32]
 800d966:	18d0      	adds	r0, r2, r3
 800d968:	69fb      	ldr	r3, [r7, #28]
 800d96a:	69ba      	ldr	r2, [r7, #24]
 800d96c:	6979      	ldr	r1, [r7, #20]
 800d96e:	f7ff fc95 	bl	800d29c <_ZL11JPEGPixelLEPtiii>
 800d972:	e017      	b.n	800d9a4 <_ZL12JPEGPutMCU11P14jpeg_image_tagii+0x134>
                else if (pJPEG->ucPixelType == RGB565_BIG_ENDIAN)
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d97a:	2b01      	cmp	r3, #1
 800d97c:	d109      	bne.n	800d992 <_ZL12JPEGPutMCU11P14jpeg_image_tagii+0x122>
                    JPEGPixelBE(pOutput+iCol, Y, iCb, iCr);
 800d97e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d980:	005b      	lsls	r3, r3, #1
 800d982:	6a3a      	ldr	r2, [r7, #32]
 800d984:	18d0      	adds	r0, r2, r3
 800d986:	69fb      	ldr	r3, [r7, #28]
 800d988:	69ba      	ldr	r2, [r7, #24]
 800d98a:	6979      	ldr	r1, [r7, #20]
 800d98c:	f7ff fcde 	bl	800d34c <_ZL11JPEGPixelBEPtiii>
 800d990:	e008      	b.n	800d9a4 <_ZL12JPEGPutMCU11P14jpeg_image_tagii+0x134>
                else
                    JPEGPixelRGB((uint32_t *)&pOutput[iCol*2], Y, iCb, iCr);
 800d992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d994:	009b      	lsls	r3, r3, #2
 800d996:	6a3a      	ldr	r2, [r7, #32]
 800d998:	18d0      	adds	r0, r2, r3
 800d99a:	69fb      	ldr	r3, [r7, #28]
 800d99c:	69ba      	ldr	r2, [r7, #24]
 800d99e:	6979      	ldr	r1, [r7, #20]
 800d9a0:	f7ff fd2e 	bl	800d400 <_ZL12JPEGPixelRGBPmiii>
                pCr += 2;
 800d9a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9a6:	3302      	adds	r3, #2
 800d9a8:	62bb      	str	r3, [r7, #40]	; 0x28
                pCb += 2;
 800d9aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9ac:	3302      	adds	r3, #2
 800d9ae:	627b      	str	r3, [r7, #36]	; 0x24
                pY += 2;
 800d9b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9b2:	3302      	adds	r3, #2
 800d9b4:	62fb      	str	r3, [r7, #44]	; 0x2c
            for (iCol=0; iCol<4; iCol++) // up to 4x2 cols to do
 800d9b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9b8:	3301      	adds	r3, #1
 800d9ba:	637b      	str	r3, [r7, #52]	; 0x34
 800d9bc:	e793      	b.n	800d8e6 <_ZL12JPEGPutMCU11P14jpeg_image_tagii+0x76>
            } // for col
            pCr += 8;
 800d9be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9c0:	3308      	adds	r3, #8
 800d9c2:	62bb      	str	r3, [r7, #40]	; 0x28
            pCb += 8;
 800d9c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9c6:	3308      	adds	r3, #8
 800d9c8:	627b      	str	r3, [r7, #36]	; 0x24
            pY += 8;
 800d9ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9cc:	3308      	adds	r3, #8
 800d9ce:	62fb      	str	r3, [r7, #44]	; 0x2c
            pOutput += (pJPEG->ucPixelType == RGB8888) ? iPitch*2 : iPitch;
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d9d6:	2b02      	cmp	r3, #2
 800d9d8:	d102      	bne.n	800d9e0 <_ZL12JPEGPutMCU11P14jpeg_image_tagii+0x170>
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	009b      	lsls	r3, r3, #2
 800d9de:	e001      	b.n	800d9e4 <_ZL12JPEGPutMCU11P14jpeg_image_tagii+0x174>
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	005b      	lsls	r3, r3, #1
 800d9e4:	6a3a      	ldr	r2, [r7, #32]
 800d9e6:	4413      	add	r3, r2
 800d9e8:	623b      	str	r3, [r7, #32]
        for (iRow=0; iRow<4; iRow++) // up to 8 rows to do
 800d9ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9ec:	3301      	adds	r3, #1
 800d9ee:	633b      	str	r3, [r7, #48]	; 0x30
 800d9f0:	e773      	b.n	800d8da <_ZL12JPEGPutMCU11P14jpeg_image_tagii+0x6a>
        } // for row
        return;
    }
    if (pJPEG->iOptions & JPEG_SCALE_EIGHTH) // special case for 1/8 scaling
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d9f6:	f003 0308 	and.w	r3, r3, #8
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d028      	beq.n	800da50 <_ZL12JPEGPutMCU11P14jpeg_image_tagii+0x1e0>
    {
        // only 4 pixels to draw, so no looping needed
        iCr = pCr[0];
 800d9fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da00:	781b      	ldrb	r3, [r3, #0]
 800da02:	61fb      	str	r3, [r7, #28]
        iCb = pCb[0];
 800da04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da06:	781b      	ldrb	r3, [r3, #0]
 800da08:	61bb      	str	r3, [r7, #24]
        Y = (int)(pY[0]) << 12;
 800da0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da0c:	781b      	ldrb	r3, [r3, #0]
 800da0e:	031b      	lsls	r3, r3, #12
 800da10:	617b      	str	r3, [r7, #20]
        if (pJPEG->ucPixelType == RGB565_LITTLE_ENDIAN)
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d106      	bne.n	800da2a <_ZL12JPEGPutMCU11P14jpeg_image_tagii+0x1ba>
            JPEGPixelLE(pOutput, Y, iCb, iCr);
 800da1c:	69fb      	ldr	r3, [r7, #28]
 800da1e:	69ba      	ldr	r2, [r7, #24]
 800da20:	6979      	ldr	r1, [r7, #20]
 800da22:	6a38      	ldr	r0, [r7, #32]
 800da24:	f7ff fc3a 	bl	800d29c <_ZL11JPEGPixelLEPtiii>
        else if (pJPEG->ucPixelType == RGB565_BIG_ENDIAN)
            JPEGPixelBE(pOutput, Y, iCb, iCr);
        else
            JPEGPixelRGB((uint32_t *)pOutput, Y, iCb, iCr);
        return;
 800da28:	e1ce      	b.n	800ddc8 <_ZL12JPEGPutMCU11P14jpeg_image_tagii+0x558>
        else if (pJPEG->ucPixelType == RGB565_BIG_ENDIAN)
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800da30:	2b01      	cmp	r3, #1
 800da32:	d106      	bne.n	800da42 <_ZL12JPEGPutMCU11P14jpeg_image_tagii+0x1d2>
            JPEGPixelBE(pOutput, Y, iCb, iCr);
 800da34:	69fb      	ldr	r3, [r7, #28]
 800da36:	69ba      	ldr	r2, [r7, #24]
 800da38:	6979      	ldr	r1, [r7, #20]
 800da3a:	6a38      	ldr	r0, [r7, #32]
 800da3c:	f7ff fc86 	bl	800d34c <_ZL11JPEGPixelBEPtiii>
        return;
 800da40:	e1c2      	b.n	800ddc8 <_ZL12JPEGPutMCU11P14jpeg_image_tagii+0x558>
            JPEGPixelRGB((uint32_t *)pOutput, Y, iCb, iCr);
 800da42:	69fb      	ldr	r3, [r7, #28]
 800da44:	69ba      	ldr	r2, [r7, #24]
 800da46:	6979      	ldr	r1, [r7, #20]
 800da48:	6a38      	ldr	r0, [r7, #32]
 800da4a:	f7ff fcd9 	bl	800d400 <_ZL12JPEGPixelRGBPmiii>
        return;
 800da4e:	e1bb      	b.n	800ddc8 <_ZL12JPEGPutMCU11P14jpeg_image_tagii+0x558>
    }
    if (pJPEG->iOptions & JPEG_SCALE_QUARTER) // special case for 1/4 scaling
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800da54:	f003 0304 	and.w	r3, r3, #4
 800da58:	2b00      	cmp	r3, #0
 800da5a:	f000 812d 	beq.w	800dcb8 <_ZL12JPEGPutMCU11P14jpeg_image_tagii+0x448>
    {
        // only 4 pixels to draw, so no looping needed
        if (pJPEG->ucPixelType == RGB565_LITTLE_ENDIAN)
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800da64:	2b00      	cmp	r3, #0
 800da66:	d160      	bne.n	800db2a <_ZL12JPEGPutMCU11P14jpeg_image_tagii+0x2ba>
        {
            iCr = *pCr++;
 800da68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da6a:	1c5a      	adds	r2, r3, #1
 800da6c:	62ba      	str	r2, [r7, #40]	; 0x28
 800da6e:	781b      	ldrb	r3, [r3, #0]
 800da70:	61fb      	str	r3, [r7, #28]
            iCb = *pCb++;
 800da72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da74:	1c5a      	adds	r2, r3, #1
 800da76:	627a      	str	r2, [r7, #36]	; 0x24
 800da78:	781b      	ldrb	r3, [r3, #0]
 800da7a:	61bb      	str	r3, [r7, #24]
            Y = (int)(*pY++) << 12;
 800da7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da7e:	1c5a      	adds	r2, r3, #1
 800da80:	62fa      	str	r2, [r7, #44]	; 0x2c
 800da82:	781b      	ldrb	r3, [r3, #0]
 800da84:	031b      	lsls	r3, r3, #12
 800da86:	617b      	str	r3, [r7, #20]
            JPEGPixelLE(pOutput, Y, iCb, iCr);
 800da88:	69fb      	ldr	r3, [r7, #28]
 800da8a:	69ba      	ldr	r2, [r7, #24]
 800da8c:	6979      	ldr	r1, [r7, #20]
 800da8e:	6a38      	ldr	r0, [r7, #32]
 800da90:	f7ff fc04 	bl	800d29c <_ZL11JPEGPixelLEPtiii>
            iCr = *pCr++;
 800da94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da96:	1c5a      	adds	r2, r3, #1
 800da98:	62ba      	str	r2, [r7, #40]	; 0x28
 800da9a:	781b      	ldrb	r3, [r3, #0]
 800da9c:	61fb      	str	r3, [r7, #28]
            iCb = *pCb++;
 800da9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daa0:	1c5a      	adds	r2, r3, #1
 800daa2:	627a      	str	r2, [r7, #36]	; 0x24
 800daa4:	781b      	ldrb	r3, [r3, #0]
 800daa6:	61bb      	str	r3, [r7, #24]
            Y = (int)(*pY++) << 12;
 800daa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daaa:	1c5a      	adds	r2, r3, #1
 800daac:	62fa      	str	r2, [r7, #44]	; 0x2c
 800daae:	781b      	ldrb	r3, [r3, #0]
 800dab0:	031b      	lsls	r3, r3, #12
 800dab2:	617b      	str	r3, [r7, #20]
            JPEGPixelLE(pOutput+1, Y, iCb, iCr);
 800dab4:	6a3b      	ldr	r3, [r7, #32]
 800dab6:	1c98      	adds	r0, r3, #2
 800dab8:	69fb      	ldr	r3, [r7, #28]
 800daba:	69ba      	ldr	r2, [r7, #24]
 800dabc:	6979      	ldr	r1, [r7, #20]
 800dabe:	f7ff fbed 	bl	800d29c <_ZL11JPEGPixelLEPtiii>
            iCr = *pCr++;
 800dac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dac4:	1c5a      	adds	r2, r3, #1
 800dac6:	62ba      	str	r2, [r7, #40]	; 0x28
 800dac8:	781b      	ldrb	r3, [r3, #0]
 800daca:	61fb      	str	r3, [r7, #28]
            iCb = *pCb++;
 800dacc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dace:	1c5a      	adds	r2, r3, #1
 800dad0:	627a      	str	r2, [r7, #36]	; 0x24
 800dad2:	781b      	ldrb	r3, [r3, #0]
 800dad4:	61bb      	str	r3, [r7, #24]
            Y = (int)(*pY++) << 12;
 800dad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dad8:	1c5a      	adds	r2, r3, #1
 800dada:	62fa      	str	r2, [r7, #44]	; 0x2c
 800dadc:	781b      	ldrb	r3, [r3, #0]
 800dade:	031b      	lsls	r3, r3, #12
 800dae0:	617b      	str	r3, [r7, #20]
            JPEGPixelLE(pOutput+iPitch, Y, iCb, iCr);
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	005b      	lsls	r3, r3, #1
 800dae6:	6a3a      	ldr	r2, [r7, #32]
 800dae8:	18d0      	adds	r0, r2, r3
 800daea:	69fb      	ldr	r3, [r7, #28]
 800daec:	69ba      	ldr	r2, [r7, #24]
 800daee:	6979      	ldr	r1, [r7, #20]
 800daf0:	f7ff fbd4 	bl	800d29c <_ZL11JPEGPixelLEPtiii>
            iCr = *pCr++;
 800daf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daf6:	1c5a      	adds	r2, r3, #1
 800daf8:	62ba      	str	r2, [r7, #40]	; 0x28
 800dafa:	781b      	ldrb	r3, [r3, #0]
 800dafc:	61fb      	str	r3, [r7, #28]
            iCb = *pCb++;
 800dafe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db00:	1c5a      	adds	r2, r3, #1
 800db02:	627a      	str	r2, [r7, #36]	; 0x24
 800db04:	781b      	ldrb	r3, [r3, #0]
 800db06:	61bb      	str	r3, [r7, #24]
            Y = (int)(*pY++) << 12;
 800db08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db0a:	1c5a      	adds	r2, r3, #1
 800db0c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800db0e:	781b      	ldrb	r3, [r3, #0]
 800db10:	031b      	lsls	r3, r3, #12
 800db12:	617b      	str	r3, [r7, #20]
            JPEGPixelLE(pOutput+1+iPitch, Y, iCb, iCr);
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	3301      	adds	r3, #1
 800db18:	005b      	lsls	r3, r3, #1
 800db1a:	6a3a      	ldr	r2, [r7, #32]
 800db1c:	18d0      	adds	r0, r2, r3
 800db1e:	69fb      	ldr	r3, [r7, #28]
 800db20:	69ba      	ldr	r2, [r7, #24]
 800db22:	6979      	ldr	r1, [r7, #20]
 800db24:	f7ff fbba 	bl	800d29c <_ZL11JPEGPixelLEPtiii>
            iCr = *pCr++;
            iCb = *pCb++;
            Y = (int)(*pY++) << 12;
            JPEGPixelRGB((uint32_t *)&pOutput[2+iPitch*2], Y, iCb, iCr);
        }
        return;
 800db28:	e14e      	b.n	800ddc8 <_ZL12JPEGPutMCU11P14jpeg_image_tagii+0x558>
        else if (pJPEG->ucPixelType == RGB565_BIG_ENDIAN)
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800db30:	2b01      	cmp	r3, #1
 800db32:	d160      	bne.n	800dbf6 <_ZL12JPEGPutMCU11P14jpeg_image_tagii+0x386>
            iCr = *pCr++;
 800db34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db36:	1c5a      	adds	r2, r3, #1
 800db38:	62ba      	str	r2, [r7, #40]	; 0x28
 800db3a:	781b      	ldrb	r3, [r3, #0]
 800db3c:	61fb      	str	r3, [r7, #28]
            iCb = *pCb++;
 800db3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db40:	1c5a      	adds	r2, r3, #1
 800db42:	627a      	str	r2, [r7, #36]	; 0x24
 800db44:	781b      	ldrb	r3, [r3, #0]
 800db46:	61bb      	str	r3, [r7, #24]
            Y = (int)(*pY++) << 12;
 800db48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db4a:	1c5a      	adds	r2, r3, #1
 800db4c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800db4e:	781b      	ldrb	r3, [r3, #0]
 800db50:	031b      	lsls	r3, r3, #12
 800db52:	617b      	str	r3, [r7, #20]
            JPEGPixelBE(pOutput, Y, iCb, iCr);
 800db54:	69fb      	ldr	r3, [r7, #28]
 800db56:	69ba      	ldr	r2, [r7, #24]
 800db58:	6979      	ldr	r1, [r7, #20]
 800db5a:	6a38      	ldr	r0, [r7, #32]
 800db5c:	f7ff fbf6 	bl	800d34c <_ZL11JPEGPixelBEPtiii>
            iCr = *pCr++;
 800db60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db62:	1c5a      	adds	r2, r3, #1
 800db64:	62ba      	str	r2, [r7, #40]	; 0x28
 800db66:	781b      	ldrb	r3, [r3, #0]
 800db68:	61fb      	str	r3, [r7, #28]
            iCb = *pCb++;
 800db6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db6c:	1c5a      	adds	r2, r3, #1
 800db6e:	627a      	str	r2, [r7, #36]	; 0x24
 800db70:	781b      	ldrb	r3, [r3, #0]
 800db72:	61bb      	str	r3, [r7, #24]
            Y = (int)(*pY++) << 12;
 800db74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db76:	1c5a      	adds	r2, r3, #1
 800db78:	62fa      	str	r2, [r7, #44]	; 0x2c
 800db7a:	781b      	ldrb	r3, [r3, #0]
 800db7c:	031b      	lsls	r3, r3, #12
 800db7e:	617b      	str	r3, [r7, #20]
            JPEGPixelBE(pOutput+1, Y, iCb, iCr);
 800db80:	6a3b      	ldr	r3, [r7, #32]
 800db82:	1c98      	adds	r0, r3, #2
 800db84:	69fb      	ldr	r3, [r7, #28]
 800db86:	69ba      	ldr	r2, [r7, #24]
 800db88:	6979      	ldr	r1, [r7, #20]
 800db8a:	f7ff fbdf 	bl	800d34c <_ZL11JPEGPixelBEPtiii>
            iCr = *pCr++;
 800db8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db90:	1c5a      	adds	r2, r3, #1
 800db92:	62ba      	str	r2, [r7, #40]	; 0x28
 800db94:	781b      	ldrb	r3, [r3, #0]
 800db96:	61fb      	str	r3, [r7, #28]
            iCb = *pCb++;
 800db98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db9a:	1c5a      	adds	r2, r3, #1
 800db9c:	627a      	str	r2, [r7, #36]	; 0x24
 800db9e:	781b      	ldrb	r3, [r3, #0]
 800dba0:	61bb      	str	r3, [r7, #24]
            Y = (int)(*pY++) << 12;
 800dba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dba4:	1c5a      	adds	r2, r3, #1
 800dba6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800dba8:	781b      	ldrb	r3, [r3, #0]
 800dbaa:	031b      	lsls	r3, r3, #12
 800dbac:	617b      	str	r3, [r7, #20]
            JPEGPixelBE(pOutput+iPitch, Y, iCb, iCr);
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	005b      	lsls	r3, r3, #1
 800dbb2:	6a3a      	ldr	r2, [r7, #32]
 800dbb4:	18d0      	adds	r0, r2, r3
 800dbb6:	69fb      	ldr	r3, [r7, #28]
 800dbb8:	69ba      	ldr	r2, [r7, #24]
 800dbba:	6979      	ldr	r1, [r7, #20]
 800dbbc:	f7ff fbc6 	bl	800d34c <_ZL11JPEGPixelBEPtiii>
            iCr = *pCr++;
 800dbc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbc2:	1c5a      	adds	r2, r3, #1
 800dbc4:	62ba      	str	r2, [r7, #40]	; 0x28
 800dbc6:	781b      	ldrb	r3, [r3, #0]
 800dbc8:	61fb      	str	r3, [r7, #28]
            iCb = *pCb++;
 800dbca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbcc:	1c5a      	adds	r2, r3, #1
 800dbce:	627a      	str	r2, [r7, #36]	; 0x24
 800dbd0:	781b      	ldrb	r3, [r3, #0]
 800dbd2:	61bb      	str	r3, [r7, #24]
            Y = (int)(*pY++) << 12;
 800dbd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbd6:	1c5a      	adds	r2, r3, #1
 800dbd8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800dbda:	781b      	ldrb	r3, [r3, #0]
 800dbdc:	031b      	lsls	r3, r3, #12
 800dbde:	617b      	str	r3, [r7, #20]
            JPEGPixelBE(pOutput+1+iPitch, Y, iCb, iCr);
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	3301      	adds	r3, #1
 800dbe4:	005b      	lsls	r3, r3, #1
 800dbe6:	6a3a      	ldr	r2, [r7, #32]
 800dbe8:	18d0      	adds	r0, r2, r3
 800dbea:	69fb      	ldr	r3, [r7, #28]
 800dbec:	69ba      	ldr	r2, [r7, #24]
 800dbee:	6979      	ldr	r1, [r7, #20]
 800dbf0:	f7ff fbac 	bl	800d34c <_ZL11JPEGPixelBEPtiii>
        return;
 800dbf4:	e0e8      	b.n	800ddc8 <_ZL12JPEGPutMCU11P14jpeg_image_tagii+0x558>
            iCr = *pCr++;
 800dbf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbf8:	1c5a      	adds	r2, r3, #1
 800dbfa:	62ba      	str	r2, [r7, #40]	; 0x28
 800dbfc:	781b      	ldrb	r3, [r3, #0]
 800dbfe:	61fb      	str	r3, [r7, #28]
            iCb = *pCb++;
 800dc00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc02:	1c5a      	adds	r2, r3, #1
 800dc04:	627a      	str	r2, [r7, #36]	; 0x24
 800dc06:	781b      	ldrb	r3, [r3, #0]
 800dc08:	61bb      	str	r3, [r7, #24]
            Y = (int)(*pY++) << 12;
 800dc0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc0c:	1c5a      	adds	r2, r3, #1
 800dc0e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800dc10:	781b      	ldrb	r3, [r3, #0]
 800dc12:	031b      	lsls	r3, r3, #12
 800dc14:	617b      	str	r3, [r7, #20]
            JPEGPixelRGB((uint32_t *)pOutput, Y, iCb, iCr);
 800dc16:	69fb      	ldr	r3, [r7, #28]
 800dc18:	69ba      	ldr	r2, [r7, #24]
 800dc1a:	6979      	ldr	r1, [r7, #20]
 800dc1c:	6a38      	ldr	r0, [r7, #32]
 800dc1e:	f7ff fbef 	bl	800d400 <_ZL12JPEGPixelRGBPmiii>
            iCr = *pCr++;
 800dc22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc24:	1c5a      	adds	r2, r3, #1
 800dc26:	62ba      	str	r2, [r7, #40]	; 0x28
 800dc28:	781b      	ldrb	r3, [r3, #0]
 800dc2a:	61fb      	str	r3, [r7, #28]
            iCb = *pCb++;
 800dc2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc2e:	1c5a      	adds	r2, r3, #1
 800dc30:	627a      	str	r2, [r7, #36]	; 0x24
 800dc32:	781b      	ldrb	r3, [r3, #0]
 800dc34:	61bb      	str	r3, [r7, #24]
            Y = (int)(*pY++) << 12;
 800dc36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc38:	1c5a      	adds	r2, r3, #1
 800dc3a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800dc3c:	781b      	ldrb	r3, [r3, #0]
 800dc3e:	031b      	lsls	r3, r3, #12
 800dc40:	617b      	str	r3, [r7, #20]
            JPEGPixelRGB((uint32_t *)&pOutput[2], Y, iCb, iCr);
 800dc42:	6a3b      	ldr	r3, [r7, #32]
 800dc44:	1d18      	adds	r0, r3, #4
 800dc46:	69fb      	ldr	r3, [r7, #28]
 800dc48:	69ba      	ldr	r2, [r7, #24]
 800dc4a:	6979      	ldr	r1, [r7, #20]
 800dc4c:	f7ff fbd8 	bl	800d400 <_ZL12JPEGPixelRGBPmiii>
            iCr = *pCr++;
 800dc50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc52:	1c5a      	adds	r2, r3, #1
 800dc54:	62ba      	str	r2, [r7, #40]	; 0x28
 800dc56:	781b      	ldrb	r3, [r3, #0]
 800dc58:	61fb      	str	r3, [r7, #28]
            iCb = *pCb++;
 800dc5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc5c:	1c5a      	adds	r2, r3, #1
 800dc5e:	627a      	str	r2, [r7, #36]	; 0x24
 800dc60:	781b      	ldrb	r3, [r3, #0]
 800dc62:	61bb      	str	r3, [r7, #24]
            Y = (int)(*pY++) << 12;
 800dc64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc66:	1c5a      	adds	r2, r3, #1
 800dc68:	62fa      	str	r2, [r7, #44]	; 0x2c
 800dc6a:	781b      	ldrb	r3, [r3, #0]
 800dc6c:	031b      	lsls	r3, r3, #12
 800dc6e:	617b      	str	r3, [r7, #20]
            JPEGPixelRGB((uint32_t *)&pOutput[iPitch*2], Y, iCb, iCr);
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	009b      	lsls	r3, r3, #2
 800dc74:	6a3a      	ldr	r2, [r7, #32]
 800dc76:	18d0      	adds	r0, r2, r3
 800dc78:	69fb      	ldr	r3, [r7, #28]
 800dc7a:	69ba      	ldr	r2, [r7, #24]
 800dc7c:	6979      	ldr	r1, [r7, #20]
 800dc7e:	f7ff fbbf 	bl	800d400 <_ZL12JPEGPixelRGBPmiii>
            iCr = *pCr++;
 800dc82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc84:	1c5a      	adds	r2, r3, #1
 800dc86:	62ba      	str	r2, [r7, #40]	; 0x28
 800dc88:	781b      	ldrb	r3, [r3, #0]
 800dc8a:	61fb      	str	r3, [r7, #28]
            iCb = *pCb++;
 800dc8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc8e:	1c5a      	adds	r2, r3, #1
 800dc90:	627a      	str	r2, [r7, #36]	; 0x24
 800dc92:	781b      	ldrb	r3, [r3, #0]
 800dc94:	61bb      	str	r3, [r7, #24]
            Y = (int)(*pY++) << 12;
 800dc96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc98:	1c5a      	adds	r2, r3, #1
 800dc9a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800dc9c:	781b      	ldrb	r3, [r3, #0]
 800dc9e:	031b      	lsls	r3, r3, #12
 800dca0:	617b      	str	r3, [r7, #20]
            JPEGPixelRGB((uint32_t *)&pOutput[2+iPitch*2], Y, iCb, iCr);
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	3301      	adds	r3, #1
 800dca6:	009b      	lsls	r3, r3, #2
 800dca8:	6a3a      	ldr	r2, [r7, #32]
 800dcaa:	18d0      	adds	r0, r2, r3
 800dcac:	69fb      	ldr	r3, [r7, #28]
 800dcae:	69ba      	ldr	r2, [r7, #24]
 800dcb0:	6979      	ldr	r1, [r7, #20]
 800dcb2:	f7ff fba5 	bl	800d400 <_ZL12JPEGPixelRGBPmiii>
        return;
 800dcb6:	e087      	b.n	800ddc8 <_ZL12JPEGPutMCU11P14jpeg_image_tagii+0x558>
         } // for each row
     return;
     }
#endif // HAS_SSE

    for (iRow=0; iRow<8; iRow++) // up to 8 rows to do
 800dcb8:	2300      	movs	r3, #0
 800dcba:	633b      	str	r3, [r7, #48]	; 0x30
 800dcbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcbe:	2b07      	cmp	r3, #7
 800dcc0:	f300 8082 	bgt.w	800ddc8 <_ZL12JPEGPutMCU11P14jpeg_image_tagii+0x558>
    {
        if (pJPEG->ucPixelType == RGB565_LITTLE_ENDIAN)
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d121      	bne.n	800dd12 <_ZL12JPEGPutMCU11P14jpeg_image_tagii+0x4a2>
        {
            for (iCol=0; iCol<8; iCol++) // up to 4x2 cols to do
 800dcce:	2300      	movs	r3, #0
 800dcd0:	637b      	str	r3, [r7, #52]	; 0x34
 800dcd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dcd4:	2b07      	cmp	r3, #7
 800dcd6:	dc65      	bgt.n	800dda4 <_ZL12JPEGPutMCU11P14jpeg_image_tagii+0x534>
            {
                iCr = *pCr++;
 800dcd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcda:	1c5a      	adds	r2, r3, #1
 800dcdc:	62ba      	str	r2, [r7, #40]	; 0x28
 800dcde:	781b      	ldrb	r3, [r3, #0]
 800dce0:	61fb      	str	r3, [r7, #28]
                iCb = *pCb++;
 800dce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dce4:	1c5a      	adds	r2, r3, #1
 800dce6:	627a      	str	r2, [r7, #36]	; 0x24
 800dce8:	781b      	ldrb	r3, [r3, #0]
 800dcea:	61bb      	str	r3, [r7, #24]
                Y = (int)(*pY++) << 12;
 800dcec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcee:	1c5a      	adds	r2, r3, #1
 800dcf0:	62fa      	str	r2, [r7, #44]	; 0x2c
 800dcf2:	781b      	ldrb	r3, [r3, #0]
 800dcf4:	031b      	lsls	r3, r3, #12
 800dcf6:	617b      	str	r3, [r7, #20]
                JPEGPixelLE(pOutput+iCol, Y, iCb, iCr);
 800dcf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dcfa:	005b      	lsls	r3, r3, #1
 800dcfc:	6a3a      	ldr	r2, [r7, #32]
 800dcfe:	18d0      	adds	r0, r2, r3
 800dd00:	69fb      	ldr	r3, [r7, #28]
 800dd02:	69ba      	ldr	r2, [r7, #24]
 800dd04:	6979      	ldr	r1, [r7, #20]
 800dd06:	f7ff fac9 	bl	800d29c <_ZL11JPEGPixelLEPtiii>
            for (iCol=0; iCol<8; iCol++) // up to 4x2 cols to do
 800dd0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd0c:	3301      	adds	r3, #1
 800dd0e:	637b      	str	r3, [r7, #52]	; 0x34
 800dd10:	e7df      	b.n	800dcd2 <_ZL12JPEGPutMCU11P14jpeg_image_tagii+0x462>
            } // for col
        }
        else if (pJPEG->ucPixelType == RGB565_BIG_ENDIAN)
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dd18:	2b01      	cmp	r3, #1
 800dd1a:	d121      	bne.n	800dd60 <_ZL12JPEGPutMCU11P14jpeg_image_tagii+0x4f0>
        {
            for (iCol=0; iCol<8; iCol++) // up to 4x2 cols to do
 800dd1c:	2300      	movs	r3, #0
 800dd1e:	637b      	str	r3, [r7, #52]	; 0x34
 800dd20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd22:	2b07      	cmp	r3, #7
 800dd24:	dc3e      	bgt.n	800dda4 <_ZL12JPEGPutMCU11P14jpeg_image_tagii+0x534>
            {
                iCr = *pCr++;
 800dd26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd28:	1c5a      	adds	r2, r3, #1
 800dd2a:	62ba      	str	r2, [r7, #40]	; 0x28
 800dd2c:	781b      	ldrb	r3, [r3, #0]
 800dd2e:	61fb      	str	r3, [r7, #28]
                iCb = *pCb++;
 800dd30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd32:	1c5a      	adds	r2, r3, #1
 800dd34:	627a      	str	r2, [r7, #36]	; 0x24
 800dd36:	781b      	ldrb	r3, [r3, #0]
 800dd38:	61bb      	str	r3, [r7, #24]
                Y = (int)(*pY++) << 12;
 800dd3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd3c:	1c5a      	adds	r2, r3, #1
 800dd3e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800dd40:	781b      	ldrb	r3, [r3, #0]
 800dd42:	031b      	lsls	r3, r3, #12
 800dd44:	617b      	str	r3, [r7, #20]
                JPEGPixelBE(pOutput+iCol, Y, iCb, iCr);
 800dd46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd48:	005b      	lsls	r3, r3, #1
 800dd4a:	6a3a      	ldr	r2, [r7, #32]
 800dd4c:	18d0      	adds	r0, r2, r3
 800dd4e:	69fb      	ldr	r3, [r7, #28]
 800dd50:	69ba      	ldr	r2, [r7, #24]
 800dd52:	6979      	ldr	r1, [r7, #20]
 800dd54:	f7ff fafa 	bl	800d34c <_ZL11JPEGPixelBEPtiii>
            for (iCol=0; iCol<8; iCol++) // up to 4x2 cols to do
 800dd58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd5a:	3301      	adds	r3, #1
 800dd5c:	637b      	str	r3, [r7, #52]	; 0x34
 800dd5e:	e7df      	b.n	800dd20 <_ZL12JPEGPutMCU11P14jpeg_image_tagii+0x4b0>
            } // for col
        } else { // RGB888
            for (iCol=0; iCol<8; iCol++) // up to 4x2 cols to do
 800dd60:	2300      	movs	r3, #0
 800dd62:	637b      	str	r3, [r7, #52]	; 0x34
 800dd64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd66:	2b07      	cmp	r3, #7
 800dd68:	dc1c      	bgt.n	800dda4 <_ZL12JPEGPutMCU11P14jpeg_image_tagii+0x534>
            {
                iCr = *pCr++;
 800dd6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd6c:	1c5a      	adds	r2, r3, #1
 800dd6e:	62ba      	str	r2, [r7, #40]	; 0x28
 800dd70:	781b      	ldrb	r3, [r3, #0]
 800dd72:	61fb      	str	r3, [r7, #28]
                iCb = *pCb++;
 800dd74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd76:	1c5a      	adds	r2, r3, #1
 800dd78:	627a      	str	r2, [r7, #36]	; 0x24
 800dd7a:	781b      	ldrb	r3, [r3, #0]
 800dd7c:	61bb      	str	r3, [r7, #24]
                Y = (int)(*pY++) << 12;
 800dd7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd80:	1c5a      	adds	r2, r3, #1
 800dd82:	62fa      	str	r2, [r7, #44]	; 0x2c
 800dd84:	781b      	ldrb	r3, [r3, #0]
 800dd86:	031b      	lsls	r3, r3, #12
 800dd88:	617b      	str	r3, [r7, #20]
                JPEGPixelRGB((uint32_t *)&pOutput[iCol*2], Y, iCb, iCr);
 800dd8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd8c:	009b      	lsls	r3, r3, #2
 800dd8e:	6a3a      	ldr	r2, [r7, #32]
 800dd90:	18d0      	adds	r0, r2, r3
 800dd92:	69fb      	ldr	r3, [r7, #28]
 800dd94:	69ba      	ldr	r2, [r7, #24]
 800dd96:	6979      	ldr	r1, [r7, #20]
 800dd98:	f7ff fb32 	bl	800d400 <_ZL12JPEGPixelRGBPmiii>
            for (iCol=0; iCol<8; iCol++) // up to 4x2 cols to do
 800dd9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd9e:	3301      	adds	r3, #1
 800dda0:	637b      	str	r3, [r7, #52]	; 0x34
 800dda2:	e7df      	b.n	800dd64 <_ZL12JPEGPutMCU11P14jpeg_image_tagii+0x4f4>
            } // for col
        }
        pOutput += (pJPEG->ucPixelType == RGB8888) ? iPitch*2 : iPitch;
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ddaa:	2b02      	cmp	r3, #2
 800ddac:	d102      	bne.n	800ddb4 <_ZL12JPEGPutMCU11P14jpeg_image_tagii+0x544>
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	009b      	lsls	r3, r3, #2
 800ddb2:	e001      	b.n	800ddb8 <_ZL12JPEGPutMCU11P14jpeg_image_tagii+0x548>
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	005b      	lsls	r3, r3, #1
 800ddb8:	6a3a      	ldr	r2, [r7, #32]
 800ddba:	4413      	add	r3, r2
 800ddbc:	623b      	str	r3, [r7, #32]
    for (iRow=0; iRow<8; iRow++) // up to 8 rows to do
 800ddbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddc0:	3301      	adds	r3, #1
 800ddc2:	633b      	str	r3, [r7, #48]	; 0x30
 800ddc4:	e77a      	b.n	800dcbc <_ZL12JPEGPutMCU11P14jpeg_image_tagii+0x44c>
        return;
 800ddc6:	bf00      	nop
    } // for row
} /* JPEGPutMCU11() */
 800ddc8:	3738      	adds	r7, #56	; 0x38
 800ddca:	46bd      	mov	sp, r7
 800ddcc:	bd80      	pop	{r7, pc}

0800ddce <_ZL12JPEGPutMCU22P14jpeg_image_tagii>:

static void JPEGPutMCU22(JPEGIMAGE *pJPEG, int x, int iPitch)
{
 800ddce:	b580      	push	{r7, lr}
 800ddd0:	b098      	sub	sp, #96	; 0x60
 800ddd2:	af02      	add	r7, sp, #8
 800ddd4:	60f8      	str	r0, [r7, #12]
 800ddd6:	60b9      	str	r1, [r7, #8]
 800ddd8:	607a      	str	r2, [r7, #4]
    uint32_t Cr,Cb;
    signed int Y1, Y2, Y3, Y4;
    int iRow, iCol, iXCount1, iXCount2, iYCount;
    unsigned char *pY, *pCr, *pCb;
    int bUseOdd1, bUseOdd2; // special case where 24bpp odd sized image can clobber first column
    uint16_t *pOutput = &pJPEG->usPixels[x];
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800dde0:	68bb      	ldr	r3, [r7, #8]
 800dde2:	005b      	lsls	r3, r3, #1
 800dde4:	4413      	add	r3, r2
 800dde6:	633b      	str	r3, [r7, #48]	; 0x30
    if (pJPEG->ucPixelType == RGB8888) {
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ddee:	2b02      	cmp	r3, #2
 800ddf0:	d104      	bne.n	800ddfc <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0x2e>
        pOutput += x; // 4 bytes per pixel, not 2
 800ddf2:	68bb      	ldr	r3, [r7, #8]
 800ddf4:	005b      	lsls	r3, r3, #1
 800ddf6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ddf8:	4413      	add	r3, r2
 800ddfa:	633b      	str	r3, [r7, #48]	; 0x30
    }
    pY  = (unsigned char *)&pJPEG->sMCUs[0*DCTSIZE];
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800de02:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800de06:	647b      	str	r3, [r7, #68]	; 0x44
    pCb = (unsigned char *)&pJPEG->sMCUs[4*DCTSIZE];
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800de0e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800de12:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800de16:	63fb      	str	r3, [r7, #60]	; 0x3c
    pCr = (unsigned char *)&pJPEG->sMCUs[5*DCTSIZE];
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800de1e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800de22:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800de26:	643b      	str	r3, [r7, #64]	; 0x40
    
    if (pJPEG->iOptions & JPEG_SCALE_HALF) // special handling of 1/2 size (pixel averaging)
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800de2c:	f003 0302 	and.w	r3, r3, #2
 800de30:	2b00      	cmp	r3, #0
 800de32:	f000 818c 	beq.w	800e14e <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0x380>
    {
        for (iRow=0; iRow<4; iRow++) // 16x16 becomes 8x8 of 2x2 pixels
 800de36:	2300      	movs	r3, #0
 800de38:	657b      	str	r3, [r7, #84]	; 0x54
 800de3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800de3c:	2b03      	cmp	r3, #3
 800de3e:	f301 8072 	bgt.w	800ef26 <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0x1158>
        {
            for (iCol=0; iCol<4; iCol++)
 800de42:	2300      	movs	r3, #0
 800de44:	653b      	str	r3, [r7, #80]	; 0x50
 800de46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800de48:	2b03      	cmp	r3, #3
 800de4a:	f300 8166 	bgt.w	800e11a <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0x34c>
            {
                Y1 = (pY[iCol*2] + pY[iCol*2+1] + pY[iCol*2+8] + pY[iCol*2+9]) << 10;
 800de4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800de50:	005b      	lsls	r3, r3, #1
 800de52:	461a      	mov	r2, r3
 800de54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800de56:	4413      	add	r3, r2
 800de58:	781b      	ldrb	r3, [r3, #0]
 800de5a:	4619      	mov	r1, r3
 800de5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800de5e:	005b      	lsls	r3, r3, #1
 800de60:	3301      	adds	r3, #1
 800de62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800de64:	4413      	add	r3, r2
 800de66:	781b      	ldrb	r3, [r3, #0]
 800de68:	440b      	add	r3, r1
 800de6a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800de6c:	0052      	lsls	r2, r2, #1
 800de6e:	3208      	adds	r2, #8
 800de70:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800de72:	440a      	add	r2, r1
 800de74:	7812      	ldrb	r2, [r2, #0]
 800de76:	4413      	add	r3, r2
 800de78:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800de7a:	0052      	lsls	r2, r2, #1
 800de7c:	3209      	adds	r2, #9
 800de7e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800de80:	440a      	add	r2, r1
 800de82:	7812      	ldrb	r2, [r2, #0]
 800de84:	4413      	add	r3, r2
 800de86:	029b      	lsls	r3, r3, #10
 800de88:	62bb      	str	r3, [r7, #40]	; 0x28
                Cb = pCb[iCol];
 800de8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800de8c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800de8e:	4413      	add	r3, r2
 800de90:	781b      	ldrb	r3, [r3, #0]
 800de92:	61bb      	str	r3, [r7, #24]
                Cr = pCr[iCol];
 800de94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800de96:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800de98:	4413      	add	r3, r2
 800de9a:	781b      	ldrb	r3, [r3, #0]
 800de9c:	617b      	str	r3, [r7, #20]
                if (pJPEG->ucPixelType == RGB565_LITTLE_ENDIAN)
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d109      	bne.n	800debc <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0xee>
                    JPEGPixelLE(pOutput+iCol, Y1, Cb, Cr); // top left
 800dea8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800deaa:	005b      	lsls	r3, r3, #1
 800deac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800deae:	18d0      	adds	r0, r2, r3
 800deb0:	69ba      	ldr	r2, [r7, #24]
 800deb2:	697b      	ldr	r3, [r7, #20]
 800deb4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800deb6:	f7ff f9f1 	bl	800d29c <_ZL11JPEGPixelLEPtiii>
 800deba:	e017      	b.n	800deec <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0x11e>
                else if (pJPEG->ucPixelType == RGB565_BIG_ENDIAN)
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dec2:	2b01      	cmp	r3, #1
 800dec4:	d109      	bne.n	800deda <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0x10c>
                    JPEGPixelBE(pOutput+iCol, Y1, Cb, Cr);
 800dec6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dec8:	005b      	lsls	r3, r3, #1
 800deca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800decc:	18d0      	adds	r0, r2, r3
 800dece:	69ba      	ldr	r2, [r7, #24]
 800ded0:	697b      	ldr	r3, [r7, #20]
 800ded2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ded4:	f7ff fa3a 	bl	800d34c <_ZL11JPEGPixelBEPtiii>
 800ded8:	e008      	b.n	800deec <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0x11e>
                else
                    JPEGPixelRGB((uint32_t *)&pOutput[iCol*2], Y1, Cb, Cr);
 800deda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dedc:	009b      	lsls	r3, r3, #2
 800dede:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dee0:	18d0      	adds	r0, r2, r3
 800dee2:	69ba      	ldr	r2, [r7, #24]
 800dee4:	697b      	ldr	r3, [r7, #20]
 800dee6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dee8:	f7ff fa8a 	bl	800d400 <_ZL12JPEGPixelRGBPmiii>
                Y1 = (pY[iCol*2+(DCTSIZE*2)] + pY[iCol*2+1+(DCTSIZE*2)] + pY[iCol*2+8+(DCTSIZE*2)] + pY[iCol*2+9+(DCTSIZE*2)]) << 10;
 800deec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800deee:	005b      	lsls	r3, r3, #1
 800def0:	3380      	adds	r3, #128	; 0x80
 800def2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800def4:	4413      	add	r3, r2
 800def6:	781b      	ldrb	r3, [r3, #0]
 800def8:	4619      	mov	r1, r3
 800defa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800defc:	005b      	lsls	r3, r3, #1
 800defe:	3381      	adds	r3, #129	; 0x81
 800df00:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800df02:	4413      	add	r3, r2
 800df04:	781b      	ldrb	r3, [r3, #0]
 800df06:	440b      	add	r3, r1
 800df08:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800df0a:	0052      	lsls	r2, r2, #1
 800df0c:	3288      	adds	r2, #136	; 0x88
 800df0e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800df10:	440a      	add	r2, r1
 800df12:	7812      	ldrb	r2, [r2, #0]
 800df14:	4413      	add	r3, r2
 800df16:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800df18:	0052      	lsls	r2, r2, #1
 800df1a:	3289      	adds	r2, #137	; 0x89
 800df1c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800df1e:	440a      	add	r2, r1
 800df20:	7812      	ldrb	r2, [r2, #0]
 800df22:	4413      	add	r3, r2
 800df24:	029b      	lsls	r3, r3, #10
 800df26:	62bb      	str	r3, [r7, #40]	; 0x28
                Cb = pCb[iCol+4];
 800df28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800df2a:	3304      	adds	r3, #4
 800df2c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800df2e:	4413      	add	r3, r2
 800df30:	781b      	ldrb	r3, [r3, #0]
 800df32:	61bb      	str	r3, [r7, #24]
                Cr = pCr[iCol+4];
 800df34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800df36:	3304      	adds	r3, #4
 800df38:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800df3a:	4413      	add	r3, r2
 800df3c:	781b      	ldrb	r3, [r3, #0]
 800df3e:	617b      	str	r3, [r7, #20]
                if (pJPEG->ucPixelType == RGB565_LITTLE_ENDIAN)
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800df46:	2b00      	cmp	r3, #0
 800df48:	d10a      	bne.n	800df60 <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0x192>
                    JPEGPixelLE(pOutput+iCol+4, Y1, Cb, Cr); // top right
 800df4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800df4c:	3304      	adds	r3, #4
 800df4e:	005b      	lsls	r3, r3, #1
 800df50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800df52:	18d0      	adds	r0, r2, r3
 800df54:	69ba      	ldr	r2, [r7, #24]
 800df56:	697b      	ldr	r3, [r7, #20]
 800df58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800df5a:	f7ff f99f 	bl	800d29c <_ZL11JPEGPixelLEPtiii>
 800df5e:	e019      	b.n	800df94 <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0x1c6>
                else if (pJPEG->ucPixelType == RGB565_BIG_ENDIAN)
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800df66:	2b01      	cmp	r3, #1
 800df68:	d10a      	bne.n	800df80 <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0x1b2>
                    JPEGPixelBE(pOutput+iCol+4, Y1, Cb, Cr);
 800df6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800df6c:	3304      	adds	r3, #4
 800df6e:	005b      	lsls	r3, r3, #1
 800df70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800df72:	18d0      	adds	r0, r2, r3
 800df74:	69ba      	ldr	r2, [r7, #24]
 800df76:	697b      	ldr	r3, [r7, #20]
 800df78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800df7a:	f7ff f9e7 	bl	800d34c <_ZL11JPEGPixelBEPtiii>
 800df7e:	e009      	b.n	800df94 <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0x1c6>
                else
                    JPEGPixelRGB((uint32_t *)&pOutput[(iCol*2)+8], Y1, Cb, Cr);
 800df80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800df82:	3304      	adds	r3, #4
 800df84:	009b      	lsls	r3, r3, #2
 800df86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800df88:	18d0      	adds	r0, r2, r3
 800df8a:	69ba      	ldr	r2, [r7, #24]
 800df8c:	697b      	ldr	r3, [r7, #20]
 800df8e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800df90:	f7ff fa36 	bl	800d400 <_ZL12JPEGPixelRGBPmiii>
                Y1 = (pY[iCol*2+(DCTSIZE*4)] + pY[iCol*2+1+(DCTSIZE*4)] + pY[iCol*2+8+(DCTSIZE*4)] + pY[iCol*2+9+(DCTSIZE*4)]) << 10;
 800df94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800df96:	005b      	lsls	r3, r3, #1
 800df98:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800df9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800df9e:	4413      	add	r3, r2
 800dfa0:	781b      	ldrb	r3, [r3, #0]
 800dfa2:	4619      	mov	r1, r3
 800dfa4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dfa6:	005b      	lsls	r3, r3, #1
 800dfa8:	f203 1301 	addw	r3, r3, #257	; 0x101
 800dfac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dfae:	4413      	add	r3, r2
 800dfb0:	781b      	ldrb	r3, [r3, #0]
 800dfb2:	440b      	add	r3, r1
 800dfb4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800dfb6:	0052      	lsls	r2, r2, #1
 800dfb8:	f502 7284 	add.w	r2, r2, #264	; 0x108
 800dfbc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800dfbe:	440a      	add	r2, r1
 800dfc0:	7812      	ldrb	r2, [r2, #0]
 800dfc2:	4413      	add	r3, r2
 800dfc4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800dfc6:	0052      	lsls	r2, r2, #1
 800dfc8:	f202 1209 	addw	r2, r2, #265	; 0x109
 800dfcc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800dfce:	440a      	add	r2, r1
 800dfd0:	7812      	ldrb	r2, [r2, #0]
 800dfd2:	4413      	add	r3, r2
 800dfd4:	029b      	lsls	r3, r3, #10
 800dfd6:	62bb      	str	r3, [r7, #40]	; 0x28
                Cb = pCb[iCol+32];
 800dfd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dfda:	3320      	adds	r3, #32
 800dfdc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800dfde:	4413      	add	r3, r2
 800dfe0:	781b      	ldrb	r3, [r3, #0]
 800dfe2:	61bb      	str	r3, [r7, #24]
                Cr = pCr[iCol+32];
 800dfe4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dfe6:	3320      	adds	r3, #32
 800dfe8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800dfea:	4413      	add	r3, r2
 800dfec:	781b      	ldrb	r3, [r3, #0]
 800dfee:	617b      	str	r3, [r7, #20]
                if (pJPEG->ucPixelType == RGB565_LITTLE_ENDIAN)
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d10c      	bne.n	800e014 <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0x246>
                    JPEGPixelLE(pOutput+iCol+iPitch*4, Y1, Cb, Cr); // bottom left
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	009a      	lsls	r2, r3, #2
 800dffe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e000:	4413      	add	r3, r2
 800e002:	005b      	lsls	r3, r3, #1
 800e004:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e006:	18d0      	adds	r0, r2, r3
 800e008:	69ba      	ldr	r2, [r7, #24]
 800e00a:	697b      	ldr	r3, [r7, #20]
 800e00c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e00e:	f7ff f945 	bl	800d29c <_ZL11JPEGPixelLEPtiii>
 800e012:	e01d      	b.n	800e050 <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0x282>
                else if (pJPEG->ucPixelType == RGB565_BIG_ENDIAN)
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e01a:	2b01      	cmp	r3, #1
 800e01c:	d10c      	bne.n	800e038 <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0x26a>
                    JPEGPixelBE(pOutput+iCol+iPitch*4, Y1, Cb, Cr);
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	009a      	lsls	r2, r3, #2
 800e022:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e024:	4413      	add	r3, r2
 800e026:	005b      	lsls	r3, r3, #1
 800e028:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e02a:	18d0      	adds	r0, r2, r3
 800e02c:	69ba      	ldr	r2, [r7, #24]
 800e02e:	697b      	ldr	r3, [r7, #20]
 800e030:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e032:	f7ff f98b 	bl	800d34c <_ZL11JPEGPixelBEPtiii>
 800e036:	e00b      	b.n	800e050 <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0x282>
                else
                    JPEGPixelRGB((uint32_t *)&pOutput[(iCol+iPitch*4)*2], Y1, Cb, Cr);
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	009a      	lsls	r2, r3, #2
 800e03c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e03e:	4413      	add	r3, r2
 800e040:	009b      	lsls	r3, r3, #2
 800e042:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e044:	18d0      	adds	r0, r2, r3
 800e046:	69ba      	ldr	r2, [r7, #24]
 800e048:	697b      	ldr	r3, [r7, #20]
 800e04a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e04c:	f7ff f9d8 	bl	800d400 <_ZL12JPEGPixelRGBPmiii>
                Y1 = (pY[iCol*2+(DCTSIZE*6)] + pY[iCol*2+1+(DCTSIZE*6)] + pY[iCol*2+8+(DCTSIZE*6)] + pY[iCol*2+9+(DCTSIZE*6)]) << 10;
 800e050:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e052:	005b      	lsls	r3, r3, #1
 800e054:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800e058:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e05a:	4413      	add	r3, r2
 800e05c:	781b      	ldrb	r3, [r3, #0]
 800e05e:	4619      	mov	r1, r3
 800e060:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e062:	005b      	lsls	r3, r3, #1
 800e064:	f203 1381 	addw	r3, r3, #385	; 0x181
 800e068:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e06a:	4413      	add	r3, r2
 800e06c:	781b      	ldrb	r3, [r3, #0]
 800e06e:	440b      	add	r3, r1
 800e070:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e072:	0052      	lsls	r2, r2, #1
 800e074:	f502 72c4 	add.w	r2, r2, #392	; 0x188
 800e078:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e07a:	440a      	add	r2, r1
 800e07c:	7812      	ldrb	r2, [r2, #0]
 800e07e:	4413      	add	r3, r2
 800e080:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e082:	0052      	lsls	r2, r2, #1
 800e084:	f202 1289 	addw	r2, r2, #393	; 0x189
 800e088:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e08a:	440a      	add	r2, r1
 800e08c:	7812      	ldrb	r2, [r2, #0]
 800e08e:	4413      	add	r3, r2
 800e090:	029b      	lsls	r3, r3, #10
 800e092:	62bb      	str	r3, [r7, #40]	; 0x28
                Cb = pCb[iCol+32+4];
 800e094:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e096:	3324      	adds	r3, #36	; 0x24
 800e098:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e09a:	4413      	add	r3, r2
 800e09c:	781b      	ldrb	r3, [r3, #0]
 800e09e:	61bb      	str	r3, [r7, #24]
                Cr = pCr[iCol+32+4];
 800e0a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e0a2:	3324      	adds	r3, #36	; 0x24
 800e0a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e0a6:	4413      	add	r3, r2
 800e0a8:	781b      	ldrb	r3, [r3, #0]
 800e0aa:	617b      	str	r3, [r7, #20]
                if (pJPEG->ucPixelType == RGB565_LITTLE_ENDIAN)
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d10d      	bne.n	800e0d2 <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0x304>
                    JPEGPixelLE(pOutput+iCol+4+iPitch*4, Y1, Cb, Cr); // bottom right
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	009a      	lsls	r2, r3, #2
 800e0ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e0bc:	4413      	add	r3, r2
 800e0be:	3304      	adds	r3, #4
 800e0c0:	005b      	lsls	r3, r3, #1
 800e0c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e0c4:	18d0      	adds	r0, r2, r3
 800e0c6:	69ba      	ldr	r2, [r7, #24]
 800e0c8:	697b      	ldr	r3, [r7, #20]
 800e0ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e0cc:	f7ff f8e6 	bl	800d29c <_ZL11JPEGPixelLEPtiii>
 800e0d0:	e01f      	b.n	800e112 <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0x344>
                else if (pJPEG->ucPixelType == RGB565_BIG_ENDIAN)
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e0d8:	2b01      	cmp	r3, #1
 800e0da:	d10d      	bne.n	800e0f8 <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0x32a>
                    JPEGPixelBE(pOutput+iCol+4+iPitch*4, Y1, Cb, Cr);
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	009a      	lsls	r2, r3, #2
 800e0e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e0e2:	4413      	add	r3, r2
 800e0e4:	3304      	adds	r3, #4
 800e0e6:	005b      	lsls	r3, r3, #1
 800e0e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e0ea:	18d0      	adds	r0, r2, r3
 800e0ec:	69ba      	ldr	r2, [r7, #24]
 800e0ee:	697b      	ldr	r3, [r7, #20]
 800e0f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e0f2:	f7ff f92b 	bl	800d34c <_ZL11JPEGPixelBEPtiii>
 800e0f6:	e00c      	b.n	800e112 <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0x344>
                else
                    JPEGPixelRGB((uint32_t *)&pOutput[(iCol+4+iPitch*4)*2], Y1, Cb, Cr);
 800e0f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e0fa:	1d1a      	adds	r2, r3, #4
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	009b      	lsls	r3, r3, #2
 800e100:	4413      	add	r3, r2
 800e102:	009b      	lsls	r3, r3, #2
 800e104:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e106:	18d0      	adds	r0, r2, r3
 800e108:	69ba      	ldr	r2, [r7, #24]
 800e10a:	697b      	ldr	r3, [r7, #20]
 800e10c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e10e:	f7ff f977 	bl	800d400 <_ZL12JPEGPixelRGBPmiii>
            for (iCol=0; iCol<4; iCol++)
 800e112:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e114:	3301      	adds	r3, #1
 800e116:	653b      	str	r3, [r7, #80]	; 0x50
 800e118:	e695      	b.n	800de46 <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0x78>
            }
            pY += 16;
 800e11a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e11c:	3310      	adds	r3, #16
 800e11e:	647b      	str	r3, [r7, #68]	; 0x44
            pCb += 8;
 800e120:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e122:	3308      	adds	r3, #8
 800e124:	63fb      	str	r3, [r7, #60]	; 0x3c
            pCr += 8;
 800e126:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e128:	3308      	adds	r3, #8
 800e12a:	643b      	str	r3, [r7, #64]	; 0x40
            pOutput += (pJPEG->ucPixelType == RGB8888) ? iPitch*2 : iPitch;
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e132:	2b02      	cmp	r3, #2
 800e134:	d102      	bne.n	800e13c <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0x36e>
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	009b      	lsls	r3, r3, #2
 800e13a:	e001      	b.n	800e140 <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0x372>
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	005b      	lsls	r3, r3, #1
 800e140:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e142:	4413      	add	r3, r2
 800e144:	633b      	str	r3, [r7, #48]	; 0x30
        for (iRow=0; iRow<4; iRow++) // 16x16 becomes 8x8 of 2x2 pixels
 800e146:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e148:	3301      	adds	r3, #1
 800e14a:	657b      	str	r3, [r7, #84]	; 0x54
 800e14c:	e675      	b.n	800de3a <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0x6c>
        }
        return;
    }
    if (pJPEG->iOptions & JPEG_SCALE_EIGHTH)
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e152:	f003 0308 	and.w	r3, r3, #8
 800e156:	2b00      	cmp	r3, #0
 800e158:	f000 80af 	beq.w	800e2ba <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0x4ec>
    {
        Y1 =  pY[0] << 12; // scale to level of conversion table
 800e15c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e15e:	781b      	ldrb	r3, [r3, #0]
 800e160:	031b      	lsls	r3, r3, #12
 800e162:	62bb      	str	r3, [r7, #40]	; 0x28
        Cb  = pCb[0];
 800e164:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e166:	781b      	ldrb	r3, [r3, #0]
 800e168:	61bb      	str	r3, [r7, #24]
        Cr  = pCr[0];
 800e16a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e16c:	781b      	ldrb	r3, [r3, #0]
 800e16e:	617b      	str	r3, [r7, #20]
        if (pJPEG->ucPixelType == RGB565_LITTLE_ENDIAN)
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e176:	2b00      	cmp	r3, #0
 800e178:	d106      	bne.n	800e188 <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0x3ba>
            JPEGPixelLE(pOutput, Y1, Cb, Cr);
 800e17a:	69ba      	ldr	r2, [r7, #24]
 800e17c:	697b      	ldr	r3, [r7, #20]
 800e17e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e180:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e182:	f7ff f88b 	bl	800d29c <_ZL11JPEGPixelLEPtiii>
 800e186:	e011      	b.n	800e1ac <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0x3de>
        else if (pJPEG->ucPixelType == RGB565_BIG_ENDIAN)
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e18e:	2b01      	cmp	r3, #1
 800e190:	d106      	bne.n	800e1a0 <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0x3d2>
            JPEGPixelBE(pOutput, Y1, Cb, Cr);
 800e192:	69ba      	ldr	r2, [r7, #24]
 800e194:	697b      	ldr	r3, [r7, #20]
 800e196:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e198:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e19a:	f7ff f8d7 	bl	800d34c <_ZL11JPEGPixelBEPtiii>
 800e19e:	e005      	b.n	800e1ac <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0x3de>
        else
            JPEGPixelRGB((uint32_t *)pOutput, Y1, Cb, Cr);
 800e1a0:	69ba      	ldr	r2, [r7, #24]
 800e1a2:	697b      	ldr	r3, [r7, #20]
 800e1a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e1a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e1a8:	f7ff f92a 	bl	800d400 <_ZL12JPEGPixelRGBPmiii>
        // top right block
        Y1 =  pY[DCTSIZE*2] << 12; // scale to level of conversion table
 800e1ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e1ae:	3380      	adds	r3, #128	; 0x80
 800e1b0:	781b      	ldrb	r3, [r3, #0]
 800e1b2:	031b      	lsls	r3, r3, #12
 800e1b4:	62bb      	str	r3, [r7, #40]	; 0x28
        if (pJPEG->ucPixelType == RGB565_LITTLE_ENDIAN)
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d107      	bne.n	800e1d0 <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0x402>
            JPEGPixelLE(pOutput + 1, Y1, Cb, Cr);
 800e1c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1c2:	1c98      	adds	r0, r3, #2
 800e1c4:	69ba      	ldr	r2, [r7, #24]
 800e1c6:	697b      	ldr	r3, [r7, #20]
 800e1c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e1ca:	f7ff f867 	bl	800d29c <_ZL11JPEGPixelLEPtiii>
 800e1ce:	e013      	b.n	800e1f8 <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0x42a>
        else if (pJPEG->ucPixelType == RGB565_BIG_ENDIAN)
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e1d6:	2b01      	cmp	r3, #1
 800e1d8:	d107      	bne.n	800e1ea <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0x41c>
            JPEGPixelBE(pOutput + 1, Y1, Cb, Cr);
 800e1da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1dc:	1c98      	adds	r0, r3, #2
 800e1de:	69ba      	ldr	r2, [r7, #24]
 800e1e0:	697b      	ldr	r3, [r7, #20]
 800e1e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e1e4:	f7ff f8b2 	bl	800d34c <_ZL11JPEGPixelBEPtiii>
 800e1e8:	e006      	b.n	800e1f8 <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0x42a>
        else
            JPEGPixelRGB((uint32_t *)&pOutput[2], Y1, Cb, Cr);
 800e1ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1ec:	1d18      	adds	r0, r3, #4
 800e1ee:	69ba      	ldr	r2, [r7, #24]
 800e1f0:	697b      	ldr	r3, [r7, #20]
 800e1f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e1f4:	f7ff f904 	bl	800d400 <_ZL12JPEGPixelRGBPmiii>
        // bottom left block
        Y1 =  pY[DCTSIZE*4] << 12;  // scale to level of conversion table
 800e1f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e1fa:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800e1fe:	781b      	ldrb	r3, [r3, #0]
 800e200:	031b      	lsls	r3, r3, #12
 800e202:	62bb      	str	r3, [r7, #40]	; 0x28
        if (pJPEG->ucPixelType == RGB565_LITTLE_ENDIAN)
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d109      	bne.n	800e222 <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0x454>
            JPEGPixelLE(pOutput+iPitch, Y1, Cb, Cr);
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	005b      	lsls	r3, r3, #1
 800e212:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e214:	18d0      	adds	r0, r2, r3
 800e216:	69ba      	ldr	r2, [r7, #24]
 800e218:	697b      	ldr	r3, [r7, #20]
 800e21a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e21c:	f7ff f83e 	bl	800d29c <_ZL11JPEGPixelLEPtiii>
 800e220:	e017      	b.n	800e252 <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0x484>
        else if (pJPEG->ucPixelType == RGB565_BIG_ENDIAN)
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e228:	2b01      	cmp	r3, #1
 800e22a:	d109      	bne.n	800e240 <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0x472>
            JPEGPixelBE(pOutput+iPitch, Y1, Cb, Cr);
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	005b      	lsls	r3, r3, #1
 800e230:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e232:	18d0      	adds	r0, r2, r3
 800e234:	69ba      	ldr	r2, [r7, #24]
 800e236:	697b      	ldr	r3, [r7, #20]
 800e238:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e23a:	f7ff f887 	bl	800d34c <_ZL11JPEGPixelBEPtiii>
 800e23e:	e008      	b.n	800e252 <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0x484>
        else
            JPEGPixelRGB((uint32_t *)&pOutput[iPitch*2], Y1, Cb, Cr);
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	009b      	lsls	r3, r3, #2
 800e244:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e246:	18d0      	adds	r0, r2, r3
 800e248:	69ba      	ldr	r2, [r7, #24]
 800e24a:	697b      	ldr	r3, [r7, #20]
 800e24c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e24e:	f7ff f8d7 	bl	800d400 <_ZL12JPEGPixelRGBPmiii>
        // bottom right block
        Y1 =  pY[DCTSIZE*6] << 12; // scale to level of conversion table
 800e252:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e254:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800e258:	781b      	ldrb	r3, [r3, #0]
 800e25a:	031b      	lsls	r3, r3, #12
 800e25c:	62bb      	str	r3, [r7, #40]	; 0x28
        if (pJPEG->ucPixelType == RGB565_LITTLE_ENDIAN)
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e264:	2b00      	cmp	r3, #0
 800e266:	d10b      	bne.n	800e280 <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0x4b2>
            JPEGPixelLE(pOutput+ 1 + iPitch, Y1, Cb, Cr);
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	3301      	adds	r3, #1
 800e26c:	005b      	lsls	r3, r3, #1
 800e26e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e270:	18d0      	adds	r0, r2, r3
 800e272:	69ba      	ldr	r2, [r7, #24]
 800e274:	697b      	ldr	r3, [r7, #20]
 800e276:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e278:	f7ff f810 	bl	800d29c <_ZL11JPEGPixelLEPtiii>
        else if (pJPEG->ucPixelType == RGB565_BIG_ENDIAN)
            JPEGPixelBE(pOutput+ 1 + iPitch, Y1, Cb, Cr);
        else
            JPEGPixelRGB((uint32_t *)&pOutput[2 + iPitch*2], Y1, Cb, Cr);
        return;
 800e27c:	f000 be56 	b.w	800ef2c <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0x115e>
        else if (pJPEG->ucPixelType == RGB565_BIG_ENDIAN)
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e286:	2b01      	cmp	r3, #1
 800e288:	d10b      	bne.n	800e2a2 <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0x4d4>
            JPEGPixelBE(pOutput+ 1 + iPitch, Y1, Cb, Cr);
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	3301      	adds	r3, #1
 800e28e:	005b      	lsls	r3, r3, #1
 800e290:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e292:	18d0      	adds	r0, r2, r3
 800e294:	69ba      	ldr	r2, [r7, #24]
 800e296:	697b      	ldr	r3, [r7, #20]
 800e298:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e29a:	f7ff f857 	bl	800d34c <_ZL11JPEGPixelBEPtiii>
        return;
 800e29e:	f000 be45 	b.w	800ef2c <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0x115e>
            JPEGPixelRGB((uint32_t *)&pOutput[2 + iPitch*2], Y1, Cb, Cr);
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	3301      	adds	r3, #1
 800e2a6:	009b      	lsls	r3, r3, #2
 800e2a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e2aa:	18d0      	adds	r0, r2, r3
 800e2ac:	69ba      	ldr	r2, [r7, #24]
 800e2ae:	697b      	ldr	r3, [r7, #20]
 800e2b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e2b2:	f7ff f8a5 	bl	800d400 <_ZL12JPEGPixelRGBPmiii>
        return;
 800e2b6:	f000 be39 	b.w	800ef2c <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0x115e>
    }
    if (pJPEG->iOptions & JPEG_SCALE_QUARTER) // special case of 1/4
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e2be:	f003 0304 	and.w	r3, r3, #4
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	f000 8176 	beq.w	800e5b4 <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0x7e6>
    {
        for (iRow=0; iRow<2; iRow++)
 800e2c8:	2300      	movs	r3, #0
 800e2ca:	657b      	str	r3, [r7, #84]	; 0x54
 800e2cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e2ce:	2b01      	cmp	r3, #1
 800e2d0:	f300 862b 	bgt.w	800ef2a <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0x115c>
        {
            if (pJPEG->ucPixelType == RGB565_LITTLE_ENDIAN)
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d170      	bne.n	800e3c0 <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0x5f2>
            {
                for (iCol=0; iCol<2; iCol++)
 800e2de:	2300      	movs	r3, #0
 800e2e0:	653b      	str	r3, [r7, #80]	; 0x50
 800e2e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e2e4:	2b01      	cmp	r3, #1
 800e2e6:	f300 8151 	bgt.w	800e58c <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0x7be>
                {
                    // top left block
                    Y1 =  pY[iCol] << 12; // scale to level of conversion table
 800e2ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e2ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e2ee:	4413      	add	r3, r2
 800e2f0:	781b      	ldrb	r3, [r3, #0]
 800e2f2:	031b      	lsls	r3, r3, #12
 800e2f4:	62bb      	str	r3, [r7, #40]	; 0x28
                    Cb  = pCb[0];
 800e2f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2f8:	781b      	ldrb	r3, [r3, #0]
 800e2fa:	61bb      	str	r3, [r7, #24]
                    Cr  = pCr[0];
 800e2fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e2fe:	781b      	ldrb	r3, [r3, #0]
 800e300:	617b      	str	r3, [r7, #20]
                    JPEGPixelLE(pOutput + iCol, Y1, Cb, Cr);
 800e302:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e304:	005b      	lsls	r3, r3, #1
 800e306:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e308:	18d0      	adds	r0, r2, r3
 800e30a:	69ba      	ldr	r2, [r7, #24]
 800e30c:	697b      	ldr	r3, [r7, #20]
 800e30e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e310:	f7fe ffc4 	bl	800d29c <_ZL11JPEGPixelLEPtiii>
                    // top right block
                    Y1 =  pY[iCol+(DCTSIZE*2)] << 12; // scale to level of conversion table
 800e314:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e316:	3380      	adds	r3, #128	; 0x80
 800e318:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e31a:	4413      	add	r3, r2
 800e31c:	781b      	ldrb	r3, [r3, #0]
 800e31e:	031b      	lsls	r3, r3, #12
 800e320:	62bb      	str	r3, [r7, #40]	; 0x28
                    Cb = pCb[1];
 800e322:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e324:	3301      	adds	r3, #1
 800e326:	781b      	ldrb	r3, [r3, #0]
 800e328:	61bb      	str	r3, [r7, #24]
                    Cr = pCr[1];
 800e32a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e32c:	3301      	adds	r3, #1
 800e32e:	781b      	ldrb	r3, [r3, #0]
 800e330:	617b      	str	r3, [r7, #20]
                    JPEGPixelLE(pOutput + 2+iCol, Y1, Cb, Cr);
 800e332:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e334:	3302      	adds	r3, #2
 800e336:	005b      	lsls	r3, r3, #1
 800e338:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e33a:	18d0      	adds	r0, r2, r3
 800e33c:	69ba      	ldr	r2, [r7, #24]
 800e33e:	697b      	ldr	r3, [r7, #20]
 800e340:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e342:	f7fe ffab 	bl	800d29c <_ZL11JPEGPixelLEPtiii>
                    // bottom left block
                    Y1 =  pY[iCol+DCTSIZE*4] << 12;  // scale to level of conversion table
 800e346:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e348:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800e34c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e34e:	4413      	add	r3, r2
 800e350:	781b      	ldrb	r3, [r3, #0]
 800e352:	031b      	lsls	r3, r3, #12
 800e354:	62bb      	str	r3, [r7, #40]	; 0x28
                    Cb = pCb[2];
 800e356:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e358:	3302      	adds	r3, #2
 800e35a:	781b      	ldrb	r3, [r3, #0]
 800e35c:	61bb      	str	r3, [r7, #24]
                    Cr = pCr[2];
 800e35e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e360:	3302      	adds	r3, #2
 800e362:	781b      	ldrb	r3, [r3, #0]
 800e364:	617b      	str	r3, [r7, #20]
                    JPEGPixelLE(pOutput+iPitch*2 + iCol, Y1, Cb, Cr);
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	005a      	lsls	r2, r3, #1
 800e36a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e36c:	4413      	add	r3, r2
 800e36e:	005b      	lsls	r3, r3, #1
 800e370:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e372:	18d0      	adds	r0, r2, r3
 800e374:	69ba      	ldr	r2, [r7, #24]
 800e376:	697b      	ldr	r3, [r7, #20]
 800e378:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e37a:	f7fe ff8f 	bl	800d29c <_ZL11JPEGPixelLEPtiii>
                    // bottom right block
                    Y1 =  pY[iCol+DCTSIZE*6] << 12; // scale to level of conversion table
 800e37e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e380:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800e384:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e386:	4413      	add	r3, r2
 800e388:	781b      	ldrb	r3, [r3, #0]
 800e38a:	031b      	lsls	r3, r3, #12
 800e38c:	62bb      	str	r3, [r7, #40]	; 0x28
                    Cb  = pCb[3];
 800e38e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e390:	3303      	adds	r3, #3
 800e392:	781b      	ldrb	r3, [r3, #0]
 800e394:	61bb      	str	r3, [r7, #24]
                    Cr  = pCr[3];
 800e396:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e398:	3303      	adds	r3, #3
 800e39a:	781b      	ldrb	r3, [r3, #0]
 800e39c:	617b      	str	r3, [r7, #20]
                    JPEGPixelLE(pOutput+iPitch*2 + 2+iCol, Y1, Cb, Cr);
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	3301      	adds	r3, #1
 800e3a2:	005a      	lsls	r2, r3, #1
 800e3a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e3a6:	4413      	add	r3, r2
 800e3a8:	005b      	lsls	r3, r3, #1
 800e3aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e3ac:	18d0      	adds	r0, r2, r3
 800e3ae:	69ba      	ldr	r2, [r7, #24]
 800e3b0:	697b      	ldr	r3, [r7, #20]
 800e3b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e3b4:	f7fe ff72 	bl	800d29c <_ZL11JPEGPixelLEPtiii>
                for (iCol=0; iCol<2; iCol++)
 800e3b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e3ba:	3301      	adds	r3, #1
 800e3bc:	653b      	str	r3, [r7, #80]	; 0x50
 800e3be:	e790      	b.n	800e2e2 <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0x514>
                } // for each column
            }
            else if (pJPEG->ucPixelType == RGB565_BIG_ENDIAN)
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e3c6:	2b01      	cmp	r3, #1
 800e3c8:	d170      	bne.n	800e4ac <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0x6de>
            {
                for (iCol=0; iCol<2; iCol++)
 800e3ca:	2300      	movs	r3, #0
 800e3cc:	653b      	str	r3, [r7, #80]	; 0x50
 800e3ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e3d0:	2b01      	cmp	r3, #1
 800e3d2:	f300 80db 	bgt.w	800e58c <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0x7be>
                {
                    // top left block
                    Y1 =  pY[iCol] << 12; // scale to level of conversion table
 800e3d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e3d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e3da:	4413      	add	r3, r2
 800e3dc:	781b      	ldrb	r3, [r3, #0]
 800e3de:	031b      	lsls	r3, r3, #12
 800e3e0:	62bb      	str	r3, [r7, #40]	; 0x28
                    Cb  = pCb[0];
 800e3e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3e4:	781b      	ldrb	r3, [r3, #0]
 800e3e6:	61bb      	str	r3, [r7, #24]
                    Cr  = pCr[0];
 800e3e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e3ea:	781b      	ldrb	r3, [r3, #0]
 800e3ec:	617b      	str	r3, [r7, #20]
                    JPEGPixelBE(pOutput + iCol, Y1, Cb, Cr);
 800e3ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e3f0:	005b      	lsls	r3, r3, #1
 800e3f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e3f4:	18d0      	adds	r0, r2, r3
 800e3f6:	69ba      	ldr	r2, [r7, #24]
 800e3f8:	697b      	ldr	r3, [r7, #20]
 800e3fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e3fc:	f7fe ffa6 	bl	800d34c <_ZL11JPEGPixelBEPtiii>
                    // top right block
                    Y1 =  pY[iCol+(DCTSIZE*2)] << 12; // scale to level of conversion table
 800e400:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e402:	3380      	adds	r3, #128	; 0x80
 800e404:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e406:	4413      	add	r3, r2
 800e408:	781b      	ldrb	r3, [r3, #0]
 800e40a:	031b      	lsls	r3, r3, #12
 800e40c:	62bb      	str	r3, [r7, #40]	; 0x28
                    Cb = pCb[1];
 800e40e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e410:	3301      	adds	r3, #1
 800e412:	781b      	ldrb	r3, [r3, #0]
 800e414:	61bb      	str	r3, [r7, #24]
                    Cr = pCr[1];
 800e416:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e418:	3301      	adds	r3, #1
 800e41a:	781b      	ldrb	r3, [r3, #0]
 800e41c:	617b      	str	r3, [r7, #20]
                    JPEGPixelBE(pOutput + 2+iCol, Y1, Cb, Cr);
 800e41e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e420:	3302      	adds	r3, #2
 800e422:	005b      	lsls	r3, r3, #1
 800e424:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e426:	18d0      	adds	r0, r2, r3
 800e428:	69ba      	ldr	r2, [r7, #24]
 800e42a:	697b      	ldr	r3, [r7, #20]
 800e42c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e42e:	f7fe ff8d 	bl	800d34c <_ZL11JPEGPixelBEPtiii>
                    // bottom left block
                    Y1 =  pY[iCol+DCTSIZE*4] << 12;  // scale to level of conversion table
 800e432:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e434:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800e438:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e43a:	4413      	add	r3, r2
 800e43c:	781b      	ldrb	r3, [r3, #0]
 800e43e:	031b      	lsls	r3, r3, #12
 800e440:	62bb      	str	r3, [r7, #40]	; 0x28
                    Cb = pCb[2];
 800e442:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e444:	3302      	adds	r3, #2
 800e446:	781b      	ldrb	r3, [r3, #0]
 800e448:	61bb      	str	r3, [r7, #24]
                    Cr = pCr[2];
 800e44a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e44c:	3302      	adds	r3, #2
 800e44e:	781b      	ldrb	r3, [r3, #0]
 800e450:	617b      	str	r3, [r7, #20]
                    JPEGPixelBE(pOutput+iPitch*2 + iCol, Y1, Cb, Cr);
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	005a      	lsls	r2, r3, #1
 800e456:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e458:	4413      	add	r3, r2
 800e45a:	005b      	lsls	r3, r3, #1
 800e45c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e45e:	18d0      	adds	r0, r2, r3
 800e460:	69ba      	ldr	r2, [r7, #24]
 800e462:	697b      	ldr	r3, [r7, #20]
 800e464:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e466:	f7fe ff71 	bl	800d34c <_ZL11JPEGPixelBEPtiii>
                    // bottom right block
                    Y1 =  pY[iCol+DCTSIZE*6] << 12; // scale to level of conversion table
 800e46a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e46c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800e470:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e472:	4413      	add	r3, r2
 800e474:	781b      	ldrb	r3, [r3, #0]
 800e476:	031b      	lsls	r3, r3, #12
 800e478:	62bb      	str	r3, [r7, #40]	; 0x28
                    Cb  = pCb[3];
 800e47a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e47c:	3303      	adds	r3, #3
 800e47e:	781b      	ldrb	r3, [r3, #0]
 800e480:	61bb      	str	r3, [r7, #24]
                    Cr  = pCr[3];
 800e482:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e484:	3303      	adds	r3, #3
 800e486:	781b      	ldrb	r3, [r3, #0]
 800e488:	617b      	str	r3, [r7, #20]
                    JPEGPixelBE(pOutput+iPitch*2 + 2+iCol, Y1, Cb, Cr);
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	3301      	adds	r3, #1
 800e48e:	005a      	lsls	r2, r3, #1
 800e490:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e492:	4413      	add	r3, r2
 800e494:	005b      	lsls	r3, r3, #1
 800e496:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e498:	18d0      	adds	r0, r2, r3
 800e49a:	69ba      	ldr	r2, [r7, #24]
 800e49c:	697b      	ldr	r3, [r7, #20]
 800e49e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e4a0:	f7fe ff54 	bl	800d34c <_ZL11JPEGPixelBEPtiii>
                for (iCol=0; iCol<2; iCol++)
 800e4a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e4a6:	3301      	adds	r3, #1
 800e4a8:	653b      	str	r3, [r7, #80]	; 0x50
 800e4aa:	e790      	b.n	800e3ce <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0x600>
                } // for each column
            } else { // RGB8888
                for (iCol=0; iCol<2; iCol++)
 800e4ac:	2300      	movs	r3, #0
 800e4ae:	653b      	str	r3, [r7, #80]	; 0x50
 800e4b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e4b2:	2b01      	cmp	r3, #1
 800e4b4:	dc6a      	bgt.n	800e58c <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0x7be>
                {
                    // top left block
                    Y1 =  pY[iCol] << 12; // scale to level of conversion table
 800e4b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e4b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e4ba:	4413      	add	r3, r2
 800e4bc:	781b      	ldrb	r3, [r3, #0]
 800e4be:	031b      	lsls	r3, r3, #12
 800e4c0:	62bb      	str	r3, [r7, #40]	; 0x28
                    Cb  = pCb[0];
 800e4c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e4c4:	781b      	ldrb	r3, [r3, #0]
 800e4c6:	61bb      	str	r3, [r7, #24]
                    Cr  = pCr[0];
 800e4c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e4ca:	781b      	ldrb	r3, [r3, #0]
 800e4cc:	617b      	str	r3, [r7, #20]
                    JPEGPixelRGB((uint32_t *)&pOutput[iCol*2], Y1, Cb, Cr);
 800e4ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e4d0:	009b      	lsls	r3, r3, #2
 800e4d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e4d4:	18d0      	adds	r0, r2, r3
 800e4d6:	69ba      	ldr	r2, [r7, #24]
 800e4d8:	697b      	ldr	r3, [r7, #20]
 800e4da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e4dc:	f7fe ff90 	bl	800d400 <_ZL12JPEGPixelRGBPmiii>
                    // top right block
                    Y1 =  pY[iCol+(DCTSIZE*2)] << 12; // scale to level of conversion table
 800e4e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e4e2:	3380      	adds	r3, #128	; 0x80
 800e4e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e4e6:	4413      	add	r3, r2
 800e4e8:	781b      	ldrb	r3, [r3, #0]
 800e4ea:	031b      	lsls	r3, r3, #12
 800e4ec:	62bb      	str	r3, [r7, #40]	; 0x28
                    Cb = pCb[1];
 800e4ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e4f0:	3301      	adds	r3, #1
 800e4f2:	781b      	ldrb	r3, [r3, #0]
 800e4f4:	61bb      	str	r3, [r7, #24]
                    Cr = pCr[1];
 800e4f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e4f8:	3301      	adds	r3, #1
 800e4fa:	781b      	ldrb	r3, [r3, #0]
 800e4fc:	617b      	str	r3, [r7, #20]
                    JPEGPixelRGB((uint32_t *)&pOutput[(2+iCol)*2], Y1, Cb, Cr);
 800e4fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e500:	3302      	adds	r3, #2
 800e502:	009b      	lsls	r3, r3, #2
 800e504:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e506:	18d0      	adds	r0, r2, r3
 800e508:	69ba      	ldr	r2, [r7, #24]
 800e50a:	697b      	ldr	r3, [r7, #20]
 800e50c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e50e:	f7fe ff77 	bl	800d400 <_ZL12JPEGPixelRGBPmiii>
                    // bottom left block
                    Y1 =  pY[iCol+DCTSIZE*4] << 12;  // scale to level of conversion table
 800e512:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e514:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800e518:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e51a:	4413      	add	r3, r2
 800e51c:	781b      	ldrb	r3, [r3, #0]
 800e51e:	031b      	lsls	r3, r3, #12
 800e520:	62bb      	str	r3, [r7, #40]	; 0x28
                    Cb = pCb[2];
 800e522:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e524:	3302      	adds	r3, #2
 800e526:	781b      	ldrb	r3, [r3, #0]
 800e528:	61bb      	str	r3, [r7, #24]
                    Cr = pCr[2];
 800e52a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e52c:	3302      	adds	r3, #2
 800e52e:	781b      	ldrb	r3, [r3, #0]
 800e530:	617b      	str	r3, [r7, #20]
                    JPEGPixelRGB((uint32_t *)&pOutput[(iPitch*2 + iCol)*2], Y1, Cb, Cr);
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	005a      	lsls	r2, r3, #1
 800e536:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e538:	4413      	add	r3, r2
 800e53a:	009b      	lsls	r3, r3, #2
 800e53c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e53e:	18d0      	adds	r0, r2, r3
 800e540:	69ba      	ldr	r2, [r7, #24]
 800e542:	697b      	ldr	r3, [r7, #20]
 800e544:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e546:	f7fe ff5b 	bl	800d400 <_ZL12JPEGPixelRGBPmiii>
                    // bottom right block
                    Y1 =  pY[iCol+DCTSIZE*6] << 12; // scale to level of conversion table
 800e54a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e54c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800e550:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e552:	4413      	add	r3, r2
 800e554:	781b      	ldrb	r3, [r3, #0]
 800e556:	031b      	lsls	r3, r3, #12
 800e558:	62bb      	str	r3, [r7, #40]	; 0x28
                    Cb  = pCb[3];
 800e55a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e55c:	3303      	adds	r3, #3
 800e55e:	781b      	ldrb	r3, [r3, #0]
 800e560:	61bb      	str	r3, [r7, #24]
                    Cr  = pCr[3];
 800e562:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e564:	3303      	adds	r3, #3
 800e566:	781b      	ldrb	r3, [r3, #0]
 800e568:	617b      	str	r3, [r7, #20]
                    JPEGPixelRGB((uint32_t *)&pOutput[(iPitch*2 + 2+iCol)*2], Y1, Cb, Cr);
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	3301      	adds	r3, #1
 800e56e:	005a      	lsls	r2, r3, #1
 800e570:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e572:	4413      	add	r3, r2
 800e574:	009b      	lsls	r3, r3, #2
 800e576:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e578:	18d0      	adds	r0, r2, r3
 800e57a:	69ba      	ldr	r2, [r7, #24]
 800e57c:	697b      	ldr	r3, [r7, #20]
 800e57e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e580:	f7fe ff3e 	bl	800d400 <_ZL12JPEGPixelRGBPmiii>
                for (iCol=0; iCol<2; iCol++)
 800e584:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e586:	3301      	adds	r3, #1
 800e588:	653b      	str	r3, [r7, #80]	; 0x50
 800e58a:	e791      	b.n	800e4b0 <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0x6e2>
                } // for each column
            }
            pY += 2; // skip 1 line of source pixels
 800e58c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e58e:	3302      	adds	r3, #2
 800e590:	647b      	str	r3, [r7, #68]	; 0x44
            pOutput += (pJPEG->ucPixelType == RGB8888) ? iPitch*2 : iPitch;
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e598:	2b02      	cmp	r3, #2
 800e59a:	d102      	bne.n	800e5a2 <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0x7d4>
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	009b      	lsls	r3, r3, #2
 800e5a0:	e001      	b.n	800e5a6 <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0x7d8>
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	005b      	lsls	r3, r3, #1
 800e5a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e5a8:	4413      	add	r3, r2
 800e5aa:	633b      	str	r3, [r7, #48]	; 0x30
        for (iRow=0; iRow<2; iRow++)
 800e5ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e5ae:	3301      	adds	r3, #1
 800e5b0:	657b      	str	r3, [r7, #84]	; 0x54
 800e5b2:	e68b      	b.n	800e2cc <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0x4fe>
     return;
     } // 16bpp
#endif // HAS_SSE
    /* Reference C code */
    /* Convert YCC pixels into RGB pixels and store in output image */
    iYCount = 4;
 800e5b4:	2304      	movs	r3, #4
 800e5b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    bUseOdd1 = bUseOdd2 = 1; // assume odd column can be used
 800e5b8:	2301      	movs	r3, #1
 800e5ba:	637b      	str	r3, [r7, #52]	; 0x34
 800e5bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5be:	63bb      	str	r3, [r7, #56]	; 0x38
    if ((x+15) >= pJPEG->iWidth)
 800e5c0:	68bb      	ldr	r3, [r7, #8]
 800e5c2:	f103 020f 	add.w	r2, r3, #15
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	429a      	cmp	r2, r3
 800e5cc:	db37      	blt.n	800e63e <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0x870>
    {
        iCol = (((pJPEG->iWidth & 15)+1) >> 1);
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	f003 030f 	and.w	r3, r3, #15
 800e5d6:	3301      	adds	r3, #1
 800e5d8:	105b      	asrs	r3, r3, #1
 800e5da:	653b      	str	r3, [r7, #80]	; 0x50
        if (iCol >= 4)
 800e5dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e5de:	2b03      	cmp	r3, #3
 800e5e0:	dd17      	ble.n	800e612 <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0x844>
        {
            iXCount1 = 4;
 800e5e2:	2304      	movs	r3, #4
 800e5e4:	64fb      	str	r3, [r7, #76]	; 0x4c
            iXCount2 = iCol-4;
 800e5e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e5e8:	3b04      	subs	r3, #4
 800e5ea:	64bb      	str	r3, [r7, #72]	; 0x48
            if (pJPEG->iWidth & 1 && (iXCount2 * 2) + 8 + (x * 16) > pJPEG->iWidth)
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	f003 0301 	and.w	r3, r3, #1
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d026      	beq.n	800e646 <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0x878>
 800e5f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e5fa:	1d1a      	adds	r2, r3, #4
 800e5fc:	68bb      	ldr	r3, [r7, #8]
 800e5fe:	00db      	lsls	r3, r3, #3
 800e600:	4413      	add	r3, r2
 800e602:	005a      	lsls	r2, r3, #1
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	429a      	cmp	r2, r3
 800e60a:	dd1c      	ble.n	800e646 <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0x878>
                bUseOdd2 = 0;
 800e60c:	2300      	movs	r3, #0
 800e60e:	637b      	str	r3, [r7, #52]	; 0x34
 800e610:	e019      	b.n	800e646 <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0x878>
        }
        else
        {
            iXCount1 = iCol;
 800e612:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e614:	64fb      	str	r3, [r7, #76]	; 0x4c
            iXCount2 = 0;
 800e616:	2300      	movs	r3, #0
 800e618:	64bb      	str	r3, [r7, #72]	; 0x48
            if (pJPEG->iWidth & 1 && (iXCount1 * 2) + (x * 16) > pJPEG->iWidth)
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	f003 0301 	and.w	r3, r3, #1
 800e622:	2b00      	cmp	r3, #0
 800e624:	d00f      	beq.n	800e646 <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0x878>
 800e626:	68bb      	ldr	r3, [r7, #8]
 800e628:	00da      	lsls	r2, r3, #3
 800e62a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e62c:	4413      	add	r3, r2
 800e62e:	005a      	lsls	r2, r3, #1
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	429a      	cmp	r2, r3
 800e636:	dd06      	ble.n	800e646 <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0x878>
                bUseOdd1 = 0;
 800e638:	2300      	movs	r3, #0
 800e63a:	63bb      	str	r3, [r7, #56]	; 0x38
 800e63c:	e003      	b.n	800e646 <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0x878>
        }
    }
    else
        iXCount1 = iXCount2 = 4;
 800e63e:	2304      	movs	r3, #4
 800e640:	64bb      	str	r3, [r7, #72]	; 0x48
 800e642:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e644:	64fb      	str	r3, [r7, #76]	; 0x4c
    for (iRow=0; iRow<iYCount; iRow++) // up to 4 rows to do
 800e646:	2300      	movs	r3, #0
 800e648:	657b      	str	r3, [r7, #84]	; 0x54
 800e64a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e64c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e64e:	429a      	cmp	r2, r3
 800e650:	f280 846c 	bge.w	800ef2c <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0x115e>
    {
        for (iCol=0; iCol<iXCount1; iCol++) // up to 4 cols to do
 800e654:	2300      	movs	r3, #0
 800e656:	653b      	str	r3, [r7, #80]	; 0x50
 800e658:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e65a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e65c:	429a      	cmp	r2, r3
 800e65e:	f280 8445 	bge.w	800eeec <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0x111e>
        {
            // for top left block
            Y1 = pY[iCol*2];
 800e662:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e664:	005b      	lsls	r3, r3, #1
 800e666:	461a      	mov	r2, r3
 800e668:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e66a:	4413      	add	r3, r2
 800e66c:	781b      	ldrb	r3, [r3, #0]
 800e66e:	62bb      	str	r3, [r7, #40]	; 0x28
            Y2 = pY[iCol*2+1];
 800e670:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e672:	005b      	lsls	r3, r3, #1
 800e674:	3301      	adds	r3, #1
 800e676:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e678:	4413      	add	r3, r2
 800e67a:	781b      	ldrb	r3, [r3, #0]
 800e67c:	627b      	str	r3, [r7, #36]	; 0x24
            Y3 = pY[iCol*2+8];
 800e67e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e680:	005b      	lsls	r3, r3, #1
 800e682:	3308      	adds	r3, #8
 800e684:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e686:	4413      	add	r3, r2
 800e688:	781b      	ldrb	r3, [r3, #0]
 800e68a:	623b      	str	r3, [r7, #32]
            Y4 = pY[iCol*2+9];
 800e68c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e68e:	005b      	lsls	r3, r3, #1
 800e690:	3309      	adds	r3, #9
 800e692:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e694:	4413      	add	r3, r2
 800e696:	781b      	ldrb	r3, [r3, #0]
 800e698:	61fb      	str	r3, [r7, #28]
            Y1 <<= 12;  // scale to level of conversion table
 800e69a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e69c:	031b      	lsls	r3, r3, #12
 800e69e:	62bb      	str	r3, [r7, #40]	; 0x28
            Y2 <<= 12;
 800e6a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6a2:	031b      	lsls	r3, r3, #12
 800e6a4:	627b      	str	r3, [r7, #36]	; 0x24
            Y3 <<= 12;
 800e6a6:	6a3b      	ldr	r3, [r7, #32]
 800e6a8:	031b      	lsls	r3, r3, #12
 800e6aa:	623b      	str	r3, [r7, #32]
            Y4 <<= 12;
 800e6ac:	69fb      	ldr	r3, [r7, #28]
 800e6ae:	031b      	lsls	r3, r3, #12
 800e6b0:	61fb      	str	r3, [r7, #28]
            Cb = pCb[iCol];
 800e6b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e6b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e6b6:	4413      	add	r3, r2
 800e6b8:	781b      	ldrb	r3, [r3, #0]
 800e6ba:	61bb      	str	r3, [r7, #24]
            Cr = pCr[iCol];
 800e6bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e6be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e6c0:	4413      	add	r3, r2
 800e6c2:	781b      	ldrb	r3, [r3, #0]
 800e6c4:	617b      	str	r3, [r7, #20]
            if (pJPEG->ucPixelType == RGB565_LITTLE_ENDIAN)
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d13d      	bne.n	800e74c <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0x97e>
            {
                if (bUseOdd1 || iCol != (iXCount1-1)) // only render if it won't go off the right edge
 800e6d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d104      	bne.n	800e6e0 <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0x912>
 800e6d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e6d8:	3b01      	subs	r3, #1
 800e6da:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e6dc:	429a      	cmp	r2, r3
 800e6de:	d01d      	beq.n	800e71c <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0x94e>
                {
                    JPEGPixel2LE(pOutput + (iCol<<1), Y1, Y2, Cb, Cr);
 800e6e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e6e2:	005b      	lsls	r3, r3, #1
 800e6e4:	005b      	lsls	r3, r3, #1
 800e6e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e6e8:	18d0      	adds	r0, r2, r3
 800e6ea:	69ba      	ldr	r2, [r7, #24]
 800e6ec:	697b      	ldr	r3, [r7, #20]
 800e6ee:	9300      	str	r3, [sp, #0]
 800e6f0:	4613      	mov	r3, r2
 800e6f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e6f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e6f6:	f7fe fef5 	bl	800d4e4 <_ZL12JPEGPixel2LEPtiiii>
                    JPEGPixel2LE(pOutput+iPitch + (iCol<<1), Y3, Y4, Cb, Cr);
 800e6fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e6fc:	005b      	lsls	r3, r3, #1
 800e6fe:	461a      	mov	r2, r3
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	4413      	add	r3, r2
 800e704:	005b      	lsls	r3, r3, #1
 800e706:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e708:	18d0      	adds	r0, r2, r3
 800e70a:	69ba      	ldr	r2, [r7, #24]
 800e70c:	697b      	ldr	r3, [r7, #20]
 800e70e:	9300      	str	r3, [sp, #0]
 800e710:	4613      	mov	r3, r2
 800e712:	69fa      	ldr	r2, [r7, #28]
 800e714:	6a39      	ldr	r1, [r7, #32]
 800e716:	f7fe fee5 	bl	800d4e4 <_ZL12JPEGPixel2LEPtiiii>
 800e71a:	e095      	b.n	800e848 <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0xa7a>
                }
                else
                {
                    JPEGPixelLE(pOutput + (iCol<<1), Y1, Cb, Cr);
 800e71c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e71e:	005b      	lsls	r3, r3, #1
 800e720:	005b      	lsls	r3, r3, #1
 800e722:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e724:	18d0      	adds	r0, r2, r3
 800e726:	69ba      	ldr	r2, [r7, #24]
 800e728:	697b      	ldr	r3, [r7, #20]
 800e72a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e72c:	f7fe fdb6 	bl	800d29c <_ZL11JPEGPixelLEPtiii>
                    JPEGPixelLE(pOutput+iPitch + (iCol<<1), Y3, Cb, Cr);
 800e730:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e732:	005b      	lsls	r3, r3, #1
 800e734:	461a      	mov	r2, r3
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	4413      	add	r3, r2
 800e73a:	005b      	lsls	r3, r3, #1
 800e73c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e73e:	18d0      	adds	r0, r2, r3
 800e740:	69ba      	ldr	r2, [r7, #24]
 800e742:	697b      	ldr	r3, [r7, #20]
 800e744:	6a39      	ldr	r1, [r7, #32]
 800e746:	f7fe fda9 	bl	800d29c <_ZL11JPEGPixelLEPtiii>
 800e74a:	e07d      	b.n	800e848 <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0xa7a>
                }
            }
            else if (pJPEG->ucPixelType == RGB565_BIG_ENDIAN)
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e752:	2b01      	cmp	r3, #1
 800e754:	d13d      	bne.n	800e7d2 <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0xa04>
            {
                if (bUseOdd1 || iCol != (iXCount1-1)) // only render if it won't go off the right edge
 800e756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d104      	bne.n	800e766 <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0x998>
 800e75c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e75e:	3b01      	subs	r3, #1
 800e760:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e762:	429a      	cmp	r2, r3
 800e764:	d01d      	beq.n	800e7a2 <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0x9d4>
                {
                    JPEGPixel2BE(pOutput + (iCol<<1), Y1, Y2, Cb, Cr);
 800e766:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e768:	005b      	lsls	r3, r3, #1
 800e76a:	005b      	lsls	r3, r3, #1
 800e76c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e76e:	18d0      	adds	r0, r2, r3
 800e770:	69ba      	ldr	r2, [r7, #24]
 800e772:	697b      	ldr	r3, [r7, #20]
 800e774:	9300      	str	r3, [sp, #0]
 800e776:	4613      	mov	r3, r2
 800e778:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e77a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e77c:	f7fe ff34 	bl	800d5e8 <_ZL12JPEGPixel2BEPtllll>
                    JPEGPixel2BE(pOutput+iPitch + (iCol<<1), Y3, Y4, Cb, Cr);
 800e780:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e782:	005b      	lsls	r3, r3, #1
 800e784:	461a      	mov	r2, r3
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	4413      	add	r3, r2
 800e78a:	005b      	lsls	r3, r3, #1
 800e78c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e78e:	18d0      	adds	r0, r2, r3
 800e790:	69ba      	ldr	r2, [r7, #24]
 800e792:	697b      	ldr	r3, [r7, #20]
 800e794:	9300      	str	r3, [sp, #0]
 800e796:	4613      	mov	r3, r2
 800e798:	69fa      	ldr	r2, [r7, #28]
 800e79a:	6a39      	ldr	r1, [r7, #32]
 800e79c:	f7fe ff24 	bl	800d5e8 <_ZL12JPEGPixel2BEPtllll>
 800e7a0:	e052      	b.n	800e848 <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0xa7a>
                }
                else
                {
                    JPEGPixelBE(pOutput + (iCol<<1), Y1, Cb, Cr);
 800e7a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e7a4:	005b      	lsls	r3, r3, #1
 800e7a6:	005b      	lsls	r3, r3, #1
 800e7a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e7aa:	18d0      	adds	r0, r2, r3
 800e7ac:	69ba      	ldr	r2, [r7, #24]
 800e7ae:	697b      	ldr	r3, [r7, #20]
 800e7b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e7b2:	f7fe fdcb 	bl	800d34c <_ZL11JPEGPixelBEPtiii>
                    JPEGPixelBE(pOutput+iPitch + (iCol<<1), Y3, Cb, Cr);
 800e7b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e7b8:	005b      	lsls	r3, r3, #1
 800e7ba:	461a      	mov	r2, r3
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	4413      	add	r3, r2
 800e7c0:	005b      	lsls	r3, r3, #1
 800e7c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e7c4:	18d0      	adds	r0, r2, r3
 800e7c6:	69ba      	ldr	r2, [r7, #24]
 800e7c8:	697b      	ldr	r3, [r7, #20]
 800e7ca:	6a39      	ldr	r1, [r7, #32]
 800e7cc:	f7fe fdbe 	bl	800d34c <_ZL11JPEGPixelBEPtiii>
 800e7d0:	e03a      	b.n	800e848 <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0xa7a>
                }
            } else { // RGB8888
                if (bUseOdd1 || iCol != (iXCount1-1)) // only render if it won't go off the right edge
 800e7d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d104      	bne.n	800e7e2 <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0xa14>
 800e7d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e7da:	3b01      	subs	r3, #1
 800e7dc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e7de:	429a      	cmp	r2, r3
 800e7e0:	d01c      	beq.n	800e81c <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0xa4e>
                {
                    JPEGPixel2RGB((uint32_t *)&pOutput[iCol<<2], Y1, Y2, Cb, Cr);
 800e7e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e7e4:	009b      	lsls	r3, r3, #2
 800e7e6:	005b      	lsls	r3, r3, #1
 800e7e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e7ea:	18d0      	adds	r0, r2, r3
 800e7ec:	69ba      	ldr	r2, [r7, #24]
 800e7ee:	697b      	ldr	r3, [r7, #20]
 800e7f0:	9300      	str	r3, [sp, #0]
 800e7f2:	4613      	mov	r3, r2
 800e7f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e7f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e7f8:	f7fe ff80 	bl	800d6fc <_ZL13JPEGPixel2RGBPmllll>
                    JPEGPixel2RGB((uint32_t *)&pOutput[2*(iPitch + (iCol<<1))], Y3, Y4, Cb, Cr);
 800e7fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e7fe:	005a      	lsls	r2, r3, #1
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	4413      	add	r3, r2
 800e804:	009b      	lsls	r3, r3, #2
 800e806:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e808:	18d0      	adds	r0, r2, r3
 800e80a:	69ba      	ldr	r2, [r7, #24]
 800e80c:	697b      	ldr	r3, [r7, #20]
 800e80e:	9300      	str	r3, [sp, #0]
 800e810:	4613      	mov	r3, r2
 800e812:	69fa      	ldr	r2, [r7, #28]
 800e814:	6a39      	ldr	r1, [r7, #32]
 800e816:	f7fe ff71 	bl	800d6fc <_ZL13JPEGPixel2RGBPmllll>
 800e81a:	e015      	b.n	800e848 <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0xa7a>
                }
                else
                {
                    JPEGPixelRGB((uint32_t *)&pOutput[iCol<<2], Y1, Cb, Cr);
 800e81c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e81e:	009b      	lsls	r3, r3, #2
 800e820:	005b      	lsls	r3, r3, #1
 800e822:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e824:	18d0      	adds	r0, r2, r3
 800e826:	69ba      	ldr	r2, [r7, #24]
 800e828:	697b      	ldr	r3, [r7, #20]
 800e82a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e82c:	f7fe fde8 	bl	800d400 <_ZL12JPEGPixelRGBPmiii>
                    JPEGPixelRGB((uint32_t *)&pOutput[(iPitch + (iCol<<1))*2], Y3, Cb, Cr);
 800e830:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e832:	005a      	lsls	r2, r3, #1
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	4413      	add	r3, r2
 800e838:	009b      	lsls	r3, r3, #2
 800e83a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e83c:	18d0      	adds	r0, r2, r3
 800e83e:	69ba      	ldr	r2, [r7, #24]
 800e840:	697b      	ldr	r3, [r7, #20]
 800e842:	6a39      	ldr	r1, [r7, #32]
 800e844:	f7fe fddc 	bl	800d400 <_ZL12JPEGPixelRGBPmiii>
                }
            } // RGB8888
            // for top right block
            if (iCol < iXCount2)
 800e848:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e84a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e84c:	429a      	cmp	r2, r3
 800e84e:	f280 8103 	bge.w	800ea58 <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0xc8a>
            {
                Y1 = pY[iCol*2+DCTSIZE*2];
 800e852:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e854:	005b      	lsls	r3, r3, #1
 800e856:	3380      	adds	r3, #128	; 0x80
 800e858:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e85a:	4413      	add	r3, r2
 800e85c:	781b      	ldrb	r3, [r3, #0]
 800e85e:	62bb      	str	r3, [r7, #40]	; 0x28
                Y2 = pY[iCol*2+1+DCTSIZE*2];
 800e860:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e862:	005b      	lsls	r3, r3, #1
 800e864:	3381      	adds	r3, #129	; 0x81
 800e866:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e868:	4413      	add	r3, r2
 800e86a:	781b      	ldrb	r3, [r3, #0]
 800e86c:	627b      	str	r3, [r7, #36]	; 0x24
                Y3 = pY[iCol*2+8+DCTSIZE*2];
 800e86e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e870:	005b      	lsls	r3, r3, #1
 800e872:	3388      	adds	r3, #136	; 0x88
 800e874:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e876:	4413      	add	r3, r2
 800e878:	781b      	ldrb	r3, [r3, #0]
 800e87a:	623b      	str	r3, [r7, #32]
                Y4 = pY[iCol*2+9+DCTSIZE*2];
 800e87c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e87e:	005b      	lsls	r3, r3, #1
 800e880:	3389      	adds	r3, #137	; 0x89
 800e882:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e884:	4413      	add	r3, r2
 800e886:	781b      	ldrb	r3, [r3, #0]
 800e888:	61fb      	str	r3, [r7, #28]
                Y1 <<= 12;  // scale to level of conversion table
 800e88a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e88c:	031b      	lsls	r3, r3, #12
 800e88e:	62bb      	str	r3, [r7, #40]	; 0x28
                Y2 <<= 12;
 800e890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e892:	031b      	lsls	r3, r3, #12
 800e894:	627b      	str	r3, [r7, #36]	; 0x24
                Y3 <<= 12;
 800e896:	6a3b      	ldr	r3, [r7, #32]
 800e898:	031b      	lsls	r3, r3, #12
 800e89a:	623b      	str	r3, [r7, #32]
                Y4 <<= 12;
 800e89c:	69fb      	ldr	r3, [r7, #28]
 800e89e:	031b      	lsls	r3, r3, #12
 800e8a0:	61fb      	str	r3, [r7, #28]
                Cb = pCb[iCol+4];
 800e8a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e8a4:	3304      	adds	r3, #4
 800e8a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e8a8:	4413      	add	r3, r2
 800e8aa:	781b      	ldrb	r3, [r3, #0]
 800e8ac:	61bb      	str	r3, [r7, #24]
                Cr = pCr[iCol+4];
 800e8ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e8b0:	3304      	adds	r3, #4
 800e8b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e8b4:	4413      	add	r3, r2
 800e8b6:	781b      	ldrb	r3, [r3, #0]
 800e8b8:	617b      	str	r3, [r7, #20]
                if (pJPEG->ucPixelType == RGB565_LITTLE_ENDIAN)
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d141      	bne.n	800e948 <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0xb7a>
                {
                    if (bUseOdd2 || iCol != (iXCount2-1)) // only render if it won't go off the right edge
 800e8c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d104      	bne.n	800e8d4 <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0xb06>
 800e8ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e8cc:	3b01      	subs	r3, #1
 800e8ce:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e8d0:	429a      	cmp	r2, r3
 800e8d2:	d01f      	beq.n	800e914 <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0xb46>
                    {
                        JPEGPixel2LE(pOutput + 8+(iCol<<1), Y1, Y2, Cb, Cr);
 800e8d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e8d6:	005b      	lsls	r3, r3, #1
 800e8d8:	3308      	adds	r3, #8
 800e8da:	005b      	lsls	r3, r3, #1
 800e8dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e8de:	18d0      	adds	r0, r2, r3
 800e8e0:	69ba      	ldr	r2, [r7, #24]
 800e8e2:	697b      	ldr	r3, [r7, #20]
 800e8e4:	9300      	str	r3, [sp, #0]
 800e8e6:	4613      	mov	r3, r2
 800e8e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e8ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e8ec:	f7fe fdfa 	bl	800d4e4 <_ZL12JPEGPixel2LEPtiiii>
                        JPEGPixel2LE(pOutput+iPitch + 8+(iCol<<1), Y3, Y4, Cb, Cr);
 800e8f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e8f2:	005b      	lsls	r3, r3, #1
 800e8f4:	461a      	mov	r2, r3
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	4413      	add	r3, r2
 800e8fa:	3308      	adds	r3, #8
 800e8fc:	005b      	lsls	r3, r3, #1
 800e8fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e900:	18d0      	adds	r0, r2, r3
 800e902:	69ba      	ldr	r2, [r7, #24]
 800e904:	697b      	ldr	r3, [r7, #20]
 800e906:	9300      	str	r3, [sp, #0]
 800e908:	4613      	mov	r3, r2
 800e90a:	69fa      	ldr	r2, [r7, #28]
 800e90c:	6a39      	ldr	r1, [r7, #32]
 800e90e:	f7fe fde9 	bl	800d4e4 <_ZL12JPEGPixel2LEPtiiii>
 800e912:	e0a1      	b.n	800ea58 <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0xc8a>
                    }
                    else
                    {
                        JPEGPixelLE(pOutput+ 8+(iCol<<1), Y1, Cb, Cr);
 800e914:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e916:	005b      	lsls	r3, r3, #1
 800e918:	3308      	adds	r3, #8
 800e91a:	005b      	lsls	r3, r3, #1
 800e91c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e91e:	18d0      	adds	r0, r2, r3
 800e920:	69ba      	ldr	r2, [r7, #24]
 800e922:	697b      	ldr	r3, [r7, #20]
 800e924:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e926:	f7fe fcb9 	bl	800d29c <_ZL11JPEGPixelLEPtiii>
                        JPEGPixelLE(pOutput+iPitch+ 8+(iCol<<1), Y3, Cb, Cr);
 800e92a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e92c:	005b      	lsls	r3, r3, #1
 800e92e:	461a      	mov	r2, r3
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	4413      	add	r3, r2
 800e934:	3308      	adds	r3, #8
 800e936:	005b      	lsls	r3, r3, #1
 800e938:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e93a:	18d0      	adds	r0, r2, r3
 800e93c:	69ba      	ldr	r2, [r7, #24]
 800e93e:	697b      	ldr	r3, [r7, #20]
 800e940:	6a39      	ldr	r1, [r7, #32]
 800e942:	f7fe fcab 	bl	800d29c <_ZL11JPEGPixelLEPtiii>
 800e946:	e087      	b.n	800ea58 <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0xc8a>
                    }
                }
                else if (pJPEG->ucPixelType == RGB565_BIG_ENDIAN)
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e94e:	2b01      	cmp	r3, #1
 800e950:	d141      	bne.n	800e9d6 <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0xc08>
                {
                    if (bUseOdd2 || iCol != (iXCount2-1)) // only render if it won't go off the right edge
 800e952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e954:	2b00      	cmp	r3, #0
 800e956:	d104      	bne.n	800e962 <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0xb94>
 800e958:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e95a:	3b01      	subs	r3, #1
 800e95c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e95e:	429a      	cmp	r2, r3
 800e960:	d01f      	beq.n	800e9a2 <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0xbd4>
                    {
                        JPEGPixel2BE(pOutput + 8+(iCol<<1), Y1, Y2, Cb, Cr);
 800e962:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e964:	005b      	lsls	r3, r3, #1
 800e966:	3308      	adds	r3, #8
 800e968:	005b      	lsls	r3, r3, #1
 800e96a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e96c:	18d0      	adds	r0, r2, r3
 800e96e:	69ba      	ldr	r2, [r7, #24]
 800e970:	697b      	ldr	r3, [r7, #20]
 800e972:	9300      	str	r3, [sp, #0]
 800e974:	4613      	mov	r3, r2
 800e976:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e978:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e97a:	f7fe fe35 	bl	800d5e8 <_ZL12JPEGPixel2BEPtllll>
                        JPEGPixel2BE(pOutput+iPitch + 8+(iCol<<1), Y3, Y4, Cb, Cr);
 800e97e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e980:	005b      	lsls	r3, r3, #1
 800e982:	461a      	mov	r2, r3
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	4413      	add	r3, r2
 800e988:	3308      	adds	r3, #8
 800e98a:	005b      	lsls	r3, r3, #1
 800e98c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e98e:	18d0      	adds	r0, r2, r3
 800e990:	69ba      	ldr	r2, [r7, #24]
 800e992:	697b      	ldr	r3, [r7, #20]
 800e994:	9300      	str	r3, [sp, #0]
 800e996:	4613      	mov	r3, r2
 800e998:	69fa      	ldr	r2, [r7, #28]
 800e99a:	6a39      	ldr	r1, [r7, #32]
 800e99c:	f7fe fe24 	bl	800d5e8 <_ZL12JPEGPixel2BEPtllll>
 800e9a0:	e05a      	b.n	800ea58 <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0xc8a>
                    }
                    else
                    {
                        JPEGPixelBE(pOutput+ 8+(iCol<<1), Y1, Cb, Cr);
 800e9a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e9a4:	005b      	lsls	r3, r3, #1
 800e9a6:	3308      	adds	r3, #8
 800e9a8:	005b      	lsls	r3, r3, #1
 800e9aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e9ac:	18d0      	adds	r0, r2, r3
 800e9ae:	69ba      	ldr	r2, [r7, #24]
 800e9b0:	697b      	ldr	r3, [r7, #20]
 800e9b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e9b4:	f7fe fcca 	bl	800d34c <_ZL11JPEGPixelBEPtiii>
                        JPEGPixelBE(pOutput+iPitch+ 8+(iCol<<1), Y3, Cb, Cr);
 800e9b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e9ba:	005b      	lsls	r3, r3, #1
 800e9bc:	461a      	mov	r2, r3
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	4413      	add	r3, r2
 800e9c2:	3308      	adds	r3, #8
 800e9c4:	005b      	lsls	r3, r3, #1
 800e9c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e9c8:	18d0      	adds	r0, r2, r3
 800e9ca:	69ba      	ldr	r2, [r7, #24]
 800e9cc:	697b      	ldr	r3, [r7, #20]
 800e9ce:	6a39      	ldr	r1, [r7, #32]
 800e9d0:	f7fe fcbc 	bl	800d34c <_ZL11JPEGPixelBEPtiii>
 800e9d4:	e040      	b.n	800ea58 <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0xc8a>
                    }
                } else { // RGB8888
                    if (bUseOdd2 || iCol != (iXCount2-1)) // only render if it won't go off the right edge
 800e9d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d104      	bne.n	800e9e6 <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0xc18>
 800e9dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e9de:	3b01      	subs	r3, #1
 800e9e0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e9e2:	429a      	cmp	r2, r3
 800e9e4:	d01f      	beq.n	800ea26 <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0xc58>
                    {
                        JPEGPixel2RGB((uint32_t *)&pOutput[16+(iCol<<2)], Y1, Y2, Cb, Cr);
 800e9e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e9e8:	009b      	lsls	r3, r3, #2
 800e9ea:	3310      	adds	r3, #16
 800e9ec:	005b      	lsls	r3, r3, #1
 800e9ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e9f0:	18d0      	adds	r0, r2, r3
 800e9f2:	69ba      	ldr	r2, [r7, #24]
 800e9f4:	697b      	ldr	r3, [r7, #20]
 800e9f6:	9300      	str	r3, [sp, #0]
 800e9f8:	4613      	mov	r3, r2
 800e9fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e9fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e9fe:	f7fe fe7d 	bl	800d6fc <_ZL13JPEGPixel2RGBPmllll>
                        JPEGPixel2RGB((uint32_t *)&pOutput[2*(iPitch + 8+(iCol<<1))], Y3, Y4, Cb, Cr);
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	f103 0208 	add.w	r2, r3, #8
 800ea08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ea0a:	005b      	lsls	r3, r3, #1
 800ea0c:	4413      	add	r3, r2
 800ea0e:	009b      	lsls	r3, r3, #2
 800ea10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ea12:	18d0      	adds	r0, r2, r3
 800ea14:	69ba      	ldr	r2, [r7, #24]
 800ea16:	697b      	ldr	r3, [r7, #20]
 800ea18:	9300      	str	r3, [sp, #0]
 800ea1a:	4613      	mov	r3, r2
 800ea1c:	69fa      	ldr	r2, [r7, #28]
 800ea1e:	6a39      	ldr	r1, [r7, #32]
 800ea20:	f7fe fe6c 	bl	800d6fc <_ZL13JPEGPixel2RGBPmllll>
 800ea24:	e018      	b.n	800ea58 <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0xc8a>
                    }
                    else
                    {
                        JPEGPixelRGB((uint32_t *)&pOutput[16+(iCol<<2)], Y1, Cb, Cr);
 800ea26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ea28:	009b      	lsls	r3, r3, #2
 800ea2a:	3310      	adds	r3, #16
 800ea2c:	005b      	lsls	r3, r3, #1
 800ea2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ea30:	18d0      	adds	r0, r2, r3
 800ea32:	69ba      	ldr	r2, [r7, #24]
 800ea34:	697b      	ldr	r3, [r7, #20]
 800ea36:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ea38:	f7fe fce2 	bl	800d400 <_ZL12JPEGPixelRGBPmiii>
                        JPEGPixelRGB((uint32_t *)&pOutput[2*(iPitch+ 8+(iCol<<1))], Y3, Cb, Cr);
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	f103 0208 	add.w	r2, r3, #8
 800ea42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ea44:	005b      	lsls	r3, r3, #1
 800ea46:	4413      	add	r3, r2
 800ea48:	009b      	lsls	r3, r3, #2
 800ea4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ea4c:	18d0      	adds	r0, r2, r3
 800ea4e:	69ba      	ldr	r2, [r7, #24]
 800ea50:	697b      	ldr	r3, [r7, #20]
 800ea52:	6a39      	ldr	r1, [r7, #32]
 800ea54:	f7fe fcd4 	bl	800d400 <_ZL12JPEGPixelRGBPmiii>
                    }
                } // RGB8888
            }
            // for bottom left block
            Y1 = pY[iCol*2+DCTSIZE*4];
 800ea58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ea5a:	005b      	lsls	r3, r3, #1
 800ea5c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800ea60:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ea62:	4413      	add	r3, r2
 800ea64:	781b      	ldrb	r3, [r3, #0]
 800ea66:	62bb      	str	r3, [r7, #40]	; 0x28
            Y2 = pY[iCol*2+1+DCTSIZE*4];
 800ea68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ea6a:	005b      	lsls	r3, r3, #1
 800ea6c:	f203 1301 	addw	r3, r3, #257	; 0x101
 800ea70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ea72:	4413      	add	r3, r2
 800ea74:	781b      	ldrb	r3, [r3, #0]
 800ea76:	627b      	str	r3, [r7, #36]	; 0x24
            Y3 = pY[iCol*2+8+DCTSIZE*4];
 800ea78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ea7a:	005b      	lsls	r3, r3, #1
 800ea7c:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800ea80:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ea82:	4413      	add	r3, r2
 800ea84:	781b      	ldrb	r3, [r3, #0]
 800ea86:	623b      	str	r3, [r7, #32]
            Y4 = pY[iCol*2+9+DCTSIZE*4];
 800ea88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ea8a:	005b      	lsls	r3, r3, #1
 800ea8c:	f203 1309 	addw	r3, r3, #265	; 0x109
 800ea90:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ea92:	4413      	add	r3, r2
 800ea94:	781b      	ldrb	r3, [r3, #0]
 800ea96:	61fb      	str	r3, [r7, #28]
            Y1 <<= 12;  // scale to level of conversion table
 800ea98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea9a:	031b      	lsls	r3, r3, #12
 800ea9c:	62bb      	str	r3, [r7, #40]	; 0x28
            Y2 <<= 12;
 800ea9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaa0:	031b      	lsls	r3, r3, #12
 800eaa2:	627b      	str	r3, [r7, #36]	; 0x24
            Y3 <<= 12;
 800eaa4:	6a3b      	ldr	r3, [r7, #32]
 800eaa6:	031b      	lsls	r3, r3, #12
 800eaa8:	623b      	str	r3, [r7, #32]
            Y4 <<= 12;
 800eaaa:	69fb      	ldr	r3, [r7, #28]
 800eaac:	031b      	lsls	r3, r3, #12
 800eaae:	61fb      	str	r3, [r7, #28]
            Cb = pCb[iCol+32];
 800eab0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eab2:	3320      	adds	r3, #32
 800eab4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800eab6:	4413      	add	r3, r2
 800eab8:	781b      	ldrb	r3, [r3, #0]
 800eaba:	61bb      	str	r3, [r7, #24]
            Cr = pCr[iCol+32];
 800eabc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eabe:	3320      	adds	r3, #32
 800eac0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800eac2:	4413      	add	r3, r2
 800eac4:	781b      	ldrb	r3, [r3, #0]
 800eac6:	617b      	str	r3, [r7, #20]
            if (pJPEG->ucPixelType == RGB565_LITTLE_ENDIAN)
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d147      	bne.n	800eb62 <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0xd94>
            {
                if (bUseOdd1 || iCol != (iXCount1-1)) // only render if it won't go off the right edge
 800ead2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d104      	bne.n	800eae2 <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0xd14>
 800ead8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eada:	3b01      	subs	r3, #1
 800eadc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800eade:	429a      	cmp	r2, r3
 800eae0:	d022      	beq.n	800eb28 <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0xd5a>
                {
                    JPEGPixel2LE(pOutput+iPitch*8+ (iCol<<1), Y1, Y2, Cb, Cr);
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	00db      	lsls	r3, r3, #3
 800eae6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800eae8:	0052      	lsls	r2, r2, #1
 800eaea:	4413      	add	r3, r2
 800eaec:	005b      	lsls	r3, r3, #1
 800eaee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eaf0:	18d0      	adds	r0, r2, r3
 800eaf2:	69ba      	ldr	r2, [r7, #24]
 800eaf4:	697b      	ldr	r3, [r7, #20]
 800eaf6:	9300      	str	r3, [sp, #0]
 800eaf8:	4613      	mov	r3, r2
 800eafa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eafc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800eafe:	f7fe fcf1 	bl	800d4e4 <_ZL12JPEGPixel2LEPtiiii>
                    JPEGPixel2LE(pOutput+iPitch*9+ (iCol<<1), Y3, Y4, Cb, Cr);
 800eb02:	687a      	ldr	r2, [r7, #4]
 800eb04:	4613      	mov	r3, r2
 800eb06:	00db      	lsls	r3, r3, #3
 800eb08:	4413      	add	r3, r2
 800eb0a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800eb0c:	0052      	lsls	r2, r2, #1
 800eb0e:	4413      	add	r3, r2
 800eb10:	005b      	lsls	r3, r3, #1
 800eb12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eb14:	18d0      	adds	r0, r2, r3
 800eb16:	69ba      	ldr	r2, [r7, #24]
 800eb18:	697b      	ldr	r3, [r7, #20]
 800eb1a:	9300      	str	r3, [sp, #0]
 800eb1c:	4613      	mov	r3, r2
 800eb1e:	69fa      	ldr	r2, [r7, #28]
 800eb20:	6a39      	ldr	r1, [r7, #32]
 800eb22:	f7fe fcdf 	bl	800d4e4 <_ZL12JPEGPixel2LEPtiiii>
 800eb26:	e0b0      	b.n	800ec8a <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0xebc>
                }
                else
                {
                    JPEGPixelLE(pOutput+iPitch*8+ (iCol<<1), Y1, Cb, Cr);
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	00db      	lsls	r3, r3, #3
 800eb2c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800eb2e:	0052      	lsls	r2, r2, #1
 800eb30:	4413      	add	r3, r2
 800eb32:	005b      	lsls	r3, r3, #1
 800eb34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eb36:	18d0      	adds	r0, r2, r3
 800eb38:	69ba      	ldr	r2, [r7, #24]
 800eb3a:	697b      	ldr	r3, [r7, #20]
 800eb3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800eb3e:	f7fe fbad 	bl	800d29c <_ZL11JPEGPixelLEPtiii>
                    JPEGPixelLE(pOutput+iPitch*9+ (iCol<<1), Y3, Cb, Cr);
 800eb42:	687a      	ldr	r2, [r7, #4]
 800eb44:	4613      	mov	r3, r2
 800eb46:	00db      	lsls	r3, r3, #3
 800eb48:	4413      	add	r3, r2
 800eb4a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800eb4c:	0052      	lsls	r2, r2, #1
 800eb4e:	4413      	add	r3, r2
 800eb50:	005b      	lsls	r3, r3, #1
 800eb52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eb54:	18d0      	adds	r0, r2, r3
 800eb56:	69ba      	ldr	r2, [r7, #24]
 800eb58:	697b      	ldr	r3, [r7, #20]
 800eb5a:	6a39      	ldr	r1, [r7, #32]
 800eb5c:	f7fe fb9e 	bl	800d29c <_ZL11JPEGPixelLEPtiii>
 800eb60:	e093      	b.n	800ec8a <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0xebc>
                }
            }
            else if (pJPEG->ucPixelType == RGB565_BIG_ENDIAN)
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eb68:	2b01      	cmp	r3, #1
 800eb6a:	d147      	bne.n	800ebfc <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0xe2e>
            {
                if (bUseOdd1 || iCol != (iXCount1-1)) // only render if it won't go off the right edge
 800eb6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d104      	bne.n	800eb7c <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0xdae>
 800eb72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eb74:	3b01      	subs	r3, #1
 800eb76:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800eb78:	429a      	cmp	r2, r3
 800eb7a:	d022      	beq.n	800ebc2 <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0xdf4>
                {
                    JPEGPixel2BE(pOutput+iPitch*8+ (iCol<<1), Y1, Y2, Cb, Cr);
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	00db      	lsls	r3, r3, #3
 800eb80:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800eb82:	0052      	lsls	r2, r2, #1
 800eb84:	4413      	add	r3, r2
 800eb86:	005b      	lsls	r3, r3, #1
 800eb88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eb8a:	18d0      	adds	r0, r2, r3
 800eb8c:	69ba      	ldr	r2, [r7, #24]
 800eb8e:	697b      	ldr	r3, [r7, #20]
 800eb90:	9300      	str	r3, [sp, #0]
 800eb92:	4613      	mov	r3, r2
 800eb94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eb96:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800eb98:	f7fe fd26 	bl	800d5e8 <_ZL12JPEGPixel2BEPtllll>
                    JPEGPixel2BE(pOutput+iPitch*9+ (iCol<<1), Y3, Y4, Cb, Cr);
 800eb9c:	687a      	ldr	r2, [r7, #4]
 800eb9e:	4613      	mov	r3, r2
 800eba0:	00db      	lsls	r3, r3, #3
 800eba2:	4413      	add	r3, r2
 800eba4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800eba6:	0052      	lsls	r2, r2, #1
 800eba8:	4413      	add	r3, r2
 800ebaa:	005b      	lsls	r3, r3, #1
 800ebac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ebae:	18d0      	adds	r0, r2, r3
 800ebb0:	69ba      	ldr	r2, [r7, #24]
 800ebb2:	697b      	ldr	r3, [r7, #20]
 800ebb4:	9300      	str	r3, [sp, #0]
 800ebb6:	4613      	mov	r3, r2
 800ebb8:	69fa      	ldr	r2, [r7, #28]
 800ebba:	6a39      	ldr	r1, [r7, #32]
 800ebbc:	f7fe fd14 	bl	800d5e8 <_ZL12JPEGPixel2BEPtllll>
 800ebc0:	e063      	b.n	800ec8a <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0xebc>
                }
                else
                {
                    JPEGPixelBE(pOutput+iPitch*8+ (iCol<<1), Y1, Cb, Cr);
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	00db      	lsls	r3, r3, #3
 800ebc6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ebc8:	0052      	lsls	r2, r2, #1
 800ebca:	4413      	add	r3, r2
 800ebcc:	005b      	lsls	r3, r3, #1
 800ebce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ebd0:	18d0      	adds	r0, r2, r3
 800ebd2:	69ba      	ldr	r2, [r7, #24]
 800ebd4:	697b      	ldr	r3, [r7, #20]
 800ebd6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ebd8:	f7fe fbb8 	bl	800d34c <_ZL11JPEGPixelBEPtiii>
                    JPEGPixelBE(pOutput+iPitch*9+ (iCol<<1), Y3, Cb, Cr);
 800ebdc:	687a      	ldr	r2, [r7, #4]
 800ebde:	4613      	mov	r3, r2
 800ebe0:	00db      	lsls	r3, r3, #3
 800ebe2:	4413      	add	r3, r2
 800ebe4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ebe6:	0052      	lsls	r2, r2, #1
 800ebe8:	4413      	add	r3, r2
 800ebea:	005b      	lsls	r3, r3, #1
 800ebec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ebee:	18d0      	adds	r0, r2, r3
 800ebf0:	69ba      	ldr	r2, [r7, #24]
 800ebf2:	697b      	ldr	r3, [r7, #20]
 800ebf4:	6a39      	ldr	r1, [r7, #32]
 800ebf6:	f7fe fba9 	bl	800d34c <_ZL11JPEGPixelBEPtiii>
 800ebfa:	e046      	b.n	800ec8a <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0xebc>
                }
            } else { // RGB8888
                if (bUseOdd1 || iCol != (iXCount1-1)) // only render if it won't go off the right edge
 800ebfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d104      	bne.n	800ec0c <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0xe3e>
 800ec02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ec04:	3b01      	subs	r3, #1
 800ec06:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ec08:	429a      	cmp	r2, r3
 800ec0a:	d022      	beq.n	800ec52 <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0xe84>
                {
                    JPEGPixel2RGB((uint32_t *)&pOutput[2*(iPitch*8+ (iCol<<1))], Y1, Y2, Cb, Cr);
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	00da      	lsls	r2, r3, #3
 800ec10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec12:	005b      	lsls	r3, r3, #1
 800ec14:	4413      	add	r3, r2
 800ec16:	009b      	lsls	r3, r3, #2
 800ec18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ec1a:	18d0      	adds	r0, r2, r3
 800ec1c:	69ba      	ldr	r2, [r7, #24]
 800ec1e:	697b      	ldr	r3, [r7, #20]
 800ec20:	9300      	str	r3, [sp, #0]
 800ec22:	4613      	mov	r3, r2
 800ec24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ec26:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ec28:	f7fe fd68 	bl	800d6fc <_ZL13JPEGPixel2RGBPmllll>
                    JPEGPixel2RGB((uint32_t *)&pOutput[2*(iPitch*9+ (iCol<<1))], Y3, Y4, Cb, Cr);
 800ec2c:	687a      	ldr	r2, [r7, #4]
 800ec2e:	4613      	mov	r3, r2
 800ec30:	00db      	lsls	r3, r3, #3
 800ec32:	441a      	add	r2, r3
 800ec34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec36:	005b      	lsls	r3, r3, #1
 800ec38:	4413      	add	r3, r2
 800ec3a:	009b      	lsls	r3, r3, #2
 800ec3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ec3e:	18d0      	adds	r0, r2, r3
 800ec40:	69ba      	ldr	r2, [r7, #24]
 800ec42:	697b      	ldr	r3, [r7, #20]
 800ec44:	9300      	str	r3, [sp, #0]
 800ec46:	4613      	mov	r3, r2
 800ec48:	69fa      	ldr	r2, [r7, #28]
 800ec4a:	6a39      	ldr	r1, [r7, #32]
 800ec4c:	f7fe fd56 	bl	800d6fc <_ZL13JPEGPixel2RGBPmllll>
 800ec50:	e01b      	b.n	800ec8a <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0xebc>
                }
                else
                {
                    JPEGPixelRGB((uint32_t *)&pOutput[2*(iPitch*8+(iCol<<1))], Y1, Cb, Cr);
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	00da      	lsls	r2, r3, #3
 800ec56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec58:	005b      	lsls	r3, r3, #1
 800ec5a:	4413      	add	r3, r2
 800ec5c:	009b      	lsls	r3, r3, #2
 800ec5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ec60:	18d0      	adds	r0, r2, r3
 800ec62:	69ba      	ldr	r2, [r7, #24]
 800ec64:	697b      	ldr	r3, [r7, #20]
 800ec66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ec68:	f7fe fbca 	bl	800d400 <_ZL12JPEGPixelRGBPmiii>
                    JPEGPixelRGB((uint32_t *)&pOutput[2*(iPitch*9+ (iCol<<1))], Y3, Cb, Cr);
 800ec6c:	687a      	ldr	r2, [r7, #4]
 800ec6e:	4613      	mov	r3, r2
 800ec70:	00db      	lsls	r3, r3, #3
 800ec72:	441a      	add	r2, r3
 800ec74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec76:	005b      	lsls	r3, r3, #1
 800ec78:	4413      	add	r3, r2
 800ec7a:	009b      	lsls	r3, r3, #2
 800ec7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ec7e:	18d0      	adds	r0, r2, r3
 800ec80:	69ba      	ldr	r2, [r7, #24]
 800ec82:	697b      	ldr	r3, [r7, #20]
 800ec84:	6a39      	ldr	r1, [r7, #32]
 800ec86:	f7fe fbbb 	bl	800d400 <_ZL12JPEGPixelRGBPmiii>
                }
            } // RGB8888
            // for bottom right block
            if (iCol < iXCount2)
 800ec8a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ec8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ec8e:	429a      	cmp	r2, r3
 800ec90:	f280 8127 	bge.w	800eee2 <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0x1114>
            {
                Y1 = pY[iCol*2+DCTSIZE*6];
 800ec94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec96:	005b      	lsls	r3, r3, #1
 800ec98:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800ec9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ec9e:	4413      	add	r3, r2
 800eca0:	781b      	ldrb	r3, [r3, #0]
 800eca2:	62bb      	str	r3, [r7, #40]	; 0x28
                Y2 = pY[iCol*2+1+DCTSIZE*6];
 800eca4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eca6:	005b      	lsls	r3, r3, #1
 800eca8:	f203 1381 	addw	r3, r3, #385	; 0x181
 800ecac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ecae:	4413      	add	r3, r2
 800ecb0:	781b      	ldrb	r3, [r3, #0]
 800ecb2:	627b      	str	r3, [r7, #36]	; 0x24
                Y3 = pY[iCol*2+8+DCTSIZE*6];
 800ecb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ecb6:	005b      	lsls	r3, r3, #1
 800ecb8:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800ecbc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ecbe:	4413      	add	r3, r2
 800ecc0:	781b      	ldrb	r3, [r3, #0]
 800ecc2:	623b      	str	r3, [r7, #32]
                Y4 = pY[iCol*2+9+DCTSIZE*6];
 800ecc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ecc6:	005b      	lsls	r3, r3, #1
 800ecc8:	f203 1389 	addw	r3, r3, #393	; 0x189
 800eccc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ecce:	4413      	add	r3, r2
 800ecd0:	781b      	ldrb	r3, [r3, #0]
 800ecd2:	61fb      	str	r3, [r7, #28]
                Y1 <<= 12;  // scale to level of conversion table
 800ecd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecd6:	031b      	lsls	r3, r3, #12
 800ecd8:	62bb      	str	r3, [r7, #40]	; 0x28
                Y2 <<= 12;
 800ecda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecdc:	031b      	lsls	r3, r3, #12
 800ecde:	627b      	str	r3, [r7, #36]	; 0x24
                Y3 <<= 12;
 800ece0:	6a3b      	ldr	r3, [r7, #32]
 800ece2:	031b      	lsls	r3, r3, #12
 800ece4:	623b      	str	r3, [r7, #32]
                Y4 <<= 12;
 800ece6:	69fb      	ldr	r3, [r7, #28]
 800ece8:	031b      	lsls	r3, r3, #12
 800ecea:	61fb      	str	r3, [r7, #28]
                Cb = pCb[iCol+36];
 800ecec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ecee:	3324      	adds	r3, #36	; 0x24
 800ecf0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ecf2:	4413      	add	r3, r2
 800ecf4:	781b      	ldrb	r3, [r3, #0]
 800ecf6:	61bb      	str	r3, [r7, #24]
                Cr = pCr[iCol+36];
 800ecf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ecfa:	3324      	adds	r3, #36	; 0x24
 800ecfc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ecfe:	4413      	add	r3, r2
 800ed00:	781b      	ldrb	r3, [r3, #0]
 800ed02:	617b      	str	r3, [r7, #20]
                if (pJPEG->ucPixelType == RGB565_LITTLE_ENDIAN)
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d14b      	bne.n	800eda6 <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0xfd8>
                {
                    if (bUseOdd2 || iCol != (iXCount2-1)) // only render if it won't go off the right edge
 800ed0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d104      	bne.n	800ed1e <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0xf50>
 800ed14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ed16:	3b01      	subs	r3, #1
 800ed18:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ed1a:	429a      	cmp	r2, r3
 800ed1c:	d024      	beq.n	800ed68 <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0xf9a>
                    {
                        JPEGPixel2LE(pOutput+iPitch*8+ 8+(iCol<<1), Y1, Y2, Cb, Cr);
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	3301      	adds	r3, #1
 800ed22:	00db      	lsls	r3, r3, #3
 800ed24:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ed26:	0052      	lsls	r2, r2, #1
 800ed28:	4413      	add	r3, r2
 800ed2a:	005b      	lsls	r3, r3, #1
 800ed2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ed2e:	18d0      	adds	r0, r2, r3
 800ed30:	69ba      	ldr	r2, [r7, #24]
 800ed32:	697b      	ldr	r3, [r7, #20]
 800ed34:	9300      	str	r3, [sp, #0]
 800ed36:	4613      	mov	r3, r2
 800ed38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed3a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ed3c:	f7fe fbd2 	bl	800d4e4 <_ZL12JPEGPixel2LEPtiiii>
                        JPEGPixel2LE(pOutput+iPitch*9+ 8+(iCol<<1), Y3, Y4, Cb, Cr);
 800ed40:	687a      	ldr	r2, [r7, #4]
 800ed42:	4613      	mov	r3, r2
 800ed44:	00db      	lsls	r3, r3, #3
 800ed46:	4413      	add	r3, r2
 800ed48:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ed4a:	0052      	lsls	r2, r2, #1
 800ed4c:	4413      	add	r3, r2
 800ed4e:	3308      	adds	r3, #8
 800ed50:	005b      	lsls	r3, r3, #1
 800ed52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ed54:	18d0      	adds	r0, r2, r3
 800ed56:	69ba      	ldr	r2, [r7, #24]
 800ed58:	697b      	ldr	r3, [r7, #20]
 800ed5a:	9300      	str	r3, [sp, #0]
 800ed5c:	4613      	mov	r3, r2
 800ed5e:	69fa      	ldr	r2, [r7, #28]
 800ed60:	6a39      	ldr	r1, [r7, #32]
 800ed62:	f7fe fbbf 	bl	800d4e4 <_ZL12JPEGPixel2LEPtiiii>
 800ed66:	e0bc      	b.n	800eee2 <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0x1114>
                    }
                    else
                    {
                        JPEGPixelLE(pOutput+iPitch*8+ 8+(iCol<<1), Y1, Cb, Cr);
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	3301      	adds	r3, #1
 800ed6c:	00db      	lsls	r3, r3, #3
 800ed6e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ed70:	0052      	lsls	r2, r2, #1
 800ed72:	4413      	add	r3, r2
 800ed74:	005b      	lsls	r3, r3, #1
 800ed76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ed78:	18d0      	adds	r0, r2, r3
 800ed7a:	69ba      	ldr	r2, [r7, #24]
 800ed7c:	697b      	ldr	r3, [r7, #20]
 800ed7e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ed80:	f7fe fa8c 	bl	800d29c <_ZL11JPEGPixelLEPtiii>
                        JPEGPixelLE(pOutput+iPitch*9+ 8+(iCol<<1), Y3, Cb, Cr);
 800ed84:	687a      	ldr	r2, [r7, #4]
 800ed86:	4613      	mov	r3, r2
 800ed88:	00db      	lsls	r3, r3, #3
 800ed8a:	4413      	add	r3, r2
 800ed8c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ed8e:	0052      	lsls	r2, r2, #1
 800ed90:	4413      	add	r3, r2
 800ed92:	3308      	adds	r3, #8
 800ed94:	005b      	lsls	r3, r3, #1
 800ed96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ed98:	18d0      	adds	r0, r2, r3
 800ed9a:	69ba      	ldr	r2, [r7, #24]
 800ed9c:	697b      	ldr	r3, [r7, #20]
 800ed9e:	6a39      	ldr	r1, [r7, #32]
 800eda0:	f7fe fa7c 	bl	800d29c <_ZL11JPEGPixelLEPtiii>
 800eda4:	e09d      	b.n	800eee2 <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0x1114>
                    }
                }
                else if (pJPEG->ucPixelType == RGB565_BIG_ENDIAN)
 800eda6:	68fb      	ldr	r3, [r7, #12]
 800eda8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800edac:	2b01      	cmp	r3, #1
 800edae:	d14b      	bne.n	800ee48 <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0x107a>
                {
                    if (bUseOdd2 || iCol != (iXCount2-1)) // only render if it won't go off the right edge
 800edb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d104      	bne.n	800edc0 <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0xff2>
 800edb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800edb8:	3b01      	subs	r3, #1
 800edba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800edbc:	429a      	cmp	r2, r3
 800edbe:	d024      	beq.n	800ee0a <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0x103c>
                    {
                        JPEGPixel2BE(pOutput+iPitch*8+ 8+(iCol<<1), Y1, Y2, Cb, Cr);
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	3301      	adds	r3, #1
 800edc4:	00db      	lsls	r3, r3, #3
 800edc6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800edc8:	0052      	lsls	r2, r2, #1
 800edca:	4413      	add	r3, r2
 800edcc:	005b      	lsls	r3, r3, #1
 800edce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800edd0:	18d0      	adds	r0, r2, r3
 800edd2:	69ba      	ldr	r2, [r7, #24]
 800edd4:	697b      	ldr	r3, [r7, #20]
 800edd6:	9300      	str	r3, [sp, #0]
 800edd8:	4613      	mov	r3, r2
 800edda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eddc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800edde:	f7fe fc03 	bl	800d5e8 <_ZL12JPEGPixel2BEPtllll>
                        JPEGPixel2BE(pOutput+iPitch*9+ 8+(iCol<<1), Y3, Y4, Cb, Cr);
 800ede2:	687a      	ldr	r2, [r7, #4]
 800ede4:	4613      	mov	r3, r2
 800ede6:	00db      	lsls	r3, r3, #3
 800ede8:	4413      	add	r3, r2
 800edea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800edec:	0052      	lsls	r2, r2, #1
 800edee:	4413      	add	r3, r2
 800edf0:	3308      	adds	r3, #8
 800edf2:	005b      	lsls	r3, r3, #1
 800edf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800edf6:	18d0      	adds	r0, r2, r3
 800edf8:	69ba      	ldr	r2, [r7, #24]
 800edfa:	697b      	ldr	r3, [r7, #20]
 800edfc:	9300      	str	r3, [sp, #0]
 800edfe:	4613      	mov	r3, r2
 800ee00:	69fa      	ldr	r2, [r7, #28]
 800ee02:	6a39      	ldr	r1, [r7, #32]
 800ee04:	f7fe fbf0 	bl	800d5e8 <_ZL12JPEGPixel2BEPtllll>
 800ee08:	e06b      	b.n	800eee2 <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0x1114>
                    }
                    else
                    {
                        JPEGPixelBE(pOutput+iPitch*8+ 8+(iCol<<1), Y1, Cb, Cr);
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	3301      	adds	r3, #1
 800ee0e:	00db      	lsls	r3, r3, #3
 800ee10:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ee12:	0052      	lsls	r2, r2, #1
 800ee14:	4413      	add	r3, r2
 800ee16:	005b      	lsls	r3, r3, #1
 800ee18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ee1a:	18d0      	adds	r0, r2, r3
 800ee1c:	69ba      	ldr	r2, [r7, #24]
 800ee1e:	697b      	ldr	r3, [r7, #20]
 800ee20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ee22:	f7fe fa93 	bl	800d34c <_ZL11JPEGPixelBEPtiii>
                        JPEGPixelBE(pOutput+iPitch*9+ 8+(iCol<<1), Y3, Cb, Cr);
 800ee26:	687a      	ldr	r2, [r7, #4]
 800ee28:	4613      	mov	r3, r2
 800ee2a:	00db      	lsls	r3, r3, #3
 800ee2c:	4413      	add	r3, r2
 800ee2e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ee30:	0052      	lsls	r2, r2, #1
 800ee32:	4413      	add	r3, r2
 800ee34:	3308      	adds	r3, #8
 800ee36:	005b      	lsls	r3, r3, #1
 800ee38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ee3a:	18d0      	adds	r0, r2, r3
 800ee3c:	69ba      	ldr	r2, [r7, #24]
 800ee3e:	697b      	ldr	r3, [r7, #20]
 800ee40:	6a39      	ldr	r1, [r7, #32]
 800ee42:	f7fe fa83 	bl	800d34c <_ZL11JPEGPixelBEPtiii>
 800ee46:	e04c      	b.n	800eee2 <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0x1114>
                    }
                } else { // RGB8888
                    if (bUseOdd2 || iCol != (iXCount2-1)) // only render if it won't go off the right edge
 800ee48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	d104      	bne.n	800ee58 <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0x108a>
 800ee4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ee50:	3b01      	subs	r3, #1
 800ee52:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ee54:	429a      	cmp	r2, r3
 800ee56:	d025      	beq.n	800eea4 <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0x10d6>
                    {
                        JPEGPixel2RGB((uint32_t *)&pOutput[2*(iPitch*8+ 8+(iCol<<1))], Y1, Y2, Cb, Cr);
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	3301      	adds	r3, #1
 800ee5c:	00da      	lsls	r2, r3, #3
 800ee5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ee60:	005b      	lsls	r3, r3, #1
 800ee62:	4413      	add	r3, r2
 800ee64:	009b      	lsls	r3, r3, #2
 800ee66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ee68:	18d0      	adds	r0, r2, r3
 800ee6a:	69ba      	ldr	r2, [r7, #24]
 800ee6c:	697b      	ldr	r3, [r7, #20]
 800ee6e:	9300      	str	r3, [sp, #0]
 800ee70:	4613      	mov	r3, r2
 800ee72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ee74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ee76:	f7fe fc41 	bl	800d6fc <_ZL13JPEGPixel2RGBPmllll>
                        JPEGPixel2RGB((uint32_t *)&pOutput[2*(iPitch*9+ 8+(iCol<<1))], Y3, Y4, Cb, Cr);
 800ee7a:	687a      	ldr	r2, [r7, #4]
 800ee7c:	4613      	mov	r3, r2
 800ee7e:	00db      	lsls	r3, r3, #3
 800ee80:	4413      	add	r3, r2
 800ee82:	f103 0208 	add.w	r2, r3, #8
 800ee86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ee88:	005b      	lsls	r3, r3, #1
 800ee8a:	4413      	add	r3, r2
 800ee8c:	009b      	lsls	r3, r3, #2
 800ee8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ee90:	18d0      	adds	r0, r2, r3
 800ee92:	69ba      	ldr	r2, [r7, #24]
 800ee94:	697b      	ldr	r3, [r7, #20]
 800ee96:	9300      	str	r3, [sp, #0]
 800ee98:	4613      	mov	r3, r2
 800ee9a:	69fa      	ldr	r2, [r7, #28]
 800ee9c:	6a39      	ldr	r1, [r7, #32]
 800ee9e:	f7fe fc2d 	bl	800d6fc <_ZL13JPEGPixel2RGBPmllll>
 800eea2:	e01e      	b.n	800eee2 <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0x1114>
                    }
                    else
                    {
                        JPEGPixelRGB((uint32_t *)&pOutput[2*(iPitch*8+ 8+(iCol<<1))], Y1, Cb, Cr);
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	3301      	adds	r3, #1
 800eea8:	00da      	lsls	r2, r3, #3
 800eeaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eeac:	005b      	lsls	r3, r3, #1
 800eeae:	4413      	add	r3, r2
 800eeb0:	009b      	lsls	r3, r3, #2
 800eeb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eeb4:	18d0      	adds	r0, r2, r3
 800eeb6:	69ba      	ldr	r2, [r7, #24]
 800eeb8:	697b      	ldr	r3, [r7, #20]
 800eeba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800eebc:	f7fe faa0 	bl	800d400 <_ZL12JPEGPixelRGBPmiii>
                        JPEGPixelRGB((uint32_t *)&pOutput[2*(iPitch*9+ 8+(iCol<<1))], Y3, Cb, Cr);
 800eec0:	687a      	ldr	r2, [r7, #4]
 800eec2:	4613      	mov	r3, r2
 800eec4:	00db      	lsls	r3, r3, #3
 800eec6:	4413      	add	r3, r2
 800eec8:	f103 0208 	add.w	r2, r3, #8
 800eecc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eece:	005b      	lsls	r3, r3, #1
 800eed0:	4413      	add	r3, r2
 800eed2:	009b      	lsls	r3, r3, #2
 800eed4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eed6:	18d0      	adds	r0, r2, r3
 800eed8:	69ba      	ldr	r2, [r7, #24]
 800eeda:	697b      	ldr	r3, [r7, #20]
 800eedc:	6a39      	ldr	r1, [r7, #32]
 800eede:	f7fe fa8f 	bl	800d400 <_ZL12JPEGPixelRGBPmiii>
        for (iCol=0; iCol<iXCount1; iCol++) // up to 4 cols to do
 800eee2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eee4:	3301      	adds	r3, #1
 800eee6:	653b      	str	r3, [r7, #80]	; 0x50
 800eee8:	f7ff bbb6 	b.w	800e658 <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0x88a>
                    }
                } // RGB8888
            }
        } // for each column
        pY += 16; // skip to next line of source pixels
 800eeec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eeee:	3310      	adds	r3, #16
 800eef0:	647b      	str	r3, [r7, #68]	; 0x44
        pCb += 8;
 800eef2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eef4:	3308      	adds	r3, #8
 800eef6:	63fb      	str	r3, [r7, #60]	; 0x3c
        pCr += 8;
 800eef8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eefa:	3308      	adds	r3, #8
 800eefc:	643b      	str	r3, [r7, #64]	; 0x40
        pOutput += iPitch*2;
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	009b      	lsls	r3, r3, #2
 800ef02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ef04:	4413      	add	r3, r2
 800ef06:	633b      	str	r3, [r7, #48]	; 0x30
        if (pJPEG->ucPixelType == RGB8888) {
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ef0e:	2b02      	cmp	r3, #2
 800ef10:	d104      	bne.n	800ef1c <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0x114e>
            pOutput += iPitch*2;
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	009b      	lsls	r3, r3, #2
 800ef16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ef18:	4413      	add	r3, r2
 800ef1a:	633b      	str	r3, [r7, #48]	; 0x30
    for (iRow=0; iRow<iYCount; iRow++) // up to 4 rows to do
 800ef1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ef1e:	3301      	adds	r3, #1
 800ef20:	657b      	str	r3, [r7, #84]	; 0x54
 800ef22:	f7ff bb92 	b.w	800e64a <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0x87c>
        return;
 800ef26:	bf00      	nop
 800ef28:	e000      	b.n	800ef2c <_ZL12JPEGPutMCU22P14jpeg_image_tagii+0x115e>
        return;
 800ef2a:	bf00      	nop
        }
    }
} /* JPEGPutMCU22() */
 800ef2c:	3758      	adds	r7, #88	; 0x58
 800ef2e:	46bd      	mov	sp, r7
 800ef30:	bd80      	pop	{r7, pc}

0800ef32 <_ZL12JPEGPutMCU12P14jpeg_image_tagii>:

static void JPEGPutMCU12(JPEGIMAGE *pJPEG, int x, int iPitch)
{
 800ef32:	b580      	push	{r7, lr}
 800ef34:	b090      	sub	sp, #64	; 0x40
 800ef36:	af00      	add	r7, sp, #0
 800ef38:	60f8      	str	r0, [r7, #12]
 800ef3a:	60b9      	str	r1, [r7, #8]
 800ef3c:	607a      	str	r2, [r7, #4]
    uint32_t Cr,Cb;
    signed int Y1, Y2;
    int iRow, iCol, iXCount, iYCount;
    uint8_t *pY, *pCr, *pCb;
    uint16_t *pOutput = &pJPEG->usPixels[x];
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800ef44:	68bb      	ldr	r3, [r7, #8]
 800ef46:	005b      	lsls	r3, r3, #1
 800ef48:	4413      	add	r3, r2
 800ef4a:	613b      	str	r3, [r7, #16]
    
    if (pJPEG->ucPixelType == RGB8888) {
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ef52:	2b02      	cmp	r3, #2
 800ef54:	d104      	bne.n	800ef60 <_ZL12JPEGPutMCU12P14jpeg_image_tagii+0x2e>
        pOutput += x; // 4 bytes per pixel, not 2
 800ef56:	693a      	ldr	r2, [r7, #16]
 800ef58:	68bb      	ldr	r3, [r7, #8]
 800ef5a:	005b      	lsls	r3, r3, #1
 800ef5c:	4413      	add	r3, r2
 800ef5e:	613b      	str	r3, [r7, #16]
    }   

    pY  = (uint8_t *)&pJPEG->sMCUs[0*DCTSIZE];
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ef66:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800ef6a:	637b      	str	r3, [r7, #52]	; 0x34
    pCb = (uint8_t *)&pJPEG->sMCUs[2*DCTSIZE];
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ef72:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800ef76:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800ef7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    pCr = (uint8_t *)&pJPEG->sMCUs[3*DCTSIZE];
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ef82:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800ef86:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800ef8a:	633b      	str	r3, [r7, #48]	; 0x30
    
    if (pJPEG->iOptions & JPEG_SCALE_HALF)
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ef90:	f003 0302 	and.w	r3, r3, #2
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d07d      	beq.n	800f094 <_ZL12JPEGPutMCU12P14jpeg_image_tagii+0x162>
    {
        for (iRow=0; iRow<8; iRow++)
 800ef98:	2300      	movs	r3, #0
 800ef9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ef9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef9e:	2b07      	cmp	r3, #7
 800efa0:	f300 82c5 	bgt.w	800f52e <_ZL12JPEGPutMCU12P14jpeg_image_tagii+0x5fc>
        {
            for (iCol=0; iCol<4; iCol++)
 800efa4:	2300      	movs	r3, #0
 800efa6:	63bb      	str	r3, [r7, #56]	; 0x38
 800efa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efaa:	2b03      	cmp	r3, #3
 800efac:	dc58      	bgt.n	800f060 <_ZL12JPEGPutMCU12P14jpeg_image_tagii+0x12e>
            {
                Y1 = (pY[0] + pY[1] + pY[8] + pY[9]) << 10;
 800efae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800efb0:	781b      	ldrb	r3, [r3, #0]
 800efb2:	461a      	mov	r2, r3
 800efb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800efb6:	3301      	adds	r3, #1
 800efb8:	781b      	ldrb	r3, [r3, #0]
 800efba:	4413      	add	r3, r2
 800efbc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800efbe:	3208      	adds	r2, #8
 800efc0:	7812      	ldrb	r2, [r2, #0]
 800efc2:	4413      	add	r3, r2
 800efc4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800efc6:	3209      	adds	r2, #9
 800efc8:	7812      	ldrb	r2, [r2, #0]
 800efca:	4413      	add	r3, r2
 800efcc:	029b      	lsls	r3, r3, #10
 800efce:	623b      	str	r3, [r7, #32]
                Cb = (pCb[0] + pCb[1] + 1) >> 1;
 800efd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efd2:	781b      	ldrb	r3, [r3, #0]
 800efd4:	461a      	mov	r2, r3
 800efd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efd8:	3301      	adds	r3, #1
 800efda:	781b      	ldrb	r3, [r3, #0]
 800efdc:	4413      	add	r3, r2
 800efde:	3301      	adds	r3, #1
 800efe0:	105b      	asrs	r3, r3, #1
 800efe2:	61bb      	str	r3, [r7, #24]
                Cr = (pCr[0] + pCr[1] + 1) >> 1;
 800efe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efe6:	781b      	ldrb	r3, [r3, #0]
 800efe8:	461a      	mov	r2, r3
 800efea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efec:	3301      	adds	r3, #1
 800efee:	781b      	ldrb	r3, [r3, #0]
 800eff0:	4413      	add	r3, r2
 800eff2:	3301      	adds	r3, #1
 800eff4:	105b      	asrs	r3, r3, #1
 800eff6:	617b      	str	r3, [r7, #20]
                if (pJPEG->ucPixelType == RGB565_LITTLE_ENDIAN)
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800effe:	2b00      	cmp	r3, #0
 800f000:	d109      	bne.n	800f016 <_ZL12JPEGPutMCU12P14jpeg_image_tagii+0xe4>
                    JPEGPixelLE(pOutput+iCol, Y1, Cb, Cr);
 800f002:	693a      	ldr	r2, [r7, #16]
 800f004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f006:	005b      	lsls	r3, r3, #1
 800f008:	18d0      	adds	r0, r2, r3
 800f00a:	69ba      	ldr	r2, [r7, #24]
 800f00c:	697b      	ldr	r3, [r7, #20]
 800f00e:	6a39      	ldr	r1, [r7, #32]
 800f010:	f7fe f944 	bl	800d29c <_ZL11JPEGPixelLEPtiii>
 800f014:	e017      	b.n	800f046 <_ZL12JPEGPutMCU12P14jpeg_image_tagii+0x114>
                else if (pJPEG->ucPixelType == RGB565_BIG_ENDIAN)
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f01c:	2b01      	cmp	r3, #1
 800f01e:	d109      	bne.n	800f034 <_ZL12JPEGPutMCU12P14jpeg_image_tagii+0x102>
                    JPEGPixelBE(pOutput+iCol, Y1, Cb, Cr);
 800f020:	693a      	ldr	r2, [r7, #16]
 800f022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f024:	005b      	lsls	r3, r3, #1
 800f026:	18d0      	adds	r0, r2, r3
 800f028:	69ba      	ldr	r2, [r7, #24]
 800f02a:	697b      	ldr	r3, [r7, #20]
 800f02c:	6a39      	ldr	r1, [r7, #32]
 800f02e:	f7fe f98d 	bl	800d34c <_ZL11JPEGPixelBEPtiii>
 800f032:	e008      	b.n	800f046 <_ZL12JPEGPutMCU12P14jpeg_image_tagii+0x114>
                else
                    JPEGPixelRGB((uint32_t *)&pOutput[iCol*2], Y1, Cb, Cr);
 800f034:	693a      	ldr	r2, [r7, #16]
 800f036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f038:	009b      	lsls	r3, r3, #2
 800f03a:	18d0      	adds	r0, r2, r3
 800f03c:	69ba      	ldr	r2, [r7, #24]
 800f03e:	697b      	ldr	r3, [r7, #20]
 800f040:	6a39      	ldr	r1, [r7, #32]
 800f042:	f7fe f9dd 	bl	800d400 <_ZL12JPEGPixelRGBPmiii>
                pCb += 2;
 800f046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f048:	3302      	adds	r3, #2
 800f04a:	62fb      	str	r3, [r7, #44]	; 0x2c
                pCr += 2;
 800f04c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f04e:	3302      	adds	r3, #2
 800f050:	633b      	str	r3, [r7, #48]	; 0x30
                pY += 2;
 800f052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f054:	3302      	adds	r3, #2
 800f056:	637b      	str	r3, [r7, #52]	; 0x34
            for (iCol=0; iCol<4; iCol++)
 800f058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f05a:	3301      	adds	r3, #1
 800f05c:	63bb      	str	r3, [r7, #56]	; 0x38
 800f05e:	e7a3      	b.n	800efa8 <_ZL12JPEGPutMCU12P14jpeg_image_tagii+0x76>
            }
            pY += 8;
 800f060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f062:	3308      	adds	r3, #8
 800f064:	637b      	str	r3, [r7, #52]	; 0x34
            if (iRow == 3) // skip to next Y MCU block
 800f066:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f068:	2b03      	cmp	r3, #3
 800f06a:	d102      	bne.n	800f072 <_ZL12JPEGPutMCU12P14jpeg_image_tagii+0x140>
               pY += 64;
 800f06c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f06e:	3340      	adds	r3, #64	; 0x40
 800f070:	637b      	str	r3, [r7, #52]	; 0x34
            pOutput += (pJPEG->ucPixelType == RGB8888) ? iPitch*2 : iPitch;
 800f072:	693a      	ldr	r2, [r7, #16]
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f07a:	2b02      	cmp	r3, #2
 800f07c:	d102      	bne.n	800f084 <_ZL12JPEGPutMCU12P14jpeg_image_tagii+0x152>
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	009b      	lsls	r3, r3, #2
 800f082:	e001      	b.n	800f088 <_ZL12JPEGPutMCU12P14jpeg_image_tagii+0x156>
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	005b      	lsls	r3, r3, #1
 800f088:	4413      	add	r3, r2
 800f08a:	613b      	str	r3, [r7, #16]
        for (iRow=0; iRow<8; iRow++)
 800f08c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f08e:	3301      	adds	r3, #1
 800f090:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f092:	e783      	b.n	800ef9c <_ZL12JPEGPutMCU12P14jpeg_image_tagii+0x6a>
        }
        return;
    }
    if (pJPEG->iOptions & JPEG_SCALE_EIGHTH)
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f098:	f003 0308 	and.w	r3, r3, #8
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d048      	beq.n	800f132 <_ZL12JPEGPutMCU12P14jpeg_image_tagii+0x200>
    {
        Y1 = pY[0] << 12;
 800f0a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f0a2:	781b      	ldrb	r3, [r3, #0]
 800f0a4:	031b      	lsls	r3, r3, #12
 800f0a6:	623b      	str	r3, [r7, #32]
        Y2 = pY[DCTSIZE*2] << 12;
 800f0a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f0aa:	3380      	adds	r3, #128	; 0x80
 800f0ac:	781b      	ldrb	r3, [r3, #0]
 800f0ae:	031b      	lsls	r3, r3, #12
 800f0b0:	61fb      	str	r3, [r7, #28]
        Cb = pCb[0];
 800f0b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0b4:	781b      	ldrb	r3, [r3, #0]
 800f0b6:	61bb      	str	r3, [r7, #24]
        Cr = pCr[0];
 800f0b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0ba:	781b      	ldrb	r3, [r3, #0]
 800f0bc:	617b      	str	r3, [r7, #20]
        if (pJPEG->ucPixelType == RGB565_LITTLE_ENDIAN)
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d10f      	bne.n	800f0e8 <_ZL12JPEGPutMCU12P14jpeg_image_tagii+0x1b6>
        {
            JPEGPixelLE(pOutput, Y1, Cb, Cr);
 800f0c8:	6938      	ldr	r0, [r7, #16]
 800f0ca:	69ba      	ldr	r2, [r7, #24]
 800f0cc:	697b      	ldr	r3, [r7, #20]
 800f0ce:	6a39      	ldr	r1, [r7, #32]
 800f0d0:	f7fe f8e4 	bl	800d29c <_ZL11JPEGPixelLEPtiii>
            JPEGPixelLE(pOutput + iPitch, Y2, Cb, Cr);
 800f0d4:	693a      	ldr	r2, [r7, #16]
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	005b      	lsls	r3, r3, #1
 800f0da:	18d0      	adds	r0, r2, r3
 800f0dc:	69ba      	ldr	r2, [r7, #24]
 800f0de:	697b      	ldr	r3, [r7, #20]
 800f0e0:	69f9      	ldr	r1, [r7, #28]
 800f0e2:	f7fe f8db 	bl	800d29c <_ZL11JPEGPixelLEPtiii>
        }
        else { // RGB8888
            JPEGPixelRGB((uint32_t *)pOutput, Y1, Cb, Cr);
            JPEGPixelRGB((uint32_t *)&pOutput[iPitch*2], Y2, Cb, Cr);
        }
        return;
 800f0e6:	e223      	b.n	800f530 <_ZL12JPEGPutMCU12P14jpeg_image_tagii+0x5fe>
        else if (pJPEG->ucPixelType == RGB565_BIG_ENDIAN)
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f0ee:	2b01      	cmp	r3, #1
 800f0f0:	d10f      	bne.n	800f112 <_ZL12JPEGPutMCU12P14jpeg_image_tagii+0x1e0>
            JPEGPixelBE(pOutput, Y1, Cb, Cr);
 800f0f2:	6938      	ldr	r0, [r7, #16]
 800f0f4:	69ba      	ldr	r2, [r7, #24]
 800f0f6:	697b      	ldr	r3, [r7, #20]
 800f0f8:	6a39      	ldr	r1, [r7, #32]
 800f0fa:	f7fe f927 	bl	800d34c <_ZL11JPEGPixelBEPtiii>
            JPEGPixelBE(pOutput + iPitch, Y2, Cb, Cr);
 800f0fe:	693a      	ldr	r2, [r7, #16]
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	005b      	lsls	r3, r3, #1
 800f104:	18d0      	adds	r0, r2, r3
 800f106:	69ba      	ldr	r2, [r7, #24]
 800f108:	697b      	ldr	r3, [r7, #20]
 800f10a:	69f9      	ldr	r1, [r7, #28]
 800f10c:	f7fe f91e 	bl	800d34c <_ZL11JPEGPixelBEPtiii>
        return;
 800f110:	e20e      	b.n	800f530 <_ZL12JPEGPutMCU12P14jpeg_image_tagii+0x5fe>
            JPEGPixelRGB((uint32_t *)pOutput, Y1, Cb, Cr);
 800f112:	6938      	ldr	r0, [r7, #16]
 800f114:	69ba      	ldr	r2, [r7, #24]
 800f116:	697b      	ldr	r3, [r7, #20]
 800f118:	6a39      	ldr	r1, [r7, #32]
 800f11a:	f7fe f971 	bl	800d400 <_ZL12JPEGPixelRGBPmiii>
            JPEGPixelRGB((uint32_t *)&pOutput[iPitch*2], Y2, Cb, Cr);
 800f11e:	693a      	ldr	r2, [r7, #16]
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	009b      	lsls	r3, r3, #2
 800f124:	18d0      	adds	r0, r2, r3
 800f126:	69ba      	ldr	r2, [r7, #24]
 800f128:	697b      	ldr	r3, [r7, #20]
 800f12a:	69f9      	ldr	r1, [r7, #28]
 800f12c:	f7fe f968 	bl	800d400 <_ZL12JPEGPixelRGBPmiii>
        return;
 800f130:	e1fe      	b.n	800f530 <_ZL12JPEGPutMCU12P14jpeg_image_tagii+0x5fe>
    }
    if (pJPEG->iOptions & JPEG_SCALE_QUARTER)
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f136:	f003 0304 	and.w	r3, r3, #4
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	f000 815f 	beq.w	800f3fe <_ZL12JPEGPutMCU12P14jpeg_image_tagii+0x4cc>
    { // draw a 2x4 block
        Y1 = pY[0] << 12;
 800f140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f142:	781b      	ldrb	r3, [r3, #0]
 800f144:	031b      	lsls	r3, r3, #12
 800f146:	623b      	str	r3, [r7, #32]
        Y2 = pY[2] << 12;
 800f148:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f14a:	3302      	adds	r3, #2
 800f14c:	781b      	ldrb	r3, [r3, #0]
 800f14e:	031b      	lsls	r3, r3, #12
 800f150:	61fb      	str	r3, [r7, #28]
        Cb = pCb[0];
 800f152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f154:	781b      	ldrb	r3, [r3, #0]
 800f156:	61bb      	str	r3, [r7, #24]
        Cr = pCr[0];
 800f158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f15a:	781b      	ldrb	r3, [r3, #0]
 800f15c:	617b      	str	r3, [r7, #20]
        if (pJPEG->ucPixelType == RGB565_LITTLE_ENDIAN)
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f164:	2b00      	cmp	r3, #0
 800f166:	d10f      	bne.n	800f188 <_ZL12JPEGPutMCU12P14jpeg_image_tagii+0x256>
        {
            JPEGPixelLE(pOutput, Y1, Cb, Cr);
 800f168:	6938      	ldr	r0, [r7, #16]
 800f16a:	69ba      	ldr	r2, [r7, #24]
 800f16c:	697b      	ldr	r3, [r7, #20]
 800f16e:	6a39      	ldr	r1, [r7, #32]
 800f170:	f7fe f894 	bl	800d29c <_ZL11JPEGPixelLEPtiii>
            JPEGPixelLE(pOutput + iPitch, Y2, Cb, Cr);
 800f174:	693a      	ldr	r2, [r7, #16]
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	005b      	lsls	r3, r3, #1
 800f17a:	18d0      	adds	r0, r2, r3
 800f17c:	69ba      	ldr	r2, [r7, #24]
 800f17e:	697b      	ldr	r3, [r7, #20]
 800f180:	69f9      	ldr	r1, [r7, #28]
 800f182:	f7fe f88b 	bl	800d29c <_ZL11JPEGPixelLEPtiii>
 800f186:	e024      	b.n	800f1d2 <_ZL12JPEGPutMCU12P14jpeg_image_tagii+0x2a0>
        }
        else if (pJPEG->ucPixelType == RGB565_BIG_ENDIAN)
 800f188:	68fb      	ldr	r3, [r7, #12]
 800f18a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f18e:	2b01      	cmp	r3, #1
 800f190:	d10f      	bne.n	800f1b2 <_ZL12JPEGPutMCU12P14jpeg_image_tagii+0x280>
        {
            JPEGPixelBE(pOutput, Y1, Cb, Cr);
 800f192:	6938      	ldr	r0, [r7, #16]
 800f194:	69ba      	ldr	r2, [r7, #24]
 800f196:	697b      	ldr	r3, [r7, #20]
 800f198:	6a39      	ldr	r1, [r7, #32]
 800f19a:	f7fe f8d7 	bl	800d34c <_ZL11JPEGPixelBEPtiii>
            JPEGPixelBE(pOutput + iPitch, Y2, Cb, Cr);
 800f19e:	693a      	ldr	r2, [r7, #16]
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	005b      	lsls	r3, r3, #1
 800f1a4:	18d0      	adds	r0, r2, r3
 800f1a6:	69ba      	ldr	r2, [r7, #24]
 800f1a8:	697b      	ldr	r3, [r7, #20]
 800f1aa:	69f9      	ldr	r1, [r7, #28]
 800f1ac:	f7fe f8ce 	bl	800d34c <_ZL11JPEGPixelBEPtiii>
 800f1b0:	e00f      	b.n	800f1d2 <_ZL12JPEGPutMCU12P14jpeg_image_tagii+0x2a0>
        } else { // RGB8888
            JPEGPixelRGB((uint32_t *)&pOutput, Y1, Cb, Cr);
 800f1b2:	69ba      	ldr	r2, [r7, #24]
 800f1b4:	697b      	ldr	r3, [r7, #20]
 800f1b6:	f107 0010 	add.w	r0, r7, #16
 800f1ba:	6a39      	ldr	r1, [r7, #32]
 800f1bc:	f7fe f920 	bl	800d400 <_ZL12JPEGPixelRGBPmiii>
            JPEGPixelRGB((uint32_t *)&pOutput[iPitch*2], Y2, Cb, Cr);
 800f1c0:	693a      	ldr	r2, [r7, #16]
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	009b      	lsls	r3, r3, #2
 800f1c6:	18d0      	adds	r0, r2, r3
 800f1c8:	69ba      	ldr	r2, [r7, #24]
 800f1ca:	697b      	ldr	r3, [r7, #20]
 800f1cc:	69f9      	ldr	r1, [r7, #28]
 800f1ce:	f7fe f917 	bl	800d400 <_ZL12JPEGPixelRGBPmiii>
        }
        Y1 = pY[1] << 12;
 800f1d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f1d4:	3301      	adds	r3, #1
 800f1d6:	781b      	ldrb	r3, [r3, #0]
 800f1d8:	031b      	lsls	r3, r3, #12
 800f1da:	623b      	str	r3, [r7, #32]
        Y2 = pY[3] << 12;
 800f1dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f1de:	3303      	adds	r3, #3
 800f1e0:	781b      	ldrb	r3, [r3, #0]
 800f1e2:	031b      	lsls	r3, r3, #12
 800f1e4:	61fb      	str	r3, [r7, #28]
        Cb = pCb[1];
 800f1e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1e8:	3301      	adds	r3, #1
 800f1ea:	781b      	ldrb	r3, [r3, #0]
 800f1ec:	61bb      	str	r3, [r7, #24]
        Cr = pCr[1];
 800f1ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1f0:	3301      	adds	r3, #1
 800f1f2:	781b      	ldrb	r3, [r3, #0]
 800f1f4:	617b      	str	r3, [r7, #20]
        if (pJPEG->ucPixelType == RGB565_LITTLE_ENDIAN)
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d111      	bne.n	800f224 <_ZL12JPEGPutMCU12P14jpeg_image_tagii+0x2f2>
        {
            JPEGPixelLE(pOutput + 1, Y1, Cb, Cr);
 800f200:	693b      	ldr	r3, [r7, #16]
 800f202:	1c98      	adds	r0, r3, #2
 800f204:	69ba      	ldr	r2, [r7, #24]
 800f206:	697b      	ldr	r3, [r7, #20]
 800f208:	6a39      	ldr	r1, [r7, #32]
 800f20a:	f7fe f847 	bl	800d29c <_ZL11JPEGPixelLEPtiii>
            JPEGPixelLE(pOutput + 1 + iPitch, Y2, Cb, Cr);
 800f20e:	693a      	ldr	r2, [r7, #16]
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	3301      	adds	r3, #1
 800f214:	005b      	lsls	r3, r3, #1
 800f216:	18d0      	adds	r0, r2, r3
 800f218:	69ba      	ldr	r2, [r7, #24]
 800f21a:	697b      	ldr	r3, [r7, #20]
 800f21c:	69f9      	ldr	r1, [r7, #28]
 800f21e:	f7fe f83d 	bl	800d29c <_ZL11JPEGPixelLEPtiii>
 800f222:	e027      	b.n	800f274 <_ZL12JPEGPutMCU12P14jpeg_image_tagii+0x342>
        }
        else if (pJPEG->ucPixelType == RGB565_BIG_ENDIAN)
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f22a:	2b01      	cmp	r3, #1
 800f22c:	d111      	bne.n	800f252 <_ZL12JPEGPutMCU12P14jpeg_image_tagii+0x320>
        {
            JPEGPixelBE(pOutput + 1, Y1, Cb, Cr);
 800f22e:	693b      	ldr	r3, [r7, #16]
 800f230:	1c98      	adds	r0, r3, #2
 800f232:	69ba      	ldr	r2, [r7, #24]
 800f234:	697b      	ldr	r3, [r7, #20]
 800f236:	6a39      	ldr	r1, [r7, #32]
 800f238:	f7fe f888 	bl	800d34c <_ZL11JPEGPixelBEPtiii>
            JPEGPixelBE(pOutput + 1 + iPitch, Y2, Cb, Cr);
 800f23c:	693a      	ldr	r2, [r7, #16]
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	3301      	adds	r3, #1
 800f242:	005b      	lsls	r3, r3, #1
 800f244:	18d0      	adds	r0, r2, r3
 800f246:	69ba      	ldr	r2, [r7, #24]
 800f248:	697b      	ldr	r3, [r7, #20]
 800f24a:	69f9      	ldr	r1, [r7, #28]
 800f24c:	f7fe f87e 	bl	800d34c <_ZL11JPEGPixelBEPtiii>
 800f250:	e010      	b.n	800f274 <_ZL12JPEGPutMCU12P14jpeg_image_tagii+0x342>
        } else { // RGB8888
            JPEGPixelRGB((uint32_t *)&pOutput[2], Y1, Cb, Cr);
 800f252:	693b      	ldr	r3, [r7, #16]
 800f254:	1d18      	adds	r0, r3, #4
 800f256:	69ba      	ldr	r2, [r7, #24]
 800f258:	697b      	ldr	r3, [r7, #20]
 800f25a:	6a39      	ldr	r1, [r7, #32]
 800f25c:	f7fe f8d0 	bl	800d400 <_ZL12JPEGPixelRGBPmiii>
            JPEGPixelRGB((uint32_t *)&pOutput[(1 + iPitch)*2], Y2, Cb, Cr);
 800f260:	693a      	ldr	r2, [r7, #16]
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	3301      	adds	r3, #1
 800f266:	009b      	lsls	r3, r3, #2
 800f268:	18d0      	adds	r0, r2, r3
 800f26a:	69ba      	ldr	r2, [r7, #24]
 800f26c:	697b      	ldr	r3, [r7, #20]
 800f26e:	69f9      	ldr	r1, [r7, #28]
 800f270:	f7fe f8c6 	bl	800d400 <_ZL12JPEGPixelRGBPmiii>
        }
        pY += DCTSIZE*2; // next Y block below
 800f274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f276:	3380      	adds	r3, #128	; 0x80
 800f278:	637b      	str	r3, [r7, #52]	; 0x34
        Y1 = pY[0] << 12;
 800f27a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f27c:	781b      	ldrb	r3, [r3, #0]
 800f27e:	031b      	lsls	r3, r3, #12
 800f280:	623b      	str	r3, [r7, #32]
        Y2 = pY[2] << 12;
 800f282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f284:	3302      	adds	r3, #2
 800f286:	781b      	ldrb	r3, [r3, #0]
 800f288:	031b      	lsls	r3, r3, #12
 800f28a:	61fb      	str	r3, [r7, #28]
        Cb = pCb[2];
 800f28c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f28e:	3302      	adds	r3, #2
 800f290:	781b      	ldrb	r3, [r3, #0]
 800f292:	61bb      	str	r3, [r7, #24]
        Cr = pCr[2];
 800f294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f296:	3302      	adds	r3, #2
 800f298:	781b      	ldrb	r3, [r3, #0]
 800f29a:	617b      	str	r3, [r7, #20]
        if (pJPEG->ucPixelType == RGB565_LITTLE_ENDIAN)
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d115      	bne.n	800f2d2 <_ZL12JPEGPutMCU12P14jpeg_image_tagii+0x3a0>
        {
            JPEGPixelLE(pOutput + iPitch*2, Y1, Cb, Cr);
 800f2a6:	693a      	ldr	r2, [r7, #16]
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	009b      	lsls	r3, r3, #2
 800f2ac:	18d0      	adds	r0, r2, r3
 800f2ae:	69ba      	ldr	r2, [r7, #24]
 800f2b0:	697b      	ldr	r3, [r7, #20]
 800f2b2:	6a39      	ldr	r1, [r7, #32]
 800f2b4:	f7fd fff2 	bl	800d29c <_ZL11JPEGPixelLEPtiii>
            JPEGPixelLE(pOutput + iPitch*3, Y2, Cb, Cr);
 800f2b8:	6939      	ldr	r1, [r7, #16]
 800f2ba:	687a      	ldr	r2, [r7, #4]
 800f2bc:	4613      	mov	r3, r2
 800f2be:	005b      	lsls	r3, r3, #1
 800f2c0:	4413      	add	r3, r2
 800f2c2:	005b      	lsls	r3, r3, #1
 800f2c4:	18c8      	adds	r0, r1, r3
 800f2c6:	69ba      	ldr	r2, [r7, #24]
 800f2c8:	697b      	ldr	r3, [r7, #20]
 800f2ca:	69f9      	ldr	r1, [r7, #28]
 800f2cc:	f7fd ffe6 	bl	800d29c <_ZL11JPEGPixelLEPtiii>
 800f2d0:	e02f      	b.n	800f332 <_ZL12JPEGPutMCU12P14jpeg_image_tagii+0x400>
        }
        else if (pJPEG->ucPixelType == RGB565_BIG_ENDIAN)
 800f2d2:	68fb      	ldr	r3, [r7, #12]
 800f2d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f2d8:	2b01      	cmp	r3, #1
 800f2da:	d115      	bne.n	800f308 <_ZL12JPEGPutMCU12P14jpeg_image_tagii+0x3d6>
        {
            JPEGPixelBE(pOutput + iPitch*2, Y1, Cb, Cr);
 800f2dc:	693a      	ldr	r2, [r7, #16]
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	009b      	lsls	r3, r3, #2
 800f2e2:	18d0      	adds	r0, r2, r3
 800f2e4:	69ba      	ldr	r2, [r7, #24]
 800f2e6:	697b      	ldr	r3, [r7, #20]
 800f2e8:	6a39      	ldr	r1, [r7, #32]
 800f2ea:	f7fe f82f 	bl	800d34c <_ZL11JPEGPixelBEPtiii>
            JPEGPixelBE(pOutput + iPitch*3, Y2, Cb, Cr);
 800f2ee:	6939      	ldr	r1, [r7, #16]
 800f2f0:	687a      	ldr	r2, [r7, #4]
 800f2f2:	4613      	mov	r3, r2
 800f2f4:	005b      	lsls	r3, r3, #1
 800f2f6:	4413      	add	r3, r2
 800f2f8:	005b      	lsls	r3, r3, #1
 800f2fa:	18c8      	adds	r0, r1, r3
 800f2fc:	69ba      	ldr	r2, [r7, #24]
 800f2fe:	697b      	ldr	r3, [r7, #20]
 800f300:	69f9      	ldr	r1, [r7, #28]
 800f302:	f7fe f823 	bl	800d34c <_ZL11JPEGPixelBEPtiii>
 800f306:	e014      	b.n	800f332 <_ZL12JPEGPutMCU12P14jpeg_image_tagii+0x400>
        } else { // RGB8888
            JPEGPixelRGB((uint32_t *)&pOutput[iPitch*4], Y1, Cb, Cr);
 800f308:	693a      	ldr	r2, [r7, #16]
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	00db      	lsls	r3, r3, #3
 800f30e:	18d0      	adds	r0, r2, r3
 800f310:	69ba      	ldr	r2, [r7, #24]
 800f312:	697b      	ldr	r3, [r7, #20]
 800f314:	6a39      	ldr	r1, [r7, #32]
 800f316:	f7fe f873 	bl	800d400 <_ZL12JPEGPixelRGBPmiii>
            JPEGPixelRGB((uint32_t *)&pOutput[iPitch*6], Y2, Cb, Cr);
 800f31a:	6939      	ldr	r1, [r7, #16]
 800f31c:	687a      	ldr	r2, [r7, #4]
 800f31e:	4613      	mov	r3, r2
 800f320:	005b      	lsls	r3, r3, #1
 800f322:	4413      	add	r3, r2
 800f324:	009b      	lsls	r3, r3, #2
 800f326:	18c8      	adds	r0, r1, r3
 800f328:	69ba      	ldr	r2, [r7, #24]
 800f32a:	697b      	ldr	r3, [r7, #20]
 800f32c:	69f9      	ldr	r1, [r7, #28]
 800f32e:	f7fe f867 	bl	800d400 <_ZL12JPEGPixelRGBPmiii>
        }
        Y1 = pY[1] << 12;
 800f332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f334:	3301      	adds	r3, #1
 800f336:	781b      	ldrb	r3, [r3, #0]
 800f338:	031b      	lsls	r3, r3, #12
 800f33a:	623b      	str	r3, [r7, #32]
        Y2 = pY[3] << 12;
 800f33c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f33e:	3303      	adds	r3, #3
 800f340:	781b      	ldrb	r3, [r3, #0]
 800f342:	031b      	lsls	r3, r3, #12
 800f344:	61fb      	str	r3, [r7, #28]
        Cb = pCb[3];
 800f346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f348:	3303      	adds	r3, #3
 800f34a:	781b      	ldrb	r3, [r3, #0]
 800f34c:	61bb      	str	r3, [r7, #24]
        Cr = pCr[3];
 800f34e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f350:	3303      	adds	r3, #3
 800f352:	781b      	ldrb	r3, [r3, #0]
 800f354:	617b      	str	r3, [r7, #20]
        if (pJPEG->ucPixelType == RGB565_LITTLE_ENDIAN)
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	d117      	bne.n	800f390 <_ZL12JPEGPutMCU12P14jpeg_image_tagii+0x45e>
        {
            JPEGPixelLE(pOutput + 1 + iPitch*2, Y1, Cb, Cr);
 800f360:	693a      	ldr	r2, [r7, #16]
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	009b      	lsls	r3, r3, #2
 800f366:	3302      	adds	r3, #2
 800f368:	18d0      	adds	r0, r2, r3
 800f36a:	69ba      	ldr	r2, [r7, #24]
 800f36c:	697b      	ldr	r3, [r7, #20]
 800f36e:	6a39      	ldr	r1, [r7, #32]
 800f370:	f7fd ff94 	bl	800d29c <_ZL11JPEGPixelLEPtiii>
            JPEGPixelLE(pOutput + 1 + iPitch*3, Y2, Cb, Cr);
 800f374:	6939      	ldr	r1, [r7, #16]
 800f376:	687a      	ldr	r2, [r7, #4]
 800f378:	4613      	mov	r3, r2
 800f37a:	005b      	lsls	r3, r3, #1
 800f37c:	4413      	add	r3, r2
 800f37e:	005b      	lsls	r3, r3, #1
 800f380:	3302      	adds	r3, #2
 800f382:	18c8      	adds	r0, r1, r3
 800f384:	69ba      	ldr	r2, [r7, #24]
 800f386:	697b      	ldr	r3, [r7, #20]
 800f388:	69f9      	ldr	r1, [r7, #28]
 800f38a:	f7fd ff87 	bl	800d29c <_ZL11JPEGPixelLEPtiii>
        }
        else { // RGB8888
            JPEGPixelRGB((uint32_t *)&pOutput[2 + iPitch*4], Y1, Cb, Cr);
            JPEGPixelRGB((uint32_t *)&pOutput[2 + iPitch*6], Y2, Cb, Cr);
        }
        return;
 800f38e:	e0cf      	b.n	800f530 <_ZL12JPEGPutMCU12P14jpeg_image_tagii+0x5fe>
        else if (pJPEG->ucPixelType == RGB565_BIG_ENDIAN)
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f396:	2b01      	cmp	r3, #1
 800f398:	d117      	bne.n	800f3ca <_ZL12JPEGPutMCU12P14jpeg_image_tagii+0x498>
            JPEGPixelBE(pOutput + 1 + iPitch*2, Y1, Cb, Cr);
 800f39a:	693a      	ldr	r2, [r7, #16]
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	009b      	lsls	r3, r3, #2
 800f3a0:	3302      	adds	r3, #2
 800f3a2:	18d0      	adds	r0, r2, r3
 800f3a4:	69ba      	ldr	r2, [r7, #24]
 800f3a6:	697b      	ldr	r3, [r7, #20]
 800f3a8:	6a39      	ldr	r1, [r7, #32]
 800f3aa:	f7fd ffcf 	bl	800d34c <_ZL11JPEGPixelBEPtiii>
            JPEGPixelBE(pOutput + 1 + iPitch*3, Y2, Cb, Cr);
 800f3ae:	6939      	ldr	r1, [r7, #16]
 800f3b0:	687a      	ldr	r2, [r7, #4]
 800f3b2:	4613      	mov	r3, r2
 800f3b4:	005b      	lsls	r3, r3, #1
 800f3b6:	4413      	add	r3, r2
 800f3b8:	005b      	lsls	r3, r3, #1
 800f3ba:	3302      	adds	r3, #2
 800f3bc:	18c8      	adds	r0, r1, r3
 800f3be:	69ba      	ldr	r2, [r7, #24]
 800f3c0:	697b      	ldr	r3, [r7, #20]
 800f3c2:	69f9      	ldr	r1, [r7, #28]
 800f3c4:	f7fd ffc2 	bl	800d34c <_ZL11JPEGPixelBEPtiii>
        return;
 800f3c8:	e0b2      	b.n	800f530 <_ZL12JPEGPutMCU12P14jpeg_image_tagii+0x5fe>
            JPEGPixelRGB((uint32_t *)&pOutput[2 + iPitch*4], Y1, Cb, Cr);
 800f3ca:	693a      	ldr	r2, [r7, #16]
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	009b      	lsls	r3, r3, #2
 800f3d0:	3302      	adds	r3, #2
 800f3d2:	005b      	lsls	r3, r3, #1
 800f3d4:	18d0      	adds	r0, r2, r3
 800f3d6:	69ba      	ldr	r2, [r7, #24]
 800f3d8:	697b      	ldr	r3, [r7, #20]
 800f3da:	6a39      	ldr	r1, [r7, #32]
 800f3dc:	f7fe f810 	bl	800d400 <_ZL12JPEGPixelRGBPmiii>
            JPEGPixelRGB((uint32_t *)&pOutput[2 + iPitch*6], Y2, Cb, Cr);
 800f3e0:	6939      	ldr	r1, [r7, #16]
 800f3e2:	687a      	ldr	r2, [r7, #4]
 800f3e4:	4613      	mov	r3, r2
 800f3e6:	005b      	lsls	r3, r3, #1
 800f3e8:	4413      	add	r3, r2
 800f3ea:	005b      	lsls	r3, r3, #1
 800f3ec:	3302      	adds	r3, #2
 800f3ee:	005b      	lsls	r3, r3, #1
 800f3f0:	18c8      	adds	r0, r1, r3
 800f3f2:	69ba      	ldr	r2, [r7, #24]
 800f3f4:	697b      	ldr	r3, [r7, #20]
 800f3f6:	69f9      	ldr	r1, [r7, #28]
 800f3f8:	f7fe f802 	bl	800d400 <_ZL12JPEGPixelRGBPmiii>
        return;
 800f3fc:	e098      	b.n	800f530 <_ZL12JPEGPutMCU12P14jpeg_image_tagii+0x5fe>
    }
// full size
    /* Convert YCC pixels into RGB pixels and store in output image */
    iYCount = 16;
 800f3fe:	2310      	movs	r3, #16
 800f400:	62bb      	str	r3, [r7, #40]	; 0x28
    iXCount = 8;
 800f402:	2308      	movs	r3, #8
 800f404:	627b      	str	r3, [r7, #36]	; 0x24
    for (iRow=0; iRow<iYCount; iRow+=2) // up to 16 rows to do
 800f406:	2300      	movs	r3, #0
 800f408:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f40a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f40c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f40e:	429a      	cmp	r2, r3
 800f410:	f280 808e 	bge.w	800f530 <_ZL12JPEGPutMCU12P14jpeg_image_tagii+0x5fe>
    {
        for (iCol=0; iCol<iXCount; iCol++) // up to 8 cols to do
 800f414:	2300      	movs	r3, #0
 800f416:	63bb      	str	r3, [r7, #56]	; 0x38
 800f418:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f41a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f41c:	429a      	cmp	r2, r3
 800f41e:	da66      	bge.n	800f4ee <_ZL12JPEGPutMCU12P14jpeg_image_tagii+0x5bc>
        {
            Y1 = pY[iCol];
 800f420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f422:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f424:	4413      	add	r3, r2
 800f426:	781b      	ldrb	r3, [r3, #0]
 800f428:	623b      	str	r3, [r7, #32]
            Y2 = pY[iCol+8];
 800f42a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f42c:	3308      	adds	r3, #8
 800f42e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f430:	4413      	add	r3, r2
 800f432:	781b      	ldrb	r3, [r3, #0]
 800f434:	61fb      	str	r3, [r7, #28]
            Y1 <<= 12;  // scale to level of conversion table
 800f436:	6a3b      	ldr	r3, [r7, #32]
 800f438:	031b      	lsls	r3, r3, #12
 800f43a:	623b      	str	r3, [r7, #32]
            Y2 <<= 12;
 800f43c:	69fb      	ldr	r3, [r7, #28]
 800f43e:	031b      	lsls	r3, r3, #12
 800f440:	61fb      	str	r3, [r7, #28]
            Cb = pCb[iCol];
 800f442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f444:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f446:	4413      	add	r3, r2
 800f448:	781b      	ldrb	r3, [r3, #0]
 800f44a:	61bb      	str	r3, [r7, #24]
            Cr = pCr[iCol];
 800f44c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f44e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f450:	4413      	add	r3, r2
 800f452:	781b      	ldrb	r3, [r3, #0]
 800f454:	617b      	str	r3, [r7, #20]
            if (pJPEG->ucPixelType == RGB565_LITTLE_ENDIAN)
 800f456:	68fb      	ldr	r3, [r7, #12]
 800f458:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d114      	bne.n	800f48a <_ZL12JPEGPutMCU12P14jpeg_image_tagii+0x558>
            {
                JPEGPixelLE(pOutput + iCol, Y1, Cb, Cr);
 800f460:	693a      	ldr	r2, [r7, #16]
 800f462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f464:	005b      	lsls	r3, r3, #1
 800f466:	18d0      	adds	r0, r2, r3
 800f468:	69ba      	ldr	r2, [r7, #24]
 800f46a:	697b      	ldr	r3, [r7, #20]
 800f46c:	6a39      	ldr	r1, [r7, #32]
 800f46e:	f7fd ff15 	bl	800d29c <_ZL11JPEGPixelLEPtiii>
                JPEGPixelLE(pOutput + iPitch + iCol, Y2, Cb, Cr);
 800f472:	693a      	ldr	r2, [r7, #16]
 800f474:	6879      	ldr	r1, [r7, #4]
 800f476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f478:	440b      	add	r3, r1
 800f47a:	005b      	lsls	r3, r3, #1
 800f47c:	18d0      	adds	r0, r2, r3
 800f47e:	69ba      	ldr	r2, [r7, #24]
 800f480:	697b      	ldr	r3, [r7, #20]
 800f482:	69f9      	ldr	r1, [r7, #28]
 800f484:	f7fd ff0a 	bl	800d29c <_ZL11JPEGPixelLEPtiii>
 800f488:	e02d      	b.n	800f4e6 <_ZL12JPEGPutMCU12P14jpeg_image_tagii+0x5b4>
            }
            else if (pJPEG->ucPixelType == RGB565_BIG_ENDIAN)
 800f48a:	68fb      	ldr	r3, [r7, #12]
 800f48c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f490:	2b01      	cmp	r3, #1
 800f492:	d114      	bne.n	800f4be <_ZL12JPEGPutMCU12P14jpeg_image_tagii+0x58c>
            {
                JPEGPixelBE(pOutput + iCol, Y1, Cb, Cr);
 800f494:	693a      	ldr	r2, [r7, #16]
 800f496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f498:	005b      	lsls	r3, r3, #1
 800f49a:	18d0      	adds	r0, r2, r3
 800f49c:	69ba      	ldr	r2, [r7, #24]
 800f49e:	697b      	ldr	r3, [r7, #20]
 800f4a0:	6a39      	ldr	r1, [r7, #32]
 800f4a2:	f7fd ff53 	bl	800d34c <_ZL11JPEGPixelBEPtiii>
                JPEGPixelBE(pOutput + iPitch + iCol, Y2, Cb, Cr);
 800f4a6:	693a      	ldr	r2, [r7, #16]
 800f4a8:	6879      	ldr	r1, [r7, #4]
 800f4aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4ac:	440b      	add	r3, r1
 800f4ae:	005b      	lsls	r3, r3, #1
 800f4b0:	18d0      	adds	r0, r2, r3
 800f4b2:	69ba      	ldr	r2, [r7, #24]
 800f4b4:	697b      	ldr	r3, [r7, #20]
 800f4b6:	69f9      	ldr	r1, [r7, #28]
 800f4b8:	f7fd ff48 	bl	800d34c <_ZL11JPEGPixelBEPtiii>
 800f4bc:	e013      	b.n	800f4e6 <_ZL12JPEGPutMCU12P14jpeg_image_tagii+0x5b4>
            } else { // RGB8888
                JPEGPixelRGB((uint32_t *)&pOutput[iCol*2], Y1, Cb, Cr);
 800f4be:	693a      	ldr	r2, [r7, #16]
 800f4c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4c2:	009b      	lsls	r3, r3, #2
 800f4c4:	18d0      	adds	r0, r2, r3
 800f4c6:	69ba      	ldr	r2, [r7, #24]
 800f4c8:	697b      	ldr	r3, [r7, #20]
 800f4ca:	6a39      	ldr	r1, [r7, #32]
 800f4cc:	f7fd ff98 	bl	800d400 <_ZL12JPEGPixelRGBPmiii>
                JPEGPixelRGB((uint32_t *)&pOutput[2*(iPitch + iCol)], Y2, Cb, Cr);
 800f4d0:	693a      	ldr	r2, [r7, #16]
 800f4d2:	6879      	ldr	r1, [r7, #4]
 800f4d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4d6:	440b      	add	r3, r1
 800f4d8:	009b      	lsls	r3, r3, #2
 800f4da:	18d0      	adds	r0, r2, r3
 800f4dc:	69ba      	ldr	r2, [r7, #24]
 800f4de:	697b      	ldr	r3, [r7, #20]
 800f4e0:	69f9      	ldr	r1, [r7, #28]
 800f4e2:	f7fd ff8d 	bl	800d400 <_ZL12JPEGPixelRGBPmiii>
        for (iCol=0; iCol<iXCount; iCol++) // up to 8 cols to do
 800f4e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4e8:	3301      	adds	r3, #1
 800f4ea:	63bb      	str	r3, [r7, #56]	; 0x38
 800f4ec:	e794      	b.n	800f418 <_ZL12JPEGPutMCU12P14jpeg_image_tagii+0x4e6>
            } // RGB8888
        }
        pY += 16; // skip to next 2 lines of source pixels
 800f4ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f4f0:	3310      	adds	r3, #16
 800f4f2:	637b      	str	r3, [r7, #52]	; 0x34
        if (iRow == 6) // next MCU block, skip ahead to correct spot
 800f4f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f4f6:	2b06      	cmp	r3, #6
 800f4f8:	d102      	bne.n	800f500 <_ZL12JPEGPutMCU12P14jpeg_image_tagii+0x5ce>
            pY += (128-64);
 800f4fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f4fc:	3340      	adds	r3, #64	; 0x40
 800f4fe:	637b      	str	r3, [r7, #52]	; 0x34
        pCb += 8;
 800f500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f502:	3308      	adds	r3, #8
 800f504:	62fb      	str	r3, [r7, #44]	; 0x2c
        pCr += 8;
 800f506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f508:	3308      	adds	r3, #8
 800f50a:	633b      	str	r3, [r7, #48]	; 0x30
        pOutput += (pJPEG->ucPixelType == RGB8888) ? iPitch*4 : iPitch*2; // next 2 lines of dest pixels
 800f50c:	693a      	ldr	r2, [r7, #16]
 800f50e:	68fb      	ldr	r3, [r7, #12]
 800f510:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f514:	2b02      	cmp	r3, #2
 800f516:	d102      	bne.n	800f51e <_ZL12JPEGPutMCU12P14jpeg_image_tagii+0x5ec>
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	00db      	lsls	r3, r3, #3
 800f51c:	e001      	b.n	800f522 <_ZL12JPEGPutMCU12P14jpeg_image_tagii+0x5f0>
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	009b      	lsls	r3, r3, #2
 800f522:	4413      	add	r3, r2
 800f524:	613b      	str	r3, [r7, #16]
    for (iRow=0; iRow<iYCount; iRow+=2) // up to 16 rows to do
 800f526:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f528:	3302      	adds	r3, #2
 800f52a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f52c:	e76d      	b.n	800f40a <_ZL12JPEGPutMCU12P14jpeg_image_tagii+0x4d8>
        return;
 800f52e:	bf00      	nop
    }
} /* JPEGPutMCU12() */
 800f530:	3740      	adds	r7, #64	; 0x40
 800f532:	46bd      	mov	sp, r7
 800f534:	bd80      	pop	{r7, pc}

0800f536 <_ZL12JPEGPutMCU21P14jpeg_image_tagii>:

static void JPEGPutMCU21(JPEGIMAGE *pJPEG, int x, int iPitch)
{
 800f536:	b580      	push	{r7, lr}
 800f538:	b090      	sub	sp, #64	; 0x40
 800f53a:	af02      	add	r7, sp, #8
 800f53c:	60f8      	str	r0, [r7, #12]
 800f53e:	60b9      	str	r1, [r7, #8]
 800f540:	607a      	str	r2, [r7, #4]
    int iCr, iCb;
    signed int Y1, Y2;
    int iCol;
    int iRow;
    uint8_t *pY, *pCr, *pCb;
    uint16_t *pOutput = &pJPEG->usPixels[x];
 800f542:	68fb      	ldr	r3, [r7, #12]
 800f544:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800f548:	68bb      	ldr	r3, [r7, #8]
 800f54a:	005b      	lsls	r3, r3, #1
 800f54c:	4413      	add	r3, r2
 800f54e:	623b      	str	r3, [r7, #32]

    if (pJPEG->ucPixelType == RGB8888) {
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f556:	2b02      	cmp	r3, #2
 800f558:	d104      	bne.n	800f564 <_ZL12JPEGPutMCU21P14jpeg_image_tagii+0x2e>
        pOutput += x; // 4 bytes per pixel, not 2
 800f55a:	68bb      	ldr	r3, [r7, #8]
 800f55c:	005b      	lsls	r3, r3, #1
 800f55e:	6a3a      	ldr	r2, [r7, #32]
 800f560:	4413      	add	r3, r2
 800f562:	623b      	str	r3, [r7, #32]
    }   

    pY  = (uint8_t *)&pJPEG->sMCUs[0*DCTSIZE];
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f56a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800f56e:	62fb      	str	r3, [r7, #44]	; 0x2c
    pCb = (uint8_t *)&pJPEG->sMCUs[2*DCTSIZE];
 800f570:	68fb      	ldr	r3, [r7, #12]
 800f572:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f576:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800f57a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800f57e:	627b      	str	r3, [r7, #36]	; 0x24
    pCr = (uint8_t *)&pJPEG->sMCUs[3*DCTSIZE];
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f586:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800f58a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800f58e:	62bb      	str	r3, [r7, #40]	; 0x28
    
    if (pJPEG->iOptions & JPEG_SCALE_HALF)
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f594:	f003 0302 	and.w	r3, r3, #2
 800f598:	2b00      	cmp	r3, #0
 800f59a:	f000 80d1 	beq.w	800f740 <_ZL12JPEGPutMCU21P14jpeg_image_tagii+0x20a>
    {
        for (iRow=0; iRow<4; iRow++)
 800f59e:	2300      	movs	r3, #0
 800f5a0:	633b      	str	r3, [r7, #48]	; 0x30
 800f5a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5a4:	2b03      	cmp	r3, #3
 800f5a6:	f300 82a7 	bgt.w	800faf8 <_ZL12JPEGPutMCU21P14jpeg_image_tagii+0x5c2>
        {
            for (iCol=0; iCol<4; iCol++)
 800f5aa:	2300      	movs	r3, #0
 800f5ac:	637b      	str	r3, [r7, #52]	; 0x34
 800f5ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f5b0:	2b03      	cmp	r3, #3
 800f5b2:	f300 80ab 	bgt.w	800f70c <_ZL12JPEGPutMCU21P14jpeg_image_tagii+0x1d6>
            {   // left block
                iCr = (pCr[0] + pCr[8] + 1) >> 1;
 800f5b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5b8:	781b      	ldrb	r3, [r3, #0]
 800f5ba:	461a      	mov	r2, r3
 800f5bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5be:	3308      	adds	r3, #8
 800f5c0:	781b      	ldrb	r3, [r3, #0]
 800f5c2:	4413      	add	r3, r2
 800f5c4:	3301      	adds	r3, #1
 800f5c6:	105b      	asrs	r3, r3, #1
 800f5c8:	61fb      	str	r3, [r7, #28]
                iCb = (pCb[0] + pCb[8] + 1) >> 1;
 800f5ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5cc:	781b      	ldrb	r3, [r3, #0]
 800f5ce:	461a      	mov	r2, r3
 800f5d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5d2:	3308      	adds	r3, #8
 800f5d4:	781b      	ldrb	r3, [r3, #0]
 800f5d6:	4413      	add	r3, r2
 800f5d8:	3301      	adds	r3, #1
 800f5da:	105b      	asrs	r3, r3, #1
 800f5dc:	61bb      	str	r3, [r7, #24]
                Y1 = (signed int)(pY[0] + pY[1] + pY[8] + pY[9]) << 10;
 800f5de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5e0:	781b      	ldrb	r3, [r3, #0]
 800f5e2:	461a      	mov	r2, r3
 800f5e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5e6:	3301      	adds	r3, #1
 800f5e8:	781b      	ldrb	r3, [r3, #0]
 800f5ea:	4413      	add	r3, r2
 800f5ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f5ee:	3208      	adds	r2, #8
 800f5f0:	7812      	ldrb	r2, [r2, #0]
 800f5f2:	4413      	add	r3, r2
 800f5f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f5f6:	3209      	adds	r2, #9
 800f5f8:	7812      	ldrb	r2, [r2, #0]
 800f5fa:	4413      	add	r3, r2
 800f5fc:	029b      	lsls	r3, r3, #10
 800f5fe:	617b      	str	r3, [r7, #20]
                if (pJPEG->ucPixelType == RGB565_LITTLE_ENDIAN)
 800f600:	68fb      	ldr	r3, [r7, #12]
 800f602:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f606:	2b00      	cmp	r3, #0
 800f608:	d109      	bne.n	800f61e <_ZL12JPEGPutMCU21P14jpeg_image_tagii+0xe8>
                    JPEGPixelLE(pOutput+iCol, Y1, iCb, iCr);
 800f60a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f60c:	005b      	lsls	r3, r3, #1
 800f60e:	6a3a      	ldr	r2, [r7, #32]
 800f610:	18d0      	adds	r0, r2, r3
 800f612:	69fb      	ldr	r3, [r7, #28]
 800f614:	69ba      	ldr	r2, [r7, #24]
 800f616:	6979      	ldr	r1, [r7, #20]
 800f618:	f7fd fe40 	bl	800d29c <_ZL11JPEGPixelLEPtiii>
 800f61c:	e017      	b.n	800f64e <_ZL12JPEGPutMCU21P14jpeg_image_tagii+0x118>
                else if (pJPEG->ucPixelType == RGB565_BIG_ENDIAN)
 800f61e:	68fb      	ldr	r3, [r7, #12]
 800f620:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f624:	2b01      	cmp	r3, #1
 800f626:	d109      	bne.n	800f63c <_ZL12JPEGPutMCU21P14jpeg_image_tagii+0x106>
                    JPEGPixelBE(pOutput+iCol, Y1, iCb, iCr);
 800f628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f62a:	005b      	lsls	r3, r3, #1
 800f62c:	6a3a      	ldr	r2, [r7, #32]
 800f62e:	18d0      	adds	r0, r2, r3
 800f630:	69fb      	ldr	r3, [r7, #28]
 800f632:	69ba      	ldr	r2, [r7, #24]
 800f634:	6979      	ldr	r1, [r7, #20]
 800f636:	f7fd fe89 	bl	800d34c <_ZL11JPEGPixelBEPtiii>
 800f63a:	e008      	b.n	800f64e <_ZL12JPEGPutMCU21P14jpeg_image_tagii+0x118>
                else
                    JPEGPixelRGB((uint32_t *)&pOutput[iCol*2], Y1, iCb, iCr);
 800f63c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f63e:	009b      	lsls	r3, r3, #2
 800f640:	6a3a      	ldr	r2, [r7, #32]
 800f642:	18d0      	adds	r0, r2, r3
 800f644:	69fb      	ldr	r3, [r7, #28]
 800f646:	69ba      	ldr	r2, [r7, #24]
 800f648:	6979      	ldr	r1, [r7, #20]
 800f64a:	f7fd fed9 	bl	800d400 <_ZL12JPEGPixelRGBPmiii>
                // right block
                iCr = (pCr[4] + pCr[12] + 1) >> 1;
 800f64e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f650:	3304      	adds	r3, #4
 800f652:	781b      	ldrb	r3, [r3, #0]
 800f654:	461a      	mov	r2, r3
 800f656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f658:	330c      	adds	r3, #12
 800f65a:	781b      	ldrb	r3, [r3, #0]
 800f65c:	4413      	add	r3, r2
 800f65e:	3301      	adds	r3, #1
 800f660:	105b      	asrs	r3, r3, #1
 800f662:	61fb      	str	r3, [r7, #28]
                iCb = (pCb[4] + pCb[12] + 1) >> 1;
 800f664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f666:	3304      	adds	r3, #4
 800f668:	781b      	ldrb	r3, [r3, #0]
 800f66a:	461a      	mov	r2, r3
 800f66c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f66e:	330c      	adds	r3, #12
 800f670:	781b      	ldrb	r3, [r3, #0]
 800f672:	4413      	add	r3, r2
 800f674:	3301      	adds	r3, #1
 800f676:	105b      	asrs	r3, r3, #1
 800f678:	61bb      	str	r3, [r7, #24]
                Y1 = (signed int)(pY[128] + pY[129] + pY[136] + pY[137]) << 10;
 800f67a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f67c:	3380      	adds	r3, #128	; 0x80
 800f67e:	781b      	ldrb	r3, [r3, #0]
 800f680:	461a      	mov	r2, r3
 800f682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f684:	3381      	adds	r3, #129	; 0x81
 800f686:	781b      	ldrb	r3, [r3, #0]
 800f688:	4413      	add	r3, r2
 800f68a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f68c:	3288      	adds	r2, #136	; 0x88
 800f68e:	7812      	ldrb	r2, [r2, #0]
 800f690:	4413      	add	r3, r2
 800f692:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f694:	3289      	adds	r2, #137	; 0x89
 800f696:	7812      	ldrb	r2, [r2, #0]
 800f698:	4413      	add	r3, r2
 800f69a:	029b      	lsls	r3, r3, #10
 800f69c:	617b      	str	r3, [r7, #20]
                if (pJPEG->ucPixelType == RGB565_LITTLE_ENDIAN)
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	d10a      	bne.n	800f6be <_ZL12JPEGPutMCU21P14jpeg_image_tagii+0x188>
                    JPEGPixelLE(pOutput+iCol+4, Y1, iCb, iCr);
 800f6a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f6aa:	3304      	adds	r3, #4
 800f6ac:	005b      	lsls	r3, r3, #1
 800f6ae:	6a3a      	ldr	r2, [r7, #32]
 800f6b0:	18d0      	adds	r0, r2, r3
 800f6b2:	69fb      	ldr	r3, [r7, #28]
 800f6b4:	69ba      	ldr	r2, [r7, #24]
 800f6b6:	6979      	ldr	r1, [r7, #20]
 800f6b8:	f7fd fdf0 	bl	800d29c <_ZL11JPEGPixelLEPtiii>
 800f6bc:	e019      	b.n	800f6f2 <_ZL12JPEGPutMCU21P14jpeg_image_tagii+0x1bc>
                else if (pJPEG->ucPixelType == RGB565_BIG_ENDIAN)
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f6c4:	2b01      	cmp	r3, #1
 800f6c6:	d10a      	bne.n	800f6de <_ZL12JPEGPutMCU21P14jpeg_image_tagii+0x1a8>
                    JPEGPixelBE(pOutput+iCol+4, Y1, iCb, iCr);
 800f6c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f6ca:	3304      	adds	r3, #4
 800f6cc:	005b      	lsls	r3, r3, #1
 800f6ce:	6a3a      	ldr	r2, [r7, #32]
 800f6d0:	18d0      	adds	r0, r2, r3
 800f6d2:	69fb      	ldr	r3, [r7, #28]
 800f6d4:	69ba      	ldr	r2, [r7, #24]
 800f6d6:	6979      	ldr	r1, [r7, #20]
 800f6d8:	f7fd fe38 	bl	800d34c <_ZL11JPEGPixelBEPtiii>
 800f6dc:	e009      	b.n	800f6f2 <_ZL12JPEGPutMCU21P14jpeg_image_tagii+0x1bc>
                else
                    JPEGPixelRGB((uint32_t *)&pOutput[(iCol+4)*2], Y1, iCb, iCr);
 800f6de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f6e0:	3304      	adds	r3, #4
 800f6e2:	009b      	lsls	r3, r3, #2
 800f6e4:	6a3a      	ldr	r2, [r7, #32]
 800f6e6:	18d0      	adds	r0, r2, r3
 800f6e8:	69fb      	ldr	r3, [r7, #28]
 800f6ea:	69ba      	ldr	r2, [r7, #24]
 800f6ec:	6979      	ldr	r1, [r7, #20]
 800f6ee:	f7fd fe87 	bl	800d400 <_ZL12JPEGPixelRGBPmiii>
                pCb++;
 800f6f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6f4:	3301      	adds	r3, #1
 800f6f6:	627b      	str	r3, [r7, #36]	; 0x24
                pCr++;
 800f6f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6fa:	3301      	adds	r3, #1
 800f6fc:	62bb      	str	r3, [r7, #40]	; 0x28
                pY += 2;
 800f6fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f700:	3302      	adds	r3, #2
 800f702:	62fb      	str	r3, [r7, #44]	; 0x2c
            for (iCol=0; iCol<4; iCol++)
 800f704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f706:	3301      	adds	r3, #1
 800f708:	637b      	str	r3, [r7, #52]	; 0x34
 800f70a:	e750      	b.n	800f5ae <_ZL12JPEGPutMCU21P14jpeg_image_tagii+0x78>
            }
            pCb += 12;
 800f70c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f70e:	330c      	adds	r3, #12
 800f710:	627b      	str	r3, [r7, #36]	; 0x24
            pCr += 12;
 800f712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f714:	330c      	adds	r3, #12
 800f716:	62bb      	str	r3, [r7, #40]	; 0x28
            pY += 8;
 800f718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f71a:	3308      	adds	r3, #8
 800f71c:	62fb      	str	r3, [r7, #44]	; 0x2c
            pOutput += (pJPEG->ucPixelType == RGB8888) ? iPitch*2 : iPitch;
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f724:	2b02      	cmp	r3, #2
 800f726:	d102      	bne.n	800f72e <_ZL12JPEGPutMCU21P14jpeg_image_tagii+0x1f8>
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	009b      	lsls	r3, r3, #2
 800f72c:	e001      	b.n	800f732 <_ZL12JPEGPutMCU21P14jpeg_image_tagii+0x1fc>
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	005b      	lsls	r3, r3, #1
 800f732:	6a3a      	ldr	r2, [r7, #32]
 800f734:	4413      	add	r3, r2
 800f736:	623b      	str	r3, [r7, #32]
        for (iRow=0; iRow<4; iRow++)
 800f738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f73a:	3301      	adds	r3, #1
 800f73c:	633b      	str	r3, [r7, #48]	; 0x30
 800f73e:	e730      	b.n	800f5a2 <_ZL12JPEGPutMCU21P14jpeg_image_tagii+0x6c>
        }
        return;
    }
    if (pJPEG->iOptions & JPEG_SCALE_EIGHTH)
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f744:	f003 0308 	and.w	r3, r3, #8
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d033      	beq.n	800f7b4 <_ZL12JPEGPutMCU21P14jpeg_image_tagii+0x27e>
    { // draw 2 pixels
        iCr = pCr[0];
 800f74c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f74e:	781b      	ldrb	r3, [r3, #0]
 800f750:	61fb      	str	r3, [r7, #28]
        iCb = pCb[0];
 800f752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f754:	781b      	ldrb	r3, [r3, #0]
 800f756:	61bb      	str	r3, [r7, #24]
        Y1 = (signed int)(pY[0]) << 12;
 800f758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f75a:	781b      	ldrb	r3, [r3, #0]
 800f75c:	031b      	lsls	r3, r3, #12
 800f75e:	617b      	str	r3, [r7, #20]
        Y2 = (signed int)(pY[DCTSIZE*2]) << 12;
 800f760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f762:	3380      	adds	r3, #128	; 0x80
 800f764:	781b      	ldrb	r3, [r3, #0]
 800f766:	031b      	lsls	r3, r3, #12
 800f768:	613b      	str	r3, [r7, #16]
        if (pJPEG->ucPixelType == RGB565_LITTLE_ENDIAN)
 800f76a:	68fb      	ldr	r3, [r7, #12]
 800f76c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f770:	2b00      	cmp	r3, #0
 800f772:	d108      	bne.n	800f786 <_ZL12JPEGPutMCU21P14jpeg_image_tagii+0x250>
            JPEGPixel2LE(pOutput, Y1, Y2, iCb, iCr);
 800f774:	69fb      	ldr	r3, [r7, #28]
 800f776:	9300      	str	r3, [sp, #0]
 800f778:	69bb      	ldr	r3, [r7, #24]
 800f77a:	693a      	ldr	r2, [r7, #16]
 800f77c:	6979      	ldr	r1, [r7, #20]
 800f77e:	6a38      	ldr	r0, [r7, #32]
 800f780:	f7fd feb0 	bl	800d4e4 <_ZL12JPEGPixel2LEPtiiii>
        else if (pJPEG->ucPixelType == RGB565_BIG_ENDIAN)
            JPEGPixel2BE(pOutput, Y1, Y2, iCb, iCr);
        else
            JPEGPixel2RGB((uint32_t *)pOutput, Y1, Y2, iCb, iCr);
        return;
 800f784:	e1b9      	b.n	800fafa <_ZL12JPEGPutMCU21P14jpeg_image_tagii+0x5c4>
        else if (pJPEG->ucPixelType == RGB565_BIG_ENDIAN)
 800f786:	68fb      	ldr	r3, [r7, #12]
 800f788:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f78c:	2b01      	cmp	r3, #1
 800f78e:	d108      	bne.n	800f7a2 <_ZL12JPEGPutMCU21P14jpeg_image_tagii+0x26c>
            JPEGPixel2BE(pOutput, Y1, Y2, iCb, iCr);
 800f790:	69fb      	ldr	r3, [r7, #28]
 800f792:	9300      	str	r3, [sp, #0]
 800f794:	69bb      	ldr	r3, [r7, #24]
 800f796:	693a      	ldr	r2, [r7, #16]
 800f798:	6979      	ldr	r1, [r7, #20]
 800f79a:	6a38      	ldr	r0, [r7, #32]
 800f79c:	f7fd ff24 	bl	800d5e8 <_ZL12JPEGPixel2BEPtllll>
        return;
 800f7a0:	e1ab      	b.n	800fafa <_ZL12JPEGPutMCU21P14jpeg_image_tagii+0x5c4>
            JPEGPixel2RGB((uint32_t *)pOutput, Y1, Y2, iCb, iCr);
 800f7a2:	69fb      	ldr	r3, [r7, #28]
 800f7a4:	9300      	str	r3, [sp, #0]
 800f7a6:	69bb      	ldr	r3, [r7, #24]
 800f7a8:	693a      	ldr	r2, [r7, #16]
 800f7aa:	6979      	ldr	r1, [r7, #20]
 800f7ac:	6a38      	ldr	r0, [r7, #32]
 800f7ae:	f7fd ffa5 	bl	800d6fc <_ZL13JPEGPixel2RGBPmllll>
        return;
 800f7b2:	e1a2      	b.n	800fafa <_ZL12JPEGPutMCU21P14jpeg_image_tagii+0x5c4>
    }
    if (pJPEG->iOptions & JPEG_SCALE_QUARTER)
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f7b8:	f003 0304 	and.w	r3, r3, #4
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	f000 80ef 	beq.w	800f9a0 <_ZL12JPEGPutMCU21P14jpeg_image_tagii+0x46a>
    { // draw 4x2 pixels
        // top left
        iCr = pCr[0];
 800f7c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7c4:	781b      	ldrb	r3, [r3, #0]
 800f7c6:	61fb      	str	r3, [r7, #28]
        iCb = pCb[0];
 800f7c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7ca:	781b      	ldrb	r3, [r3, #0]
 800f7cc:	61bb      	str	r3, [r7, #24]
        Y1 = (signed int)(pY[0]) << 12;
 800f7ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7d0:	781b      	ldrb	r3, [r3, #0]
 800f7d2:	031b      	lsls	r3, r3, #12
 800f7d4:	617b      	str	r3, [r7, #20]
        Y2 = (signed int)(pY[1]) << 12;
 800f7d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7d8:	3301      	adds	r3, #1
 800f7da:	781b      	ldrb	r3, [r3, #0]
 800f7dc:	031b      	lsls	r3, r3, #12
 800f7de:	613b      	str	r3, [r7, #16]
        if (pJPEG->ucPixelType == RGB565_LITTLE_ENDIAN)
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d108      	bne.n	800f7fc <_ZL12JPEGPutMCU21P14jpeg_image_tagii+0x2c6>
            JPEGPixel2LE(pOutput, Y1, Y2, iCb, iCr);
 800f7ea:	69fb      	ldr	r3, [r7, #28]
 800f7ec:	9300      	str	r3, [sp, #0]
 800f7ee:	69bb      	ldr	r3, [r7, #24]
 800f7f0:	693a      	ldr	r2, [r7, #16]
 800f7f2:	6979      	ldr	r1, [r7, #20]
 800f7f4:	6a38      	ldr	r0, [r7, #32]
 800f7f6:	f7fd fe75 	bl	800d4e4 <_ZL12JPEGPixel2LEPtiiii>
 800f7fa:	e015      	b.n	800f828 <_ZL12JPEGPutMCU21P14jpeg_image_tagii+0x2f2>
        else if (pJPEG->ucPixelType == RGB565_BIG_ENDIAN)
 800f7fc:	68fb      	ldr	r3, [r7, #12]
 800f7fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f802:	2b01      	cmp	r3, #1
 800f804:	d108      	bne.n	800f818 <_ZL12JPEGPutMCU21P14jpeg_image_tagii+0x2e2>
            JPEGPixel2BE(pOutput, Y1, Y2, iCb, iCr);
 800f806:	69fb      	ldr	r3, [r7, #28]
 800f808:	9300      	str	r3, [sp, #0]
 800f80a:	69bb      	ldr	r3, [r7, #24]
 800f80c:	693a      	ldr	r2, [r7, #16]
 800f80e:	6979      	ldr	r1, [r7, #20]
 800f810:	6a38      	ldr	r0, [r7, #32]
 800f812:	f7fd fee9 	bl	800d5e8 <_ZL12JPEGPixel2BEPtllll>
 800f816:	e007      	b.n	800f828 <_ZL12JPEGPutMCU21P14jpeg_image_tagii+0x2f2>
        else
            JPEGPixel2RGB((uint32_t *)pOutput, Y1, Y2, iCb, iCr);
 800f818:	69fb      	ldr	r3, [r7, #28]
 800f81a:	9300      	str	r3, [sp, #0]
 800f81c:	69bb      	ldr	r3, [r7, #24]
 800f81e:	693a      	ldr	r2, [r7, #16]
 800f820:	6979      	ldr	r1, [r7, #20]
 800f822:	6a38      	ldr	r0, [r7, #32]
 800f824:	f7fd ff6a 	bl	800d6fc <_ZL13JPEGPixel2RGBPmllll>
        // top right
        iCr = pCr[1];
 800f828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f82a:	3301      	adds	r3, #1
 800f82c:	781b      	ldrb	r3, [r3, #0]
 800f82e:	61fb      	str	r3, [r7, #28]
        iCb = pCb[1];
 800f830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f832:	3301      	adds	r3, #1
 800f834:	781b      	ldrb	r3, [r3, #0]
 800f836:	61bb      	str	r3, [r7, #24]
        Y1 = (signed int)pY[DCTSIZE*2] << 12;
 800f838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f83a:	3380      	adds	r3, #128	; 0x80
 800f83c:	781b      	ldrb	r3, [r3, #0]
 800f83e:	031b      	lsls	r3, r3, #12
 800f840:	617b      	str	r3, [r7, #20]
        Y2 = (signed int)pY[DCTSIZE*2+1] << 12;
 800f842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f844:	3381      	adds	r3, #129	; 0x81
 800f846:	781b      	ldrb	r3, [r3, #0]
 800f848:	031b      	lsls	r3, r3, #12
 800f84a:	613b      	str	r3, [r7, #16]
        if (pJPEG->ucPixelType == RGB565_LITTLE_ENDIAN)
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f852:	2b00      	cmp	r3, #0
 800f854:	d109      	bne.n	800f86a <_ZL12JPEGPutMCU21P14jpeg_image_tagii+0x334>
            JPEGPixel2LE(pOutput + 2, Y1, Y2, iCb, iCr);
 800f856:	6a3b      	ldr	r3, [r7, #32]
 800f858:	1d18      	adds	r0, r3, #4
 800f85a:	69fb      	ldr	r3, [r7, #28]
 800f85c:	9300      	str	r3, [sp, #0]
 800f85e:	69bb      	ldr	r3, [r7, #24]
 800f860:	693a      	ldr	r2, [r7, #16]
 800f862:	6979      	ldr	r1, [r7, #20]
 800f864:	f7fd fe3e 	bl	800d4e4 <_ZL12JPEGPixel2LEPtiiii>
 800f868:	e018      	b.n	800f89c <_ZL12JPEGPutMCU21P14jpeg_image_tagii+0x366>
        else if (pJPEG->ucPixelType == RGB565_BIG_ENDIAN)
 800f86a:	68fb      	ldr	r3, [r7, #12]
 800f86c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f870:	2b01      	cmp	r3, #1
 800f872:	d109      	bne.n	800f888 <_ZL12JPEGPutMCU21P14jpeg_image_tagii+0x352>
            JPEGPixel2BE(pOutput + 2, Y1, Y2, iCb, iCr);
 800f874:	6a3b      	ldr	r3, [r7, #32]
 800f876:	1d18      	adds	r0, r3, #4
 800f878:	69fb      	ldr	r3, [r7, #28]
 800f87a:	9300      	str	r3, [sp, #0]
 800f87c:	69bb      	ldr	r3, [r7, #24]
 800f87e:	693a      	ldr	r2, [r7, #16]
 800f880:	6979      	ldr	r1, [r7, #20]
 800f882:	f7fd feb1 	bl	800d5e8 <_ZL12JPEGPixel2BEPtllll>
 800f886:	e009      	b.n	800f89c <_ZL12JPEGPutMCU21P14jpeg_image_tagii+0x366>
        else
            JPEGPixel2RGB((uint32_t *)&pOutput[4], Y1, Y2, iCb, iCr);
 800f888:	6a3b      	ldr	r3, [r7, #32]
 800f88a:	f103 0008 	add.w	r0, r3, #8
 800f88e:	69fb      	ldr	r3, [r7, #28]
 800f890:	9300      	str	r3, [sp, #0]
 800f892:	69bb      	ldr	r3, [r7, #24]
 800f894:	693a      	ldr	r2, [r7, #16]
 800f896:	6979      	ldr	r1, [r7, #20]
 800f898:	f7fd ff30 	bl	800d6fc <_ZL13JPEGPixel2RGBPmllll>
        // bottom left
        iCr = pCr[2];
 800f89c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f89e:	3302      	adds	r3, #2
 800f8a0:	781b      	ldrb	r3, [r3, #0]
 800f8a2:	61fb      	str	r3, [r7, #28]
        iCb = pCb[2];
 800f8a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8a6:	3302      	adds	r3, #2
 800f8a8:	781b      	ldrb	r3, [r3, #0]
 800f8aa:	61bb      	str	r3, [r7, #24]
        Y1 = (signed int)(pY[2]) << 12;
 800f8ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8ae:	3302      	adds	r3, #2
 800f8b0:	781b      	ldrb	r3, [r3, #0]
 800f8b2:	031b      	lsls	r3, r3, #12
 800f8b4:	617b      	str	r3, [r7, #20]
        Y2 = (signed int)(pY[3]) << 12;
 800f8b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8b8:	3303      	adds	r3, #3
 800f8ba:	781b      	ldrb	r3, [r3, #0]
 800f8bc:	031b      	lsls	r3, r3, #12
 800f8be:	613b      	str	r3, [r7, #16]
        if (pJPEG->ucPixelType == RGB565_LITTLE_ENDIAN)
 800f8c0:	68fb      	ldr	r3, [r7, #12]
 800f8c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	d10b      	bne.n	800f8e2 <_ZL12JPEGPutMCU21P14jpeg_image_tagii+0x3ac>
            JPEGPixel2LE(pOutput + iPitch, Y1, Y2, iCb, iCr);
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	005b      	lsls	r3, r3, #1
 800f8ce:	6a3a      	ldr	r2, [r7, #32]
 800f8d0:	18d0      	adds	r0, r2, r3
 800f8d2:	69fb      	ldr	r3, [r7, #28]
 800f8d4:	9300      	str	r3, [sp, #0]
 800f8d6:	69bb      	ldr	r3, [r7, #24]
 800f8d8:	693a      	ldr	r2, [r7, #16]
 800f8da:	6979      	ldr	r1, [r7, #20]
 800f8dc:	f7fd fe02 	bl	800d4e4 <_ZL12JPEGPixel2LEPtiiii>
 800f8e0:	e01b      	b.n	800f91a <_ZL12JPEGPutMCU21P14jpeg_image_tagii+0x3e4>
        else if (pJPEG->ucPixelType == RGB565_BIG_ENDIAN)
 800f8e2:	68fb      	ldr	r3, [r7, #12]
 800f8e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f8e8:	2b01      	cmp	r3, #1
 800f8ea:	d10b      	bne.n	800f904 <_ZL12JPEGPutMCU21P14jpeg_image_tagii+0x3ce>
            JPEGPixel2BE(pOutput + iPitch, Y1, Y2, iCb, iCr);
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	005b      	lsls	r3, r3, #1
 800f8f0:	6a3a      	ldr	r2, [r7, #32]
 800f8f2:	18d0      	adds	r0, r2, r3
 800f8f4:	69fb      	ldr	r3, [r7, #28]
 800f8f6:	9300      	str	r3, [sp, #0]
 800f8f8:	69bb      	ldr	r3, [r7, #24]
 800f8fa:	693a      	ldr	r2, [r7, #16]
 800f8fc:	6979      	ldr	r1, [r7, #20]
 800f8fe:	f7fd fe73 	bl	800d5e8 <_ZL12JPEGPixel2BEPtllll>
 800f902:	e00a      	b.n	800f91a <_ZL12JPEGPutMCU21P14jpeg_image_tagii+0x3e4>
        else
            JPEGPixel2RGB((uint32_t *)&pOutput[iPitch*2], Y1, Y2, iCb, iCr);
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	009b      	lsls	r3, r3, #2
 800f908:	6a3a      	ldr	r2, [r7, #32]
 800f90a:	18d0      	adds	r0, r2, r3
 800f90c:	69fb      	ldr	r3, [r7, #28]
 800f90e:	9300      	str	r3, [sp, #0]
 800f910:	69bb      	ldr	r3, [r7, #24]
 800f912:	693a      	ldr	r2, [r7, #16]
 800f914:	6979      	ldr	r1, [r7, #20]
 800f916:	f7fd fef1 	bl	800d6fc <_ZL13JPEGPixel2RGBPmllll>
        // bottom right
        iCr = pCr[3];
 800f91a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f91c:	3303      	adds	r3, #3
 800f91e:	781b      	ldrb	r3, [r3, #0]
 800f920:	61fb      	str	r3, [r7, #28]
        iCb = pCb[3];
 800f922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f924:	3303      	adds	r3, #3
 800f926:	781b      	ldrb	r3, [r3, #0]
 800f928:	61bb      	str	r3, [r7, #24]
        Y1 = (signed int)pY[DCTSIZE*2+2] << 12;
 800f92a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f92c:	3382      	adds	r3, #130	; 0x82
 800f92e:	781b      	ldrb	r3, [r3, #0]
 800f930:	031b      	lsls	r3, r3, #12
 800f932:	617b      	str	r3, [r7, #20]
        Y2 = (signed int)pY[DCTSIZE*2+3] << 12;
 800f934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f936:	3383      	adds	r3, #131	; 0x83
 800f938:	781b      	ldrb	r3, [r3, #0]
 800f93a:	031b      	lsls	r3, r3, #12
 800f93c:	613b      	str	r3, [r7, #16]
        if (pJPEG->ucPixelType == RGB565_LITTLE_ENDIAN)
 800f93e:	68fb      	ldr	r3, [r7, #12]
 800f940:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f944:	2b00      	cmp	r3, #0
 800f946:	d10c      	bne.n	800f962 <_ZL12JPEGPutMCU21P14jpeg_image_tagii+0x42c>
            JPEGPixel2LE(pOutput + iPitch + 2, Y1, Y2, iCb, iCr);
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	3302      	adds	r3, #2
 800f94c:	005b      	lsls	r3, r3, #1
 800f94e:	6a3a      	ldr	r2, [r7, #32]
 800f950:	18d0      	adds	r0, r2, r3
 800f952:	69fb      	ldr	r3, [r7, #28]
 800f954:	9300      	str	r3, [sp, #0]
 800f956:	69bb      	ldr	r3, [r7, #24]
 800f958:	693a      	ldr	r2, [r7, #16]
 800f95a:	6979      	ldr	r1, [r7, #20]
 800f95c:	f7fd fdc2 	bl	800d4e4 <_ZL12JPEGPixel2LEPtiiii>
        else if (pJPEG->ucPixelType == RGB565_BIG_ENDIAN)
            JPEGPixel2BE(pOutput + iPitch + 2, Y1, Y2, iCb, iCr);
        else
            JPEGPixel2RGB((uint32_t *)&pOutput[(iPitch+2)*2], Y1, Y2, iCb, iCr);
        return;
 800f960:	e0cb      	b.n	800fafa <_ZL12JPEGPutMCU21P14jpeg_image_tagii+0x5c4>
        else if (pJPEG->ucPixelType == RGB565_BIG_ENDIAN)
 800f962:	68fb      	ldr	r3, [r7, #12]
 800f964:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f968:	2b01      	cmp	r3, #1
 800f96a:	d10c      	bne.n	800f986 <_ZL12JPEGPutMCU21P14jpeg_image_tagii+0x450>
            JPEGPixel2BE(pOutput + iPitch + 2, Y1, Y2, iCb, iCr);
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	3302      	adds	r3, #2
 800f970:	005b      	lsls	r3, r3, #1
 800f972:	6a3a      	ldr	r2, [r7, #32]
 800f974:	18d0      	adds	r0, r2, r3
 800f976:	69fb      	ldr	r3, [r7, #28]
 800f978:	9300      	str	r3, [sp, #0]
 800f97a:	69bb      	ldr	r3, [r7, #24]
 800f97c:	693a      	ldr	r2, [r7, #16]
 800f97e:	6979      	ldr	r1, [r7, #20]
 800f980:	f7fd fe32 	bl	800d5e8 <_ZL12JPEGPixel2BEPtllll>
        return;
 800f984:	e0b9      	b.n	800fafa <_ZL12JPEGPutMCU21P14jpeg_image_tagii+0x5c4>
            JPEGPixel2RGB((uint32_t *)&pOutput[(iPitch+2)*2], Y1, Y2, iCb, iCr);
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	3302      	adds	r3, #2
 800f98a:	009b      	lsls	r3, r3, #2
 800f98c:	6a3a      	ldr	r2, [r7, #32]
 800f98e:	18d0      	adds	r0, r2, r3
 800f990:	69fb      	ldr	r3, [r7, #28]
 800f992:	9300      	str	r3, [sp, #0]
 800f994:	69bb      	ldr	r3, [r7, #24]
 800f996:	693a      	ldr	r2, [r7, #16]
 800f998:	6979      	ldr	r1, [r7, #20]
 800f99a:	f7fd feaf 	bl	800d6fc <_ZL13JPEGPixel2RGBPmllll>
        return;
 800f99e:	e0ac      	b.n	800fafa <_ZL12JPEGPutMCU21P14jpeg_image_tagii+0x5c4>
    }
// Full size
    /* Convert YCC pixels into RGB pixels and store in output image */
    for (iRow=0; iRow<8; iRow++) // up to 8 rows to do
 800f9a0:	2300      	movs	r3, #0
 800f9a2:	633b      	str	r3, [r7, #48]	; 0x30
 800f9a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9a6:	2b07      	cmp	r3, #7
 800f9a8:	f300 80a7 	bgt.w	800fafa <_ZL12JPEGPutMCU21P14jpeg_image_tagii+0x5c4>
    {
        for (iCol=0; iCol<4; iCol++) // up to 4x2 cols to do
 800f9ac:	2300      	movs	r3, #0
 800f9ae:	637b      	str	r3, [r7, #52]	; 0x34
 800f9b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f9b2:	2b03      	cmp	r3, #3
 800f9b4:	f300 8089 	bgt.w	800faca <_ZL12JPEGPutMCU21P14jpeg_image_tagii+0x594>
        { // left block
            iCr = *pCr++;
 800f9b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9ba:	1c5a      	adds	r2, r3, #1
 800f9bc:	62ba      	str	r2, [r7, #40]	; 0x28
 800f9be:	781b      	ldrb	r3, [r3, #0]
 800f9c0:	61fb      	str	r3, [r7, #28]
            iCb = *pCb++;
 800f9c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9c4:	1c5a      	adds	r2, r3, #1
 800f9c6:	627a      	str	r2, [r7, #36]	; 0x24
 800f9c8:	781b      	ldrb	r3, [r3, #0]
 800f9ca:	61bb      	str	r3, [r7, #24]
            Y1 = (signed int)(*pY++) << 12;
 800f9cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9ce:	1c5a      	adds	r2, r3, #1
 800f9d0:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f9d2:	781b      	ldrb	r3, [r3, #0]
 800f9d4:	031b      	lsls	r3, r3, #12
 800f9d6:	617b      	str	r3, [r7, #20]
            Y2 = (signed int)(*pY++) << 12;
 800f9d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9da:	1c5a      	adds	r2, r3, #1
 800f9dc:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f9de:	781b      	ldrb	r3, [r3, #0]
 800f9e0:	031b      	lsls	r3, r3, #12
 800f9e2:	613b      	str	r3, [r7, #16]
            if (pJPEG->ucPixelType == RGB565_LITTLE_ENDIAN)
 800f9e4:	68fb      	ldr	r3, [r7, #12]
 800f9e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d10b      	bne.n	800fa06 <_ZL12JPEGPutMCU21P14jpeg_image_tagii+0x4d0>
                JPEGPixel2LE(pOutput + iCol*2, Y1, Y2, iCb, iCr);
 800f9ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f9f0:	009b      	lsls	r3, r3, #2
 800f9f2:	6a3a      	ldr	r2, [r7, #32]
 800f9f4:	18d0      	adds	r0, r2, r3
 800f9f6:	69fb      	ldr	r3, [r7, #28]
 800f9f8:	9300      	str	r3, [sp, #0]
 800f9fa:	69bb      	ldr	r3, [r7, #24]
 800f9fc:	693a      	ldr	r2, [r7, #16]
 800f9fe:	6979      	ldr	r1, [r7, #20]
 800fa00:	f7fd fd70 	bl	800d4e4 <_ZL12JPEGPixel2LEPtiiii>
 800fa04:	e01b      	b.n	800fa3e <_ZL12JPEGPutMCU21P14jpeg_image_tagii+0x508>
            else if (pJPEG->ucPixelType == RGB565_BIG_ENDIAN)
 800fa06:	68fb      	ldr	r3, [r7, #12]
 800fa08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fa0c:	2b01      	cmp	r3, #1
 800fa0e:	d10b      	bne.n	800fa28 <_ZL12JPEGPutMCU21P14jpeg_image_tagii+0x4f2>
                JPEGPixel2BE(pOutput + iCol*2, Y1, Y2, iCb, iCr);
 800fa10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa12:	009b      	lsls	r3, r3, #2
 800fa14:	6a3a      	ldr	r2, [r7, #32]
 800fa16:	18d0      	adds	r0, r2, r3
 800fa18:	69fb      	ldr	r3, [r7, #28]
 800fa1a:	9300      	str	r3, [sp, #0]
 800fa1c:	69bb      	ldr	r3, [r7, #24]
 800fa1e:	693a      	ldr	r2, [r7, #16]
 800fa20:	6979      	ldr	r1, [r7, #20]
 800fa22:	f7fd fde1 	bl	800d5e8 <_ZL12JPEGPixel2BEPtllll>
 800fa26:	e00a      	b.n	800fa3e <_ZL12JPEGPutMCU21P14jpeg_image_tagii+0x508>
            else // RGB8888
                JPEGPixel2RGB((uint32_t *)&pOutput[iCol*4], Y1, Y2, iCb, iCr);
 800fa28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa2a:	00db      	lsls	r3, r3, #3
 800fa2c:	6a3a      	ldr	r2, [r7, #32]
 800fa2e:	18d0      	adds	r0, r2, r3
 800fa30:	69fb      	ldr	r3, [r7, #28]
 800fa32:	9300      	str	r3, [sp, #0]
 800fa34:	69bb      	ldr	r3, [r7, #24]
 800fa36:	693a      	ldr	r2, [r7, #16]
 800fa38:	6979      	ldr	r1, [r7, #20]
 800fa3a:	f7fd fe5f 	bl	800d6fc <_ZL13JPEGPixel2RGBPmllll>
            // right block
            iCr = pCr[3];
 800fa3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa40:	3303      	adds	r3, #3
 800fa42:	781b      	ldrb	r3, [r3, #0]
 800fa44:	61fb      	str	r3, [r7, #28]
            iCb = pCb[3];
 800fa46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa48:	3303      	adds	r3, #3
 800fa4a:	781b      	ldrb	r3, [r3, #0]
 800fa4c:	61bb      	str	r3, [r7, #24]
            Y1 = (signed int)pY[126] << 12;
 800fa4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa50:	337e      	adds	r3, #126	; 0x7e
 800fa52:	781b      	ldrb	r3, [r3, #0]
 800fa54:	031b      	lsls	r3, r3, #12
 800fa56:	617b      	str	r3, [r7, #20]
            Y2 = (signed int)pY[127] << 12;
 800fa58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa5a:	337f      	adds	r3, #127	; 0x7f
 800fa5c:	781b      	ldrb	r3, [r3, #0]
 800fa5e:	031b      	lsls	r3, r3, #12
 800fa60:	613b      	str	r3, [r7, #16]
            if (pJPEG->ucPixelType == RGB565_LITTLE_ENDIAN)
 800fa62:	68fb      	ldr	r3, [r7, #12]
 800fa64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d10c      	bne.n	800fa86 <_ZL12JPEGPutMCU21P14jpeg_image_tagii+0x550>
                JPEGPixel2LE(pOutput + 8 + iCol*2, Y1, Y2, iCb, iCr);
 800fa6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa6e:	3304      	adds	r3, #4
 800fa70:	009b      	lsls	r3, r3, #2
 800fa72:	6a3a      	ldr	r2, [r7, #32]
 800fa74:	18d0      	adds	r0, r2, r3
 800fa76:	69fb      	ldr	r3, [r7, #28]
 800fa78:	9300      	str	r3, [sp, #0]
 800fa7a:	69bb      	ldr	r3, [r7, #24]
 800fa7c:	693a      	ldr	r2, [r7, #16]
 800fa7e:	6979      	ldr	r1, [r7, #20]
 800fa80:	f7fd fd30 	bl	800d4e4 <_ZL12JPEGPixel2LEPtiiii>
 800fa84:	e01d      	b.n	800fac2 <_ZL12JPEGPutMCU21P14jpeg_image_tagii+0x58c>
            else if (pJPEG->ucPixelType == RGB565_BIG_ENDIAN)
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fa8c:	2b01      	cmp	r3, #1
 800fa8e:	d10c      	bne.n	800faaa <_ZL12JPEGPutMCU21P14jpeg_image_tagii+0x574>
                JPEGPixel2BE(pOutput + 8 + iCol*2, Y1, Y2, iCb, iCr);
 800fa90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa92:	3304      	adds	r3, #4
 800fa94:	009b      	lsls	r3, r3, #2
 800fa96:	6a3a      	ldr	r2, [r7, #32]
 800fa98:	18d0      	adds	r0, r2, r3
 800fa9a:	69fb      	ldr	r3, [r7, #28]
 800fa9c:	9300      	str	r3, [sp, #0]
 800fa9e:	69bb      	ldr	r3, [r7, #24]
 800faa0:	693a      	ldr	r2, [r7, #16]
 800faa2:	6979      	ldr	r1, [r7, #20]
 800faa4:	f7fd fda0 	bl	800d5e8 <_ZL12JPEGPixel2BEPtllll>
 800faa8:	e00b      	b.n	800fac2 <_ZL12JPEGPutMCU21P14jpeg_image_tagii+0x58c>
            else // RGB8888
                JPEGPixel2RGB((uint32_t *)&pOutput[16 + iCol*4], Y1, Y2, iCb, iCr);
 800faaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800faac:	3304      	adds	r3, #4
 800faae:	00db      	lsls	r3, r3, #3
 800fab0:	6a3a      	ldr	r2, [r7, #32]
 800fab2:	18d0      	adds	r0, r2, r3
 800fab4:	69fb      	ldr	r3, [r7, #28]
 800fab6:	9300      	str	r3, [sp, #0]
 800fab8:	69bb      	ldr	r3, [r7, #24]
 800faba:	693a      	ldr	r2, [r7, #16]
 800fabc:	6979      	ldr	r1, [r7, #20]
 800fabe:	f7fd fe1d 	bl	800d6fc <_ZL13JPEGPixel2RGBPmllll>
        for (iCol=0; iCol<4; iCol++) // up to 4x2 cols to do
 800fac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fac4:	3301      	adds	r3, #1
 800fac6:	637b      	str	r3, [r7, #52]	; 0x34
 800fac8:	e772      	b.n	800f9b0 <_ZL12JPEGPutMCU21P14jpeg_image_tagii+0x47a>
        } // for col
        pCb += 4;
 800faca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800facc:	3304      	adds	r3, #4
 800face:	627b      	str	r3, [r7, #36]	; 0x24
        pCr += 4;
 800fad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fad2:	3304      	adds	r3, #4
 800fad4:	62bb      	str	r3, [r7, #40]	; 0x28
        pOutput += (pJPEG->ucPixelType == RGB8888) ? iPitch*2 : iPitch;
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fadc:	2b02      	cmp	r3, #2
 800fade:	d102      	bne.n	800fae6 <_ZL12JPEGPutMCU21P14jpeg_image_tagii+0x5b0>
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	009b      	lsls	r3, r3, #2
 800fae4:	e001      	b.n	800faea <_ZL12JPEGPutMCU21P14jpeg_image_tagii+0x5b4>
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	005b      	lsls	r3, r3, #1
 800faea:	6a3a      	ldr	r2, [r7, #32]
 800faec:	4413      	add	r3, r2
 800faee:	623b      	str	r3, [r7, #32]
    for (iRow=0; iRow<8; iRow++) // up to 8 rows to do
 800faf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800faf2:	3301      	adds	r3, #1
 800faf4:	633b      	str	r3, [r7, #48]	; 0x30
 800faf6:	e755      	b.n	800f9a4 <_ZL12JPEGPutMCU21P14jpeg_image_tagii+0x46e>
        return;
 800faf8:	bf00      	nop
    } // for row
} /* JPEGPutMCU21() */
 800fafa:	3738      	adds	r7, #56	; 0x38
 800fafc:	46bd      	mov	sp, r7
 800fafe:	bd80      	pop	{r7, pc}

0800fb00 <_ZL10JPEGDitherP14jpeg_image_tagii>:

// Dither the 8-bit gray pixels into 1, 2, or 4-bit gray
static void JPEGDither(JPEGIMAGE *pJPEG, int iWidth, int iHeight)
{
 800fb00:	b480      	push	{r7}
 800fb02:	b09b      	sub	sp, #108	; 0x6c
 800fb04:	af00      	add	r7, sp, #0
 800fb06:	60f8      	str	r0, [r7, #12]
 800fb08:	60b9      	str	r1, [r7, #8]
 800fb0a:	607a      	str	r2, [r7, #4]
int x, y, xmask=0, iDestPitch=0;
 800fb0c:	2300      	movs	r3, #0
 800fb0e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fb10:	2300      	movs	r3, #0
 800fb12:	65bb      	str	r3, [r7, #88]	; 0x58
int32_t cNew, lFErr, v=0, h;
 800fb14:	2300      	movs	r3, #0
 800fb16:	63bb      	str	r3, [r7, #56]	; 0x38
int32_t e1,e2,e3,e4;
uint8_t cOut, ucPixelType; // forward errors for gray
uint8_t *pSrc, *pDest, *errors, *pErrors=NULL, *d, *pPixels; // destination 8bpp image
 800fb18:	2300      	movs	r3, #0
 800fb1a:	64bb      	str	r3, [r7, #72]	; 0x48
uint8_t pixelmask=0, shift=0;
 800fb1c:	2300      	movs	r3, #0
 800fb1e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800fb22:	2300      	movs	r3, #0
 800fb24:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
    ucPixelType = pJPEG->ucPixelType;
 800fb28:	68fb      	ldr	r3, [r7, #12]
 800fb2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fb2e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    errors = (uint8_t *)pJPEG->usPixels; // plenty of space here
 800fb32:	68fb      	ldr	r3, [r7, #12]
 800fb34:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800fb38:	633b      	str	r3, [r7, #48]	; 0x30
    errors[0] = errors[1] = errors[2] = 0;
 800fb3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb3c:	1c9a      	adds	r2, r3, #2
 800fb3e:	2300      	movs	r3, #0
 800fb40:	7013      	strb	r3, [r2, #0]
 800fb42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb44:	3301      	adds	r3, #1
 800fb46:	7812      	ldrb	r2, [r2, #0]
 800fb48:	701a      	strb	r2, [r3, #0]
 800fb4a:	781a      	ldrb	r2, [r3, #0]
 800fb4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb4e:	701a      	strb	r2, [r3, #0]
    pDest = pSrc = pJPEG->pDitherBuffer; // write the new pixels over the original
 800fb50:	68fb      	ldr	r3, [r7, #12]
 800fb52:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800fb56:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fb58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb5a:	62bb      	str	r3, [r7, #40]	; 0x28
    switch (ucPixelType)
 800fb5c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fb60:	2b06      	cmp	r3, #6
 800fb62:	d025      	beq.n	800fbb0 <_ZL10JPEGDitherP14jpeg_image_tagii+0xb0>
 800fb64:	2b06      	cmp	r3, #6
 800fb66:	dc33      	bgt.n	800fbd0 <_ZL10JPEGDitherP14jpeg_image_tagii+0xd0>
 800fb68:	2b04      	cmp	r3, #4
 800fb6a:	d002      	beq.n	800fb72 <_ZL10JPEGDitherP14jpeg_image_tagii+0x72>
 800fb6c:	2b05      	cmp	r3, #5
 800fb6e:	d00f      	beq.n	800fb90 <_ZL10JPEGDitherP14jpeg_image_tagii+0x90>
 800fb70:	e02e      	b.n	800fbd0 <_ZL10JPEGDitherP14jpeg_image_tagii+0xd0>
    {
        case FOUR_BIT_DITHERED:
            iDestPitch = (iWidth+1)/2;
 800fb72:	68bb      	ldr	r3, [r7, #8]
 800fb74:	3301      	adds	r3, #1
 800fb76:	0fda      	lsrs	r2, r3, #31
 800fb78:	4413      	add	r3, r2
 800fb7a:	105b      	asrs	r3, r3, #1
 800fb7c:	65bb      	str	r3, [r7, #88]	; 0x58
            pixelmask = 0xf0;
 800fb7e:	23f0      	movs	r3, #240	; 0xf0
 800fb80:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            shift = 4;
 800fb84:	2304      	movs	r3, #4
 800fb86:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
            xmask = 1;
 800fb8a:	2301      	movs	r3, #1
 800fb8c:	65fb      	str	r3, [r7, #92]	; 0x5c
            break;
 800fb8e:	e01f      	b.n	800fbd0 <_ZL10JPEGDitherP14jpeg_image_tagii+0xd0>
        case TWO_BIT_DITHERED:
            iDestPitch = (iWidth+3)/4;
 800fb90:	68bb      	ldr	r3, [r7, #8]
 800fb92:	3303      	adds	r3, #3
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	da00      	bge.n	800fb9a <_ZL10JPEGDitherP14jpeg_image_tagii+0x9a>
 800fb98:	3303      	adds	r3, #3
 800fb9a:	109b      	asrs	r3, r3, #2
 800fb9c:	65bb      	str	r3, [r7, #88]	; 0x58
            pixelmask = 0xc0;
 800fb9e:	23c0      	movs	r3, #192	; 0xc0
 800fba0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            shift = 2;
 800fba4:	2302      	movs	r3, #2
 800fba6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
            xmask = 3;
 800fbaa:	2303      	movs	r3, #3
 800fbac:	65fb      	str	r3, [r7, #92]	; 0x5c
            break;
 800fbae:	e00f      	b.n	800fbd0 <_ZL10JPEGDitherP14jpeg_image_tagii+0xd0>
        case ONE_BIT_DITHERED:
            iDestPitch = (iWidth+7)/8;
 800fbb0:	68bb      	ldr	r3, [r7, #8]
 800fbb2:	3307      	adds	r3, #7
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	da00      	bge.n	800fbba <_ZL10JPEGDitherP14jpeg_image_tagii+0xba>
 800fbb8:	3307      	adds	r3, #7
 800fbba:	10db      	asrs	r3, r3, #3
 800fbbc:	65bb      	str	r3, [r7, #88]	; 0x58
            pixelmask = 0x80;
 800fbbe:	2380      	movs	r3, #128	; 0x80
 800fbc0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            shift = 1;
 800fbc4:	2301      	movs	r3, #1
 800fbc6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
            xmask = 7;
 800fbca:	2307      	movs	r3, #7
 800fbcc:	65fb      	str	r3, [r7, #92]	; 0x5c
            break;
 800fbce:	bf00      	nop
    }
    for (y=0; y<iHeight; y++)
 800fbd0:	2300      	movs	r3, #0
 800fbd2:	663b      	str	r3, [r7, #96]	; 0x60
 800fbd4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	429a      	cmp	r2, r3
 800fbda:	f280 8097 	bge.w	800fd0c <_ZL10JPEGDitherP14jpeg_image_tagii+0x20c>
    {
        pPixels = &pSrc[y * iWidth];
 800fbde:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fbe0:	68ba      	ldr	r2, [r7, #8]
 800fbe2:	fb02 f303 	mul.w	r3, r2, r3
 800fbe6:	461a      	mov	r2, r3
 800fbe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbea:	4413      	add	r3, r2
 800fbec:	643b      	str	r3, [r7, #64]	; 0x40
        d = &pDest[y * iDestPitch];
 800fbee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fbf0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fbf2:	fb02 f303 	mul.w	r3, r2, r3
 800fbf6:	461a      	mov	r2, r3
 800fbf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbfa:	4413      	add	r3, r2
 800fbfc:	647b      	str	r3, [r7, #68]	; 0x44
        pErrors = &errors[1]; // point to second pixel to avoid boundary check
 800fbfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc00:	3301      	adds	r3, #1
 800fc02:	64bb      	str	r3, [r7, #72]	; 0x48
        lFErr = 0;
 800fc04:	2300      	movs	r3, #0
 800fc06:	653b      	str	r3, [r7, #80]	; 0x50
        cOut = 0;
 800fc08:	2300      	movs	r3, #0
 800fc0a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        for (x=0; x<iWidth; x++)
 800fc0e:	2300      	movs	r3, #0
 800fc10:	667b      	str	r3, [r7, #100]	; 0x64
 800fc12:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800fc14:	68bb      	ldr	r3, [r7, #8]
 800fc16:	429a      	cmp	r2, r3
 800fc18:	da74      	bge.n	800fd04 <_ZL10JPEGDitherP14jpeg_image_tagii+0x204>
        {
            cNew = *pPixels++; // get grayscale uint8_t pixel
 800fc1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc1c:	1c5a      	adds	r2, r3, #1
 800fc1e:	643a      	str	r2, [r7, #64]	; 0x40
 800fc20:	781b      	ldrb	r3, [r3, #0]
 800fc22:	657b      	str	r3, [r7, #84]	; 0x54
            // add forward error
            cNew += lFErr;
 800fc24:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fc26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc28:	4413      	add	r3, r2
 800fc2a:	657b      	str	r3, [r7, #84]	; 0x54
            if (cNew > 255) cNew = 255;     // clip to uint8_t
 800fc2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fc2e:	2bff      	cmp	r3, #255	; 0xff
 800fc30:	dd01      	ble.n	800fc36 <_ZL10JPEGDitherP14jpeg_image_tagii+0x136>
 800fc32:	23ff      	movs	r3, #255	; 0xff
 800fc34:	657b      	str	r3, [r7, #84]	; 0x54
            cOut <<= shift;                 // pack new pixels into a byte
 800fc36:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800fc3a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800fc3e:	fa02 f303 	lsl.w	r3, r2, r3
 800fc42:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
            cOut |= (cNew >> (8-shift));    // keep top N bits
 800fc46:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800fc4a:	f1c3 0308 	rsb	r3, r3, #8
 800fc4e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fc50:	fa42 f303 	asr.w	r3, r2, r3
 800fc54:	b25a      	sxtb	r2, r3
 800fc56:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800fc5a:	4313      	orrs	r3, r2
 800fc5c:	b25b      	sxtb	r3, r3
 800fc5e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
            if ((x & xmask) == xmask)       // store it when the byte is full
 800fc62:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800fc64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fc66:	4013      	ands	r3, r2
 800fc68:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fc6a:	429a      	cmp	r2, r3
 800fc6c:	d108      	bne.n	800fc80 <_ZL10JPEGDitherP14jpeg_image_tagii+0x180>
            {
                *d++ = cOut;
 800fc6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fc70:	1c5a      	adds	r2, r3, #1
 800fc72:	647a      	str	r2, [r7, #68]	; 0x44
 800fc74:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800fc78:	701a      	strb	r2, [r3, #0]
                cOut = 0;
 800fc7a:	2300      	movs	r3, #0
 800fc7c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
            }
            // calculate the Floyd-Steinberg error for this pixel
            v = cNew - (cNew & pixelmask); // new error for N-bit gray output (always positive)
 800fc80:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fc84:	43db      	mvns	r3, r3
 800fc86:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fc88:	4013      	ands	r3, r2
 800fc8a:	63bb      	str	r3, [r7, #56]	; 0x38
            h = v >> 1;
 800fc8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc8e:	105b      	asrs	r3, r3, #1
 800fc90:	627b      	str	r3, [r7, #36]	; 0x24
            e1 = (7*h)>>3;  // 7/16
 800fc92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fc94:	4613      	mov	r3, r2
 800fc96:	00db      	lsls	r3, r3, #3
 800fc98:	1a9b      	subs	r3, r3, r2
 800fc9a:	10db      	asrs	r3, r3, #3
 800fc9c:	623b      	str	r3, [r7, #32]
            e2 = h - e1;  // 1/16
 800fc9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fca0:	6a3b      	ldr	r3, [r7, #32]
 800fca2:	1ad3      	subs	r3, r2, r3
 800fca4:	61fb      	str	r3, [r7, #28]
            e3 = (5*h) >> 3;   // 5/16
 800fca6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fca8:	4613      	mov	r3, r2
 800fcaa:	009b      	lsls	r3, r3, #2
 800fcac:	4413      	add	r3, r2
 800fcae:	10db      	asrs	r3, r3, #3
 800fcb0:	61bb      	str	r3, [r7, #24]
            e4 = h - e3;  // 3/16
 800fcb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fcb4:	69bb      	ldr	r3, [r7, #24]
 800fcb6:	1ad3      	subs	r3, r2, r3
 800fcb8:	617b      	str	r3, [r7, #20]
            // distribute error to neighbors
            lFErr = e1 + pErrors[1];
 800fcba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fcbc:	3301      	adds	r3, #1
 800fcbe:	781b      	ldrb	r3, [r3, #0]
 800fcc0:	461a      	mov	r2, r3
 800fcc2:	6a3b      	ldr	r3, [r7, #32]
 800fcc4:	4413      	add	r3, r2
 800fcc6:	653b      	str	r3, [r7, #80]	; 0x50
            pErrors[1] = (uint8_t)e2;
 800fcc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fcca:	3301      	adds	r3, #1
 800fccc:	69fa      	ldr	r2, [r7, #28]
 800fcce:	b2d2      	uxtb	r2, r2
 800fcd0:	701a      	strb	r2, [r3, #0]
            pErrors[0] += e3;
 800fcd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fcd4:	781a      	ldrb	r2, [r3, #0]
 800fcd6:	69bb      	ldr	r3, [r7, #24]
 800fcd8:	b2db      	uxtb	r3, r3
 800fcda:	4413      	add	r3, r2
 800fcdc:	b2da      	uxtb	r2, r3
 800fcde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fce0:	701a      	strb	r2, [r3, #0]
            pErrors[-1] += e4;
 800fce2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fce4:	3b01      	subs	r3, #1
 800fce6:	7819      	ldrb	r1, [r3, #0]
 800fce8:	697b      	ldr	r3, [r7, #20]
 800fcea:	b2da      	uxtb	r2, r3
 800fcec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fcee:	3b01      	subs	r3, #1
 800fcf0:	440a      	add	r2, r1
 800fcf2:	b2d2      	uxtb	r2, r2
 800fcf4:	701a      	strb	r2, [r3, #0]
            pErrors++;
 800fcf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fcf8:	3301      	adds	r3, #1
 800fcfa:	64bb      	str	r3, [r7, #72]	; 0x48
        for (x=0; x<iWidth; x++)
 800fcfc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fcfe:	3301      	adds	r3, #1
 800fd00:	667b      	str	r3, [r7, #100]	; 0x64
 800fd02:	e786      	b.n	800fc12 <_ZL10JPEGDitherP14jpeg_image_tagii+0x112>
    for (y=0; y<iHeight; y++)
 800fd04:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fd06:	3301      	adds	r3, #1
 800fd08:	663b      	str	r3, [r7, #96]	; 0x60
 800fd0a:	e763      	b.n	800fbd4 <_ZL10JPEGDitherP14jpeg_image_tagii+0xd4>
        } // for x
    } // for y
} /* JPEGDither() */
 800fd0c:	bf00      	nop
 800fd0e:	376c      	adds	r7, #108	; 0x6c
 800fd10:	46bd      	mov	sp, r7
 800fd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd16:	4770      	bx	lr

0800fd18 <_ZL10DecodeJPEGP14jpeg_image_tag>:
//
// Decode the image
// returns 0 for error, 1 for success
//
static int DecodeJPEG(JPEGIMAGE *pJPEG)
{
 800fd18:	b580      	push	{r7, lr}
 800fd1a:	b0ae      	sub	sp, #184	; 0xb8
 800fd1c:	af00      	add	r7, sp, #0
 800fd1e:	6078      	str	r0, [r7, #4]
    int iLum0, iLum1, iLum2, iLum3, iCr, iCb;
    signed int iDCPred0, iDCPred1, iDCPred2;
    int i, iQuant1, iQuant2, iQuant3, iErr;
    int iSkipMask, bSkipRow;
    uint8_t c;
    int iMCUCount, xoff, iPitch, bThumbnail = 0;
 800fd20:	2300      	movs	r3, #0
 800fd22:	67fb      	str	r3, [r7, #124]	; 0x7c
    int bContinue = 1; // early exit if the DRAW callback wants to stop
 800fd24:	2301      	movs	r3, #1
 800fd26:	67bb      	str	r3, [r7, #120]	; 0x78
    uint32_t l, *pl;
    unsigned char cDCTable0, cACTable0, cDCTable1, cACTable1, cDCTable2, cACTable2;
    JPEGDRAW jd;
    int iMaxFill = 16, iScaleShift = 0;
 800fd28:	2310      	movs	r3, #16
 800fd2a:	677b      	str	r3, [r7, #116]	; 0x74
 800fd2c:	2300      	movs	r3, #0
 800fd2e:	673b      	str	r3, [r7, #112]	; 0x70

    // Requested the Exif thumbnail
    if (pJPEG->ucMode == 0xc2) { // progressive mode - we only decode the first scan (DC values)
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800fd36:	2bc2      	cmp	r3, #194	; 0xc2
 800fd38:	d105      	bne.n	800fd46 <_ZL10DecodeJPEGP14jpeg_image_tag+0x2e>
        pJPEG->iOptions |= JPEG_SCALE_EIGHTH; // return 1/8 sized image
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fd3e:	f043 0208 	orr.w	r2, r3, #8
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	649a      	str	r2, [r3, #72]	; 0x48
    }
    if (pJPEG->iOptions & JPEG_EXIF_THUMBNAIL)
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fd4a:	f003 0320 	and.w	r3, r3, #32
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d01c      	beq.n	800fd8c <_ZL10DecodeJPEGP14jpeg_image_tag+0x74>
    {
        if (pJPEG->iThumbData == 0 || pJPEG->iThumbWidth == 0) // doesn't exist
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	691b      	ldr	r3, [r3, #16]
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d003      	beq.n	800fd62 <_ZL10DecodeJPEGP14jpeg_image_tag+0x4a>
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	689b      	ldr	r3, [r3, #8]
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d105      	bne.n	800fd6e <_ZL10DecodeJPEGP14jpeg_image_tag+0x56>
        {
            pJPEG->iError = JPEG_INVALID_PARAMETER;
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	2201      	movs	r2, #1
 800fd66:	645a      	str	r2, [r3, #68]	; 0x44
            return 0;
 800fd68:	2300      	movs	r3, #0
 800fd6a:	f000 bf93 	b.w	8010c94 <_ZL10DecodeJPEGP14jpeg_image_tag+0xf7c>
        }
        if (!JPEGParseInfo(pJPEG, 1)) // parse the embedded thumbnail file header
 800fd6e:	2101      	movs	r1, #1
 800fd70:	6878      	ldr	r0, [r7, #4]
 800fd72:	f7fa fde9 	bl	800a948 <_ZL13JPEGParseInfoP14jpeg_image_tagi>
 800fd76:	4603      	mov	r3, r0
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	bf0c      	ite	eq
 800fd7c:	2301      	moveq	r3, #1
 800fd7e:	2300      	movne	r3, #0
 800fd80:	b2db      	uxtb	r3, r3
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	d002      	beq.n	800fd8c <_ZL10DecodeJPEGP14jpeg_image_tag+0x74>
            return 0; // something went wrong
 800fd86:	2300      	movs	r3, #0
 800fd88:	f000 bf84 	b.w	8010c94 <_ZL10DecodeJPEGP14jpeg_image_tag+0xf7c>
    }
    // Fast downscaling options
    if (pJPEG->iOptions & JPEG_SCALE_HALF)
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fd90:	f003 0302 	and.w	r3, r3, #2
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d002      	beq.n	800fd9e <_ZL10DecodeJPEGP14jpeg_image_tag+0x86>
        iScaleShift = 1;
 800fd98:	2301      	movs	r3, #1
 800fd9a:	673b      	str	r3, [r7, #112]	; 0x70
 800fd9c:	e016      	b.n	800fdcc <_ZL10DecodeJPEGP14jpeg_image_tag+0xb4>
    else if (pJPEG->iOptions & JPEG_SCALE_QUARTER)
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fda2:	f003 0304 	and.w	r3, r3, #4
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d004      	beq.n	800fdb4 <_ZL10DecodeJPEGP14jpeg_image_tag+0x9c>
    {
        iScaleShift = 2;
 800fdaa:	2302      	movs	r3, #2
 800fdac:	673b      	str	r3, [r7, #112]	; 0x70
        iMaxFill = 1;
 800fdae:	2301      	movs	r3, #1
 800fdb0:	677b      	str	r3, [r7, #116]	; 0x74
 800fdb2:	e00b      	b.n	800fdcc <_ZL10DecodeJPEGP14jpeg_image_tag+0xb4>
    }
    else if (pJPEG->iOptions & JPEG_SCALE_EIGHTH)
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fdb8:	f003 0308 	and.w	r3, r3, #8
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d005      	beq.n	800fdcc <_ZL10DecodeJPEGP14jpeg_image_tag+0xb4>
    {
        iScaleShift = 3;
 800fdc0:	2303      	movs	r3, #3
 800fdc2:	673b      	str	r3, [r7, #112]	; 0x70
        iMaxFill = 1;
 800fdc4:	2301      	movs	r3, #1
 800fdc6:	677b      	str	r3, [r7, #116]	; 0x74
        bThumbnail = 1;
 800fdc8:	2301      	movs	r3, #1
 800fdca:	67fb      	str	r3, [r7, #124]	; 0x7c
    }
    
    // reorder and fix the quantization table for decoding
    JPEGFixQuantD(pJPEG);
 800fdcc:	6878      	ldr	r0, [r7, #4]
 800fdce:	f7fb f951 	bl	800b074 <_ZL13JPEGFixQuantDP14jpeg_image_tag>
    pJPEG->bb.ulBits = MOTOLONG(&pJPEG->ucFileBuf[0]); // preload first 4/8 bytes
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fdd8:	f893 35dc 	ldrb.w	r3, [r3, #1500]	; 0x5dc
 800fddc:	061a      	lsls	r2, r3, #24
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	f503 53ae 	add.w	r3, r3, #5568	; 0x15c0
 800fde4:	331c      	adds	r3, #28
 800fde6:	3301      	adds	r3, #1
 800fde8:	781b      	ldrb	r3, [r3, #0]
 800fdea:	041b      	lsls	r3, r3, #16
 800fdec:	441a      	add	r2, r3
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	f503 53ae 	add.w	r3, r3, #5568	; 0x15c0
 800fdf4:	331c      	adds	r3, #28
 800fdf6:	3302      	adds	r3, #2
 800fdf8:	781b      	ldrb	r3, [r3, #0]
 800fdfa:	021b      	lsls	r3, r3, #8
 800fdfc:	441a      	add	r2, r3
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	f503 53ae 	add.w	r3, r3, #5568	; 0x15c0
 800fe04:	331c      	adds	r3, #28
 800fe06:	3303      	adds	r3, #3
 800fe08:	781b      	ldrb	r3, [r3, #0]
 800fe0a:	4413      	add	r3, r2
 800fe0c:	461a      	mov	r2, r3
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    pJPEG->bb.pBuf = pJPEG->ucFileBuf;
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	f503 53ae 	add.w	r3, r3, #5568	; 0x15c0
 800fe1a:	331c      	adds	r3, #28
 800fe1c:	687a      	ldr	r2, [r7, #4]
 800fe1e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    pJPEG->bb.ulBitOff = 0;
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	2200      	movs	r2, #0
 800fe26:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    
    cDCTable0 = pJPEG->JPCI[0].dc_tbl_no;
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800fe30:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    cACTable0 = pJPEG->JPCI[0].ac_tbl_no;
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 800fe3a:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
    cDCTable1 = pJPEG->JPCI[1].dc_tbl_no;
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800fe44:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
    cACTable1 = pJPEG->JPCI[1].ac_tbl_no;
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800fe4e:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
    cDCTable2 = pJPEG->JPCI[2].dc_tbl_no;
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800fe58:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    cACTable2 = pJPEG->JPCI[2].ac_tbl_no;
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 800fe62:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
    iDCPred0 = iDCPred1 = iDCPred2 = mcuCX = mcuCY = 0;
 800fe66:	2300      	movs	r3, #0
 800fe68:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800fe6c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800fe70:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800fe74:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800fe78:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fe7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe7c:	633b      	str	r3, [r7, #48]	; 0x30
 800fe7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe80:	637b      	str	r3, [r7, #52]	; 0x34
    
    switch (pJPEG->ucSubSample) // set up the parameters for the different subsampling options
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fe88:	2b22      	cmp	r3, #34	; 0x22
 800fe8a:	f200 80bd 	bhi.w	8010008 <_ZL10DecodeJPEGP14jpeg_image_tag+0x2f0>
 800fe8e:	a201      	add	r2, pc, #4	; (adr r2, 800fe94 <_ZL10DecodeJPEGP14jpeg_image_tag+0x17c>)
 800fe90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe94:	0800ff21 	.word	0x0800ff21
 800fe98:	0800ff21 	.word	0x0800ff21
 800fe9c:	08010009 	.word	0x08010009
 800fea0:	08010009 	.word	0x08010009
 800fea4:	08010009 	.word	0x08010009
 800fea8:	08010009 	.word	0x08010009
 800feac:	08010009 	.word	0x08010009
 800feb0:	08010009 	.word	0x08010009
 800feb4:	08010009 	.word	0x08010009
 800feb8:	08010009 	.word	0x08010009
 800febc:	08010009 	.word	0x08010009
 800fec0:	08010009 	.word	0x08010009
 800fec4:	08010009 	.word	0x08010009
 800fec8:	08010009 	.word	0x08010009
 800fecc:	08010009 	.word	0x08010009
 800fed0:	08010009 	.word	0x08010009
 800fed4:	08010009 	.word	0x08010009
 800fed8:	0800ff21 	.word	0x0800ff21
 800fedc:	0800ff5b 	.word	0x0800ff5b
 800fee0:	08010009 	.word	0x08010009
 800fee4:	08010009 	.word	0x08010009
 800fee8:	08010009 	.word	0x08010009
 800feec:	08010009 	.word	0x08010009
 800fef0:	08010009 	.word	0x08010009
 800fef4:	08010009 	.word	0x08010009
 800fef8:	08010009 	.word	0x08010009
 800fefc:	08010009 	.word	0x08010009
 800ff00:	08010009 	.word	0x08010009
 800ff04:	08010009 	.word	0x08010009
 800ff08:	08010009 	.word	0x08010009
 800ff0c:	08010009 	.word	0x08010009
 800ff10:	08010009 	.word	0x08010009
 800ff14:	08010009 	.word	0x08010009
 800ff18:	0800ff93 	.word	0x0800ff93
 800ff1c:	0800ffcb 	.word	0x0800ffcb
    {
        case 0x00: // fake value to handle grayscale
        case 0x01: // fake value to handle sRGB/CMYK
        case 0x11:
            cx = (pJPEG->iWidth + 7) >> 3;  // number of MCU blocks
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	681b      	ldr	r3, [r3, #0]
 800ff24:	3307      	adds	r3, #7
 800ff26:	10db      	asrs	r3, r3, #3
 800ff28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
            cy = (pJPEG->iCropY + pJPEG->iCropCY + 7) >> 3;
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	6a1a      	ldr	r2, [r3, #32]
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff34:	4413      	add	r3, r2
 800ff36:	3307      	adds	r3, #7
 800ff38:	10db      	asrs	r3, r3, #3
 800ff3a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
            iCr = MCU1;
 800ff3e:	2340      	movs	r3, #64	; 0x40
 800ff40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
            iCb = MCU2;
 800ff44:	2380      	movs	r3, #128	; 0x80
 800ff46:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
            mcuCX = mcuCY = 8;
 800ff4a:	2308      	movs	r3, #8
 800ff4c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800ff50:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ff54:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
            break;
 800ff58:	e065      	b.n	8010026 <_ZL10DecodeJPEGP14jpeg_image_tag+0x30e>
        case 0x12:
            cx = (pJPEG->iWidth + 7) >> 3;  // number of MCU blocks
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	681b      	ldr	r3, [r3, #0]
 800ff5e:	3307      	adds	r3, #7
 800ff60:	10db      	asrs	r3, r3, #3
 800ff62:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
            cy = (pJPEG->iCropY + pJPEG->iCropCY + 15) >> 4;
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	6a1a      	ldr	r2, [r3, #32]
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff6e:	4413      	add	r3, r2
 800ff70:	330f      	adds	r3, #15
 800ff72:	111b      	asrs	r3, r3, #4
 800ff74:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
            iCr = MCU2;
 800ff78:	2380      	movs	r3, #128	; 0x80
 800ff7a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
            iCb = MCU3;
 800ff7e:	23c0      	movs	r3, #192	; 0xc0
 800ff80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
            mcuCX = 8;
 800ff84:	2308      	movs	r3, #8
 800ff86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
            mcuCY = 16;
 800ff8a:	2310      	movs	r3, #16
 800ff8c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
            break;
 800ff90:	e049      	b.n	8010026 <_ZL10DecodeJPEGP14jpeg_image_tag+0x30e>
        case 0x21:
            cx = (pJPEG->iWidth + 15) >> 4;  // number of MCU blocks
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	681b      	ldr	r3, [r3, #0]
 800ff96:	330f      	adds	r3, #15
 800ff98:	111b      	asrs	r3, r3, #4
 800ff9a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
            cy = (pJPEG->iCropY + pJPEG->iCropCY + 7) >> 3;
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	6a1a      	ldr	r2, [r3, #32]
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ffa6:	4413      	add	r3, r2
 800ffa8:	3307      	adds	r3, #7
 800ffaa:	10db      	asrs	r3, r3, #3
 800ffac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
            iCr = MCU2;
 800ffb0:	2380      	movs	r3, #128	; 0x80
 800ffb2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
            iCb = MCU3;
 800ffb6:	23c0      	movs	r3, #192	; 0xc0
 800ffb8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
            mcuCX = 16;
 800ffbc:	2310      	movs	r3, #16
 800ffbe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
            mcuCY = 8;
 800ffc2:	2308      	movs	r3, #8
 800ffc4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
            break;
 800ffc8:	e02d      	b.n	8010026 <_ZL10DecodeJPEGP14jpeg_image_tag+0x30e>
        case 0x22:
            cx = (pJPEG->iWidth + 15) >> 4;  // number of MCU blocks
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	681b      	ldr	r3, [r3, #0]
 800ffce:	330f      	adds	r3, #15
 800ffd0:	111b      	asrs	r3, r3, #4
 800ffd2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
            cy = (pJPEG->iCropY + pJPEG->iCropCY + 15) >> 4;
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	6a1a      	ldr	r2, [r3, #32]
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ffde:	4413      	add	r3, r2
 800ffe0:	330f      	adds	r3, #15
 800ffe2:	111b      	asrs	r3, r3, #4
 800ffe4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
            iCr = MCU4;
 800ffe8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ffec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
            iCb = MCU5;
 800fff0:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800fff4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
            mcuCX = mcuCY = 16;
 800fff8:	2310      	movs	r3, #16
 800fffa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800fffe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010002:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
            break;
 8010006:	e00e      	b.n	8010026 <_ZL10DecodeJPEGP14jpeg_image_tag+0x30e>
        default: // to suppress compiler warning
            cx = cy = 0;
 8010008:	2300      	movs	r3, #0
 801000a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801000e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8010012:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
            iCr = iCb = 0;
 8010016:	2300      	movs	r3, #0
 8010018:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801001c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010020:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
            break;
 8010024:	bf00      	nop
    }
    // Scale down the MCUs by the requested amount
    mcuCX >>= iScaleShift;
 8010026:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 801002a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801002c:	fa42 f303 	asr.w	r3, r2, r3
 8010030:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    mcuCY >>= iScaleShift;
 8010034:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8010038:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801003a:	fa42 f303 	asr.w	r3, r2, r3
 801003e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    
    iQuant1 = pJPEG->sQuantTable[pJPEG->JPCI[0].quant_tbl_no*DCTSIZE]; // DC quant values
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8010048:	019b      	lsls	r3, r3, #6
 801004a:	687a      	ldr	r2, [r7, #4]
 801004c:	f603 13ec 	addw	r3, r3, #2540	; 0x9ec
 8010050:	005b      	lsls	r3, r3, #1
 8010052:	4413      	add	r3, r2
 8010054:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8010058:	667b      	str	r3, [r7, #100]	; 0x64
    iQuant2 = pJPEG->sQuantTable[pJPEG->JPCI[1].quant_tbl_no*DCTSIZE];
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8010060:	019b      	lsls	r3, r3, #6
 8010062:	687a      	ldr	r2, [r7, #4]
 8010064:	f603 13ec 	addw	r3, r3, #2540	; 0x9ec
 8010068:	005b      	lsls	r3, r3, #1
 801006a:	4413      	add	r3, r2
 801006c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8010070:	663b      	str	r3, [r7, #96]	; 0x60
    iQuant3 = pJPEG->sQuantTable[pJPEG->JPCI[2].quant_tbl_no*DCTSIZE];
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 8010078:	019b      	lsls	r3, r3, #6
 801007a:	687a      	ldr	r2, [r7, #4]
 801007c:	f603 13ec 	addw	r3, r3, #2540	; 0x9ec
 8010080:	005b      	lsls	r3, r3, #1
 8010082:	4413      	add	r3, r2
 8010084:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8010088:	65fb      	str	r3, [r7, #92]	; 0x5c
    // luminance values are always in these positions
    iLum0 = MCU0;
 801008a:	2300      	movs	r3, #0
 801008c:	65bb      	str	r3, [r7, #88]	; 0x58
    iLum1 = MCU1;
 801008e:	2340      	movs	r3, #64	; 0x40
 8010090:	657b      	str	r3, [r7, #84]	; 0x54
    iLum2 = MCU2;
 8010092:	2380      	movs	r3, #128	; 0x80
 8010094:	653b      	str	r3, [r7, #80]	; 0x50
    iLum3 = MCU3;
 8010096:	23c0      	movs	r3, #192	; 0xc0
 8010098:	64fb      	str	r3, [r7, #76]	; 0x4c
    iErr = 0;
 801009a:	2300      	movs	r3, #0
 801009c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    pJPEG->iResCount = pJPEG->iResInterval;
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	659a      	str	r2, [r3, #88]	; 0x58
    // Calculate how many MCUs we can fit in the pixel buffer to maximize LCD drawing speed
    iMCUCount = MAX_BUFFERED_PIXELS / (mcuCX * mcuCY);
 80100a8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80100ac:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80100b0:	fb02 f303 	mul.w	r3, r2, r3
 80100b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80100b8:	fb92 f3f3 	sdiv	r3, r2, r3
 80100bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (pJPEG->ucPixelType == RGB8888) {
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80100c6:	2b02      	cmp	r3, #2
 80100c8:	d106      	bne.n	80100d8 <_ZL10DecodeJPEGP14jpeg_image_tag+0x3c0>
        iMCUCount /= 2; // half as many will fit
 80100ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80100ce:	0fda      	lsrs	r2, r3, #31
 80100d0:	4413      	add	r3, r2
 80100d2:	105b      	asrs	r3, r3, #1
 80100d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    }
    if (pJPEG->ucPixelType == EIGHT_BIT_GRAYSCALE)
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80100de:	2b03      	cmp	r3, #3
 80100e0:	d104      	bne.n	80100ec <_ZL10DecodeJPEGP14jpeg_image_tag+0x3d4>
        iMCUCount *= 2; // each pixel is only 1 byte
 80100e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80100e6:	005b      	lsls	r3, r3, #1
 80100e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (iMCUCount > cx)
 80100ec:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80100f0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80100f4:	429a      	cmp	r2, r3
 80100f6:	dd03      	ble.n	8010100 <_ZL10DecodeJPEGP14jpeg_image_tag+0x3e8>
        iMCUCount = cx; // don't go wider than the image
 80100f8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80100fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (iMCUCount > pJPEG->iMaxMCUs) // did the user set an upper bound on how many pixels per JPEGDraw callback?
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010104:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8010108:	429a      	cmp	r2, r3
 801010a:	dd03      	ble.n	8010114 <_ZL10DecodeJPEGP14jpeg_image_tag+0x3fc>
        iMCUCount = pJPEG->iMaxMCUs;
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010110:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (pJPEG->ucPixelType > EIGHT_BIT_GRAYSCALE) { // dithered, override the max MCU count
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801011a:	2b03      	cmp	r3, #3
 801011c:	d903      	bls.n	8010126 <_ZL10DecodeJPEGP14jpeg_image_tag+0x40e>
        iMCUCount = cx; // do the whole row
 801011e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010122:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    }
    if (pJPEG->iCropCX != (cx * mcuCX)) { // crop enabled
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801012a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801012e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8010132:	fb01 f303 	mul.w	r3, r1, r3
 8010136:	429a      	cmp	r2, r3
 8010138:	d011      	beq.n	801015e <_ZL10DecodeJPEGP14jpeg_image_tag+0x446>
        if (iMCUCount * mcuCX > pJPEG->iCropCX) {
 801013a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801013e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8010142:	fb03 f202 	mul.w	r2, r3, r2
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801014a:	429a      	cmp	r2, r3
 801014c:	dd07      	ble.n	801015e <_ZL10DecodeJPEGP14jpeg_image_tag+0x446>
            iMCUCount = (pJPEG->iCropCX / mcuCX); // maximum width is the crop width
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010152:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010156:	fb92 f3f3 	sdiv	r3, r2, r3
 801015a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        }
    }
    jd.iBpp = 16;
 801015e:	2310      	movs	r3, #16
 8010160:	623b      	str	r3, [r7, #32]
    switch (pJPEG->ucPixelType)
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010168:	3b02      	subs	r3, #2
 801016a:	2b04      	cmp	r3, #4
 801016c:	d81b      	bhi.n	80101a6 <_ZL10DecodeJPEGP14jpeg_image_tag+0x48e>
 801016e:	a201      	add	r2, pc, #4	; (adr r2, 8010174 <_ZL10DecodeJPEGP14jpeg_image_tag+0x45c>)
 8010170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010174:	08010189 	.word	0x08010189
 8010178:	0801018f 	.word	0x0801018f
 801017c:	08010195 	.word	0x08010195
 8010180:	0801019b 	.word	0x0801019b
 8010184:	080101a1 	.word	0x080101a1
    {
        case RGB8888:
            jd.iBpp = 32;
 8010188:	2320      	movs	r3, #32
 801018a:	623b      	str	r3, [r7, #32]
            break;
 801018c:	e00b      	b.n	80101a6 <_ZL10DecodeJPEGP14jpeg_image_tag+0x48e>
        case EIGHT_BIT_GRAYSCALE:
            jd.iBpp = 8;
 801018e:	2308      	movs	r3, #8
 8010190:	623b      	str	r3, [r7, #32]
            break;
 8010192:	e008      	b.n	80101a6 <_ZL10DecodeJPEGP14jpeg_image_tag+0x48e>
        case FOUR_BIT_DITHERED:
            jd.iBpp = 4;
 8010194:	2304      	movs	r3, #4
 8010196:	623b      	str	r3, [r7, #32]
            break;
 8010198:	e005      	b.n	80101a6 <_ZL10DecodeJPEGP14jpeg_image_tag+0x48e>
        case TWO_BIT_DITHERED:
            jd.iBpp = 2;
 801019a:	2302      	movs	r3, #2
 801019c:	623b      	str	r3, [r7, #32]
            break;
 801019e:	e002      	b.n	80101a6 <_ZL10DecodeJPEGP14jpeg_image_tag+0x48e>
        case ONE_BIT_DITHERED:
            jd.iBpp = 1;
 80101a0:	2301      	movs	r3, #1
 80101a2:	623b      	str	r3, [r7, #32]
            break;
 80101a4:	bf00      	nop
    }
    if (pJPEG->ucPixelType > EIGHT_BIT_GRAYSCALE)
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80101ac:	2b03      	cmp	r3, #3
 80101ae:	d904      	bls.n	80101ba <_ZL10DecodeJPEGP14jpeg_image_tag+0x4a2>
        jd.pPixels = (uint16_t *)pJPEG->pDitherBuffer;
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80101b6:	627b      	str	r3, [r7, #36]	; 0x24
 80101b8:	e003      	b.n	80101c2 <_ZL10DecodeJPEGP14jpeg_image_tag+0x4aa>
    else
        jd.pPixels = pJPEG->usPixels;
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80101c0:	627b      	str	r3, [r7, #36]	; 0x24
    jd.iHeight = mcuCY;
 80101c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80101c6:	61bb      	str	r3, [r7, #24]
    for (y = 0; y < cy && bContinue && iErr == 0; y++)
 80101c8:	2300      	movs	r3, #0
 80101ca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80101ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80101d2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80101d6:	429a      	cmp	r2, r3
 80101d8:	f280 854e 	bge.w	8010c78 <_ZL10DecodeJPEGP14jpeg_image_tag+0xf60>
 80101dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80101de:	2b00      	cmp	r3, #0
 80101e0:	f000 854a 	beq.w	8010c78 <_ZL10DecodeJPEGP14jpeg_image_tag+0xf60>
 80101e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	f040 8545 	bne.w	8010c78 <_ZL10DecodeJPEGP14jpeg_image_tag+0xf60>
    {
        bSkipRow = (y*mcuCY < pJPEG->iCropY);
 80101ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80101f2:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80101f6:	fb03 f202 	mul.w	r2, r3, r2
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	6a1b      	ldr	r3, [r3, #32]
 80101fe:	429a      	cmp	r2, r3
 8010200:	bfb4      	ite	lt
 8010202:	2301      	movlt	r3, #1
 8010204:	2300      	movge	r3, #0
 8010206:	b2db      	uxtb	r3, r3
 8010208:	64bb      	str	r3, [r7, #72]	; 0x48
        jd.x = pJPEG->iXOffset;
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	695b      	ldr	r3, [r3, #20]
 801020e:	60fb      	str	r3, [r7, #12]
        xoff = 0; // start of new LCD output group
 8010210:	2300      	movs	r3, #0
 8010212:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        if (pJPEG->pFramebuffer) { // user-supplied buffer is full width
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801021c:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8010220:	2b00      	cmp	r3, #0
 8010222:	d04c      	beq.n	80102be <_ZL10DecodeJPEGP14jpeg_image_tag+0x5a6>
            int ty = (y * mcuCY) - pJPEG->iCropY;
 8010224:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010228:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 801022c:	fb03 f202 	mul.w	r2, r3, r2
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	6a1b      	ldr	r3, [r3, #32]
 8010234:	1ad3      	subs	r3, r2, r3
 8010236:	647b      	str	r3, [r7, #68]	; 0x44
            iPitch = pJPEG->iCropCX; // size of cropped width
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801023c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            pJPEG->usPixels = (uint16_t *)pJPEG->pFramebuffer;
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010246:	f8d3 23d8 	ldr.w	r2, [r3, #984]	; 0x3d8
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
            if (pJPEG->ucPixelType >= EIGHT_BIT_GRAYSCALE) {
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010256:	2b02      	cmp	r3, #2
 8010258:	d910      	bls.n	801027c <_ZL10DecodeJPEGP14jpeg_image_tag+0x564>
                pJPEG->usPixels += (ty * iPitch/2); // 1 byte per pixel
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8010260:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010262:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8010266:	fb01 f303 	mul.w	r3, r1, r3
 801026a:	0fd9      	lsrs	r1, r3, #31
 801026c:	440b      	add	r3, r1
 801026e:	105b      	asrs	r3, r3, #1
 8010270:	005b      	lsls	r3, r3, #1
 8010272:	441a      	add	r2, r3
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 801027a:	e028      	b.n	80102ce <_ZL10DecodeJPEGP14jpeg_image_tag+0x5b6>
            } else  if (pJPEG->ucPixelType == RGB8888) {
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010282:	2b02      	cmp	r3, #2
 8010284:	d10d      	bne.n	80102a2 <_ZL10DecodeJPEGP14jpeg_image_tag+0x58a>
                 pJPEG->usPixels += (ty * iPitch*2); // 4 bytes per pixel
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 801028c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801028e:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8010292:	fb01 f303 	mul.w	r3, r1, r3
 8010296:	009b      	lsls	r3, r3, #2
 8010298:	441a      	add	r2, r3
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80102a0:	e015      	b.n	80102ce <_ZL10DecodeJPEGP14jpeg_image_tag+0x5b6>
            } else { // 2 bytes per pixel
                pJPEG->usPixels += (ty * iPitch);
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80102a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80102aa:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80102ae:	fb01 f303 	mul.w	r3, r1, r3
 80102b2:	005b      	lsls	r3, r3, #1
 80102b4:	441a      	add	r2, r3
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80102bc:	e007      	b.n	80102ce <_ZL10DecodeJPEGP14jpeg_image_tag+0x5b6>
            }
        } else { // use our internal buffer to do it a block at a time
            iPitch = iMCUCount * mcuCX; // pixels per line of LCD buffer
 80102be:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80102c2:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80102c6:	fb02 f303 	mul.w	r3, r2, r3
 80102ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        }
        for (x = 0; x < cx && bContinue && iErr == 0; x++)
 80102ce:	2300      	movs	r3, #0
 80102d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80102d4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80102d8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80102dc:	429a      	cmp	r2, r3
 80102de:	f280 84c4 	bge.w	8010c6a <_ZL10DecodeJPEGP14jpeg_image_tag+0xf52>
 80102e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	f000 84c0 	beq.w	8010c6a <_ZL10DecodeJPEGP14jpeg_image_tag+0xf52>
 80102ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	f040 84bb 	bne.w	8010c6a <_ZL10DecodeJPEGP14jpeg_image_tag+0xf52>
        {
            iSkipMask = 0; // assume not skipping
 80102f4:	2300      	movs	r3, #0
 80102f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
            if (bSkipRow || x*mcuCX < pJPEG->iCropX || x*mcuCX > pJPEG->iCropX+pJPEG->iCropCX) {
 80102fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d116      	bne.n	801032e <_ZL10DecodeJPEGP14jpeg_image_tag+0x616>
 8010300:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010304:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8010308:	fb03 f202 	mul.w	r2, r3, r2
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	69db      	ldr	r3, [r3, #28]
 8010310:	429a      	cmp	r2, r3
 8010312:	db0c      	blt.n	801032e <_ZL10DecodeJPEGP14jpeg_image_tag+0x616>
 8010314:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010318:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 801031c:	fb03 f202 	mul.w	r2, r3, r2
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	69d9      	ldr	r1, [r3, #28]
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010328:	440b      	add	r3, r1
 801032a:	429a      	cmp	r2, r3
 801032c:	dd03      	ble.n	8010336 <_ZL10DecodeJPEGP14jpeg_image_tag+0x61e>
                iSkipMask = MCU_SKIP;
 801032e:	f06f 0307 	mvn.w	r3, #7
 8010332:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
            }
            pJPEG->ucACTable = cACTable0;
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	f897 206e 	ldrb.w	r2, [r7, #110]	; 0x6e
 801033c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
            pJPEG->ucDCTable = cDCTable0;
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8010346:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
            // do the first luminance component
            if (pJPEG->ucMode == 0xc2) { // progressive
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8010350:	2bc2      	cmp	r3, #194	; 0xc2
 8010352:	d10c      	bne.n	801036e <_ZL10DecodeJPEGP14jpeg_image_tag+0x656>
                iErr = JPEGDecodeMCU_P(pJPEG, iLum0 | iSkipMask, &iDCPred0);
 8010354:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010356:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801035a:	4313      	orrs	r3, r2
 801035c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8010360:	4619      	mov	r1, r3
 8010362:	6878      	ldr	r0, [r7, #4]
 8010364:	f7fa ff0e 	bl	800b184 <_ZL15JPEGDecodeMCU_PP14jpeg_image_tagiPi>
 8010368:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
 801036c:	e00b      	b.n	8010386 <_ZL10DecodeJPEGP14jpeg_image_tag+0x66e>
            } else {
                iErr = JPEGDecodeMCU(pJPEG, iLum0 | iSkipMask, &iDCPred0);
 801036e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010370:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010374:	4313      	orrs	r3, r2
 8010376:	f107 0234 	add.w	r2, r7, #52	; 0x34
 801037a:	4619      	mov	r1, r3
 801037c:	6878      	ldr	r0, [r7, #4]
 801037e:	f7fb fa31 	bl	800b7e4 <_ZL13JPEGDecodeMCUP14jpeg_image_tagiPi>
 8010382:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
            }
            if (pJPEG->u16MCUFlags == 0 || bThumbnail) // no AC components, save some time
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801038a:	2b00      	cmp	r3, #0
 801038c:	d002      	beq.n	8010394 <_ZL10DecodeJPEGP14jpeg_image_tag+0x67c>
 801038e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010390:	2b00      	cmp	r3, #0
 8010392:	d037      	beq.n	8010404 <_ZL10DecodeJPEGP14jpeg_image_tag+0x6ec>
            {
                pl = (uint32_t *)&pJPEG->sMCUs[iLum0];
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801039a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 801039e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80103a0:	005b      	lsls	r3, r3, #1
 80103a2:	4413      	add	r3, r2
 80103a4:	643b      	str	r3, [r7, #64]	; 0x40
                c = ucRangeTable[((iDCPred0 * iQuant1) >> 5) & 0x3ff];
 80103a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103a8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80103aa:	fb02 f303 	mul.w	r3, r2, r3
 80103ae:	115b      	asrs	r3, r3, #5
 80103b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80103b4:	4ac0      	ldr	r2, [pc, #768]	; (80106b8 <_ZL10DecodeJPEGP14jpeg_image_tag+0x9a0>)
 80103b6:	5cd3      	ldrb	r3, [r2, r3]
 80103b8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                l = c | ((uint32_t) c << 8) | ((uint32_t) c << 16) | ((uint32_t) c << 24);
 80103bc:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80103c0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80103c4:	021b      	lsls	r3, r3, #8
 80103c6:	431a      	orrs	r2, r3
 80103c8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80103cc:	041b      	lsls	r3, r3, #16
 80103ce:	431a      	orrs	r2, r3
 80103d0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80103d4:	061b      	lsls	r3, r3, #24
 80103d6:	4313      	orrs	r3, r2
 80103d8:	63bb      	str	r3, [r7, #56]	; 0x38
                // dct stores byte values
                for (i = 0; i<iMaxFill; i++) // 8x8 bytes = 16 longs
 80103da:	2300      	movs	r3, #0
 80103dc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80103e0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80103e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80103e6:	429a      	cmp	r2, r3
 80103e8:	da15      	bge.n	8010416 <_ZL10DecodeJPEGP14jpeg_image_tag+0x6fe>
                    pl[i] = l;
 80103ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80103ee:	009b      	lsls	r3, r3, #2
 80103f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80103f2:	4413      	add	r3, r2
 80103f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80103f6:	601a      	str	r2, [r3, #0]
                for (i = 0; i<iMaxFill; i++) // 8x8 bytes = 16 longs
 80103f8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80103fc:	3301      	adds	r3, #1
 80103fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010402:	e7ed      	b.n	80103e0 <_ZL10DecodeJPEGP14jpeg_image_tag+0x6c8>
            }
            else
            {
                JPEGIDCT(pJPEG, iLum0, pJPEG->JPCI[0].quant_tbl_no); // first quantization table
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 801040a:	461a      	mov	r2, r3
 801040c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801040e:	6878      	ldr	r0, [r7, #4]
 8010410:	f7fb fca2 	bl	800bd58 <_ZL8JPEGIDCTP14jpeg_image_tagii>
 8010414:	e000      	b.n	8010418 <_ZL10DecodeJPEGP14jpeg_image_tag+0x700>
            if (pJPEG->u16MCUFlags == 0 || bThumbnail) // no AC components, save some time
 8010416:	bf00      	nop
            }
            // do the second luminance component
            if (pJPEG->ucSubSample > 0x11) // subsampling
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801041e:	2b11      	cmp	r3, #17
 8010420:	f240 8156 	bls.w	80106d0 <_ZL10DecodeJPEGP14jpeg_image_tag+0x9b8>
            {
                if (pJPEG->ucMode == 0xc2) { // progressive
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801042a:	2bc2      	cmp	r3, #194	; 0xc2
 801042c:	d110      	bne.n	8010450 <_ZL10DecodeJPEGP14jpeg_image_tag+0x738>
                    iErr |= JPEGDecodeMCU_P(pJPEG, iLum1 | iSkipMask, &iDCPred0);
 801042e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010430:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010434:	4313      	orrs	r3, r2
 8010436:	f107 0234 	add.w	r2, r7, #52	; 0x34
 801043a:	4619      	mov	r1, r3
 801043c:	6878      	ldr	r0, [r7, #4]
 801043e:	f7fa fea1 	bl	800b184 <_ZL15JPEGDecodeMCU_PP14jpeg_image_tagiPi>
 8010442:	4602      	mov	r2, r0
 8010444:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010448:	4313      	orrs	r3, r2
 801044a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801044e:	e00f      	b.n	8010470 <_ZL10DecodeJPEGP14jpeg_image_tag+0x758>
                } else {
                    iErr |= JPEGDecodeMCU(pJPEG, iLum1 | iSkipMask, &iDCPred0);
 8010450:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010452:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010456:	4313      	orrs	r3, r2
 8010458:	f107 0234 	add.w	r2, r7, #52	; 0x34
 801045c:	4619      	mov	r1, r3
 801045e:	6878      	ldr	r0, [r7, #4]
 8010460:	f7fb f9c0 	bl	800b7e4 <_ZL13JPEGDecodeMCUP14jpeg_image_tagiPi>
 8010464:	4602      	mov	r2, r0
 8010466:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801046a:	4313      	orrs	r3, r2
 801046c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                }
                if (pJPEG->u16MCUFlags == 0 || bThumbnail) // no AC components, save some time
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010474:	2b00      	cmp	r3, #0
 8010476:	d002      	beq.n	801047e <_ZL10DecodeJPEGP14jpeg_image_tag+0x766>
 8010478:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801047a:	2b00      	cmp	r3, #0
 801047c:	d037      	beq.n	80104ee <_ZL10DecodeJPEGP14jpeg_image_tag+0x7d6>
                {
                    c = ucRangeTable[((iDCPred0 * iQuant1) >> 5) & 0x3ff];
 801047e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010480:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010482:	fb02 f303 	mul.w	r3, r2, r3
 8010486:	115b      	asrs	r3, r3, #5
 8010488:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801048c:	4a8a      	ldr	r2, [pc, #552]	; (80106b8 <_ZL10DecodeJPEGP14jpeg_image_tag+0x9a0>)
 801048e:	5cd3      	ldrb	r3, [r2, r3]
 8010490:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                    l = c | ((uint32_t) c << 8) | ((uint32_t) c << 16) | ((uint32_t) c << 24);
 8010494:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8010498:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801049c:	021b      	lsls	r3, r3, #8
 801049e:	431a      	orrs	r2, r3
 80104a0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80104a4:	041b      	lsls	r3, r3, #16
 80104a6:	431a      	orrs	r2, r3
 80104a8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80104ac:	061b      	lsls	r3, r3, #24
 80104ae:	4313      	orrs	r3, r2
 80104b0:	63bb      	str	r3, [r7, #56]	; 0x38
                    // dct stores byte values
                    pl = (uint32_t *)&pJPEG->sMCUs[iLum1];
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80104b8:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80104bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80104be:	005b      	lsls	r3, r3, #1
 80104c0:	4413      	add	r3, r2
 80104c2:	643b      	str	r3, [r7, #64]	; 0x40
                    for (i = 0; i<iMaxFill; i++) // 8x8 bytes = 16 longs
 80104c4:	2300      	movs	r3, #0
 80104c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80104ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80104ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80104d0:	429a      	cmp	r2, r3
 80104d2:	da15      	bge.n	8010500 <_ZL10DecodeJPEGP14jpeg_image_tag+0x7e8>
                        pl[i] = l;
 80104d4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80104d8:	009b      	lsls	r3, r3, #2
 80104da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80104dc:	4413      	add	r3, r2
 80104de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80104e0:	601a      	str	r2, [r3, #0]
                    for (i = 0; i<iMaxFill; i++) // 8x8 bytes = 16 longs
 80104e2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80104e6:	3301      	adds	r3, #1
 80104e8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80104ec:	e7ed      	b.n	80104ca <_ZL10DecodeJPEGP14jpeg_image_tag+0x7b2>
                }
                else
                {
                    JPEGIDCT(pJPEG, iLum1, pJPEG->JPCI[0].quant_tbl_no); // first quantization table
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 80104f4:	461a      	mov	r2, r3
 80104f6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80104f8:	6878      	ldr	r0, [r7, #4]
 80104fa:	f7fb fc2d 	bl	800bd58 <_ZL8JPEGIDCTP14jpeg_image_tagii>
 80104fe:	e000      	b.n	8010502 <_ZL10DecodeJPEGP14jpeg_image_tag+0x7ea>
                if (pJPEG->u16MCUFlags == 0 || bThumbnail) // no AC components, save some time
 8010500:	bf00      	nop
                }
                if (pJPEG->ucSubSample == 0x22)
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010508:	2b22      	cmp	r3, #34	; 0x22
 801050a:	f040 80e1 	bne.w	80106d0 <_ZL10DecodeJPEGP14jpeg_image_tag+0x9b8>
                {
                    if (pJPEG->ucMode == 0xc2) { // progressive
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8010514:	2bc2      	cmp	r3, #194	; 0xc2
 8010516:	d110      	bne.n	801053a <_ZL10DecodeJPEGP14jpeg_image_tag+0x822>
                        iErr |= JPEGDecodeMCU_P(pJPEG, iLum2 | iSkipMask, &iDCPred0);
 8010518:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801051a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801051e:	4313      	orrs	r3, r2
 8010520:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8010524:	4619      	mov	r1, r3
 8010526:	6878      	ldr	r0, [r7, #4]
 8010528:	f7fa fe2c 	bl	800b184 <_ZL15JPEGDecodeMCU_PP14jpeg_image_tagiPi>
 801052c:	4602      	mov	r2, r0
 801052e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010532:	4313      	orrs	r3, r2
 8010534:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8010538:	e00f      	b.n	801055a <_ZL10DecodeJPEGP14jpeg_image_tag+0x842>
                    } else {
                        iErr |= JPEGDecodeMCU(pJPEG, iLum2 | iSkipMask, &iDCPred0);
 801053a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801053c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010540:	4313      	orrs	r3, r2
 8010542:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8010546:	4619      	mov	r1, r3
 8010548:	6878      	ldr	r0, [r7, #4]
 801054a:	f7fb f94b 	bl	800b7e4 <_ZL13JPEGDecodeMCUP14jpeg_image_tagiPi>
 801054e:	4602      	mov	r2, r0
 8010550:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010554:	4313      	orrs	r3, r2
 8010556:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                    }
                    if (pJPEG->u16MCUFlags == 0 || bThumbnail) // no AC components, save some time
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801055e:	2b00      	cmp	r3, #0
 8010560:	d002      	beq.n	8010568 <_ZL10DecodeJPEGP14jpeg_image_tag+0x850>
 8010562:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010564:	2b00      	cmp	r3, #0
 8010566:	d037      	beq.n	80105d8 <_ZL10DecodeJPEGP14jpeg_image_tag+0x8c0>
                    {
                        c = ucRangeTable[((iDCPred0 * iQuant1) >> 5) & 0x3ff];
 8010568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801056a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801056c:	fb02 f303 	mul.w	r3, r2, r3
 8010570:	115b      	asrs	r3, r3, #5
 8010572:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010576:	4a50      	ldr	r2, [pc, #320]	; (80106b8 <_ZL10DecodeJPEGP14jpeg_image_tag+0x9a0>)
 8010578:	5cd3      	ldrb	r3, [r2, r3]
 801057a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                        l = c | ((uint32_t) c << 8) | ((uint32_t) c << 16) | ((uint32_t) c << 24);
 801057e:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8010582:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010586:	021b      	lsls	r3, r3, #8
 8010588:	431a      	orrs	r2, r3
 801058a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801058e:	041b      	lsls	r3, r3, #16
 8010590:	431a      	orrs	r2, r3
 8010592:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010596:	061b      	lsls	r3, r3, #24
 8010598:	4313      	orrs	r3, r2
 801059a:	63bb      	str	r3, [r7, #56]	; 0x38
                        // dct stores byte values
                        pl = (uint32_t *)&pJPEG->sMCUs[iLum2];
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80105a2:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80105a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80105a8:	005b      	lsls	r3, r3, #1
 80105aa:	4413      	add	r3, r2
 80105ac:	643b      	str	r3, [r7, #64]	; 0x40
                        for (i = 0; i<iMaxFill; i++) // 8x8 bytes = 16 longs
 80105ae:	2300      	movs	r3, #0
 80105b0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80105b4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80105b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80105ba:	429a      	cmp	r2, r3
 80105bc:	da15      	bge.n	80105ea <_ZL10DecodeJPEGP14jpeg_image_tag+0x8d2>
                            pl[i] = l;
 80105be:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80105c2:	009b      	lsls	r3, r3, #2
 80105c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80105c6:	4413      	add	r3, r2
 80105c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80105ca:	601a      	str	r2, [r3, #0]
                        for (i = 0; i<iMaxFill; i++) // 8x8 bytes = 16 longs
 80105cc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80105d0:	3301      	adds	r3, #1
 80105d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80105d6:	e7ed      	b.n	80105b4 <_ZL10DecodeJPEGP14jpeg_image_tag+0x89c>
                    }
                    else
                    {
                        JPEGIDCT(pJPEG, iLum2, pJPEG->JPCI[0].quant_tbl_no); // first quantization table
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 80105de:	461a      	mov	r2, r3
 80105e0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80105e2:	6878      	ldr	r0, [r7, #4]
 80105e4:	f7fb fbb8 	bl	800bd58 <_ZL8JPEGIDCTP14jpeg_image_tagii>
 80105e8:	e000      	b.n	80105ec <_ZL10DecodeJPEGP14jpeg_image_tag+0x8d4>
                    if (pJPEG->u16MCUFlags == 0 || bThumbnail) // no AC components, save some time
 80105ea:	bf00      	nop
                    }
                    if (pJPEG->ucMode == 0xc2) { // progressive
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80105f2:	2bc2      	cmp	r3, #194	; 0xc2
 80105f4:	d110      	bne.n	8010618 <_ZL10DecodeJPEGP14jpeg_image_tag+0x900>
                        iErr |= JPEGDecodeMCU_P(pJPEG, iLum3 | iSkipMask, &iDCPred0);
 80105f6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80105f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80105fc:	4313      	orrs	r3, r2
 80105fe:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8010602:	4619      	mov	r1, r3
 8010604:	6878      	ldr	r0, [r7, #4]
 8010606:	f7fa fdbd 	bl	800b184 <_ZL15JPEGDecodeMCU_PP14jpeg_image_tagiPi>
 801060a:	4602      	mov	r2, r0
 801060c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010610:	4313      	orrs	r3, r2
 8010612:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8010616:	e00f      	b.n	8010638 <_ZL10DecodeJPEGP14jpeg_image_tag+0x920>
                    } else {
                        iErr |= JPEGDecodeMCU(pJPEG, iLum3 | iSkipMask, &iDCPred0);
 8010618:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801061a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801061e:	4313      	orrs	r3, r2
 8010620:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8010624:	4619      	mov	r1, r3
 8010626:	6878      	ldr	r0, [r7, #4]
 8010628:	f7fb f8dc 	bl	800b7e4 <_ZL13JPEGDecodeMCUP14jpeg_image_tagiPi>
 801062c:	4602      	mov	r2, r0
 801062e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010632:	4313      	orrs	r3, r2
 8010634:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                    }
                    if (pJPEG->u16MCUFlags == 0 || bThumbnail) // no AC components, save some time
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801063c:	2b00      	cmp	r3, #0
 801063e:	d002      	beq.n	8010646 <_ZL10DecodeJPEGP14jpeg_image_tag+0x92e>
 8010640:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010642:	2b00      	cmp	r3, #0
 8010644:	d03a      	beq.n	80106bc <_ZL10DecodeJPEGP14jpeg_image_tag+0x9a4>
                    {
                        c = ucRangeTable[((iDCPred0 * iQuant1) >> 5) & 0x3ff];
 8010646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010648:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801064a:	fb02 f303 	mul.w	r3, r2, r3
 801064e:	115b      	asrs	r3, r3, #5
 8010650:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010654:	4a18      	ldr	r2, [pc, #96]	; (80106b8 <_ZL10DecodeJPEGP14jpeg_image_tag+0x9a0>)
 8010656:	5cd3      	ldrb	r3, [r2, r3]
 8010658:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                        l = c | ((uint32_t) c << 8) | ((uint32_t) c << 16) | ((uint32_t) c << 24);
 801065c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8010660:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010664:	021b      	lsls	r3, r3, #8
 8010666:	431a      	orrs	r2, r3
 8010668:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801066c:	041b      	lsls	r3, r3, #16
 801066e:	431a      	orrs	r2, r3
 8010670:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010674:	061b      	lsls	r3, r3, #24
 8010676:	4313      	orrs	r3, r2
 8010678:	63bb      	str	r3, [r7, #56]	; 0x38
                        // dct stores byte values
                        pl = (uint32_t *)&pJPEG->sMCUs[iLum3];
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010680:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8010684:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010686:	005b      	lsls	r3, r3, #1
 8010688:	4413      	add	r3, r2
 801068a:	643b      	str	r3, [r7, #64]	; 0x40
                        for (i = 0; i<iMaxFill; i++) // 8x8 bytes = 16 longs
 801068c:	2300      	movs	r3, #0
 801068e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010692:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8010696:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010698:	429a      	cmp	r2, r3
 801069a:	da18      	bge.n	80106ce <_ZL10DecodeJPEGP14jpeg_image_tag+0x9b6>
                            pl[i] = l;
 801069c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80106a0:	009b      	lsls	r3, r3, #2
 80106a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80106a4:	4413      	add	r3, r2
 80106a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80106a8:	601a      	str	r2, [r3, #0]
                        for (i = 0; i<iMaxFill; i++) // 8x8 bytes = 16 longs
 80106aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80106ae:	3301      	adds	r3, #1
 80106b0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80106b4:	e7ed      	b.n	8010692 <_ZL10DecodeJPEGP14jpeg_image_tag+0x97a>
 80106b6:	bf00      	nop
 80106b8:	080111a8 	.word	0x080111a8
                    }
                    else
                    {
                        JPEGIDCT(pJPEG, iLum3, pJPEG->JPCI[0].quant_tbl_no); // first quantization table
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 80106c2:	461a      	mov	r2, r3
 80106c4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80106c6:	6878      	ldr	r0, [r7, #4]
 80106c8:	f7fb fb46 	bl	800bd58 <_ZL8JPEGIDCTP14jpeg_image_tagii>
 80106cc:	e000      	b.n	80106d0 <_ZL10DecodeJPEGP14jpeg_image_tag+0x9b8>
                    if (pJPEG->u16MCUFlags == 0 || bThumbnail) // no AC components, save some time
 80106ce:	bf00      	nop
                    }
                } // if 2:2 subsampling
            } // if subsampling used
            if (pJPEG->ucSubSample && pJPEG->ucNumComponents == 3) // if color (not CMYK)
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	f000 8144 	beq.w	8010964 <_ZL10DecodeJPEGP14jpeg_image_tag+0xc4c>
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80106e2:	2b03      	cmp	r3, #3
 80106e4:	f040 813e 	bne.w	8010964 <_ZL10DecodeJPEGP14jpeg_image_tag+0xc4c>
            {
                // first chroma
                pJPEG->ucACTable = cACTable1;
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 80106ee:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                pJPEG->ucDCTable = cDCTable1;
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	f897 206d 	ldrb.w	r2, [r7, #109]	; 0x6d
 80106f8:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
                if (pJPEG->ucPixelType >= EIGHT_BIT_GRAYSCALE) {
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010702:	2b02      	cmp	r3, #2
 8010704:	d93e      	bls.n	8010784 <_ZL10DecodeJPEGP14jpeg_image_tag+0xa6c>
                    // We're not going to use the color channels, so avoid as much work as possible
                    if (pJPEG->ucMode == 0xc2) { // progressive
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801070c:	2bc2      	cmp	r3, #194	; 0xc2
 801070e:	d11c      	bne.n	801074a <_ZL10DecodeJPEGP14jpeg_image_tag+0xa32>
                        iErr |= JPEGDecodeMCU_P(pJPEG, MCU_SKIP, &iDCPred1);
 8010710:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010714:	461a      	mov	r2, r3
 8010716:	f06f 0107 	mvn.w	r1, #7
 801071a:	6878      	ldr	r0, [r7, #4]
 801071c:	f7fa fd32 	bl	800b184 <_ZL15JPEGDecodeMCU_PP14jpeg_image_tagiPi>
 8010720:	4602      	mov	r2, r0
 8010722:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010726:	4313      	orrs	r3, r2
 8010728:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                        iErr |= JPEGDecodeMCU_P(pJPEG, MCU_SKIP, &iDCPred2);
 801072c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010730:	461a      	mov	r2, r3
 8010732:	f06f 0107 	mvn.w	r1, #7
 8010736:	6878      	ldr	r0, [r7, #4]
 8010738:	f7fa fd24 	bl	800b184 <_ZL15JPEGDecodeMCU_PP14jpeg_image_tagiPi>
 801073c:	4602      	mov	r2, r0
 801073e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010742:	4313      	orrs	r3, r2
 8010744:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8010748:	e10c      	b.n	8010964 <_ZL10DecodeJPEGP14jpeg_image_tag+0xc4c>
                    } else {
                        iErr |= JPEGDecodeMCU(pJPEG, MCU_SKIP, &iDCPred1); // decode Cr block
 801074a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801074e:	461a      	mov	r2, r3
 8010750:	f06f 0107 	mvn.w	r1, #7
 8010754:	6878      	ldr	r0, [r7, #4]
 8010756:	f7fb f845 	bl	800b7e4 <_ZL13JPEGDecodeMCUP14jpeg_image_tagiPi>
 801075a:	4602      	mov	r2, r0
 801075c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010760:	4313      	orrs	r3, r2
 8010762:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                        iErr |= JPEGDecodeMCU(pJPEG, MCU_SKIP, &iDCPred2); // decode Cb block
 8010766:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801076a:	461a      	mov	r2, r3
 801076c:	f06f 0107 	mvn.w	r1, #7
 8010770:	6878      	ldr	r0, [r7, #4]
 8010772:	f7fb f837 	bl	800b7e4 <_ZL13JPEGDecodeMCUP14jpeg_image_tagiPi>
 8010776:	4602      	mov	r2, r0
 8010778:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801077c:	4313      	orrs	r3, r2
 801077e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8010782:	e0ef      	b.n	8010964 <_ZL10DecodeJPEGP14jpeg_image_tag+0xc4c>
                    }
                } else {
                    if (pJPEG->ucMode == 0xc2) { // progressive
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801078a:	2bc2      	cmp	r3, #194	; 0xc2
 801078c:	d111      	bne.n	80107b2 <_ZL10DecodeJPEGP14jpeg_image_tag+0xa9a>
                        iErr |= JPEGDecodeMCU_P(pJPEG, iCr | iSkipMask, &iDCPred1);
 801078e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8010792:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010796:	4313      	orrs	r3, r2
 8010798:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801079c:	4619      	mov	r1, r3
 801079e:	6878      	ldr	r0, [r7, #4]
 80107a0:	f7fa fcf0 	bl	800b184 <_ZL15JPEGDecodeMCU_PP14jpeg_image_tagiPi>
 80107a4:	4602      	mov	r2, r0
 80107a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80107aa:	4313      	orrs	r3, r2
 80107ac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80107b0:	e010      	b.n	80107d4 <_ZL10DecodeJPEGP14jpeg_image_tag+0xabc>
                    } else {
                        iErr |= JPEGDecodeMCU(pJPEG, iCr | iSkipMask, &iDCPred1);
 80107b2:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80107b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80107ba:	4313      	orrs	r3, r2
 80107bc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80107c0:	4619      	mov	r1, r3
 80107c2:	6878      	ldr	r0, [r7, #4]
 80107c4:	f7fb f80e 	bl	800b7e4 <_ZL13JPEGDecodeMCUP14jpeg_image_tagiPi>
 80107c8:	4602      	mov	r2, r0
 80107ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80107ce:	4313      	orrs	r3, r2
 80107d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                    }
                    if (pJPEG->u16MCUFlags == 0 || bThumbnail) // no AC components, save some time
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d002      	beq.n	80107e2 <_ZL10DecodeJPEGP14jpeg_image_tag+0xaca>
 80107dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80107de:	2b00      	cmp	r3, #0
 80107e0:	d038      	beq.n	8010854 <_ZL10DecodeJPEGP14jpeg_image_tag+0xb3c>
                    {
                        c = ucRangeTable[((iDCPred1 * iQuant2) >> 5) & 0x3ff];
 80107e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80107e6:	fb02 f303 	mul.w	r3, r2, r3
 80107ea:	115b      	asrs	r3, r3, #5
 80107ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80107f0:	4ac5      	ldr	r2, [pc, #788]	; (8010b08 <_ZL10DecodeJPEGP14jpeg_image_tag+0xdf0>)
 80107f2:	5cd3      	ldrb	r3, [r2, r3]
 80107f4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                        l = c | ((uint32_t) c << 8) | ((uint32_t) c << 16) | ((uint32_t) c << 24);
 80107f8:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80107fc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010800:	021b      	lsls	r3, r3, #8
 8010802:	431a      	orrs	r2, r3
 8010804:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010808:	041b      	lsls	r3, r3, #16
 801080a:	431a      	orrs	r2, r3
 801080c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010810:	061b      	lsls	r3, r3, #24
 8010812:	4313      	orrs	r3, r2
 8010814:	63bb      	str	r3, [r7, #56]	; 0x38
                        // dct stores byte values
                        pl = (uint32_t *)&pJPEG->sMCUs[iCr];
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801081c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8010820:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010824:	005b      	lsls	r3, r3, #1
 8010826:	4413      	add	r3, r2
 8010828:	643b      	str	r3, [r7, #64]	; 0x40
                        for (i = 0; i<iMaxFill; i++) // 8x8 bytes = 16 longs
 801082a:	2300      	movs	r3, #0
 801082c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010830:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8010834:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010836:	429a      	cmp	r2, r3
 8010838:	da16      	bge.n	8010868 <_ZL10DecodeJPEGP14jpeg_image_tag+0xb50>
                            pl[i] = l;
 801083a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801083e:	009b      	lsls	r3, r3, #2
 8010840:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010842:	4413      	add	r3, r2
 8010844:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010846:	601a      	str	r2, [r3, #0]
                        for (i = 0; i<iMaxFill; i++) // 8x8 bytes = 16 longs
 8010848:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801084c:	3301      	adds	r3, #1
 801084e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010852:	e7ed      	b.n	8010830 <_ZL10DecodeJPEGP14jpeg_image_tag+0xb18>
                    }
                    else
                    {
                        JPEGIDCT(pJPEG, iCr, pJPEG->JPCI[1].quant_tbl_no); // second quantization table
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 801085a:	461a      	mov	r2, r3
 801085c:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8010860:	6878      	ldr	r0, [r7, #4]
 8010862:	f7fb fa79 	bl	800bd58 <_ZL8JPEGIDCTP14jpeg_image_tagii>
 8010866:	e000      	b.n	801086a <_ZL10DecodeJPEGP14jpeg_image_tag+0xb52>
                    if (pJPEG->u16MCUFlags == 0 || bThumbnail) // no AC components, save some time
 8010868:	bf00      	nop
                    }
                    // second chroma
                    pJPEG->ucACTable = cACTable2;
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	f897 206a 	ldrb.w	r2, [r7, #106]	; 0x6a
 8010870:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    pJPEG->ucDCTable = cDCTable2;
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	f897 206b 	ldrb.w	r2, [r7, #107]	; 0x6b
 801087a:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
                    if (pJPEG->ucMode == 0xc2) { // progressive
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8010884:	2bc2      	cmp	r3, #194	; 0xc2
 8010886:	d111      	bne.n	80108ac <_ZL10DecodeJPEGP14jpeg_image_tag+0xb94>
                        iErr |= JPEGDecodeMCU_P(pJPEG, iCb | iSkipMask, &iDCPred2);
 8010888:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801088c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010890:	4313      	orrs	r3, r2
 8010892:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8010896:	4619      	mov	r1, r3
 8010898:	6878      	ldr	r0, [r7, #4]
 801089a:	f7fa fc73 	bl	800b184 <_ZL15JPEGDecodeMCU_PP14jpeg_image_tagiPi>
 801089e:	4602      	mov	r2, r0
 80108a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80108a4:	4313      	orrs	r3, r2
 80108a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80108aa:	e010      	b.n	80108ce <_ZL10DecodeJPEGP14jpeg_image_tag+0xbb6>
                    } else {
                        iErr |= JPEGDecodeMCU(pJPEG, iCb | iSkipMask, &iDCPred2);
 80108ac:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80108b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80108b4:	4313      	orrs	r3, r2
 80108b6:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80108ba:	4619      	mov	r1, r3
 80108bc:	6878      	ldr	r0, [r7, #4]
 80108be:	f7fa ff91 	bl	800b7e4 <_ZL13JPEGDecodeMCUP14jpeg_image_tagiPi>
 80108c2:	4602      	mov	r2, r0
 80108c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80108c8:	4313      	orrs	r3, r2
 80108ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                    }
                    if (pJPEG->u16MCUFlags == 0 || bThumbnail) // no AC components, save some time
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d002      	beq.n	80108dc <_ZL10DecodeJPEGP14jpeg_image_tag+0xbc4>
 80108d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d038      	beq.n	801094e <_ZL10DecodeJPEGP14jpeg_image_tag+0xc36>
                    {
                        c = ucRangeTable[((iDCPred2 * iQuant3) >> 5) & 0x3ff];
 80108dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108de:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80108e0:	fb02 f303 	mul.w	r3, r2, r3
 80108e4:	115b      	asrs	r3, r3, #5
 80108e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80108ea:	4a87      	ldr	r2, [pc, #540]	; (8010b08 <_ZL10DecodeJPEGP14jpeg_image_tag+0xdf0>)
 80108ec:	5cd3      	ldrb	r3, [r2, r3]
 80108ee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                        l = c | ((uint32_t) c << 8) | ((uint32_t) c << 16) | ((uint32_t) c << 24);
 80108f2:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80108f6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80108fa:	021b      	lsls	r3, r3, #8
 80108fc:	431a      	orrs	r2, r3
 80108fe:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010902:	041b      	lsls	r3, r3, #16
 8010904:	431a      	orrs	r2, r3
 8010906:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801090a:	061b      	lsls	r3, r3, #24
 801090c:	4313      	orrs	r3, r2
 801090e:	63bb      	str	r3, [r7, #56]	; 0x38
                        // dct stores byte values
                        pl = (uint32_t *)&pJPEG->sMCUs[iCb];
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010916:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 801091a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801091e:	005b      	lsls	r3, r3, #1
 8010920:	4413      	add	r3, r2
 8010922:	643b      	str	r3, [r7, #64]	; 0x40
                        for (i = 0; i<iMaxFill; i++) // 8x8 bytes = 16 longs
 8010924:	2300      	movs	r3, #0
 8010926:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801092a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801092e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010930:	429a      	cmp	r2, r3
 8010932:	da16      	bge.n	8010962 <_ZL10DecodeJPEGP14jpeg_image_tag+0xc4a>
                            pl[i] = l;
 8010934:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010938:	009b      	lsls	r3, r3, #2
 801093a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801093c:	4413      	add	r3, r2
 801093e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010940:	601a      	str	r2, [r3, #0]
                        for (i = 0; i<iMaxFill; i++) // 8x8 bytes = 16 longs
 8010942:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010946:	3301      	adds	r3, #1
 8010948:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801094c:	e7ed      	b.n	801092a <_ZL10DecodeJPEGP14jpeg_image_tag+0xc12>
                    }
                    else
                    {
                        JPEGIDCT(pJPEG, iCb, pJPEG->JPCI[2].quant_tbl_no);
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 8010954:	461a      	mov	r2, r3
 8010956:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 801095a:	6878      	ldr	r0, [r7, #4]
 801095c:	f7fb f9fc 	bl	800bd58 <_ZL8JPEGIDCTP14jpeg_image_tagii>
 8010960:	e000      	b.n	8010964 <_ZL10DecodeJPEGP14jpeg_image_tag+0xc4c>
                    if (pJPEG->u16MCUFlags == 0 || bThumbnail) // no AC components, save some time
 8010962:	bf00      	nop
                    }
                }
            } // if color components present
            if (!iSkipMask) { // this MCU is not skipped
 8010964:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010968:	2b00      	cmp	r3, #0
 801096a:	f040 808a 	bne.w	8010a82 <_ZL10DecodeJPEGP14jpeg_image_tag+0xd6a>
                if (pJPEG->ucPixelType >= EIGHT_BIT_GRAYSCALE) {
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010974:	2b02      	cmp	r3, #2
 8010976:	d907      	bls.n	8010988 <_ZL10DecodeJPEGP14jpeg_image_tag+0xc70>
                    JPEGPutMCU8BitGray(pJPEG, xoff, iPitch); // grayscale or color is being drawn as grayscale
 8010978:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801097c:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8010980:	6878      	ldr	r0, [r7, #4]
 8010982:	f7fb ff33 	bl	800c7ec <_ZL18JPEGPutMCU8BitGrayP14jpeg_image_tagii>
 8010986:	e075      	b.n	8010a74 <_ZL10DecodeJPEGP14jpeg_image_tag+0xd5c>
                } else {
                    switch (pJPEG->ucSubSample) {
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801098e:	2b22      	cmp	r3, #34	; 0x22
 8010990:	d870      	bhi.n	8010a74 <_ZL10DecodeJPEGP14jpeg_image_tag+0xd5c>
 8010992:	a201      	add	r2, pc, #4	; (adr r2, 8010998 <_ZL10DecodeJPEGP14jpeg_image_tag+0xc80>)
 8010994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010998:	08010a25 	.word	0x08010a25
 801099c:	08010a75 	.word	0x08010a75
 80109a0:	08010a75 	.word	0x08010a75
 80109a4:	08010a75 	.word	0x08010a75
 80109a8:	08010a75 	.word	0x08010a75
 80109ac:	08010a75 	.word	0x08010a75
 80109b0:	08010a75 	.word	0x08010a75
 80109b4:	08010a75 	.word	0x08010a75
 80109b8:	08010a75 	.word	0x08010a75
 80109bc:	08010a75 	.word	0x08010a75
 80109c0:	08010a75 	.word	0x08010a75
 80109c4:	08010a75 	.word	0x08010a75
 80109c8:	08010a75 	.word	0x08010a75
 80109cc:	08010a75 	.word	0x08010a75
 80109d0:	08010a75 	.word	0x08010a75
 80109d4:	08010a75 	.word	0x08010a75
 80109d8:	08010a75 	.word	0x08010a75
 80109dc:	08010a35 	.word	0x08010a35
 80109e0:	08010a45 	.word	0x08010a45
 80109e4:	08010a75 	.word	0x08010a75
 80109e8:	08010a75 	.word	0x08010a75
 80109ec:	08010a75 	.word	0x08010a75
 80109f0:	08010a75 	.word	0x08010a75
 80109f4:	08010a75 	.word	0x08010a75
 80109f8:	08010a75 	.word	0x08010a75
 80109fc:	08010a75 	.word	0x08010a75
 8010a00:	08010a75 	.word	0x08010a75
 8010a04:	08010a75 	.word	0x08010a75
 8010a08:	08010a75 	.word	0x08010a75
 8010a0c:	08010a75 	.word	0x08010a75
 8010a10:	08010a75 	.word	0x08010a75
 8010a14:	08010a75 	.word	0x08010a75
 8010a18:	08010a75 	.word	0x08010a75
 8010a1c:	08010a55 	.word	0x08010a55
 8010a20:	08010a65 	.word	0x08010a65
                        case 0x00: // grayscale
                            JPEGPutMCUGray(pJPEG, xoff, iPitch);
 8010a24:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010a28:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8010a2c:	6878      	ldr	r0, [r7, #4]
 8010a2e:	f7fc fb37 	bl	800d0a0 <_ZL14JPEGPutMCUGrayP14jpeg_image_tagii>
                            break;
 8010a32:	e01f      	b.n	8010a74 <_ZL10DecodeJPEGP14jpeg_image_tag+0xd5c>
                        case 0x11:
                            JPEGPutMCU11(pJPEG, xoff, iPitch);
 8010a34:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010a38:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8010a3c:	6878      	ldr	r0, [r7, #4]
 8010a3e:	f7fc ff17 	bl	800d870 <_ZL12JPEGPutMCU11P14jpeg_image_tagii>
                            break;
 8010a42:	e017      	b.n	8010a74 <_ZL10DecodeJPEGP14jpeg_image_tag+0xd5c>
                        case 0x12:
                            JPEGPutMCU12(pJPEG, xoff, iPitch);
 8010a44:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010a48:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8010a4c:	6878      	ldr	r0, [r7, #4]
 8010a4e:	f7fe fa70 	bl	800ef32 <_ZL12JPEGPutMCU12P14jpeg_image_tagii>
                            break;
 8010a52:	e00f      	b.n	8010a74 <_ZL10DecodeJPEGP14jpeg_image_tag+0xd5c>
                        case 0x21:
                            JPEGPutMCU21(pJPEG, xoff, iPitch);
 8010a54:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010a58:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8010a5c:	6878      	ldr	r0, [r7, #4]
 8010a5e:	f7fe fd6a 	bl	800f536 <_ZL12JPEGPutMCU21P14jpeg_image_tagii>
                            break;
 8010a62:	e007      	b.n	8010a74 <_ZL10DecodeJPEGP14jpeg_image_tag+0xd5c>
                        case 0x22:
                            JPEGPutMCU22(pJPEG, xoff, iPitch);
 8010a64:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010a68:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8010a6c:	6878      	ldr	r0, [r7, #4]
 8010a6e:	f7fd f9ae 	bl	800ddce <_ZL12JPEGPutMCU22P14jpeg_image_tagii>
                            break;
 8010a72:	bf00      	nop
                    } // switch on color option
                } // normal MCU drawing
                xoff += mcuCX;
 8010a74:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8010a78:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010a7c:	4413      	add	r3, r2
 8010a7e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
            } // if not skipped
            if (pJPEG->pFramebuffer == NULL && (xoff == iPitch || x == cx-1) && !iSkipMask) // time to draw
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010a88:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	f040 80b0 	bne.w	8010bf2 <_ZL10DecodeJPEGP14jpeg_image_tag+0xeda>
 8010a92:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8010a96:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010a9a:	429a      	cmp	r2, r3
 8010a9c:	d007      	beq.n	8010aae <_ZL10DecodeJPEGP14jpeg_image_tag+0xd96>
 8010a9e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010aa2:	3b01      	subs	r3, #1
 8010aa4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8010aa8:	429a      	cmp	r2, r3
 8010aaa:	f040 80a2 	bne.w	8010bf2 <_ZL10DecodeJPEGP14jpeg_image_tag+0xeda>
 8010aae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	f040 809d 	bne.w	8010bf2 <_ZL10DecodeJPEGP14jpeg_image_tag+0xeda>
            {
                jd.iWidth = jd.iWidthUsed = iPitch; // width of each LCD block group
 8010ab8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010abc:	61fb      	str	r3, [r7, #28]
 8010abe:	69fb      	ldr	r3, [r7, #28]
 8010ac0:	617b      	str	r3, [r7, #20]
                jd.pUser = pJPEG->pUser;
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8010ac8:	62bb      	str	r3, [r7, #40]	; 0x28
                if (pJPEG->ucPixelType > EIGHT_BIT_GRAYSCALE) // dither to 4/2/1 bits
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010ad0:	2b03      	cmp	r3, #3
 8010ad2:	d90b      	bls.n	8010aec <_ZL10DecodeJPEGP14jpeg_image_tag+0xdd4>
                    JPEGDither(pJPEG, cx * mcuCX, mcuCY);
 8010ad4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010ad8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8010adc:	fb02 f303 	mul.w	r3, r2, r3
 8010ae0:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8010ae4:	4619      	mov	r1, r3
 8010ae6:	6878      	ldr	r0, [r7, #4]
 8010ae8:	f7ff f80a 	bl	800fb00 <_ZL10JPEGDitherP14jpeg_image_tagii>
                if (jd.x + iPitch > pJPEG->iWidth) { // right edge has clipped pixels
 8010aec:	68fa      	ldr	r2, [r7, #12]
 8010aee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010af2:	441a      	add	r2, r3
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	681b      	ldr	r3, [r3, #0]
 8010af8:	429a      	cmp	r2, r3
 8010afa:	dd07      	ble.n	8010b0c <_ZL10DecodeJPEGP14jpeg_image_tag+0xdf4>
                   jd.iWidthUsed = pJPEG->iWidth - jd.x;
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	681a      	ldr	r2, [r3, #0]
 8010b00:	68fb      	ldr	r3, [r7, #12]
 8010b02:	1ad3      	subs	r3, r2, r3
 8010b04:	61fb      	str	r3, [r7, #28]
 8010b06:	e00e      	b.n	8010b26 <_ZL10DecodeJPEGP14jpeg_image_tag+0xe0e>
 8010b08:	080111a8 	.word	0x080111a8
                } else if (jd.x + iPitch > pJPEG->iCropCX) { // not a full width
 8010b0c:	68fa      	ldr	r2, [r7, #12]
 8010b0e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010b12:	441a      	add	r2, r3
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b18:	429a      	cmp	r2, r3
 8010b1a:	dd04      	ble.n	8010b26 <_ZL10DecodeJPEGP14jpeg_image_tag+0xe0e>
                    jd.iWidthUsed = pJPEG->iCropCX - jd.x;
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010b20:	68fb      	ldr	r3, [r7, #12]
 8010b22:	1ad3      	subs	r3, r2, r3
 8010b24:	61fb      	str	r3, [r7, #28]
                }
                jd.y = pJPEG->iYOffset + (y * mcuCY) - pJPEG->iCropY;
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	699a      	ldr	r2, [r3, #24]
 8010b2a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010b2e:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8010b32:	fb01 f303 	mul.w	r3, r1, r3
 8010b36:	441a      	add	r2, r3
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	6a1b      	ldr	r3, [r3, #32]
 8010b3c:	1ad3      	subs	r3, r2, r3
 8010b3e:	613b      	str	r3, [r7, #16]
                if ((jd.y - pJPEG->iYOffset + mcuCY) > (pJPEG->iHeight>>iScaleShift)) { // last row needs to be trimmed
 8010b40:	693a      	ldr	r2, [r7, #16]
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	699b      	ldr	r3, [r3, #24]
 8010b46:	1ad2      	subs	r2, r2, r3
 8010b48:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010b4c:	441a      	add	r2, r3
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	6859      	ldr	r1, [r3, #4]
 8010b52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010b54:	fa41 f303 	asr.w	r3, r1, r3
 8010b58:	429a      	cmp	r2, r3
 8010b5a:	dd09      	ble.n	8010b70 <_ZL10DecodeJPEGP14jpeg_image_tag+0xe58>
                   jd.iHeight = (pJPEG->iHeight>>iScaleShift) - (jd.y - pJPEG->iYOffset);
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	685a      	ldr	r2, [r3, #4]
 8010b60:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010b62:	411a      	asrs	r2, r3
 8010b64:	6939      	ldr	r1, [r7, #16]
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	699b      	ldr	r3, [r3, #24]
 8010b6a:	1acb      	subs	r3, r1, r3
 8010b6c:	1ad3      	subs	r3, r2, r3
 8010b6e:	61bb      	str	r3, [r7, #24]
                }
                bContinue = (*pJPEG->pfnDraw)(&jd);
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010b74:	f107 020c 	add.w	r2, r7, #12
 8010b78:	4610      	mov	r0, r2
 8010b7a:	4798      	blx	r3
 8010b7c:	67b8      	str	r0, [r7, #120]	; 0x78
                jd.x += iPitch;
 8010b7e:	68fa      	ldr	r2, [r7, #12]
 8010b80:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010b84:	4413      	add	r3, r2
 8010b86:	60fb      	str	r3, [r7, #12]
                if (pJPEG->iCropCX != (cx * mcuCX) && (iPitch + jd.x) > (pJPEG->iCropX + pJPEG->iCropCX)) { // image is cropped, don't go past end
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010b8c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010b90:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8010b94:	fb01 f303 	mul.w	r3, r1, r3
 8010b98:	429a      	cmp	r2, r3
 8010b9a:	d011      	beq.n	8010bc0 <_ZL10DecodeJPEGP14jpeg_image_tag+0xea8>
 8010b9c:	68fa      	ldr	r2, [r7, #12]
 8010b9e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010ba2:	441a      	add	r2, r3
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	69d9      	ldr	r1, [r3, #28]
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010bac:	440b      	add	r3, r1
 8010bae:	429a      	cmp	r2, r3
 8010bb0:	dd06      	ble.n	8010bc0 <_ZL10DecodeJPEGP14jpeg_image_tag+0xea8>
                    iPitch = pJPEG->iCropCX - jd.x; // x=0 of output is really pJPEG->iCropx
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010bb6:	68fb      	ldr	r3, [r7, #12]
 8010bb8:	1ad3      	subs	r3, r2, r3
 8010bba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8010bbe:	e015      	b.n	8010bec <_ZL10DecodeJPEGP14jpeg_image_tag+0xed4>
                } else if ((cx - 1 - x) < iMCUCount) // change pitch for the last set of MCUs on this row
 8010bc0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010bc4:	1e5a      	subs	r2, r3, #1
 8010bc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010bca:	1ad3      	subs	r3, r2, r3
 8010bcc:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8010bd0:	429a      	cmp	r2, r3
 8010bd2:	dd0b      	ble.n	8010bec <_ZL10DecodeJPEGP14jpeg_image_tag+0xed4>
                    iPitch = (cx - 1 - x) * mcuCX;
 8010bd4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010bd8:	1e5a      	subs	r2, r3, #1
 8010bda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010bde:	1ad2      	subs	r2, r2, r3
 8010be0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010be4:	fb02 f303 	mul.w	r3, r2, r3
 8010be8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                xoff = 0;
 8010bec:	2300      	movs	r3, #0
 8010bee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
            }
            if (pJPEG->iResInterval)
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	d028      	beq.n	8010c4c <_ZL10DecodeJPEGP14jpeg_image_tag+0xf34>
            {
                if (--pJPEG->iResCount == 0)
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010bfe:	1e5a      	subs	r2, r3, #1
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	659a      	str	r2, [r3, #88]	; 0x58
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010c08:	2b00      	cmp	r3, #0
 8010c0a:	bf0c      	ite	eq
 8010c0c:	2301      	moveq	r3, #1
 8010c0e:	2300      	movne	r3, #0
 8010c10:	b2db      	uxtb	r3, r3
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	d01a      	beq.n	8010c4c <_ZL10DecodeJPEGP14jpeg_image_tag+0xf34>
                {
                    pJPEG->iResCount = pJPEG->iResInterval;
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	659a      	str	r2, [r3, #88]	; 0x58
                    iDCPred0 = iDCPred1 = iDCPred2 = 0; // reset DC predictors
 8010c1e:	2300      	movs	r3, #0
 8010c20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c24:	633b      	str	r3, [r7, #48]	; 0x30
 8010c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c28:	637b      	str	r3, [r7, #52]	; 0x34
                    if (pJPEG->bb.ulBitOff & 7) // need to start at the next even byte
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8010c30:	f003 0307 	and.w	r3, r3, #7
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d009      	beq.n	8010c4c <_ZL10DecodeJPEGP14jpeg_image_tag+0xf34>
                    {
                        pJPEG->bb.ulBitOff += (8 - (pJPEG->bb.ulBitOff & 7));  // new restart interval starts on byte boundary
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8010c3e:	f023 0307 	bic.w	r3, r3, #7
 8010c42:	f103 0208 	add.w	r2, r3, #8
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                    }
                } // if restart interval needs to reset
            } // if there is a restart interval
            // See if we need to feed it more data
            if (pJPEG->iVLCOff >= FILE_HIGHWATER)
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010c50:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8010c54:	db02      	blt.n	8010c5c <_ZL10DecodeJPEGP14jpeg_image_tag+0xf44>
                JPEGGetMoreData(pJPEG); // need more 'filtered' VLC data
 8010c56:	6878      	ldr	r0, [r7, #4]
 8010c58:	f7f9 fdfa 	bl	800a850 <_ZL15JPEGGetMoreDataP14jpeg_image_tag>
        for (x = 0; x < cx && bContinue && iErr == 0; x++)
 8010c5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010c60:	3301      	adds	r3, #1
 8010c62:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8010c66:	f7ff bb35 	b.w	80102d4 <_ZL10DecodeJPEGP14jpeg_image_tag+0x5bc>
    for (y = 0; y < cy && bContinue && iErr == 0; y++)
 8010c6a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010c6e:	3301      	adds	r3, #1
 8010c70:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8010c74:	f7ff baab 	b.w	80101ce <_ZL10DecodeJPEGP14jpeg_image_tag+0x4b6>
        } // for x
    } // for y
    if (iErr != 0)
 8010c78:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	d002      	beq.n	8010c86 <_ZL10DecodeJPEGP14jpeg_image_tag+0xf6e>
        pJPEG->iError = JPEG_DECODE_ERROR;
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	2202      	movs	r2, #2
 8010c84:	645a      	str	r2, [r3, #68]	; 0x44
    return (iErr == 0);
 8010c86:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	bf0c      	ite	eq
 8010c8e:	2301      	moveq	r3, #1
 8010c90:	2300      	movne	r3, #0
 8010c92:	b2db      	uxtb	r3, r3
} /* DecodeJPEG() */
 8010c94:	4618      	mov	r0, r3
 8010c96:	37b8      	adds	r7, #184	; 0xb8
 8010c98:	46bd      	mov	sp, r7
 8010c9a:	bd80      	pop	{r7, pc}

08010c9c <_ZN7JPEGDEC12setPixelTypeEi>:
{
    JPEG_setFramebuffer(&_jpeg, pFramebuffer);
} /* setFramebuffer() */

void JPEGDEC::setPixelType(int iType)
{
 8010c9c:	b480      	push	{r7}
 8010c9e:	b083      	sub	sp, #12
 8010ca0:	af00      	add	r7, sp, #0
 8010ca2:	6078      	str	r0, [r7, #4]
 8010ca4:	6039      	str	r1, [r7, #0]
    if (iType >= 0 && iType < INVALID_PIXEL_TYPE)
 8010ca6:	683b      	ldr	r3, [r7, #0]
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	db08      	blt.n	8010cbe <_ZN7JPEGDEC12setPixelTypeEi+0x22>
 8010cac:	683b      	ldr	r3, [r7, #0]
 8010cae:	2b06      	cmp	r3, #6
 8010cb0:	dc05      	bgt.n	8010cbe <_ZN7JPEGDEC12setPixelTypeEi+0x22>
        _jpeg.ucPixelType = (uint8_t)iType;
 8010cb2:	683b      	ldr	r3, [r7, #0]
 8010cb4:	b2da      	uxtb	r2, r3
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8010cbc:	e003      	b.n	8010cc6 <_ZN7JPEGDEC12setPixelTypeEi+0x2a>
    else
        _jpeg.iError = JPEG_INVALID_PARAMETER;
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	2201      	movs	r2, #1
 8010cc2:	645a      	str	r2, [r3, #68]	; 0x44
} /* setPixelType() */
 8010cc4:	bf00      	nop
 8010cc6:	bf00      	nop
 8010cc8:	370c      	adds	r7, #12
 8010cca:	46bd      	mov	sp, r7
 8010ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cd0:	4770      	bx	lr
	...

08010cd4 <_ZN7JPEGDEC7openRAMEPhiPFiP13jpeg_draw_tagE>:
} /* setMaxOutputSize() */
//
// Memory initialization
//
int JPEGDEC::openRAM(uint8_t *pData, int iDataSize, JPEG_DRAW_CALLBACK *pfnDraw)
{
 8010cd4:	b580      	push	{r7, lr}
 8010cd6:	b084      	sub	sp, #16
 8010cd8:	af00      	add	r7, sp, #0
 8010cda:	60f8      	str	r0, [r7, #12]
 8010cdc:	60b9      	str	r1, [r7, #8]
 8010cde:	607a      	str	r2, [r7, #4]
 8010ce0:	603b      	str	r3, [r7, #0]
    memset(&_jpeg, 0, sizeof(JPEGIMAGE));
 8010ce2:	68fb      	ldr	r3, [r7, #12]
 8010ce4:	f244 52dc 	movw	r2, #17884	; 0x45dc
 8010ce8:	2100      	movs	r1, #0
 8010cea:	4618      	mov	r0, r3
 8010cec:	f000 f88a 	bl	8010e04 <memset>
    _jpeg.ucMemType = JPEG_MEM_RAM;
 8010cf0:	68fb      	ldr	r3, [r7, #12]
 8010cf2:	2200      	movs	r2, #0
 8010cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    _jpeg.pfnRead = readRAM;
 8010cf8:	68fb      	ldr	r3, [r7, #12]
 8010cfa:	4a11      	ldr	r2, [pc, #68]	; (8010d40 <_ZN7JPEGDEC7openRAMEPhiPFiP13jpeg_draw_tagE+0x6c>)
 8010cfc:	661a      	str	r2, [r3, #96]	; 0x60
    _jpeg.pfnSeek = seekMem;
 8010cfe:	68fb      	ldr	r3, [r7, #12]
 8010d00:	4a10      	ldr	r2, [pc, #64]	; (8010d44 <_ZN7JPEGDEC7openRAMEPhiPFiP13jpeg_draw_tagE+0x70>)
 8010d02:	665a      	str	r2, [r3, #100]	; 0x64
    _jpeg.pfnDraw = pfnDraw;
 8010d04:	68fb      	ldr	r3, [r7, #12]
 8010d06:	683a      	ldr	r2, [r7, #0]
 8010d08:	669a      	str	r2, [r3, #104]	; 0x68
    _jpeg.pfnOpen = NULL;
 8010d0a:	68fb      	ldr	r3, [r7, #12]
 8010d0c:	2200      	movs	r2, #0
 8010d0e:	66da      	str	r2, [r3, #108]	; 0x6c
    _jpeg.pfnClose = NULL;
 8010d10:	68fb      	ldr	r3, [r7, #12]
 8010d12:	2200      	movs	r2, #0
 8010d14:	671a      	str	r2, [r3, #112]	; 0x70
    _jpeg.JPEGFile.iSize = iDataSize;
 8010d16:	68fb      	ldr	r3, [r7, #12]
 8010d18:	687a      	ldr	r2, [r7, #4]
 8010d1a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    _jpeg.JPEGFile.pData = pData;
 8010d1e:	68fb      	ldr	r3, [r7, #12]
 8010d20:	68ba      	ldr	r2, [r7, #8]
 8010d22:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    _jpeg.iMaxMCUs = 1000; // set to an unnaturally high value to start
 8010d26:	68fb      	ldr	r3, [r7, #12]
 8010d28:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8010d2c:	65da      	str	r2, [r3, #92]	; 0x5c
    return JPEGInit(&_jpeg);
 8010d2e:	68fb      	ldr	r3, [r7, #12]
 8010d30:	4618      	mov	r0, r3
 8010d32:	f7f9 f865 	bl	8009e00 <_ZL8JPEGInitP14jpeg_image_tag>
 8010d36:	4603      	mov	r3, r0
} /* openRAM() */
 8010d38:	4618      	mov	r0, r3
 8010d3a:	3710      	adds	r7, #16
 8010d3c:	46bd      	mov	sp, r7
 8010d3e:	bd80      	pop	{r7, pc}
 8010d40:	08009d65 	.word	0x08009d65
 8010d44:	08009dc5 	.word	0x08009dc5

08010d48 <_ZN7JPEGDEC5closeEv>:
    return JPEGInit(&_jpeg);
}
#endif // FS_H

void JPEGDEC::close()
{
 8010d48:	b580      	push	{r7, lr}
 8010d4a:	b082      	sub	sp, #8
 8010d4c:	af00      	add	r7, sp, #0
 8010d4e:	6078      	str	r0, [r7, #4]
    if (_jpeg.pfnClose)
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010d54:	2b00      	cmp	r3, #0
 8010d56:	d006      	beq.n	8010d66 <_ZN7JPEGDEC5closeEv+0x1e>
        (*_jpeg.pfnClose)(_jpeg.JPEGFile.fHandle);
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010d5c:	687a      	ldr	r2, [r7, #4]
 8010d5e:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
 8010d62:	4610      	mov	r0, r2
 8010d64:	4798      	blx	r3
} /* close() */
 8010d66:	bf00      	nop
 8010d68:	3708      	adds	r7, #8
 8010d6a:	46bd      	mov	sp, r7
 8010d6c:	bd80      	pop	{r7, pc}

08010d6e <_ZN7JPEGDEC6decodeEiii>:
// returns:
// 1 = good result
// 0 = error
//
int JPEGDEC::decode(int x, int y, int iOptions)
{
 8010d6e:	b580      	push	{r7, lr}
 8010d70:	b084      	sub	sp, #16
 8010d72:	af00      	add	r7, sp, #0
 8010d74:	60f8      	str	r0, [r7, #12]
 8010d76:	60b9      	str	r1, [r7, #8]
 8010d78:	607a      	str	r2, [r7, #4]
 8010d7a:	603b      	str	r3, [r7, #0]
    _jpeg.iXOffset = x;
 8010d7c:	68fb      	ldr	r3, [r7, #12]
 8010d7e:	68ba      	ldr	r2, [r7, #8]
 8010d80:	615a      	str	r2, [r3, #20]
    _jpeg.iYOffset = y;
 8010d82:	68fb      	ldr	r3, [r7, #12]
 8010d84:	687a      	ldr	r2, [r7, #4]
 8010d86:	619a      	str	r2, [r3, #24]
    _jpeg.iOptions = iOptions;
 8010d88:	68fb      	ldr	r3, [r7, #12]
 8010d8a:	683a      	ldr	r2, [r7, #0]
 8010d8c:	649a      	str	r2, [r3, #72]	; 0x48
    return DecodeJPEG(&_jpeg);
 8010d8e:	68fb      	ldr	r3, [r7, #12]
 8010d90:	4618      	mov	r0, r3
 8010d92:	f7fe ffc1 	bl	800fd18 <_ZL10DecodeJPEGP14jpeg_image_tag>
 8010d96:	4603      	mov	r3, r0
} /* decode() */
 8010d98:	4618      	mov	r0, r3
 8010d9a:	3710      	adds	r7, #16
 8010d9c:	46bd      	mov	sp, r7
 8010d9e:	bd80      	pop	{r7, pc}

08010da0 <__libc_init_array>:
 8010da0:	b570      	push	{r4, r5, r6, lr}
 8010da2:	4d0d      	ldr	r5, [pc, #52]	; (8010dd8 <__libc_init_array+0x38>)
 8010da4:	4c0d      	ldr	r4, [pc, #52]	; (8010ddc <__libc_init_array+0x3c>)
 8010da6:	1b64      	subs	r4, r4, r5
 8010da8:	10a4      	asrs	r4, r4, #2
 8010daa:	2600      	movs	r6, #0
 8010dac:	42a6      	cmp	r6, r4
 8010dae:	d109      	bne.n	8010dc4 <__libc_init_array+0x24>
 8010db0:	4d0b      	ldr	r5, [pc, #44]	; (8010de0 <__libc_init_array+0x40>)
 8010db2:	4c0c      	ldr	r4, [pc, #48]	; (8010de4 <__libc_init_array+0x44>)
 8010db4:	f000 f842 	bl	8010e3c <_init>
 8010db8:	1b64      	subs	r4, r4, r5
 8010dba:	10a4      	asrs	r4, r4, #2
 8010dbc:	2600      	movs	r6, #0
 8010dbe:	42a6      	cmp	r6, r4
 8010dc0:	d105      	bne.n	8010dce <__libc_init_array+0x2e>
 8010dc2:	bd70      	pop	{r4, r5, r6, pc}
 8010dc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8010dc8:	4798      	blx	r3
 8010dca:	3601      	adds	r6, #1
 8010dcc:	e7ee      	b.n	8010dac <__libc_init_array+0xc>
 8010dce:	f855 3b04 	ldr.w	r3, [r5], #4
 8010dd2:	4798      	blx	r3
 8010dd4:	3601      	adds	r6, #1
 8010dd6:	e7f2      	b.n	8010dbe <__libc_init_array+0x1e>
 8010dd8:	08012fb0 	.word	0x08012fb0
 8010ddc:	08012fb0 	.word	0x08012fb0
 8010de0:	08012fb0 	.word	0x08012fb0
 8010de4:	08012fb8 	.word	0x08012fb8

08010de8 <memcpy>:
 8010de8:	440a      	add	r2, r1
 8010dea:	4291      	cmp	r1, r2
 8010dec:	f100 33ff 	add.w	r3, r0, #4294967295
 8010df0:	d100      	bne.n	8010df4 <memcpy+0xc>
 8010df2:	4770      	bx	lr
 8010df4:	b510      	push	{r4, lr}
 8010df6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010dfa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010dfe:	4291      	cmp	r1, r2
 8010e00:	d1f9      	bne.n	8010df6 <memcpy+0xe>
 8010e02:	bd10      	pop	{r4, pc}

08010e04 <memset>:
 8010e04:	4402      	add	r2, r0
 8010e06:	4603      	mov	r3, r0
 8010e08:	4293      	cmp	r3, r2
 8010e0a:	d100      	bne.n	8010e0e <memset+0xa>
 8010e0c:	4770      	bx	lr
 8010e0e:	f803 1b01 	strb.w	r1, [r3], #1
 8010e12:	e7f9      	b.n	8010e08 <memset+0x4>

08010e14 <strncmp>:
 8010e14:	b510      	push	{r4, lr}
 8010e16:	b17a      	cbz	r2, 8010e38 <strncmp+0x24>
 8010e18:	4603      	mov	r3, r0
 8010e1a:	3901      	subs	r1, #1
 8010e1c:	1884      	adds	r4, r0, r2
 8010e1e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8010e22:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8010e26:	4290      	cmp	r0, r2
 8010e28:	d101      	bne.n	8010e2e <strncmp+0x1a>
 8010e2a:	42a3      	cmp	r3, r4
 8010e2c:	d101      	bne.n	8010e32 <strncmp+0x1e>
 8010e2e:	1a80      	subs	r0, r0, r2
 8010e30:	bd10      	pop	{r4, pc}
 8010e32:	2800      	cmp	r0, #0
 8010e34:	d1f3      	bne.n	8010e1e <strncmp+0xa>
 8010e36:	e7fa      	b.n	8010e2e <strncmp+0x1a>
 8010e38:	4610      	mov	r0, r2
 8010e3a:	e7f9      	b.n	8010e30 <strncmp+0x1c>

08010e3c <_init>:
 8010e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e3e:	bf00      	nop
 8010e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010e42:	bc08      	pop	{r3}
 8010e44:	469e      	mov	lr, r3
 8010e46:	4770      	bx	lr

08010e48 <_fini>:
 8010e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e4a:	bf00      	nop
 8010e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010e4e:	bc08      	pop	{r3}
 8010e50:	469e      	mov	lr, r3
 8010e52:	4770      	bx	lr
